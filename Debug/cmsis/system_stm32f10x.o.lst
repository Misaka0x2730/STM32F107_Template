   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 6
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.file	"system_stm32f10x.c"
  15              		.text
  16              	.Ltext0:
  17              		.cfi_sections	.debug_frame
  18              		.global	SystemCoreClock
  19              		.data
  20              		.align	2
  23              	SystemCoreClock:
  24 0000 00A24A04 		.word	72000000
  25              		.global	AHBPrescTable
  26              		.align	2
  29              	AHBPrescTable:
  30 0004 00       		.byte	0
  31 0005 00       		.byte	0
  32 0006 00       		.byte	0
  33 0007 00       		.byte	0
  34 0008 00       		.byte	0
  35 0009 00       		.byte	0
  36 000a 00       		.byte	0
  37 000b 00       		.byte	0
  38 000c 01       		.byte	1
  39 000d 02       		.byte	2
  40 000e 03       		.byte	3
  41 000f 04       		.byte	4
  42 0010 06       		.byte	6
  43 0011 07       		.byte	7
  44 0012 08       		.byte	8
  45 0013 09       		.byte	9
  46              		.section	.text.SystemInit,"ax",%progbits
  47              		.align	2
  48              		.global	SystemInit
  49              		.thumb
  50              		.thumb_func
  52              	SystemInit:
  53              	.LFB29:
  54              		.file 1 "../cmsis/system_stm32f10x.c"
   1:../cmsis/system_stm32f10x.c **** /**
   2:../cmsis/system_stm32f10x.c ****   ******************************************************************************
   3:../cmsis/system_stm32f10x.c ****   * @file    system_stm32f10x.c
   4:../cmsis/system_stm32f10x.c ****   * @author  MCD Application Team
   5:../cmsis/system_stm32f10x.c ****   * @version V3.5.0
   6:../cmsis/system_stm32f10x.c ****   * @date    11-March-2011
   7:../cmsis/system_stm32f10x.c ****   * @brief   CMSIS Cortex-M3 Device Peripheral Access Layer System Source File.
   8:../cmsis/system_stm32f10x.c ****   * 
   9:../cmsis/system_stm32f10x.c ****   * 1.  This file provides two functions and one global variable to be called from 
  10:../cmsis/system_stm32f10x.c ****   *     user application:
  11:../cmsis/system_stm32f10x.c ****   *      - SystemInit(): Setups the system clock (System clock source, PLL Multiplier
  12:../cmsis/system_stm32f10x.c ****   *                      factors, AHB/APBx prescalers and Flash settings). 
  13:../cmsis/system_stm32f10x.c ****   *                      This function is called at startup just after reset and 
  14:../cmsis/system_stm32f10x.c ****   *                      before branch to main program. This call is made inside
  15:../cmsis/system_stm32f10x.c ****   *                      the "startup_stm32f10x_xx.s" file.
  16:../cmsis/system_stm32f10x.c ****   *
  17:../cmsis/system_stm32f10x.c ****   *      - SystemCoreClock variable: Contains the core clock (HCLK), it can be used
  18:../cmsis/system_stm32f10x.c ****   *                                  by the user application to setup the SysTick 
  19:../cmsis/system_stm32f10x.c ****   *                                  timer or configure other parameters.
  20:../cmsis/system_stm32f10x.c ****   *                                     
  21:../cmsis/system_stm32f10x.c ****   *      - SystemCoreClockUpdate(): Updates the variable SystemCoreClock and must
  22:../cmsis/system_stm32f10x.c ****   *                                 be called whenever the core clock is changed
  23:../cmsis/system_stm32f10x.c ****   *                                 during program execution.
  24:../cmsis/system_stm32f10x.c ****   *
  25:../cmsis/system_stm32f10x.c ****   * 2. After each device reset the HSI (8 MHz) is used as system clock source.
  26:../cmsis/system_stm32f10x.c ****   *    Then SystemInit() function is called, in "startup_stm32f10x_xx.s" file, to
  27:../cmsis/system_stm32f10x.c ****   *    configure the system clock before to branch to main program.
  28:../cmsis/system_stm32f10x.c ****   *
  29:../cmsis/system_stm32f10x.c ****   * 3. If the system clock source selected by user fails to startup, the SystemInit()
  30:../cmsis/system_stm32f10x.c ****   *    function will do nothing and HSI still used as system clock source. User can 
  31:../cmsis/system_stm32f10x.c ****   *    add some code to deal with this issue inside the SetSysClock() function.
  32:../cmsis/system_stm32f10x.c ****   *
  33:../cmsis/system_stm32f10x.c ****   * 4. The default value of HSE crystal is set to 8 MHz (or 25 MHz, depedning on
  34:../cmsis/system_stm32f10x.c ****   *    the product used), refer to "HSE_VALUE" define in "stm32f10x.h" file. 
  35:../cmsis/system_stm32f10x.c ****   *    When HSE is used as system clock source, directly or through PLL, and you
  36:../cmsis/system_stm32f10x.c ****   *    are using different crystal you have to adapt the HSE value to your own
  37:../cmsis/system_stm32f10x.c ****   *    configuration.
  38:../cmsis/system_stm32f10x.c ****   *        
  39:../cmsis/system_stm32f10x.c ****   ******************************************************************************
  40:../cmsis/system_stm32f10x.c ****   * @attention
  41:../cmsis/system_stm32f10x.c ****   *
  42:../cmsis/system_stm32f10x.c ****   * THE PRESENT FIRMWARE WHICH IS FOR GUIDANCE ONLY AIMS AT PROVIDING CUSTOMERS
  43:../cmsis/system_stm32f10x.c ****   * WITH CODING INFORMATION REGARDING THEIR PRODUCTS IN ORDER FOR THEM TO SAVE
  44:../cmsis/system_stm32f10x.c ****   * TIME. AS A RESULT, STMICROELECTRONICS SHALL NOT BE HELD LIABLE FOR ANY
  45:../cmsis/system_stm32f10x.c ****   * DIRECT, INDIRECT OR CONSEQUENTIAL DAMAGES WITH RESPECT TO ANY CLAIMS ARISING
  46:../cmsis/system_stm32f10x.c ****   * FROM THE CONTENT OF SUCH FIRMWARE AND/OR THE USE MADE BY CUSTOMERS OF THE
  47:../cmsis/system_stm32f10x.c ****   * CODING INFORMATION CONTAINED HEREIN IN CONNECTION WITH THEIR PRODUCTS.
  48:../cmsis/system_stm32f10x.c ****   *
  49:../cmsis/system_stm32f10x.c ****   * <h2><center>&copy; COPYRIGHT 2011 STMicroelectronics</center></h2>
  50:../cmsis/system_stm32f10x.c ****   ******************************************************************************
  51:../cmsis/system_stm32f10x.c ****   */
  52:../cmsis/system_stm32f10x.c **** 
  53:../cmsis/system_stm32f10x.c **** /** @addtogroup CMSIS
  54:../cmsis/system_stm32f10x.c ****   * @{
  55:../cmsis/system_stm32f10x.c ****   */
  56:../cmsis/system_stm32f10x.c **** 
  57:../cmsis/system_stm32f10x.c **** /** @addtogroup stm32f10x_system
  58:../cmsis/system_stm32f10x.c ****   * @{
  59:../cmsis/system_stm32f10x.c ****   */  
  60:../cmsis/system_stm32f10x.c ****   
  61:../cmsis/system_stm32f10x.c **** /** @addtogroup STM32F10x_System_Private_Includes
  62:../cmsis/system_stm32f10x.c ****   * @{
  63:../cmsis/system_stm32f10x.c ****   */
  64:../cmsis/system_stm32f10x.c **** 
  65:../cmsis/system_stm32f10x.c **** #include "stm32f10x.h"
  66:../cmsis/system_stm32f10x.c **** 
  67:../cmsis/system_stm32f10x.c **** /**
  68:../cmsis/system_stm32f10x.c ****   * @}
  69:../cmsis/system_stm32f10x.c ****   */
  70:../cmsis/system_stm32f10x.c **** 
  71:../cmsis/system_stm32f10x.c **** /** @addtogroup STM32F10x_System_Private_TypesDefinitions
  72:../cmsis/system_stm32f10x.c ****   * @{
  73:../cmsis/system_stm32f10x.c ****   */
  74:../cmsis/system_stm32f10x.c **** 
  75:../cmsis/system_stm32f10x.c **** /**
  76:../cmsis/system_stm32f10x.c ****   * @}
  77:../cmsis/system_stm32f10x.c ****   */
  78:../cmsis/system_stm32f10x.c **** 
  79:../cmsis/system_stm32f10x.c **** /** @addtogroup STM32F10x_System_Private_Defines
  80:../cmsis/system_stm32f10x.c ****   * @{
  81:../cmsis/system_stm32f10x.c ****   */
  82:../cmsis/system_stm32f10x.c **** 
  83:../cmsis/system_stm32f10x.c **** /*!< Uncomment the line corresponding to the desired System clock (SYSCLK)
  84:../cmsis/system_stm32f10x.c ****    frequency (after reset the HSI is used as SYSCLK source)
  85:../cmsis/system_stm32f10x.c ****    
  86:../cmsis/system_stm32f10x.c ****    IMPORTANT NOTE:
  87:../cmsis/system_stm32f10x.c ****    ============== 
  88:../cmsis/system_stm32f10x.c ****    1. After each device reset the HSI is used as System clock source.
  89:../cmsis/system_stm32f10x.c **** 
  90:../cmsis/system_stm32f10x.c ****    2. Please make sure that the selected System clock doesn't exceed your device's
  91:../cmsis/system_stm32f10x.c ****       maximum frequency.
  92:../cmsis/system_stm32f10x.c ****       
  93:../cmsis/system_stm32f10x.c ****    3. If none of the define below is enabled, the HSI is used as System clock
  94:../cmsis/system_stm32f10x.c ****     source.
  95:../cmsis/system_stm32f10x.c **** 
  96:../cmsis/system_stm32f10x.c ****    4. The System clock configuration functions provided within this file assume that:
  97:../cmsis/system_stm32f10x.c ****         - For Low, Medium and High density Value line devices an external 8MHz 
  98:../cmsis/system_stm32f10x.c ****           crystal is used to drive the System clock.
  99:../cmsis/system_stm32f10x.c ****         - For Low, Medium and High density devices an external 8MHz crystal is
 100:../cmsis/system_stm32f10x.c ****           used to drive the System clock.
 101:../cmsis/system_stm32f10x.c ****         - For Connectivity line devices an external 25MHz crystal is used to drive
 102:../cmsis/system_stm32f10x.c ****           the System clock.
 103:../cmsis/system_stm32f10x.c ****      If you are using different crystal you have to adapt those functions accordingly.
 104:../cmsis/system_stm32f10x.c ****     */
 105:../cmsis/system_stm32f10x.c ****     
 106:../cmsis/system_stm32f10x.c **** #if defined (STM32F10X_LD_VL) || (defined STM32F10X_MD_VL) || (defined STM32F10X_HD_VL)
 107:../cmsis/system_stm32f10x.c **** /* #define SYSCLK_FREQ_HSE    HSE_VALUE */
 108:../cmsis/system_stm32f10x.c ****  #define SYSCLK_FREQ_24MHz  24000000
 109:../cmsis/system_stm32f10x.c **** #else
 110:../cmsis/system_stm32f10x.c **** /* #define SYSCLK_FREQ_HSE    HSE_VALUE */
 111:../cmsis/system_stm32f10x.c **** /* #define SYSCLK_FREQ_24MHz  24000000 */ 
 112:../cmsis/system_stm32f10x.c **** /* #define SYSCLK_FREQ_36MHz  36000000 */
 113:../cmsis/system_stm32f10x.c **** /* #define SYSCLK_FREQ_48MHz  48000000 */
 114:../cmsis/system_stm32f10x.c **** /* #define SYSCLK_FREQ_56MHz  56000000 */
 115:../cmsis/system_stm32f10x.c **** #define SYSCLK_FREQ_72MHz  72000000
 116:../cmsis/system_stm32f10x.c **** #endif
 117:../cmsis/system_stm32f10x.c **** 
 118:../cmsis/system_stm32f10x.c **** /*!< Uncomment the following line if you need to use external SRAM mounted
 119:../cmsis/system_stm32f10x.c ****      on STM3210E-EVAL board (STM32 High density and XL-density devices) or on 
 120:../cmsis/system_stm32f10x.c ****      STM32100E-EVAL board (STM32 High-density value line devices) as data memory */ 
 121:../cmsis/system_stm32f10x.c **** #if defined (STM32F10X_HD) || (defined STM32F10X_XL) || (defined STM32F10X_HD_VL)
 122:../cmsis/system_stm32f10x.c **** /* #define DATA_IN_ExtSRAM */
 123:../cmsis/system_stm32f10x.c **** #endif
 124:../cmsis/system_stm32f10x.c **** 
 125:../cmsis/system_stm32f10x.c **** /*!< Uncomment the following line if you need to relocate your vector Table in
 126:../cmsis/system_stm32f10x.c ****      Internal SRAM. */ 
 127:../cmsis/system_stm32f10x.c **** /* #define VECT_TAB_SRAM */
 128:../cmsis/system_stm32f10x.c **** #define VECT_TAB_OFFSET  0x0 /*!< Vector Table base offset field. 
 129:../cmsis/system_stm32f10x.c ****                                   This value must be a multiple of 0x200. */
 130:../cmsis/system_stm32f10x.c **** 
 131:../cmsis/system_stm32f10x.c **** 
 132:../cmsis/system_stm32f10x.c **** /**
 133:../cmsis/system_stm32f10x.c ****   * @}
 134:../cmsis/system_stm32f10x.c ****   */
 135:../cmsis/system_stm32f10x.c **** 
 136:../cmsis/system_stm32f10x.c **** /** @addtogroup STM32F10x_System_Private_Macros
 137:../cmsis/system_stm32f10x.c ****   * @{
 138:../cmsis/system_stm32f10x.c ****   */
 139:../cmsis/system_stm32f10x.c **** 
 140:../cmsis/system_stm32f10x.c **** /**
 141:../cmsis/system_stm32f10x.c ****   * @}
 142:../cmsis/system_stm32f10x.c ****   */
 143:../cmsis/system_stm32f10x.c **** 
 144:../cmsis/system_stm32f10x.c **** /** @addtogroup STM32F10x_System_Private_Variables
 145:../cmsis/system_stm32f10x.c ****   * @{
 146:../cmsis/system_stm32f10x.c ****   */
 147:../cmsis/system_stm32f10x.c **** 
 148:../cmsis/system_stm32f10x.c **** /*******************************************************************************
 149:../cmsis/system_stm32f10x.c **** *  Clock Definitions
 150:../cmsis/system_stm32f10x.c **** *******************************************************************************/
 151:../cmsis/system_stm32f10x.c **** #ifdef SYSCLK_FREQ_HSE
 152:../cmsis/system_stm32f10x.c ****   uint32_t SystemCoreClock         = SYSCLK_FREQ_HSE;        /*!< System Clock Frequency (Core Cloc
 153:../cmsis/system_stm32f10x.c **** #elif defined SYSCLK_FREQ_24MHz
 154:../cmsis/system_stm32f10x.c ****   uint32_t SystemCoreClock         = SYSCLK_FREQ_24MHz;        /*!< System Clock Frequency (Core Cl
 155:../cmsis/system_stm32f10x.c **** #elif defined SYSCLK_FREQ_36MHz
 156:../cmsis/system_stm32f10x.c ****   uint32_t SystemCoreClock         = SYSCLK_FREQ_36MHz;        /*!< System Clock Frequency (Core Cl
 157:../cmsis/system_stm32f10x.c **** #elif defined SYSCLK_FREQ_48MHz
 158:../cmsis/system_stm32f10x.c ****   uint32_t SystemCoreClock         = SYSCLK_FREQ_48MHz;        /*!< System Clock Frequency (Core Cl
 159:../cmsis/system_stm32f10x.c **** #elif defined SYSCLK_FREQ_56MHz
 160:../cmsis/system_stm32f10x.c ****   uint32_t SystemCoreClock         = SYSCLK_FREQ_56MHz;        /*!< System Clock Frequency (Core Cl
 161:../cmsis/system_stm32f10x.c **** #elif defined SYSCLK_FREQ_72MHz
 162:../cmsis/system_stm32f10x.c ****   uint32_t SystemCoreClock         = SYSCLK_FREQ_72MHz;        /*!< System Clock Frequency (Core Cl
 163:../cmsis/system_stm32f10x.c **** #else /*!< HSI Selected as System Clock source */
 164:../cmsis/system_stm32f10x.c ****   uint32_t SystemCoreClock         = HSI_VALUE;        /*!< System Clock Frequency (Core Clock) */
 165:../cmsis/system_stm32f10x.c **** #endif
 166:../cmsis/system_stm32f10x.c **** 
 167:../cmsis/system_stm32f10x.c **** __I uint8_t AHBPrescTable[16] = {0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 6, 7, 8, 9};
 168:../cmsis/system_stm32f10x.c **** /**
 169:../cmsis/system_stm32f10x.c ****   * @}
 170:../cmsis/system_stm32f10x.c ****   */
 171:../cmsis/system_stm32f10x.c **** 
 172:../cmsis/system_stm32f10x.c **** /** @addtogroup STM32F10x_System_Private_FunctionPrototypes
 173:../cmsis/system_stm32f10x.c ****   * @{
 174:../cmsis/system_stm32f10x.c ****   */
 175:../cmsis/system_stm32f10x.c **** 
 176:../cmsis/system_stm32f10x.c **** static void SetSysClock(void);
 177:../cmsis/system_stm32f10x.c **** 
 178:../cmsis/system_stm32f10x.c **** #ifdef SYSCLK_FREQ_HSE
 179:../cmsis/system_stm32f10x.c ****   static void SetSysClockToHSE(void);
 180:../cmsis/system_stm32f10x.c **** #elif defined SYSCLK_FREQ_24MHz
 181:../cmsis/system_stm32f10x.c ****   static void SetSysClockTo24(void);
 182:../cmsis/system_stm32f10x.c **** #elif defined SYSCLK_FREQ_36MHz
 183:../cmsis/system_stm32f10x.c ****   static void SetSysClockTo36(void);
 184:../cmsis/system_stm32f10x.c **** #elif defined SYSCLK_FREQ_48MHz
 185:../cmsis/system_stm32f10x.c ****   static void SetSysClockTo48(void);
 186:../cmsis/system_stm32f10x.c **** #elif defined SYSCLK_FREQ_56MHz
 187:../cmsis/system_stm32f10x.c ****   static void SetSysClockTo56(void);  
 188:../cmsis/system_stm32f10x.c **** #elif defined SYSCLK_FREQ_72MHz
 189:../cmsis/system_stm32f10x.c ****   static void SetSysClockTo72(void);
 190:../cmsis/system_stm32f10x.c **** #endif
 191:../cmsis/system_stm32f10x.c **** 
 192:../cmsis/system_stm32f10x.c **** #ifdef DATA_IN_ExtSRAM
 193:../cmsis/system_stm32f10x.c ****   static void SystemInit_ExtMemCtl(void); 
 194:../cmsis/system_stm32f10x.c **** #endif /* DATA_IN_ExtSRAM */
 195:../cmsis/system_stm32f10x.c **** 
 196:../cmsis/system_stm32f10x.c **** /**
 197:../cmsis/system_stm32f10x.c ****   * @}
 198:../cmsis/system_stm32f10x.c ****   */
 199:../cmsis/system_stm32f10x.c **** 
 200:../cmsis/system_stm32f10x.c **** /** @addtogroup STM32F10x_System_Private_Functions
 201:../cmsis/system_stm32f10x.c ****   * @{
 202:../cmsis/system_stm32f10x.c ****   */
 203:../cmsis/system_stm32f10x.c **** 
 204:../cmsis/system_stm32f10x.c **** /**
 205:../cmsis/system_stm32f10x.c ****   * @brief  Setup the microcontroller system
 206:../cmsis/system_stm32f10x.c ****   *         Initialize the Embedded Flash Interface, the PLL and update the 
 207:../cmsis/system_stm32f10x.c ****   *         SystemCoreClock variable.
 208:../cmsis/system_stm32f10x.c ****   * @note   This function should be used only after reset.
 209:../cmsis/system_stm32f10x.c ****   * @param  None
 210:../cmsis/system_stm32f10x.c ****   * @retval None
 211:../cmsis/system_stm32f10x.c ****   */
 212:../cmsis/system_stm32f10x.c **** void SystemInit (void)
 213:../cmsis/system_stm32f10x.c **** {
  55              		.loc 1 213 0
  56              		.cfi_startproc
  57              		@ args = 0, pretend = 0, frame = 0
  58              		@ frame_needed = 1, uses_anonymous_args = 0
  59 0000 80B5     		push	{r7, lr}
  60              		.cfi_def_cfa_offset 8
  61              		.cfi_offset 7, -8
  62              		.cfi_offset 14, -4
  63 0002 00AF     		add	r7, sp, #0
  64              		.cfi_def_cfa_register 7
 214:../cmsis/system_stm32f10x.c ****   /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
 215:../cmsis/system_stm32f10x.c ****   /* Set HSION bit */
 216:../cmsis/system_stm32f10x.c ****   RCC->CR |= (uint32_t)0x00000001;
  65              		.loc 1 216 0
  66 0004 194A     		ldr	r2, .L2
  67 0006 194B     		ldr	r3, .L2
  68 0008 1B68     		ldr	r3, [r3]
  69 000a 43F00103 		orr	r3, r3, #1
  70 000e 1360     		str	r3, [r2]
 217:../cmsis/system_stm32f10x.c **** 
 218:../cmsis/system_stm32f10x.c ****   /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
 219:../cmsis/system_stm32f10x.c **** #ifndef STM32F10X_CL
 220:../cmsis/system_stm32f10x.c ****   RCC->CFGR &= (uint32_t)0xF8FF0000;
 221:../cmsis/system_stm32f10x.c **** #else
 222:../cmsis/system_stm32f10x.c ****   RCC->CFGR &= (uint32_t)0xF0FF0000;
  71              		.loc 1 222 0
  72 0010 1649     		ldr	r1, .L2
  73 0012 164B     		ldr	r3, .L2
  74 0014 5A68     		ldr	r2, [r3, #4]
  75 0016 164B     		ldr	r3, .L2+4
  76 0018 1340     		ands	r3, r3, r2
  77 001a 4B60     		str	r3, [r1, #4]
 223:../cmsis/system_stm32f10x.c **** #endif /* STM32F10X_CL */   
 224:../cmsis/system_stm32f10x.c ****   
 225:../cmsis/system_stm32f10x.c ****   /* Reset HSEON, CSSON and PLLON bits */
 226:../cmsis/system_stm32f10x.c ****   RCC->CR &= (uint32_t)0xFEF6FFFF;
  78              		.loc 1 226 0
  79 001c 134A     		ldr	r2, .L2
  80 001e 134B     		ldr	r3, .L2
  81 0020 1B68     		ldr	r3, [r3]
  82 0022 23F08473 		bic	r3, r3, #17301504
  83 0026 23F48033 		bic	r3, r3, #65536
  84 002a 1360     		str	r3, [r2]
 227:../cmsis/system_stm32f10x.c **** 
 228:../cmsis/system_stm32f10x.c ****   /* Reset HSEBYP bit */
 229:../cmsis/system_stm32f10x.c ****   RCC->CR &= (uint32_t)0xFFFBFFFF;
  85              		.loc 1 229 0
  86 002c 0F4A     		ldr	r2, .L2
  87 002e 0F4B     		ldr	r3, .L2
  88 0030 1B68     		ldr	r3, [r3]
  89 0032 23F48023 		bic	r3, r3, #262144
  90 0036 1360     		str	r3, [r2]
 230:../cmsis/system_stm32f10x.c **** 
 231:../cmsis/system_stm32f10x.c ****   /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
 232:../cmsis/system_stm32f10x.c ****   RCC->CFGR &= (uint32_t)0xFF80FFFF;
  91              		.loc 1 232 0
  92 0038 0C4A     		ldr	r2, .L2
  93 003a 0C4B     		ldr	r3, .L2
  94 003c 5B68     		ldr	r3, [r3, #4]
  95 003e 23F4FE03 		bic	r3, r3, #8323072
  96 0042 5360     		str	r3, [r2, #4]
 233:../cmsis/system_stm32f10x.c **** 
 234:../cmsis/system_stm32f10x.c **** #ifdef STM32F10X_CL
 235:../cmsis/system_stm32f10x.c ****   /* Reset PLL2ON and PLL3ON bits */
 236:../cmsis/system_stm32f10x.c ****   RCC->CR &= (uint32_t)0xEBFFFFFF;
  97              		.loc 1 236 0
  98 0044 094A     		ldr	r2, .L2
  99 0046 094B     		ldr	r3, .L2
 100 0048 1B68     		ldr	r3, [r3]
 101 004a 23F0A053 		bic	r3, r3, #335544320
 102 004e 1360     		str	r3, [r2]
 237:../cmsis/system_stm32f10x.c **** 
 238:../cmsis/system_stm32f10x.c ****   /* Disable all interrupts and clear pending bits  */
 239:../cmsis/system_stm32f10x.c ****   RCC->CIR = 0x00FF0000;
 103              		.loc 1 239 0
 104 0050 064B     		ldr	r3, .L2
 105 0052 4FF47F02 		mov	r2, #16711680
 106 0056 9A60     		str	r2, [r3, #8]
 240:../cmsis/system_stm32f10x.c **** 
 241:../cmsis/system_stm32f10x.c ****   /* Reset CFGR2 register */
 242:../cmsis/system_stm32f10x.c ****   RCC->CFGR2 = 0x00000000;
 107              		.loc 1 242 0
 108 0058 044B     		ldr	r3, .L2
 109 005a 0022     		movs	r2, #0
 110 005c DA62     		str	r2, [r3, #44]
 243:../cmsis/system_stm32f10x.c **** #elif defined (STM32F10X_LD_VL) || defined (STM32F10X_MD_VL) || (defined STM32F10X_HD_VL)
 244:../cmsis/system_stm32f10x.c ****   /* Disable all interrupts and clear pending bits  */
 245:../cmsis/system_stm32f10x.c ****   RCC->CIR = 0x009F0000;
 246:../cmsis/system_stm32f10x.c **** 
 247:../cmsis/system_stm32f10x.c ****   /* Reset CFGR2 register */
 248:../cmsis/system_stm32f10x.c ****   RCC->CFGR2 = 0x00000000;      
 249:../cmsis/system_stm32f10x.c **** #else
 250:../cmsis/system_stm32f10x.c ****   /* Disable all interrupts and clear pending bits  */
 251:../cmsis/system_stm32f10x.c ****   RCC->CIR = 0x009F0000;
 252:../cmsis/system_stm32f10x.c **** #endif /* STM32F10X_CL */
 253:../cmsis/system_stm32f10x.c ****     
 254:../cmsis/system_stm32f10x.c **** #if defined (STM32F10X_HD) || (defined STM32F10X_XL) || (defined STM32F10X_HD_VL)
 255:../cmsis/system_stm32f10x.c ****   #ifdef DATA_IN_ExtSRAM
 256:../cmsis/system_stm32f10x.c ****     SystemInit_ExtMemCtl(); 
 257:../cmsis/system_stm32f10x.c ****   #endif /* DATA_IN_ExtSRAM */
 258:../cmsis/system_stm32f10x.c **** #endif 
 259:../cmsis/system_stm32f10x.c **** 
 260:../cmsis/system_stm32f10x.c ****   /* Configure the System clock frequency, HCLK, PCLK2 and PCLK1 prescalers */
 261:../cmsis/system_stm32f10x.c ****   /* Configure the Flash Latency cycles and enable prefetch buffer */
 262:../cmsis/system_stm32f10x.c ****   SetSysClock();
 111              		.loc 1 262 0
 112 005e FFF7FEFF 		bl	SetSysClock
 263:../cmsis/system_stm32f10x.c **** 
 264:../cmsis/system_stm32f10x.c **** #ifdef VECT_TAB_SRAM
 265:../cmsis/system_stm32f10x.c ****   SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
 266:../cmsis/system_stm32f10x.c **** #else
 267:../cmsis/system_stm32f10x.c ****   SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 113              		.loc 1 267 0
 114 0062 044B     		ldr	r3, .L2+8
 115 0064 4FF00062 		mov	r2, #134217728
 116 0068 9A60     		str	r2, [r3, #8]
 268:../cmsis/system_stm32f10x.c **** #endif 
 269:../cmsis/system_stm32f10x.c **** }
 117              		.loc 1 269 0
 118 006a 80BD     		pop	{r7, pc}
 119              	.L3:
 120              		.align	2
 121              	.L2:
 122 006c 00100240 		.word	1073876992
 123 0070 0000FFF0 		.word	-251723776
 124 0074 00ED00E0 		.word	-536810240
 125              		.cfi_endproc
 126              	.LFE29:
 128              		.section	.text.SystemCoreClockUpdate,"ax",%progbits
 129              		.align	2
 130              		.global	SystemCoreClockUpdate
 131              		.thumb
 132              		.thumb_func
 134              	SystemCoreClockUpdate:
 135              	.LFB30:
 270:../cmsis/system_stm32f10x.c **** 
 271:../cmsis/system_stm32f10x.c **** /**
 272:../cmsis/system_stm32f10x.c ****   * @brief  Update SystemCoreClock variable according to Clock Register Values.
 273:../cmsis/system_stm32f10x.c ****   *         The SystemCoreClock variable contains the core clock (HCLK), it can
 274:../cmsis/system_stm32f10x.c ****   *         be used by the user application to setup the SysTick timer or configure
 275:../cmsis/system_stm32f10x.c ****   *         other parameters.
 276:../cmsis/system_stm32f10x.c ****   *           
 277:../cmsis/system_stm32f10x.c ****   * @note   Each time the core clock (HCLK) changes, this function must be called
 278:../cmsis/system_stm32f10x.c ****   *         to update SystemCoreClock variable value. Otherwise, any configuration
 279:../cmsis/system_stm32f10x.c ****   *         based on this variable will be incorrect.         
 280:../cmsis/system_stm32f10x.c ****   *     
 281:../cmsis/system_stm32f10x.c ****   * @note   - The system frequency computed by this function is not the real 
 282:../cmsis/system_stm32f10x.c ****   *           frequency in the chip. It is calculated based on the predefined 
 283:../cmsis/system_stm32f10x.c ****   *           constant and the selected clock source:
 284:../cmsis/system_stm32f10x.c ****   *             
 285:../cmsis/system_stm32f10x.c ****   *           - If SYSCLK source is HSI, SystemCoreClock will contain the HSI_VALUE(*)
 286:../cmsis/system_stm32f10x.c ****   *                                              
 287:../cmsis/system_stm32f10x.c ****   *           - If SYSCLK source is HSE, SystemCoreClock will contain the HSE_VALUE(**)
 288:../cmsis/system_stm32f10x.c ****   *                          
 289:../cmsis/system_stm32f10x.c ****   *           - If SYSCLK source is PLL, SystemCoreClock will contain the HSE_VALUE(**) 
 290:../cmsis/system_stm32f10x.c ****   *             or HSI_VALUE(*) multiplied by the PLL factors.
 291:../cmsis/system_stm32f10x.c ****   *         
 292:../cmsis/system_stm32f10x.c ****   *         (*) HSI_VALUE is a constant defined in stm32f1xx.h file (default value
 293:../cmsis/system_stm32f10x.c ****   *             8 MHz) but the real value may vary depending on the variations
 294:../cmsis/system_stm32f10x.c ****   *             in voltage and temperature.   
 295:../cmsis/system_stm32f10x.c ****   *    
 296:../cmsis/system_stm32f10x.c ****   *         (**) HSE_VALUE is a constant defined in stm32f1xx.h file (default value
 297:../cmsis/system_stm32f10x.c ****   *              8 MHz or 25 MHz, depedning on the product used), user has to ensure
 298:../cmsis/system_stm32f10x.c ****   *              that HSE_VALUE is same as the real frequency of the crystal used.
 299:../cmsis/system_stm32f10x.c ****   *              Otherwise, this function may have wrong result.
 300:../cmsis/system_stm32f10x.c ****   *                
 301:../cmsis/system_stm32f10x.c ****   *         - The result of this function could be not correct when using fractional
 302:../cmsis/system_stm32f10x.c ****   *           value for HSE crystal.
 303:../cmsis/system_stm32f10x.c ****   * @param  None
 304:../cmsis/system_stm32f10x.c ****   * @retval None
 305:../cmsis/system_stm32f10x.c ****   */
 306:../cmsis/system_stm32f10x.c **** void SystemCoreClockUpdate (void)
 307:../cmsis/system_stm32f10x.c **** {
 136              		.loc 1 307 0
 137              		.cfi_startproc
 138              		@ args = 0, pretend = 0, frame = 32
 139              		@ frame_needed = 1, uses_anonymous_args = 0
 140              		@ link register save eliminated.
 141 0000 80B4     		push	{r7}
 142              		.cfi_def_cfa_offset 4
 143              		.cfi_offset 7, -4
 144 0002 89B0     		sub	sp, sp, #36
 145              		.cfi_def_cfa_offset 40
 146 0004 00AF     		add	r7, sp, #0
 147              		.cfi_def_cfa_register 7
 308:../cmsis/system_stm32f10x.c ****   uint32_t tmp = 0, pllmull = 0, pllsource = 0;
 148              		.loc 1 308 0
 149 0006 0023     		movs	r3, #0
 150 0008 BB61     		str	r3, [r7, #24]
 151 000a 0023     		movs	r3, #0
 152 000c FB61     		str	r3, [r7, #28]
 153 000e 0023     		movs	r3, #0
 154 0010 7B61     		str	r3, [r7, #20]
 309:../cmsis/system_stm32f10x.c **** 
 310:../cmsis/system_stm32f10x.c **** #ifdef  STM32F10X_CL
 311:../cmsis/system_stm32f10x.c ****   uint32_t prediv1source = 0, prediv1factor = 0, prediv2factor = 0, pll2mull = 0;
 155              		.loc 1 311 0
 156 0012 0023     		movs	r3, #0
 157 0014 3B61     		str	r3, [r7, #16]
 158 0016 0023     		movs	r3, #0
 159 0018 FB60     		str	r3, [r7, #12]
 160 001a 0023     		movs	r3, #0
 161 001c BB60     		str	r3, [r7, #8]
 162 001e 0023     		movs	r3, #0
 163 0020 7B60     		str	r3, [r7, #4]
 312:../cmsis/system_stm32f10x.c **** #endif /* STM32F10X_CL */
 313:../cmsis/system_stm32f10x.c **** 
 314:../cmsis/system_stm32f10x.c **** #if defined (STM32F10X_LD_VL) || defined (STM32F10X_MD_VL) || (defined STM32F10X_HD_VL)
 315:../cmsis/system_stm32f10x.c ****   uint32_t prediv1factor = 0;
 316:../cmsis/system_stm32f10x.c **** #endif /* STM32F10X_LD_VL or STM32F10X_MD_VL or STM32F10X_HD_VL */
 317:../cmsis/system_stm32f10x.c ****     
 318:../cmsis/system_stm32f10x.c ****   /* Get SYSCLK source -------------------------------------------------------*/
 319:../cmsis/system_stm32f10x.c ****   tmp = RCC->CFGR & RCC_CFGR_SWS;
 164              		.loc 1 319 0
 165 0022 424B     		ldr	r3, .L16
 166 0024 5B68     		ldr	r3, [r3, #4]
 167 0026 03F00C03 		and	r3, r3, #12
 168 002a BB61     		str	r3, [r7, #24]
 320:../cmsis/system_stm32f10x.c ****   
 321:../cmsis/system_stm32f10x.c ****   switch (tmp)
 169              		.loc 1 321 0
 170 002c BB69     		ldr	r3, [r7, #24]
 171 002e 042B     		cmp	r3, #4
 172 0030 07D0     		beq	.L6
 173 0032 082B     		cmp	r3, #8
 174 0034 09D0     		beq	.L7
 175 0036 002B     		cmp	r3, #0
 176 0038 5ED1     		bne	.L15
 322:../cmsis/system_stm32f10x.c ****   {
 323:../cmsis/system_stm32f10x.c ****     case 0x00:  /* HSI used as system clock */
 324:../cmsis/system_stm32f10x.c ****       SystemCoreClock = HSI_VALUE;
 177              		.loc 1 324 0
 178 003a 3D4B     		ldr	r3, .L16+4
 179 003c 3D4A     		ldr	r2, .L16+8
 180 003e 1A60     		str	r2, [r3]
 325:../cmsis/system_stm32f10x.c ****       break;
 181              		.loc 1 325 0
 182 0040 5EE0     		b	.L9
 183              	.L6:
 326:../cmsis/system_stm32f10x.c ****     case 0x04:  /* HSE used as system clock */
 327:../cmsis/system_stm32f10x.c ****       SystemCoreClock = HSE_VALUE;
 184              		.loc 1 327 0
 185 0042 3B4B     		ldr	r3, .L16+4
 186 0044 3C4A     		ldr	r2, .L16+12
 187 0046 1A60     		str	r2, [r3]
 328:../cmsis/system_stm32f10x.c ****       break;
 188              		.loc 1 328 0
 189 0048 5AE0     		b	.L9
 190              	.L7:
 329:../cmsis/system_stm32f10x.c ****     case 0x08:  /* PLL used as system clock */
 330:../cmsis/system_stm32f10x.c **** 
 331:../cmsis/system_stm32f10x.c ****       /* Get PLL clock source and multiplication factor ----------------------*/
 332:../cmsis/system_stm32f10x.c ****       pllmull = RCC->CFGR & RCC_CFGR_PLLMULL;
 191              		.loc 1 332 0
 192 004a 384B     		ldr	r3, .L16
 193 004c 5B68     		ldr	r3, [r3, #4]
 194 004e 03F47013 		and	r3, r3, #3932160
 195 0052 FB61     		str	r3, [r7, #28]
 333:../cmsis/system_stm32f10x.c ****       pllsource = RCC->CFGR & RCC_CFGR_PLLSRC;
 196              		.loc 1 333 0
 197 0054 354B     		ldr	r3, .L16
 198 0056 5B68     		ldr	r3, [r3, #4]
 199 0058 03F48033 		and	r3, r3, #65536
 200 005c 7B61     		str	r3, [r7, #20]
 334:../cmsis/system_stm32f10x.c ****       
 335:../cmsis/system_stm32f10x.c **** #ifndef STM32F10X_CL      
 336:../cmsis/system_stm32f10x.c ****       pllmull = ( pllmull >> 18) + 2;
 337:../cmsis/system_stm32f10x.c ****       
 338:../cmsis/system_stm32f10x.c ****       if (pllsource == 0x00)
 339:../cmsis/system_stm32f10x.c ****       {
 340:../cmsis/system_stm32f10x.c ****         /* HSI oscillator clock divided by 2 selected as PLL clock entry */
 341:../cmsis/system_stm32f10x.c ****         SystemCoreClock = (HSI_VALUE >> 1) * pllmull;
 342:../cmsis/system_stm32f10x.c ****       }
 343:../cmsis/system_stm32f10x.c ****       else
 344:../cmsis/system_stm32f10x.c ****       {
 345:../cmsis/system_stm32f10x.c ****  #if defined (STM32F10X_LD_VL) || defined (STM32F10X_MD_VL) || (defined STM32F10X_HD_VL)
 346:../cmsis/system_stm32f10x.c ****        prediv1factor = (RCC->CFGR2 & RCC_CFGR2_PREDIV1) + 1;
 347:../cmsis/system_stm32f10x.c ****        /* HSE oscillator clock selected as PREDIV1 clock entry */
 348:../cmsis/system_stm32f10x.c ****        SystemCoreClock = (HSE_VALUE / prediv1factor) * pllmull; 
 349:../cmsis/system_stm32f10x.c ****  #else
 350:../cmsis/system_stm32f10x.c ****         /* HSE selected as PLL clock entry */
 351:../cmsis/system_stm32f10x.c ****         if ((RCC->CFGR & RCC_CFGR_PLLXTPRE) != (uint32_t)RESET)
 352:../cmsis/system_stm32f10x.c ****         {/* HSE oscillator clock divided by 2 */
 353:../cmsis/system_stm32f10x.c ****           SystemCoreClock = (HSE_VALUE >> 1) * pllmull;
 354:../cmsis/system_stm32f10x.c ****         }
 355:../cmsis/system_stm32f10x.c ****         else
 356:../cmsis/system_stm32f10x.c ****         {
 357:../cmsis/system_stm32f10x.c ****           SystemCoreClock = HSE_VALUE * pllmull;
 358:../cmsis/system_stm32f10x.c ****         }
 359:../cmsis/system_stm32f10x.c ****  #endif
 360:../cmsis/system_stm32f10x.c ****       }
 361:../cmsis/system_stm32f10x.c **** #else
 362:../cmsis/system_stm32f10x.c ****       pllmull = pllmull >> 18;
 201              		.loc 1 362 0
 202 005e FB69     		ldr	r3, [r7, #28]
 203 0060 9B0C     		lsrs	r3, r3, #18
 204 0062 FB61     		str	r3, [r7, #28]
 363:../cmsis/system_stm32f10x.c ****       
 364:../cmsis/system_stm32f10x.c ****       if (pllmull != 0x0D)
 205              		.loc 1 364 0
 206 0064 FB69     		ldr	r3, [r7, #28]
 207 0066 0D2B     		cmp	r3, #13
 208 0068 03D0     		beq	.L10
 365:../cmsis/system_stm32f10x.c ****       {
 366:../cmsis/system_stm32f10x.c ****          pllmull += 2;
 209              		.loc 1 366 0
 210 006a FB69     		ldr	r3, [r7, #28]
 211 006c 0233     		adds	r3, r3, #2
 212 006e FB61     		str	r3, [r7, #28]
 213 0070 01E0     		b	.L11
 214              	.L10:
 367:../cmsis/system_stm32f10x.c ****       }
 368:../cmsis/system_stm32f10x.c ****       else
 369:../cmsis/system_stm32f10x.c ****       { /* PLL multiplication factor = PLL input clock * 6.5 */
 370:../cmsis/system_stm32f10x.c ****         pllmull = 13 / 2; 
 215              		.loc 1 370 0
 216 0072 0623     		movs	r3, #6
 217 0074 FB61     		str	r3, [r7, #28]
 218              	.L11:
 371:../cmsis/system_stm32f10x.c ****       }
 372:../cmsis/system_stm32f10x.c ****             
 373:../cmsis/system_stm32f10x.c ****       if (pllsource == 0x00)
 219              		.loc 1 373 0
 220 0076 7B69     		ldr	r3, [r7, #20]
 221 0078 002B     		cmp	r3, #0
 222 007a 06D1     		bne	.L12
 374:../cmsis/system_stm32f10x.c ****       {
 375:../cmsis/system_stm32f10x.c ****         /* HSI oscillator clock divided by 2 selected as PLL clock entry */
 376:../cmsis/system_stm32f10x.c ****         SystemCoreClock = (HSI_VALUE >> 1) * pllmull;
 223              		.loc 1 376 0
 224 007c FB69     		ldr	r3, [r7, #28]
 225 007e 2F4A     		ldr	r2, .L16+16
 226 0080 02FB03F3 		mul	r3, r2, r3
 227 0084 2A4A     		ldr	r2, .L16+4
 228 0086 1360     		str	r3, [r2]
 229 0088 35E0     		b	.L13
 230              	.L12:
 377:../cmsis/system_stm32f10x.c ****       }
 378:../cmsis/system_stm32f10x.c ****       else
 379:../cmsis/system_stm32f10x.c ****       {/* PREDIV1 selected as PLL clock entry */
 380:../cmsis/system_stm32f10x.c ****         
 381:../cmsis/system_stm32f10x.c ****         /* Get PREDIV1 clock source and division factor */
 382:../cmsis/system_stm32f10x.c ****         prediv1source = RCC->CFGR2 & RCC_CFGR2_PREDIV1SRC;
 231              		.loc 1 382 0
 232 008a 284B     		ldr	r3, .L16
 233 008c DB6A     		ldr	r3, [r3, #44]
 234 008e 03F48033 		and	r3, r3, #65536
 235 0092 3B61     		str	r3, [r7, #16]
 383:../cmsis/system_stm32f10x.c ****         prediv1factor = (RCC->CFGR2 & RCC_CFGR2_PREDIV1) + 1;
 236              		.loc 1 383 0
 237 0094 254B     		ldr	r3, .L16
 238 0096 DB6A     		ldr	r3, [r3, #44]
 239 0098 03F00F03 		and	r3, r3, #15
 240 009c 0133     		adds	r3, r3, #1
 241 009e FB60     		str	r3, [r7, #12]
 384:../cmsis/system_stm32f10x.c ****         
 385:../cmsis/system_stm32f10x.c ****         if (prediv1source == 0)
 242              		.loc 1 385 0
 243 00a0 3B69     		ldr	r3, [r7, #16]
 244 00a2 002B     		cmp	r3, #0
 245 00a4 09D1     		bne	.L14
 386:../cmsis/system_stm32f10x.c ****         { 
 387:../cmsis/system_stm32f10x.c ****           /* HSE oscillator clock selected as PREDIV1 clock entry */
 388:../cmsis/system_stm32f10x.c ****           SystemCoreClock = (HSE_VALUE / prediv1factor) * pllmull;          
 246              		.loc 1 388 0
 247 00a6 244A     		ldr	r2, .L16+12
 248 00a8 FB68     		ldr	r3, [r7, #12]
 249 00aa B2FBF3F3 		udiv	r3, r2, r3
 250 00ae FA69     		ldr	r2, [r7, #28]
 251 00b0 02FB03F3 		mul	r3, r2, r3
 252 00b4 1E4A     		ldr	r2, .L16+4
 253 00b6 1360     		str	r3, [r2]
 254 00b8 1DE0     		b	.L13
 255              	.L14:
 389:../cmsis/system_stm32f10x.c ****         }
 390:../cmsis/system_stm32f10x.c ****         else
 391:../cmsis/system_stm32f10x.c ****         {/* PLL2 clock selected as PREDIV1 clock entry */
 392:../cmsis/system_stm32f10x.c ****           
 393:../cmsis/system_stm32f10x.c ****           /* Get PREDIV2 division factor and PLL2 multiplication factor */
 394:../cmsis/system_stm32f10x.c ****           prediv2factor = ((RCC->CFGR2 & RCC_CFGR2_PREDIV2) >> 4) + 1;
 256              		.loc 1 394 0
 257 00ba 1C4B     		ldr	r3, .L16
 258 00bc DB6A     		ldr	r3, [r3, #44]
 259 00be 03F0F003 		and	r3, r3, #240
 260 00c2 1B09     		lsrs	r3, r3, #4
 261 00c4 0133     		adds	r3, r3, #1
 262 00c6 BB60     		str	r3, [r7, #8]
 395:../cmsis/system_stm32f10x.c ****           pll2mull = ((RCC->CFGR2 & RCC_CFGR2_PLL2MUL) >> 8 ) + 2; 
 263              		.loc 1 395 0
 264 00c8 184B     		ldr	r3, .L16
 265 00ca DB6A     		ldr	r3, [r3, #44]
 266 00cc 03F47063 		and	r3, r3, #3840
 267 00d0 1B0A     		lsrs	r3, r3, #8
 268 00d2 0233     		adds	r3, r3, #2
 269 00d4 7B60     		str	r3, [r7, #4]
 396:../cmsis/system_stm32f10x.c ****           SystemCoreClock = (((HSE_VALUE / prediv2factor) * pll2mull) / prediv1factor) * pllmull;  
 270              		.loc 1 396 0
 271 00d6 184A     		ldr	r2, .L16+12
 272 00d8 BB68     		ldr	r3, [r7, #8]
 273 00da B2FBF3F3 		udiv	r3, r2, r3
 274 00de 7A68     		ldr	r2, [r7, #4]
 275 00e0 02FB03F2 		mul	r2, r2, r3
 276 00e4 FB68     		ldr	r3, [r7, #12]
 277 00e6 B2FBF3F3 		udiv	r3, r2, r3
 278 00ea FA69     		ldr	r2, [r7, #28]
 279 00ec 02FB03F3 		mul	r3, r2, r3
 280 00f0 0F4A     		ldr	r2, .L16+4
 281 00f2 1360     		str	r3, [r2]
 397:../cmsis/system_stm32f10x.c ****         }
 398:../cmsis/system_stm32f10x.c ****       }
 399:../cmsis/system_stm32f10x.c **** #endif /* STM32F10X_CL */ 
 400:../cmsis/system_stm32f10x.c ****       break;
 282              		.loc 1 400 0
 283 00f4 04E0     		b	.L9
 284              	.L13:
 285 00f6 03E0     		b	.L9
 286              	.L15:
 401:../cmsis/system_stm32f10x.c **** 
 402:../cmsis/system_stm32f10x.c ****     default:
 403:../cmsis/system_stm32f10x.c ****       SystemCoreClock = HSI_VALUE;
 287              		.loc 1 403 0
 288 00f8 0D4B     		ldr	r3, .L16+4
 289 00fa 0E4A     		ldr	r2, .L16+8
 290 00fc 1A60     		str	r2, [r3]
 404:../cmsis/system_stm32f10x.c ****       break;
 291              		.loc 1 404 0
 292 00fe 00BF     		nop
 293              	.L9:
 405:../cmsis/system_stm32f10x.c ****   }
 406:../cmsis/system_stm32f10x.c ****   
 407:../cmsis/system_stm32f10x.c ****   /* Compute HCLK clock frequency ----------------*/
 408:../cmsis/system_stm32f10x.c ****   /* Get HCLK prescaler */
 409:../cmsis/system_stm32f10x.c ****   tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 294              		.loc 1 409 0
 295 0100 0A4B     		ldr	r3, .L16
 296 0102 5B68     		ldr	r3, [r3, #4]
 297 0104 03F0F003 		and	r3, r3, #240
 298 0108 1B09     		lsrs	r3, r3, #4
 299 010a 0D4A     		ldr	r2, .L16+20
 300 010c D35C     		ldrb	r3, [r2, r3]
 301 010e DBB2     		uxtb	r3, r3
 302 0110 BB61     		str	r3, [r7, #24]
 410:../cmsis/system_stm32f10x.c ****   /* HCLK clock frequency */
 411:../cmsis/system_stm32f10x.c ****   SystemCoreClock >>= tmp;  
 303              		.loc 1 411 0
 304 0112 074B     		ldr	r3, .L16+4
 305 0114 1A68     		ldr	r2, [r3]
 306 0116 BB69     		ldr	r3, [r7, #24]
 307 0118 22FA03F3 		lsr	r3, r2, r3
 308 011c 044A     		ldr	r2, .L16+4
 309 011e 1360     		str	r3, [r2]
 412:../cmsis/system_stm32f10x.c **** }
 310              		.loc 1 412 0
 311 0120 2437     		adds	r7, r7, #36
 312              		.cfi_def_cfa_offset 4
 313 0122 BD46     		mov	sp, r7
 314              		.cfi_def_cfa_register 13
 315              		@ sp needed
 316 0124 5DF8047B 		ldr	r7, [sp], #4
 317              		.cfi_restore 7
 318              		.cfi_def_cfa_offset 0
 319 0128 7047     		bx	lr
 320              	.L17:
 321 012a 00BF     		.align	2
 322              	.L16:
 323 012c 00100240 		.word	1073876992
 324 0130 00000000 		.word	SystemCoreClock
 325 0134 00127A00 		.word	8000000
 326 0138 40787D01 		.word	25000000
 327 013c 00093D00 		.word	4000000
 328 0140 00000000 		.word	AHBPrescTable
 329              		.cfi_endproc
 330              	.LFE30:
 332              		.section	.text.SetSysClock,"ax",%progbits
 333              		.align	2
 334              		.thumb
 335              		.thumb_func
 337              	SetSysClock:
 338              	.LFB31:
 413:../cmsis/system_stm32f10x.c **** 
 414:../cmsis/system_stm32f10x.c **** /**
 415:../cmsis/system_stm32f10x.c ****   * @brief  Configures the System clock frequency, HCLK, PCLK2 and PCLK1 prescalers.
 416:../cmsis/system_stm32f10x.c ****   * @param  None
 417:../cmsis/system_stm32f10x.c ****   * @retval None
 418:../cmsis/system_stm32f10x.c ****   */
 419:../cmsis/system_stm32f10x.c **** static void SetSysClock(void)
 420:../cmsis/system_stm32f10x.c **** {
 339              		.loc 1 420 0
 340              		.cfi_startproc
 341              		@ args = 0, pretend = 0, frame = 0
 342              		@ frame_needed = 1, uses_anonymous_args = 0
 343 0000 80B5     		push	{r7, lr}
 344              		.cfi_def_cfa_offset 8
 345              		.cfi_offset 7, -8
 346              		.cfi_offset 14, -4
 347 0002 00AF     		add	r7, sp, #0
 348              		.cfi_def_cfa_register 7
 421:../cmsis/system_stm32f10x.c **** #ifdef SYSCLK_FREQ_HSE
 422:../cmsis/system_stm32f10x.c ****   SetSysClockToHSE();
 423:../cmsis/system_stm32f10x.c **** #elif defined SYSCLK_FREQ_24MHz
 424:../cmsis/system_stm32f10x.c ****   SetSysClockTo24();
 425:../cmsis/system_stm32f10x.c **** #elif defined SYSCLK_FREQ_36MHz
 426:../cmsis/system_stm32f10x.c ****   SetSysClockTo36();
 427:../cmsis/system_stm32f10x.c **** #elif defined SYSCLK_FREQ_48MHz
 428:../cmsis/system_stm32f10x.c ****   SetSysClockTo48();
 429:../cmsis/system_stm32f10x.c **** #elif defined SYSCLK_FREQ_56MHz
 430:../cmsis/system_stm32f10x.c ****   SetSysClockTo56();  
 431:../cmsis/system_stm32f10x.c **** #elif defined SYSCLK_FREQ_72MHz
 432:../cmsis/system_stm32f10x.c ****   SetSysClockTo72();
 349              		.loc 1 432 0
 350 0004 FFF7FEFF 		bl	SetSysClockTo72
 433:../cmsis/system_stm32f10x.c **** #endif
 434:../cmsis/system_stm32f10x.c ****  
 435:../cmsis/system_stm32f10x.c ****  /* If none of the define above is enabled, the HSI is used as System clock
 436:../cmsis/system_stm32f10x.c ****     source (default after reset) */ 
 437:../cmsis/system_stm32f10x.c **** }
 351              		.loc 1 437 0
 352 0008 80BD     		pop	{r7, pc}
 353              		.cfi_endproc
 354              	.LFE31:
 356 000a 00BF     		.section	.text.SetSysClockTo72,"ax",%progbits
 357              		.align	2
 358              		.thumb
 359              		.thumb_func
 361              	SetSysClockTo72:
 362              	.LFB32:
 438:../cmsis/system_stm32f10x.c **** 
 439:../cmsis/system_stm32f10x.c **** /**
 440:../cmsis/system_stm32f10x.c ****   * @brief  Setup the external memory controller. Called in startup_stm32f10x.s 
 441:../cmsis/system_stm32f10x.c ****   *          before jump to __main
 442:../cmsis/system_stm32f10x.c ****   * @param  None
 443:../cmsis/system_stm32f10x.c ****   * @retval None
 444:../cmsis/system_stm32f10x.c ****   */ 
 445:../cmsis/system_stm32f10x.c **** #ifdef DATA_IN_ExtSRAM
 446:../cmsis/system_stm32f10x.c **** /**
 447:../cmsis/system_stm32f10x.c ****   * @brief  Setup the external memory controller. 
 448:../cmsis/system_stm32f10x.c ****   *         Called in startup_stm32f10x_xx.s/.c before jump to main.
 449:../cmsis/system_stm32f10x.c ****   * 	      This function configures the external SRAM mounted on STM3210E-EVAL
 450:../cmsis/system_stm32f10x.c ****   *         board (STM32 High density devices). This SRAM will be used as program
 451:../cmsis/system_stm32f10x.c ****   *         data memory (including heap and stack).
 452:../cmsis/system_stm32f10x.c ****   * @param  None
 453:../cmsis/system_stm32f10x.c ****   * @retval None
 454:../cmsis/system_stm32f10x.c ****   */ 
 455:../cmsis/system_stm32f10x.c **** void SystemInit_ExtMemCtl(void) 
 456:../cmsis/system_stm32f10x.c **** {
 457:../cmsis/system_stm32f10x.c **** /*!< FSMC Bank1 NOR/SRAM3 is used for the STM3210E-EVAL, if another Bank is 
 458:../cmsis/system_stm32f10x.c ****   required, then adjust the Register Addresses */
 459:../cmsis/system_stm32f10x.c **** 
 460:../cmsis/system_stm32f10x.c ****   /* Enable FSMC clock */
 461:../cmsis/system_stm32f10x.c ****   RCC->AHBENR = 0x00000114;
 462:../cmsis/system_stm32f10x.c ****   
 463:../cmsis/system_stm32f10x.c ****   /* Enable GPIOD, GPIOE, GPIOF and GPIOG clocks */  
 464:../cmsis/system_stm32f10x.c ****   RCC->APB2ENR = 0x000001E0;
 465:../cmsis/system_stm32f10x.c ****   
 466:../cmsis/system_stm32f10x.c **** /* ---------------  SRAM Data lines, NOE and NWE configuration ---------------*/
 467:../cmsis/system_stm32f10x.c **** /*----------------  SRAM Address lines configuration -------------------------*/
 468:../cmsis/system_stm32f10x.c **** /*----------------  NOE and NWE configuration --------------------------------*/  
 469:../cmsis/system_stm32f10x.c **** /*----------------  NE3 configuration ----------------------------------------*/
 470:../cmsis/system_stm32f10x.c **** /*----------------  NBL0, NBL1 configuration ---------------------------------*/
 471:../cmsis/system_stm32f10x.c ****   
 472:../cmsis/system_stm32f10x.c ****   GPIOD->CRL = 0x44BB44BB;  
 473:../cmsis/system_stm32f10x.c ****   GPIOD->CRH = 0xBBBBBBBB;
 474:../cmsis/system_stm32f10x.c **** 
 475:../cmsis/system_stm32f10x.c ****   GPIOE->CRL = 0xB44444BB;  
 476:../cmsis/system_stm32f10x.c ****   GPIOE->CRH = 0xBBBBBBBB;
 477:../cmsis/system_stm32f10x.c **** 
 478:../cmsis/system_stm32f10x.c ****   GPIOF->CRL = 0x44BBBBBB;  
 479:../cmsis/system_stm32f10x.c ****   GPIOF->CRH = 0xBBBB4444;
 480:../cmsis/system_stm32f10x.c **** 
 481:../cmsis/system_stm32f10x.c ****   GPIOG->CRL = 0x44BBBBBB;  
 482:../cmsis/system_stm32f10x.c ****   GPIOG->CRH = 0x44444B44;
 483:../cmsis/system_stm32f10x.c ****    
 484:../cmsis/system_stm32f10x.c **** /*----------------  FSMC Configuration ---------------------------------------*/  
 485:../cmsis/system_stm32f10x.c **** /*----------------  Enable FSMC Bank1_SRAM Bank ------------------------------*/
 486:../cmsis/system_stm32f10x.c ****   
 487:../cmsis/system_stm32f10x.c ****   FSMC_Bank1->BTCR[4] = 0x00001011;
 488:../cmsis/system_stm32f10x.c ****   FSMC_Bank1->BTCR[5] = 0x00000200;
 489:../cmsis/system_stm32f10x.c **** }
 490:../cmsis/system_stm32f10x.c **** #endif /* DATA_IN_ExtSRAM */
 491:../cmsis/system_stm32f10x.c **** 
 492:../cmsis/system_stm32f10x.c **** #ifdef SYSCLK_FREQ_HSE
 493:../cmsis/system_stm32f10x.c **** /**
 494:../cmsis/system_stm32f10x.c ****   * @brief  Selects HSE as System clock source and configure HCLK, PCLK2
 495:../cmsis/system_stm32f10x.c ****   *         and PCLK1 prescalers.
 496:../cmsis/system_stm32f10x.c ****   * @note   This function should be used only after reset.
 497:../cmsis/system_stm32f10x.c ****   * @param  None
 498:../cmsis/system_stm32f10x.c ****   * @retval None
 499:../cmsis/system_stm32f10x.c ****   */
 500:../cmsis/system_stm32f10x.c **** static void SetSysClockToHSE(void)
 501:../cmsis/system_stm32f10x.c **** {
 502:../cmsis/system_stm32f10x.c ****   __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 503:../cmsis/system_stm32f10x.c ****   
 504:../cmsis/system_stm32f10x.c ****   /* SYSCLK, HCLK, PCLK2 and PCLK1 configuration ---------------------------*/    
 505:../cmsis/system_stm32f10x.c ****   /* Enable HSE */    
 506:../cmsis/system_stm32f10x.c ****   RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 507:../cmsis/system_stm32f10x.c ****  
 508:../cmsis/system_stm32f10x.c ****   /* Wait till HSE is ready and if Time out is reached exit */
 509:../cmsis/system_stm32f10x.c ****   do
 510:../cmsis/system_stm32f10x.c ****   {
 511:../cmsis/system_stm32f10x.c ****     HSEStatus = RCC->CR & RCC_CR_HSERDY;
 512:../cmsis/system_stm32f10x.c ****     StartUpCounter++;  
 513:../cmsis/system_stm32f10x.c ****   } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 514:../cmsis/system_stm32f10x.c **** 
 515:../cmsis/system_stm32f10x.c ****   if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 516:../cmsis/system_stm32f10x.c ****   {
 517:../cmsis/system_stm32f10x.c ****     HSEStatus = (uint32_t)0x01;
 518:../cmsis/system_stm32f10x.c ****   }
 519:../cmsis/system_stm32f10x.c ****   else
 520:../cmsis/system_stm32f10x.c ****   {
 521:../cmsis/system_stm32f10x.c ****     HSEStatus = (uint32_t)0x00;
 522:../cmsis/system_stm32f10x.c ****   }  
 523:../cmsis/system_stm32f10x.c **** 
 524:../cmsis/system_stm32f10x.c ****   if (HSEStatus == (uint32_t)0x01)
 525:../cmsis/system_stm32f10x.c ****   {
 526:../cmsis/system_stm32f10x.c **** 
 527:../cmsis/system_stm32f10x.c **** #if !defined STM32F10X_LD_VL && !defined STM32F10X_MD_VL && !defined STM32F10X_HD_VL
 528:../cmsis/system_stm32f10x.c ****     /* Enable Prefetch Buffer */
 529:../cmsis/system_stm32f10x.c ****     FLASH->ACR |= FLASH_ACR_PRFTBE;
 530:../cmsis/system_stm32f10x.c **** 
 531:../cmsis/system_stm32f10x.c ****     /* Flash 0 wait state */
 532:../cmsis/system_stm32f10x.c ****     FLASH->ACR &= (uint32_t)((uint32_t)~FLASH_ACR_LATENCY);
 533:../cmsis/system_stm32f10x.c **** 
 534:../cmsis/system_stm32f10x.c **** #ifndef STM32F10X_CL
 535:../cmsis/system_stm32f10x.c ****     FLASH->ACR |= (uint32_t)FLASH_ACR_LATENCY_0;
 536:../cmsis/system_stm32f10x.c **** #else
 537:../cmsis/system_stm32f10x.c ****     if (HSE_VALUE <= 24000000)
 538:../cmsis/system_stm32f10x.c **** 	{
 539:../cmsis/system_stm32f10x.c ****       FLASH->ACR |= (uint32_t)FLASH_ACR_LATENCY_0;
 540:../cmsis/system_stm32f10x.c **** 	}
 541:../cmsis/system_stm32f10x.c **** 	else
 542:../cmsis/system_stm32f10x.c **** 	{
 543:../cmsis/system_stm32f10x.c ****       FLASH->ACR |= (uint32_t)FLASH_ACR_LATENCY_1;
 544:../cmsis/system_stm32f10x.c **** 	}
 545:../cmsis/system_stm32f10x.c **** #endif /* STM32F10X_CL */
 546:../cmsis/system_stm32f10x.c **** #endif
 547:../cmsis/system_stm32f10x.c ****  
 548:../cmsis/system_stm32f10x.c ****     /* HCLK = SYSCLK */
 549:../cmsis/system_stm32f10x.c ****     RCC->CFGR |= (uint32_t)RCC_CFGR_HPRE_DIV1;
 550:../cmsis/system_stm32f10x.c ****       
 551:../cmsis/system_stm32f10x.c ****     /* PCLK2 = HCLK */
 552:../cmsis/system_stm32f10x.c ****     RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE2_DIV1;
 553:../cmsis/system_stm32f10x.c ****     
 554:../cmsis/system_stm32f10x.c ****     /* PCLK1 = HCLK */
 555:../cmsis/system_stm32f10x.c ****     RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE1_DIV1;
 556:../cmsis/system_stm32f10x.c ****     
 557:../cmsis/system_stm32f10x.c ****     /* Select HSE as system clock source */
 558:../cmsis/system_stm32f10x.c ****     RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 559:../cmsis/system_stm32f10x.c ****     RCC->CFGR |= (uint32_t)RCC_CFGR_SW_HSE;    
 560:../cmsis/system_stm32f10x.c **** 
 561:../cmsis/system_stm32f10x.c ****     /* Wait till HSE is used as system clock source */
 562:../cmsis/system_stm32f10x.c ****     while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS) != (uint32_t)0x04)
 563:../cmsis/system_stm32f10x.c ****     {
 564:../cmsis/system_stm32f10x.c ****     }
 565:../cmsis/system_stm32f10x.c ****   }
 566:../cmsis/system_stm32f10x.c ****   else
 567:../cmsis/system_stm32f10x.c ****   { /* If HSE fails to start-up, the application will have wrong clock 
 568:../cmsis/system_stm32f10x.c ****          configuration. User can add here some code to deal with this error */
 569:../cmsis/system_stm32f10x.c ****   }  
 570:../cmsis/system_stm32f10x.c **** }
 571:../cmsis/system_stm32f10x.c **** #elif defined SYSCLK_FREQ_24MHz
 572:../cmsis/system_stm32f10x.c **** /**
 573:../cmsis/system_stm32f10x.c ****   * @brief  Sets System clock frequency to 24MHz and configure HCLK, PCLK2 
 574:../cmsis/system_stm32f10x.c ****   *         and PCLK1 prescalers.
 575:../cmsis/system_stm32f10x.c ****   * @note   This function should be used only after reset.
 576:../cmsis/system_stm32f10x.c ****   * @param  None
 577:../cmsis/system_stm32f10x.c ****   * @retval None
 578:../cmsis/system_stm32f10x.c ****   */
 579:../cmsis/system_stm32f10x.c **** static void SetSysClockTo24(void)
 580:../cmsis/system_stm32f10x.c **** {
 581:../cmsis/system_stm32f10x.c ****   __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 582:../cmsis/system_stm32f10x.c ****   
 583:../cmsis/system_stm32f10x.c ****   /* SYSCLK, HCLK, PCLK2 and PCLK1 configuration ---------------------------*/    
 584:../cmsis/system_stm32f10x.c ****   /* Enable HSE */    
 585:../cmsis/system_stm32f10x.c ****   RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 586:../cmsis/system_stm32f10x.c ****  
 587:../cmsis/system_stm32f10x.c ****   /* Wait till HSE is ready and if Time out is reached exit */
 588:../cmsis/system_stm32f10x.c ****   do
 589:../cmsis/system_stm32f10x.c ****   {
 590:../cmsis/system_stm32f10x.c ****     HSEStatus = RCC->CR & RCC_CR_HSERDY;
 591:../cmsis/system_stm32f10x.c ****     StartUpCounter++;  
 592:../cmsis/system_stm32f10x.c ****   } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 593:../cmsis/system_stm32f10x.c **** 
 594:../cmsis/system_stm32f10x.c ****   if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 595:../cmsis/system_stm32f10x.c ****   {
 596:../cmsis/system_stm32f10x.c ****     HSEStatus = (uint32_t)0x01;
 597:../cmsis/system_stm32f10x.c ****   }
 598:../cmsis/system_stm32f10x.c ****   else
 599:../cmsis/system_stm32f10x.c ****   {
 600:../cmsis/system_stm32f10x.c ****     HSEStatus = (uint32_t)0x00;
 601:../cmsis/system_stm32f10x.c ****   }  
 602:../cmsis/system_stm32f10x.c **** 
 603:../cmsis/system_stm32f10x.c ****   if (HSEStatus == (uint32_t)0x01)
 604:../cmsis/system_stm32f10x.c ****   {
 605:../cmsis/system_stm32f10x.c **** #if !defined STM32F10X_LD_VL && !defined STM32F10X_MD_VL && !defined STM32F10X_HD_VL 
 606:../cmsis/system_stm32f10x.c ****     /* Enable Prefetch Buffer */
 607:../cmsis/system_stm32f10x.c ****     FLASH->ACR |= FLASH_ACR_PRFTBE;
 608:../cmsis/system_stm32f10x.c **** 
 609:../cmsis/system_stm32f10x.c ****     /* Flash 0 wait state */
 610:../cmsis/system_stm32f10x.c ****     FLASH->ACR &= (uint32_t)((uint32_t)~FLASH_ACR_LATENCY);
 611:../cmsis/system_stm32f10x.c ****     FLASH->ACR |= (uint32_t)FLASH_ACR_LATENCY_0;    
 612:../cmsis/system_stm32f10x.c **** #endif
 613:../cmsis/system_stm32f10x.c ****  
 614:../cmsis/system_stm32f10x.c ****     /* HCLK = SYSCLK */
 615:../cmsis/system_stm32f10x.c ****     RCC->CFGR |= (uint32_t)RCC_CFGR_HPRE_DIV1;
 616:../cmsis/system_stm32f10x.c ****       
 617:../cmsis/system_stm32f10x.c ****     /* PCLK2 = HCLK */
 618:../cmsis/system_stm32f10x.c ****     RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE2_DIV1;
 619:../cmsis/system_stm32f10x.c ****     
 620:../cmsis/system_stm32f10x.c ****     /* PCLK1 = HCLK */
 621:../cmsis/system_stm32f10x.c ****     RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE1_DIV1;
 622:../cmsis/system_stm32f10x.c ****     
 623:../cmsis/system_stm32f10x.c **** #ifdef STM32F10X_CL
 624:../cmsis/system_stm32f10x.c ****     /* Configure PLLs ------------------------------------------------------*/
 625:../cmsis/system_stm32f10x.c ****     /* PLL configuration: PLLCLK = PREDIV1 * 6 = 24 MHz */ 
 626:../cmsis/system_stm32f10x.c ****     RCC->CFGR &= (uint32_t)~(RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLSRC | RCC_CFGR_PLLMULL);
 627:../cmsis/system_stm32f10x.c ****     RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLXTPRE_PREDIV1 | RCC_CFGR_PLLSRC_PREDIV1 | 
 628:../cmsis/system_stm32f10x.c ****                             RCC_CFGR_PLLMULL6); 
 629:../cmsis/system_stm32f10x.c **** 
 630:../cmsis/system_stm32f10x.c ****     /* PLL2 configuration: PLL2CLK = (HSE / 5) * 8 = 40 MHz */
 631:../cmsis/system_stm32f10x.c ****     /* PREDIV1 configuration: PREDIV1CLK = PLL2 / 10 = 4 MHz */       
 632:../cmsis/system_stm32f10x.c ****     RCC->CFGR2 &= (uint32_t)~(RCC_CFGR2_PREDIV2 | RCC_CFGR2_PLL2MUL |
 633:../cmsis/system_stm32f10x.c ****                               RCC_CFGR2_PREDIV1 | RCC_CFGR2_PREDIV1SRC);
 634:../cmsis/system_stm32f10x.c ****     RCC->CFGR2 |= (uint32_t)(RCC_CFGR2_PREDIV2_DIV5 | RCC_CFGR2_PLL2MUL8 |
 635:../cmsis/system_stm32f10x.c ****                              RCC_CFGR2_PREDIV1SRC_PLL2 | RCC_CFGR2_PREDIV1_DIV10);
 636:../cmsis/system_stm32f10x.c ****   
 637:../cmsis/system_stm32f10x.c ****     /* Enable PLL2 */
 638:../cmsis/system_stm32f10x.c ****     RCC->CR |= RCC_CR_PLL2ON;
 639:../cmsis/system_stm32f10x.c ****     /* Wait till PLL2 is ready */
 640:../cmsis/system_stm32f10x.c ****     while((RCC->CR & RCC_CR_PLL2RDY) == 0)
 641:../cmsis/system_stm32f10x.c ****     {
 642:../cmsis/system_stm32f10x.c ****     }   
 643:../cmsis/system_stm32f10x.c **** #elif defined (STM32F10X_LD_VL) || defined (STM32F10X_MD_VL) || defined (STM32F10X_HD_VL)
 644:../cmsis/system_stm32f10x.c ****     /*  PLL configuration:  = (HSE / 2) * 6 = 24 MHz */
 645:../cmsis/system_stm32f10x.c ****     RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLMULL));
 646:../cmsis/system_stm32f10x.c ****     RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLSRC_PREDIV1 | RCC_CFGR_PLLXTPRE_PREDIV1_Div2 | RCC_CFGR_PLL
 647:../cmsis/system_stm32f10x.c **** #else    
 648:../cmsis/system_stm32f10x.c ****     /*  PLL configuration:  = (HSE / 2) * 6 = 24 MHz */
 649:../cmsis/system_stm32f10x.c ****     RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLMULL));
 650:../cmsis/system_stm32f10x.c ****     RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLSRC_HSE | RCC_CFGR_PLLXTPRE_HSE_Div2 | RCC_CFGR_PLLMULL6);
 651:../cmsis/system_stm32f10x.c **** #endif /* STM32F10X_CL */
 652:../cmsis/system_stm32f10x.c **** 
 653:../cmsis/system_stm32f10x.c ****     /* Enable PLL */
 654:../cmsis/system_stm32f10x.c ****     RCC->CR |= RCC_CR_PLLON;
 655:../cmsis/system_stm32f10x.c **** 
 656:../cmsis/system_stm32f10x.c ****     /* Wait till PLL is ready */
 657:../cmsis/system_stm32f10x.c ****     while((RCC->CR & RCC_CR_PLLRDY) == 0)
 658:../cmsis/system_stm32f10x.c ****     {
 659:../cmsis/system_stm32f10x.c ****     }
 660:../cmsis/system_stm32f10x.c **** 
 661:../cmsis/system_stm32f10x.c ****     /* Select PLL as system clock source */
 662:../cmsis/system_stm32f10x.c ****     RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 663:../cmsis/system_stm32f10x.c ****     RCC->CFGR |= (uint32_t)RCC_CFGR_SW_PLL;    
 664:../cmsis/system_stm32f10x.c **** 
 665:../cmsis/system_stm32f10x.c ****     /* Wait till PLL is used as system clock source */
 666:../cmsis/system_stm32f10x.c ****     while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS) != (uint32_t)0x08)
 667:../cmsis/system_stm32f10x.c ****     {
 668:../cmsis/system_stm32f10x.c ****     }
 669:../cmsis/system_stm32f10x.c ****   }
 670:../cmsis/system_stm32f10x.c ****   else
 671:../cmsis/system_stm32f10x.c ****   { /* If HSE fails to start-up, the application will have wrong clock 
 672:../cmsis/system_stm32f10x.c ****          configuration. User can add here some code to deal with this error */
 673:../cmsis/system_stm32f10x.c ****   } 
 674:../cmsis/system_stm32f10x.c **** }
 675:../cmsis/system_stm32f10x.c **** #elif defined SYSCLK_FREQ_36MHz
 676:../cmsis/system_stm32f10x.c **** /**
 677:../cmsis/system_stm32f10x.c ****   * @brief  Sets System clock frequency to 36MHz and configure HCLK, PCLK2 
 678:../cmsis/system_stm32f10x.c ****   *         and PCLK1 prescalers. 
 679:../cmsis/system_stm32f10x.c ****   * @note   This function should be used only after reset.
 680:../cmsis/system_stm32f10x.c ****   * @param  None
 681:../cmsis/system_stm32f10x.c ****   * @retval None
 682:../cmsis/system_stm32f10x.c ****   */
 683:../cmsis/system_stm32f10x.c **** static void SetSysClockTo36(void)
 684:../cmsis/system_stm32f10x.c **** {
 685:../cmsis/system_stm32f10x.c ****   __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 686:../cmsis/system_stm32f10x.c ****   
 687:../cmsis/system_stm32f10x.c ****   /* SYSCLK, HCLK, PCLK2 and PCLK1 configuration ---------------------------*/    
 688:../cmsis/system_stm32f10x.c ****   /* Enable HSE */    
 689:../cmsis/system_stm32f10x.c ****   RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 690:../cmsis/system_stm32f10x.c ****  
 691:../cmsis/system_stm32f10x.c ****   /* Wait till HSE is ready and if Time out is reached exit */
 692:../cmsis/system_stm32f10x.c ****   do
 693:../cmsis/system_stm32f10x.c ****   {
 694:../cmsis/system_stm32f10x.c ****     HSEStatus = RCC->CR & RCC_CR_HSERDY;
 695:../cmsis/system_stm32f10x.c ****     StartUpCounter++;  
 696:../cmsis/system_stm32f10x.c ****   } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 697:../cmsis/system_stm32f10x.c **** 
 698:../cmsis/system_stm32f10x.c ****   if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 699:../cmsis/system_stm32f10x.c ****   {
 700:../cmsis/system_stm32f10x.c ****     HSEStatus = (uint32_t)0x01;
 701:../cmsis/system_stm32f10x.c ****   }
 702:../cmsis/system_stm32f10x.c ****   else
 703:../cmsis/system_stm32f10x.c ****   {
 704:../cmsis/system_stm32f10x.c ****     HSEStatus = (uint32_t)0x00;
 705:../cmsis/system_stm32f10x.c ****   }  
 706:../cmsis/system_stm32f10x.c **** 
 707:../cmsis/system_stm32f10x.c ****   if (HSEStatus == (uint32_t)0x01)
 708:../cmsis/system_stm32f10x.c ****   {
 709:../cmsis/system_stm32f10x.c ****     /* Enable Prefetch Buffer */
 710:../cmsis/system_stm32f10x.c ****     FLASH->ACR |= FLASH_ACR_PRFTBE;
 711:../cmsis/system_stm32f10x.c **** 
 712:../cmsis/system_stm32f10x.c ****     /* Flash 1 wait state */
 713:../cmsis/system_stm32f10x.c ****     FLASH->ACR &= (uint32_t)((uint32_t)~FLASH_ACR_LATENCY);
 714:../cmsis/system_stm32f10x.c ****     FLASH->ACR |= (uint32_t)FLASH_ACR_LATENCY_1;    
 715:../cmsis/system_stm32f10x.c ****  
 716:../cmsis/system_stm32f10x.c ****     /* HCLK = SYSCLK */
 717:../cmsis/system_stm32f10x.c ****     RCC->CFGR |= (uint32_t)RCC_CFGR_HPRE_DIV1;
 718:../cmsis/system_stm32f10x.c ****       
 719:../cmsis/system_stm32f10x.c ****     /* PCLK2 = HCLK */
 720:../cmsis/system_stm32f10x.c ****     RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE2_DIV1;
 721:../cmsis/system_stm32f10x.c ****     
 722:../cmsis/system_stm32f10x.c ****     /* PCLK1 = HCLK */
 723:../cmsis/system_stm32f10x.c ****     RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE1_DIV1;
 724:../cmsis/system_stm32f10x.c ****     
 725:../cmsis/system_stm32f10x.c **** #ifdef STM32F10X_CL
 726:../cmsis/system_stm32f10x.c ****     /* Configure PLLs ------------------------------------------------------*/
 727:../cmsis/system_stm32f10x.c ****     
 728:../cmsis/system_stm32f10x.c ****     /* PLL configuration: PLLCLK = PREDIV1 * 9 = 36 MHz */ 
 729:../cmsis/system_stm32f10x.c ****     RCC->CFGR &= (uint32_t)~(RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLSRC | RCC_CFGR_PLLMULL);
 730:../cmsis/system_stm32f10x.c ****     RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLXTPRE_PREDIV1 | RCC_CFGR_PLLSRC_PREDIV1 | 
 731:../cmsis/system_stm32f10x.c ****                             RCC_CFGR_PLLMULL9); 
 732:../cmsis/system_stm32f10x.c **** 
 733:../cmsis/system_stm32f10x.c **** 	/*!< PLL2 configuration: PLL2CLK = (HSE / 5) * 8 = 40 MHz */
 734:../cmsis/system_stm32f10x.c ****     /* PREDIV1 configuration: PREDIV1CLK = PLL2 / 10 = 4 MHz */
 735:../cmsis/system_stm32f10x.c ****         
 736:../cmsis/system_stm32f10x.c ****     RCC->CFGR2 &= (uint32_t)~(RCC_CFGR2_PREDIV2 | RCC_CFGR2_PLL2MUL |
 737:../cmsis/system_stm32f10x.c ****                               RCC_CFGR2_PREDIV1 | RCC_CFGR2_PREDIV1SRC);
 738:../cmsis/system_stm32f10x.c ****     RCC->CFGR2 |= (uint32_t)(RCC_CFGR2_PREDIV2_DIV5 | RCC_CFGR2_PLL2MUL8 |
 739:../cmsis/system_stm32f10x.c ****                              RCC_CFGR2_PREDIV1SRC_PLL2 | RCC_CFGR2_PREDIV1_DIV10);
 740:../cmsis/system_stm32f10x.c ****   
 741:../cmsis/system_stm32f10x.c ****     /* Enable PLL2 */
 742:../cmsis/system_stm32f10x.c ****     RCC->CR |= RCC_CR_PLL2ON;
 743:../cmsis/system_stm32f10x.c ****     /* Wait till PLL2 is ready */
 744:../cmsis/system_stm32f10x.c ****     while((RCC->CR & RCC_CR_PLL2RDY) == 0)
 745:../cmsis/system_stm32f10x.c ****     {
 746:../cmsis/system_stm32f10x.c ****     }
 747:../cmsis/system_stm32f10x.c ****     
 748:../cmsis/system_stm32f10x.c **** #else    
 749:../cmsis/system_stm32f10x.c ****     /*  PLL configuration: PLLCLK = (HSE / 2) * 9 = 36 MHz */
 750:../cmsis/system_stm32f10x.c ****     RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLMULL));
 751:../cmsis/system_stm32f10x.c ****     RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLSRC_HSE | RCC_CFGR_PLLXTPRE_HSE_Div2 | RCC_CFGR_PLLMULL9);
 752:../cmsis/system_stm32f10x.c **** #endif /* STM32F10X_CL */
 753:../cmsis/system_stm32f10x.c **** 
 754:../cmsis/system_stm32f10x.c ****     /* Enable PLL */
 755:../cmsis/system_stm32f10x.c ****     RCC->CR |= RCC_CR_PLLON;
 756:../cmsis/system_stm32f10x.c **** 
 757:../cmsis/system_stm32f10x.c ****     /* Wait till PLL is ready */
 758:../cmsis/system_stm32f10x.c ****     while((RCC->CR & RCC_CR_PLLRDY) == 0)
 759:../cmsis/system_stm32f10x.c ****     {
 760:../cmsis/system_stm32f10x.c ****     }
 761:../cmsis/system_stm32f10x.c **** 
 762:../cmsis/system_stm32f10x.c ****     /* Select PLL as system clock source */
 763:../cmsis/system_stm32f10x.c ****     RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 764:../cmsis/system_stm32f10x.c ****     RCC->CFGR |= (uint32_t)RCC_CFGR_SW_PLL;    
 765:../cmsis/system_stm32f10x.c **** 
 766:../cmsis/system_stm32f10x.c ****     /* Wait till PLL is used as system clock source */
 767:../cmsis/system_stm32f10x.c ****     while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS) != (uint32_t)0x08)
 768:../cmsis/system_stm32f10x.c ****     {
 769:../cmsis/system_stm32f10x.c ****     }
 770:../cmsis/system_stm32f10x.c ****   }
 771:../cmsis/system_stm32f10x.c ****   else
 772:../cmsis/system_stm32f10x.c ****   { /* If HSE fails to start-up, the application will have wrong clock 
 773:../cmsis/system_stm32f10x.c ****          configuration. User can add here some code to deal with this error */
 774:../cmsis/system_stm32f10x.c ****   } 
 775:../cmsis/system_stm32f10x.c **** }
 776:../cmsis/system_stm32f10x.c **** #elif defined SYSCLK_FREQ_48MHz
 777:../cmsis/system_stm32f10x.c **** /**
 778:../cmsis/system_stm32f10x.c ****   * @brief  Sets System clock frequency to 48MHz and configure HCLK, PCLK2 
 779:../cmsis/system_stm32f10x.c ****   *         and PCLK1 prescalers. 
 780:../cmsis/system_stm32f10x.c ****   * @note   This function should be used only after reset.
 781:../cmsis/system_stm32f10x.c ****   * @param  None
 782:../cmsis/system_stm32f10x.c ****   * @retval None
 783:../cmsis/system_stm32f10x.c ****   */
 784:../cmsis/system_stm32f10x.c **** static void SetSysClockTo48(void)
 785:../cmsis/system_stm32f10x.c **** {
 786:../cmsis/system_stm32f10x.c ****   __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 787:../cmsis/system_stm32f10x.c ****   
 788:../cmsis/system_stm32f10x.c ****   /* SYSCLK, HCLK, PCLK2 and PCLK1 configuration ---------------------------*/    
 789:../cmsis/system_stm32f10x.c ****   /* Enable HSE */    
 790:../cmsis/system_stm32f10x.c ****   RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 791:../cmsis/system_stm32f10x.c ****  
 792:../cmsis/system_stm32f10x.c ****   /* Wait till HSE is ready and if Time out is reached exit */
 793:../cmsis/system_stm32f10x.c ****   do
 794:../cmsis/system_stm32f10x.c ****   {
 795:../cmsis/system_stm32f10x.c ****     HSEStatus = RCC->CR & RCC_CR_HSERDY;
 796:../cmsis/system_stm32f10x.c ****     StartUpCounter++;  
 797:../cmsis/system_stm32f10x.c ****   } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 798:../cmsis/system_stm32f10x.c **** 
 799:../cmsis/system_stm32f10x.c ****   if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 800:../cmsis/system_stm32f10x.c ****   {
 801:../cmsis/system_stm32f10x.c ****     HSEStatus = (uint32_t)0x01;
 802:../cmsis/system_stm32f10x.c ****   }
 803:../cmsis/system_stm32f10x.c ****   else
 804:../cmsis/system_stm32f10x.c ****   {
 805:../cmsis/system_stm32f10x.c ****     HSEStatus = (uint32_t)0x00;
 806:../cmsis/system_stm32f10x.c ****   }  
 807:../cmsis/system_stm32f10x.c **** 
 808:../cmsis/system_stm32f10x.c ****   if (HSEStatus == (uint32_t)0x01)
 809:../cmsis/system_stm32f10x.c ****   {
 810:../cmsis/system_stm32f10x.c ****     /* Enable Prefetch Buffer */
 811:../cmsis/system_stm32f10x.c ****     FLASH->ACR |= FLASH_ACR_PRFTBE;
 812:../cmsis/system_stm32f10x.c **** 
 813:../cmsis/system_stm32f10x.c ****     /* Flash 1 wait state */
 814:../cmsis/system_stm32f10x.c ****     FLASH->ACR &= (uint32_t)((uint32_t)~FLASH_ACR_LATENCY);
 815:../cmsis/system_stm32f10x.c ****     FLASH->ACR |= (uint32_t)FLASH_ACR_LATENCY_1;    
 816:../cmsis/system_stm32f10x.c ****  
 817:../cmsis/system_stm32f10x.c ****     /* HCLK = SYSCLK */
 818:../cmsis/system_stm32f10x.c ****     RCC->CFGR |= (uint32_t)RCC_CFGR_HPRE_DIV1;
 819:../cmsis/system_stm32f10x.c ****       
 820:../cmsis/system_stm32f10x.c ****     /* PCLK2 = HCLK */
 821:../cmsis/system_stm32f10x.c ****     RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE2_DIV1;
 822:../cmsis/system_stm32f10x.c ****     
 823:../cmsis/system_stm32f10x.c ****     /* PCLK1 = HCLK */
 824:../cmsis/system_stm32f10x.c ****     RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE1_DIV2;
 825:../cmsis/system_stm32f10x.c ****     
 826:../cmsis/system_stm32f10x.c **** #ifdef STM32F10X_CL
 827:../cmsis/system_stm32f10x.c ****     /* Configure PLLs ------------------------------------------------------*/
 828:../cmsis/system_stm32f10x.c ****     /* PLL2 configuration: PLL2CLK = (HSE / 5) * 8 = 40 MHz */
 829:../cmsis/system_stm32f10x.c ****     /* PREDIV1 configuration: PREDIV1CLK = PLL2 / 5 = 8 MHz */
 830:../cmsis/system_stm32f10x.c ****         
 831:../cmsis/system_stm32f10x.c ****     RCC->CFGR2 &= (uint32_t)~(RCC_CFGR2_PREDIV2 | RCC_CFGR2_PLL2MUL |
 832:../cmsis/system_stm32f10x.c ****                               RCC_CFGR2_PREDIV1 | RCC_CFGR2_PREDIV1SRC);
 833:../cmsis/system_stm32f10x.c ****     RCC->CFGR2 |= (uint32_t)(RCC_CFGR2_PREDIV2_DIV5 | RCC_CFGR2_PLL2MUL8 |
 834:../cmsis/system_stm32f10x.c ****                              RCC_CFGR2_PREDIV1SRC_PLL2 | RCC_CFGR2_PREDIV1_DIV5);
 835:../cmsis/system_stm32f10x.c ****   
 836:../cmsis/system_stm32f10x.c ****     /* Enable PLL2 */
 837:../cmsis/system_stm32f10x.c ****     RCC->CR |= RCC_CR_PLL2ON;
 838:../cmsis/system_stm32f10x.c ****     /* Wait till PLL2 is ready */
 839:../cmsis/system_stm32f10x.c ****     while((RCC->CR & RCC_CR_PLL2RDY) == 0)
 840:../cmsis/system_stm32f10x.c ****     {
 841:../cmsis/system_stm32f10x.c ****     }
 842:../cmsis/system_stm32f10x.c ****     
 843:../cmsis/system_stm32f10x.c ****    
 844:../cmsis/system_stm32f10x.c ****     /* PLL configuration: PLLCLK = PREDIV1 * 6 = 48 MHz */ 
 845:../cmsis/system_stm32f10x.c ****     RCC->CFGR &= (uint32_t)~(RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLSRC | RCC_CFGR_PLLMULL);
 846:../cmsis/system_stm32f10x.c ****     RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLXTPRE_PREDIV1 | RCC_CFGR_PLLSRC_PREDIV1 | 
 847:../cmsis/system_stm32f10x.c ****                             RCC_CFGR_PLLMULL6); 
 848:../cmsis/system_stm32f10x.c **** #else    
 849:../cmsis/system_stm32f10x.c ****     /*  PLL configuration: PLLCLK = HSE * 6 = 48 MHz */
 850:../cmsis/system_stm32f10x.c ****     RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLMULL));
 851:../cmsis/system_stm32f10x.c ****     RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLSRC_HSE | RCC_CFGR_PLLMULL6);
 852:../cmsis/system_stm32f10x.c **** #endif /* STM32F10X_CL */
 853:../cmsis/system_stm32f10x.c **** 
 854:../cmsis/system_stm32f10x.c ****     /* Enable PLL */
 855:../cmsis/system_stm32f10x.c ****     RCC->CR |= RCC_CR_PLLON;
 856:../cmsis/system_stm32f10x.c **** 
 857:../cmsis/system_stm32f10x.c ****     /* Wait till PLL is ready */
 858:../cmsis/system_stm32f10x.c ****     while((RCC->CR & RCC_CR_PLLRDY) == 0)
 859:../cmsis/system_stm32f10x.c ****     {
 860:../cmsis/system_stm32f10x.c ****     }
 861:../cmsis/system_stm32f10x.c **** 
 862:../cmsis/system_stm32f10x.c ****     /* Select PLL as system clock source */
 863:../cmsis/system_stm32f10x.c ****     RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 864:../cmsis/system_stm32f10x.c ****     RCC->CFGR |= (uint32_t)RCC_CFGR_SW_PLL;    
 865:../cmsis/system_stm32f10x.c **** 
 866:../cmsis/system_stm32f10x.c ****     /* Wait till PLL is used as system clock source */
 867:../cmsis/system_stm32f10x.c ****     while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS) != (uint32_t)0x08)
 868:../cmsis/system_stm32f10x.c ****     {
 869:../cmsis/system_stm32f10x.c ****     }
 870:../cmsis/system_stm32f10x.c ****   }
 871:../cmsis/system_stm32f10x.c ****   else
 872:../cmsis/system_stm32f10x.c ****   { /* If HSE fails to start-up, the application will have wrong clock 
 873:../cmsis/system_stm32f10x.c ****          configuration. User can add here some code to deal with this error */
 874:../cmsis/system_stm32f10x.c ****   } 
 875:../cmsis/system_stm32f10x.c **** }
 876:../cmsis/system_stm32f10x.c **** 
 877:../cmsis/system_stm32f10x.c **** #elif defined SYSCLK_FREQ_56MHz
 878:../cmsis/system_stm32f10x.c **** /**
 879:../cmsis/system_stm32f10x.c ****   * @brief  Sets System clock frequency to 56MHz and configure HCLK, PCLK2 
 880:../cmsis/system_stm32f10x.c ****   *         and PCLK1 prescalers. 
 881:../cmsis/system_stm32f10x.c ****   * @note   This function should be used only after reset.
 882:../cmsis/system_stm32f10x.c ****   * @param  None
 883:../cmsis/system_stm32f10x.c ****   * @retval None
 884:../cmsis/system_stm32f10x.c ****   */
 885:../cmsis/system_stm32f10x.c **** static void SetSysClockTo56(void)
 886:../cmsis/system_stm32f10x.c **** {
 887:../cmsis/system_stm32f10x.c ****   __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 888:../cmsis/system_stm32f10x.c ****   
 889:../cmsis/system_stm32f10x.c ****   /* SYSCLK, HCLK, PCLK2 and PCLK1 configuration ---------------------------*/   
 890:../cmsis/system_stm32f10x.c ****   /* Enable HSE */    
 891:../cmsis/system_stm32f10x.c ****   RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 892:../cmsis/system_stm32f10x.c ****  
 893:../cmsis/system_stm32f10x.c ****   /* Wait till HSE is ready and if Time out is reached exit */
 894:../cmsis/system_stm32f10x.c ****   do
 895:../cmsis/system_stm32f10x.c ****   {
 896:../cmsis/system_stm32f10x.c ****     HSEStatus = RCC->CR & RCC_CR_HSERDY;
 897:../cmsis/system_stm32f10x.c ****     StartUpCounter++;  
 898:../cmsis/system_stm32f10x.c ****   } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 899:../cmsis/system_stm32f10x.c **** 
 900:../cmsis/system_stm32f10x.c ****   if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 901:../cmsis/system_stm32f10x.c ****   {
 902:../cmsis/system_stm32f10x.c ****     HSEStatus = (uint32_t)0x01;
 903:../cmsis/system_stm32f10x.c ****   }
 904:../cmsis/system_stm32f10x.c ****   else
 905:../cmsis/system_stm32f10x.c ****   {
 906:../cmsis/system_stm32f10x.c ****     HSEStatus = (uint32_t)0x00;
 907:../cmsis/system_stm32f10x.c ****   }  
 908:../cmsis/system_stm32f10x.c **** 
 909:../cmsis/system_stm32f10x.c ****   if (HSEStatus == (uint32_t)0x01)
 910:../cmsis/system_stm32f10x.c ****   {
 911:../cmsis/system_stm32f10x.c ****     /* Enable Prefetch Buffer */
 912:../cmsis/system_stm32f10x.c ****     FLASH->ACR |= FLASH_ACR_PRFTBE;
 913:../cmsis/system_stm32f10x.c **** 
 914:../cmsis/system_stm32f10x.c ****     /* Flash 2 wait state */
 915:../cmsis/system_stm32f10x.c ****     FLASH->ACR &= (uint32_t)((uint32_t)~FLASH_ACR_LATENCY);
 916:../cmsis/system_stm32f10x.c ****     FLASH->ACR |= (uint32_t)FLASH_ACR_LATENCY_2;    
 917:../cmsis/system_stm32f10x.c ****  
 918:../cmsis/system_stm32f10x.c ****     /* HCLK = SYSCLK */
 919:../cmsis/system_stm32f10x.c ****     RCC->CFGR |= (uint32_t)RCC_CFGR_HPRE_DIV1;
 920:../cmsis/system_stm32f10x.c ****       
 921:../cmsis/system_stm32f10x.c ****     /* PCLK2 = HCLK */
 922:../cmsis/system_stm32f10x.c ****     RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE2_DIV1;
 923:../cmsis/system_stm32f10x.c ****     
 924:../cmsis/system_stm32f10x.c ****     /* PCLK1 = HCLK */
 925:../cmsis/system_stm32f10x.c ****     RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE1_DIV2;
 926:../cmsis/system_stm32f10x.c **** 
 927:../cmsis/system_stm32f10x.c **** #ifdef STM32F10X_CL
 928:../cmsis/system_stm32f10x.c ****     /* Configure PLLs ------------------------------------------------------*/
 929:../cmsis/system_stm32f10x.c ****     /* PLL2 configuration: PLL2CLK = (HSE / 5) * 8 = 40 MHz */
 930:../cmsis/system_stm32f10x.c ****     /* PREDIV1 configuration: PREDIV1CLK = PLL2 / 5 = 8 MHz */
 931:../cmsis/system_stm32f10x.c ****         
 932:../cmsis/system_stm32f10x.c ****     RCC->CFGR2 &= (uint32_t)~(RCC_CFGR2_PREDIV2 | RCC_CFGR2_PLL2MUL |
 933:../cmsis/system_stm32f10x.c ****                               RCC_CFGR2_PREDIV1 | RCC_CFGR2_PREDIV1SRC);
 934:../cmsis/system_stm32f10x.c ****     RCC->CFGR2 |= (uint32_t)(RCC_CFGR2_PREDIV2_DIV5 | RCC_CFGR2_PLL2MUL8 |
 935:../cmsis/system_stm32f10x.c ****                              RCC_CFGR2_PREDIV1SRC_PLL2 | RCC_CFGR2_PREDIV1_DIV5);
 936:../cmsis/system_stm32f10x.c ****   
 937:../cmsis/system_stm32f10x.c ****     /* Enable PLL2 */
 938:../cmsis/system_stm32f10x.c ****     RCC->CR |= RCC_CR_PLL2ON;
 939:../cmsis/system_stm32f10x.c ****     /* Wait till PLL2 is ready */
 940:../cmsis/system_stm32f10x.c ****     while((RCC->CR & RCC_CR_PLL2RDY) == 0)
 941:../cmsis/system_stm32f10x.c ****     {
 942:../cmsis/system_stm32f10x.c ****     }
 943:../cmsis/system_stm32f10x.c ****     
 944:../cmsis/system_stm32f10x.c ****    
 945:../cmsis/system_stm32f10x.c ****     /* PLL configuration: PLLCLK = PREDIV1 * 7 = 56 MHz */ 
 946:../cmsis/system_stm32f10x.c ****     RCC->CFGR &= (uint32_t)~(RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLSRC | RCC_CFGR_PLLMULL);
 947:../cmsis/system_stm32f10x.c ****     RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLXTPRE_PREDIV1 | RCC_CFGR_PLLSRC_PREDIV1 | 
 948:../cmsis/system_stm32f10x.c ****                             RCC_CFGR_PLLMULL7); 
 949:../cmsis/system_stm32f10x.c **** #else     
 950:../cmsis/system_stm32f10x.c ****     /* PLL configuration: PLLCLK = HSE * 7 = 56 MHz */
 951:../cmsis/system_stm32f10x.c ****     RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLMULL));
 952:../cmsis/system_stm32f10x.c ****     RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLSRC_HSE | RCC_CFGR_PLLMULL7);
 953:../cmsis/system_stm32f10x.c **** 
 954:../cmsis/system_stm32f10x.c **** #endif /* STM32F10X_CL */
 955:../cmsis/system_stm32f10x.c **** 
 956:../cmsis/system_stm32f10x.c ****     /* Enable PLL */
 957:../cmsis/system_stm32f10x.c ****     RCC->CR |= RCC_CR_PLLON;
 958:../cmsis/system_stm32f10x.c **** 
 959:../cmsis/system_stm32f10x.c ****     /* Wait till PLL is ready */
 960:../cmsis/system_stm32f10x.c ****     while((RCC->CR & RCC_CR_PLLRDY) == 0)
 961:../cmsis/system_stm32f10x.c ****     {
 962:../cmsis/system_stm32f10x.c ****     }
 963:../cmsis/system_stm32f10x.c **** 
 964:../cmsis/system_stm32f10x.c ****     /* Select PLL as system clock source */
 965:../cmsis/system_stm32f10x.c ****     RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 966:../cmsis/system_stm32f10x.c ****     RCC->CFGR |= (uint32_t)RCC_CFGR_SW_PLL;    
 967:../cmsis/system_stm32f10x.c **** 
 968:../cmsis/system_stm32f10x.c ****     /* Wait till PLL is used as system clock source */
 969:../cmsis/system_stm32f10x.c ****     while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS) != (uint32_t)0x08)
 970:../cmsis/system_stm32f10x.c ****     {
 971:../cmsis/system_stm32f10x.c ****     }
 972:../cmsis/system_stm32f10x.c ****   }
 973:../cmsis/system_stm32f10x.c ****   else
 974:../cmsis/system_stm32f10x.c ****   { /* If HSE fails to start-up, the application will have wrong clock 
 975:../cmsis/system_stm32f10x.c ****          configuration. User can add here some code to deal with this error */
 976:../cmsis/system_stm32f10x.c ****   } 
 977:../cmsis/system_stm32f10x.c **** }
 978:../cmsis/system_stm32f10x.c **** 
 979:../cmsis/system_stm32f10x.c **** #elif defined SYSCLK_FREQ_72MHz
 980:../cmsis/system_stm32f10x.c **** /**
 981:../cmsis/system_stm32f10x.c ****   * @brief  Sets System clock frequency to 72MHz and configure HCLK, PCLK2 
 982:../cmsis/system_stm32f10x.c ****   *         and PCLK1 prescalers. 
 983:../cmsis/system_stm32f10x.c ****   * @note   This function should be used only after reset.
 984:../cmsis/system_stm32f10x.c ****   * @param  None
 985:../cmsis/system_stm32f10x.c ****   * @retval None
 986:../cmsis/system_stm32f10x.c ****   */
 987:../cmsis/system_stm32f10x.c **** static void SetSysClockTo72(void)
 988:../cmsis/system_stm32f10x.c **** {
 363              		.loc 1 988 0
 364              		.cfi_startproc
 365              		@ args = 0, pretend = 0, frame = 8
 366              		@ frame_needed = 1, uses_anonymous_args = 0
 367              		@ link register save eliminated.
 368 0000 80B4     		push	{r7}
 369              		.cfi_def_cfa_offset 4
 370              		.cfi_offset 7, -4
 371 0002 83B0     		sub	sp, sp, #12
 372              		.cfi_def_cfa_offset 16
 373 0004 00AF     		add	r7, sp, #0
 374              		.cfi_def_cfa_register 7
 989:../cmsis/system_stm32f10x.c ****   __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 375              		.loc 1 989 0
 376 0006 0023     		movs	r3, #0
 377 0008 7B60     		str	r3, [r7, #4]
 378 000a 0023     		movs	r3, #0
 379 000c 3B60     		str	r3, [r7]
 990:../cmsis/system_stm32f10x.c ****   
 991:../cmsis/system_stm32f10x.c ****   /* SYSCLK, HCLK, PCLK2 and PCLK1 configuration ---------------------------*/    
 992:../cmsis/system_stm32f10x.c ****   /* Enable HSE */    
 993:../cmsis/system_stm32f10x.c ****   RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 380              		.loc 1 993 0
 381 000e 474A     		ldr	r2, .L28
 382 0010 464B     		ldr	r3, .L28
 383 0012 1B68     		ldr	r3, [r3]
 384 0014 43F48033 		orr	r3, r3, #65536
 385 0018 1360     		str	r3, [r2]
 386              	.L21:
 994:../cmsis/system_stm32f10x.c ****  
 995:../cmsis/system_stm32f10x.c ****   /* Wait till HSE is ready and if Time out is reached exit */
 996:../cmsis/system_stm32f10x.c ****   do
 997:../cmsis/system_stm32f10x.c ****   {
 998:../cmsis/system_stm32f10x.c ****     HSEStatus = RCC->CR & RCC_CR_HSERDY;
 387              		.loc 1 998 0 discriminator 2
 388 001a 444B     		ldr	r3, .L28
 389 001c 1B68     		ldr	r3, [r3]
 390 001e 03F40033 		and	r3, r3, #131072
 391 0022 3B60     		str	r3, [r7]
 999:../cmsis/system_stm32f10x.c ****     StartUpCounter++;  
 392              		.loc 1 999 0 discriminator 2
 393 0024 7B68     		ldr	r3, [r7, #4]
 394 0026 0133     		adds	r3, r3, #1
 395 0028 7B60     		str	r3, [r7, #4]
1000:../cmsis/system_stm32f10x.c ****   } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 396              		.loc 1 1000 0 discriminator 2
 397 002a 3B68     		ldr	r3, [r7]
 398 002c 002B     		cmp	r3, #0
 399 002e 03D1     		bne	.L20
 400              		.loc 1 1000 0 is_stmt 0 discriminator 1
 401 0030 7B68     		ldr	r3, [r7, #4]
 402 0032 B3F5A06F 		cmp	r3, #1280
 403 0036 F0D1     		bne	.L21
 404              	.L20:
1001:../cmsis/system_stm32f10x.c **** 
1002:../cmsis/system_stm32f10x.c ****   if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 405              		.loc 1 1002 0 is_stmt 1
 406 0038 3C4B     		ldr	r3, .L28
 407 003a 1B68     		ldr	r3, [r3]
 408 003c 03F40033 		and	r3, r3, #131072
 409 0040 002B     		cmp	r3, #0
 410 0042 02D0     		beq	.L22
1003:../cmsis/system_stm32f10x.c ****   {
1004:../cmsis/system_stm32f10x.c ****     HSEStatus = (uint32_t)0x01;
 411              		.loc 1 1004 0
 412 0044 0123     		movs	r3, #1
 413 0046 3B60     		str	r3, [r7]
 414 0048 01E0     		b	.L23
 415              	.L22:
1005:../cmsis/system_stm32f10x.c ****   }
1006:../cmsis/system_stm32f10x.c ****   else
1007:../cmsis/system_stm32f10x.c ****   {
1008:../cmsis/system_stm32f10x.c ****     HSEStatus = (uint32_t)0x00;
 416              		.loc 1 1008 0
 417 004a 0023     		movs	r3, #0
 418 004c 3B60     		str	r3, [r7]
 419              	.L23:
1009:../cmsis/system_stm32f10x.c ****   }  
1010:../cmsis/system_stm32f10x.c **** 
1011:../cmsis/system_stm32f10x.c ****   if (HSEStatus == (uint32_t)0x01)
 420              		.loc 1 1011 0
 421 004e 3B68     		ldr	r3, [r7]
 422 0050 012B     		cmp	r3, #1
 423 0052 66D1     		bne	.L19
1012:../cmsis/system_stm32f10x.c ****   {
1013:../cmsis/system_stm32f10x.c ****     /* Enable Prefetch Buffer */
1014:../cmsis/system_stm32f10x.c ****     FLASH->ACR |= FLASH_ACR_PRFTBE;
 424              		.loc 1 1014 0
 425 0054 364A     		ldr	r2, .L28+4
 426 0056 364B     		ldr	r3, .L28+4
 427 0058 1B68     		ldr	r3, [r3]
 428 005a 43F01003 		orr	r3, r3, #16
 429 005e 1360     		str	r3, [r2]
1015:../cmsis/system_stm32f10x.c **** 
1016:../cmsis/system_stm32f10x.c ****     /* Flash 2 wait state */
1017:../cmsis/system_stm32f10x.c ****     FLASH->ACR &= (uint32_t)((uint32_t)~FLASH_ACR_LATENCY);
 430              		.loc 1 1017 0
 431 0060 334A     		ldr	r2, .L28+4
 432 0062 334B     		ldr	r3, .L28+4
 433 0064 1B68     		ldr	r3, [r3]
 434 0066 23F00303 		bic	r3, r3, #3
 435 006a 1360     		str	r3, [r2]
1018:../cmsis/system_stm32f10x.c ****     FLASH->ACR |= (uint32_t)FLASH_ACR_LATENCY_2;    
 436              		.loc 1 1018 0
 437 006c 304A     		ldr	r2, .L28+4
 438 006e 304B     		ldr	r3, .L28+4
 439 0070 1B68     		ldr	r3, [r3]
 440 0072 43F00203 		orr	r3, r3, #2
 441 0076 1360     		str	r3, [r2]
1019:../cmsis/system_stm32f10x.c **** 
1020:../cmsis/system_stm32f10x.c ****  
1021:../cmsis/system_stm32f10x.c ****     /* HCLK = SYSCLK */
1022:../cmsis/system_stm32f10x.c ****     RCC->CFGR |= (uint32_t)RCC_CFGR_HPRE_DIV1;
 442              		.loc 1 1022 0
 443 0078 2C4A     		ldr	r2, .L28
 444 007a 2C4B     		ldr	r3, .L28
 445 007c 5B68     		ldr	r3, [r3, #4]
 446 007e 5360     		str	r3, [r2, #4]
1023:../cmsis/system_stm32f10x.c ****       
1024:../cmsis/system_stm32f10x.c ****     /* PCLK2 = HCLK */
1025:../cmsis/system_stm32f10x.c ****     RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE2_DIV1;
 447              		.loc 1 1025 0
 448 0080 2A4A     		ldr	r2, .L28
 449 0082 2A4B     		ldr	r3, .L28
 450 0084 5B68     		ldr	r3, [r3, #4]
 451 0086 5360     		str	r3, [r2, #4]
1026:../cmsis/system_stm32f10x.c ****     
1027:../cmsis/system_stm32f10x.c ****     /* PCLK1 = HCLK */
1028:../cmsis/system_stm32f10x.c ****     RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE1_DIV2;
 452              		.loc 1 1028 0
 453 0088 284A     		ldr	r2, .L28
 454 008a 284B     		ldr	r3, .L28
 455 008c 5B68     		ldr	r3, [r3, #4]
 456 008e 43F48063 		orr	r3, r3, #1024
 457 0092 5360     		str	r3, [r2, #4]
1029:../cmsis/system_stm32f10x.c **** 
1030:../cmsis/system_stm32f10x.c **** #ifdef STM32F10X_CL
1031:../cmsis/system_stm32f10x.c ****     /* Configure PLLs ------------------------------------------------------*/
1032:../cmsis/system_stm32f10x.c ****     /* PLL2 configuration: PLL2CLK = (HSE / 5) * 8 = 40 MHz */
1033:../cmsis/system_stm32f10x.c ****     /* PREDIV1 configuration: PREDIV1CLK = PLL2 / 5 = 8 MHz */
1034:../cmsis/system_stm32f10x.c ****         
1035:../cmsis/system_stm32f10x.c ****     RCC->CFGR2 &= (uint32_t)~(RCC_CFGR2_PREDIV2 | RCC_CFGR2_PLL2MUL |
 458              		.loc 1 1035 0
 459 0094 2549     		ldr	r1, .L28
 460 0096 254B     		ldr	r3, .L28
 461 0098 DA6A     		ldr	r2, [r3, #44]
 462 009a 264B     		ldr	r3, .L28+8
 463 009c 1340     		ands	r3, r3, r2
 464 009e CB62     		str	r3, [r1, #44]
1036:../cmsis/system_stm32f10x.c ****                               RCC_CFGR2_PREDIV1 | RCC_CFGR2_PREDIV1SRC);
1037:../cmsis/system_stm32f10x.c ****     RCC->CFGR2 |= (uint32_t)(RCC_CFGR2_PREDIV2_DIV5 | RCC_CFGR2_PLL2MUL8 |
 465              		.loc 1 1037 0
 466 00a0 224A     		ldr	r2, .L28
 467 00a2 224B     		ldr	r3, .L28
 468 00a4 DB6A     		ldr	r3, [r3, #44]
 469 00a6 43F48333 		orr	r3, r3, #67072
 470 00aa 43F04403 		orr	r3, r3, #68
 471 00ae D362     		str	r3, [r2, #44]
1038:../cmsis/system_stm32f10x.c ****                              RCC_CFGR2_PREDIV1SRC_PLL2 | RCC_CFGR2_PREDIV1_DIV5);
1039:../cmsis/system_stm32f10x.c ****   
1040:../cmsis/system_stm32f10x.c ****     /* Enable PLL2 */
1041:../cmsis/system_stm32f10x.c ****     RCC->CR |= RCC_CR_PLL2ON;
 472              		.loc 1 1041 0
 473 00b0 1E4A     		ldr	r2, .L28
 474 00b2 1E4B     		ldr	r3, .L28
 475 00b4 1B68     		ldr	r3, [r3]
 476 00b6 43F08063 		orr	r3, r3, #67108864
 477 00ba 1360     		str	r3, [r2]
1042:../cmsis/system_stm32f10x.c ****     /* Wait till PLL2 is ready */
1043:../cmsis/system_stm32f10x.c ****     while((RCC->CR & RCC_CR_PLL2RDY) == 0)
 478              		.loc 1 1043 0
 479 00bc 00BF     		nop
 480              	.L25:
 481              		.loc 1 1043 0 is_stmt 0 discriminator 1
 482 00be 1B4B     		ldr	r3, .L28
 483 00c0 1B68     		ldr	r3, [r3]
 484 00c2 03F00063 		and	r3, r3, #134217728
 485 00c6 002B     		cmp	r3, #0
 486 00c8 F9D0     		beq	.L25
1044:../cmsis/system_stm32f10x.c ****     {
1045:../cmsis/system_stm32f10x.c ****     }
1046:../cmsis/system_stm32f10x.c ****     
1047:../cmsis/system_stm32f10x.c ****    
1048:../cmsis/system_stm32f10x.c ****     /* PLL configuration: PLLCLK = PREDIV1 * 9 = 72 MHz */ 
1049:../cmsis/system_stm32f10x.c ****     RCC->CFGR &= (uint32_t)~(RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLSRC | RCC_CFGR_PLLMULL);
 487              		.loc 1 1049 0 is_stmt 1
 488 00ca 184A     		ldr	r2, .L28
 489 00cc 174B     		ldr	r3, .L28
 490 00ce 5B68     		ldr	r3, [r3, #4]
 491 00d0 23F47C13 		bic	r3, r3, #4128768
 492 00d4 5360     		str	r3, [r2, #4]
1050:../cmsis/system_stm32f10x.c ****     RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLXTPRE_PREDIV1 | RCC_CFGR_PLLSRC_PREDIV1 | 
 493              		.loc 1 1050 0
 494 00d6 154A     		ldr	r2, .L28
 495 00d8 144B     		ldr	r3, .L28
 496 00da 5B68     		ldr	r3, [r3, #4]
 497 00dc 43F4E813 		orr	r3, r3, #1900544
 498 00e0 5360     		str	r3, [r2, #4]
1051:../cmsis/system_stm32f10x.c ****                             RCC_CFGR_PLLMULL9); 
1052:../cmsis/system_stm32f10x.c **** #else    
1053:../cmsis/system_stm32f10x.c ****     /*  PLL configuration: PLLCLK = HSE * 9 = 72 MHz */
1054:../cmsis/system_stm32f10x.c ****     RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE |
1055:../cmsis/system_stm32f10x.c ****                                         RCC_CFGR_PLLMULL));
1056:../cmsis/system_stm32f10x.c ****     RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLSRC_HSE | RCC_CFGR_PLLMULL9);
1057:../cmsis/system_stm32f10x.c **** #endif /* STM32F10X_CL */
1058:../cmsis/system_stm32f10x.c **** 
1059:../cmsis/system_stm32f10x.c ****     /* Enable PLL */
1060:../cmsis/system_stm32f10x.c ****     RCC->CR |= RCC_CR_PLLON;
 499              		.loc 1 1060 0
 500 00e2 124A     		ldr	r2, .L28
 501 00e4 114B     		ldr	r3, .L28
 502 00e6 1B68     		ldr	r3, [r3]
 503 00e8 43F08073 		orr	r3, r3, #16777216
 504 00ec 1360     		str	r3, [r2]
1061:../cmsis/system_stm32f10x.c **** 
1062:../cmsis/system_stm32f10x.c ****     /* Wait till PLL is ready */
1063:../cmsis/system_stm32f10x.c ****     while((RCC->CR & RCC_CR_PLLRDY) == 0)
 505              		.loc 1 1063 0
 506 00ee 00BF     		nop
 507              	.L26:
 508              		.loc 1 1063 0 is_stmt 0 discriminator 1
 509 00f0 0E4B     		ldr	r3, .L28
 510 00f2 1B68     		ldr	r3, [r3]
 511 00f4 03F00073 		and	r3, r3, #33554432
 512 00f8 002B     		cmp	r3, #0
 513 00fa F9D0     		beq	.L26
1064:../cmsis/system_stm32f10x.c ****     {
1065:../cmsis/system_stm32f10x.c ****     }
1066:../cmsis/system_stm32f10x.c ****     
1067:../cmsis/system_stm32f10x.c ****     /* Select PLL as system clock source */
1068:../cmsis/system_stm32f10x.c ****     RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 514              		.loc 1 1068 0 is_stmt 1
 515 00fc 0B4A     		ldr	r2, .L28
 516 00fe 0B4B     		ldr	r3, .L28
 517 0100 5B68     		ldr	r3, [r3, #4]
 518 0102 23F00303 		bic	r3, r3, #3
 519 0106 5360     		str	r3, [r2, #4]
1069:../cmsis/system_stm32f10x.c ****     RCC->CFGR |= (uint32_t)RCC_CFGR_SW_PLL;    
 520              		.loc 1 1069 0
 521 0108 084A     		ldr	r2, .L28
 522 010a 084B     		ldr	r3, .L28
 523 010c 5B68     		ldr	r3, [r3, #4]
 524 010e 43F00203 		orr	r3, r3, #2
 525 0112 5360     		str	r3, [r2, #4]
1070:../cmsis/system_stm32f10x.c **** 
1071:../cmsis/system_stm32f10x.c ****     /* Wait till PLL is used as system clock source */
1072:../cmsis/system_stm32f10x.c ****     while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS) != (uint32_t)0x08)
 526              		.loc 1 1072 0
 527 0114 00BF     		nop
 528              	.L27:
 529              		.loc 1 1072 0 is_stmt 0 discriminator 1
 530 0116 054B     		ldr	r3, .L28
 531 0118 5B68     		ldr	r3, [r3, #4]
 532 011a 03F00C03 		and	r3, r3, #12
 533 011e 082B     		cmp	r3, #8
 534 0120 F9D1     		bne	.L27
 535              	.L19:
1073:../cmsis/system_stm32f10x.c ****     {
1074:../cmsis/system_stm32f10x.c ****     }
1075:../cmsis/system_stm32f10x.c ****   }
1076:../cmsis/system_stm32f10x.c ****   else
1077:../cmsis/system_stm32f10x.c ****   { /* If HSE fails to start-up, the application will have wrong clock 
1078:../cmsis/system_stm32f10x.c ****          configuration. User can add here some code to deal with this error */
1079:../cmsis/system_stm32f10x.c ****   }
1080:../cmsis/system_stm32f10x.c **** }
 536              		.loc 1 1080 0 is_stmt 1
 537 0122 0C37     		adds	r7, r7, #12
 538              		.cfi_def_cfa_offset 4
 539 0124 BD46     		mov	sp, r7
 540              		.cfi_def_cfa_register 13
 541              		@ sp needed
 542 0126 5DF8047B 		ldr	r7, [sp], #4
 543              		.cfi_restore 7
 544              		.cfi_def_cfa_offset 0
 545 012a 7047     		bx	lr
 546              	.L29:
 547              		.align	2
 548              	.L28:
 549 012c 00100240 		.word	1073876992
 550 0130 00200240 		.word	1073881088
 551 0134 00F0FEFF 		.word	-69632
 552              		.cfi_endproc
 553              	.LFE32:
 555              		.text
 556              	.Letext0:
 557              		.file 2 "f:\\eclipse\\gcc\\arm-none-eabi\\include\\machine\\_default_types.h"
 558              		.file 3 "f:\\eclipse\\gcc\\arm-none-eabi\\include\\sys\\_stdint.h"
 559              		.file 4 "../cmsis/core_cm3.h"
 560              		.file 5 "../cmsis/stm32f10x.h"
DEFINED SYMBOLS
                            *ABS*:00000000 system_stm32f10x.c
C:\Users\MISAKA~1.MIS\AppData\Local\Temp\cczXZjva.s:23     .data:00000000 SystemCoreClock
C:\Users\MISAKA~1.MIS\AppData\Local\Temp\cczXZjva.s:20     .data:00000000 $d
C:\Users\MISAKA~1.MIS\AppData\Local\Temp\cczXZjva.s:29     .data:00000004 AHBPrescTable
C:\Users\MISAKA~1.MIS\AppData\Local\Temp\cczXZjva.s:47     .text.SystemInit:00000000 $t
C:\Users\MISAKA~1.MIS\AppData\Local\Temp\cczXZjva.s:52     .text.SystemInit:00000000 SystemInit
C:\Users\MISAKA~1.MIS\AppData\Local\Temp\cczXZjva.s:337    .text.SetSysClock:00000000 SetSysClock
C:\Users\MISAKA~1.MIS\AppData\Local\Temp\cczXZjva.s:122    .text.SystemInit:0000006c $d
C:\Users\MISAKA~1.MIS\AppData\Local\Temp\cczXZjva.s:129    .text.SystemCoreClockUpdate:00000000 $t
C:\Users\MISAKA~1.MIS\AppData\Local\Temp\cczXZjva.s:134    .text.SystemCoreClockUpdate:00000000 SystemCoreClockUpdate
C:\Users\MISAKA~1.MIS\AppData\Local\Temp\cczXZjva.s:323    .text.SystemCoreClockUpdate:0000012c $d
C:\Users\MISAKA~1.MIS\AppData\Local\Temp\cczXZjva.s:333    .text.SetSysClock:00000000 $t
C:\Users\MISAKA~1.MIS\AppData\Local\Temp\cczXZjva.s:361    .text.SetSysClockTo72:00000000 SetSysClockTo72
C:\Users\MISAKA~1.MIS\AppData\Local\Temp\cczXZjva.s:357    .text.SetSysClockTo72:00000000 $t
C:\Users\MISAKA~1.MIS\AppData\Local\Temp\cczXZjva.s:549    .text.SetSysClockTo72:0000012c $d
                     .debug_frame:00000010 $d
                           .group:00000000 wm4.0.2d80f1b5ce3c69d13e258577ddf29668
                           .group:00000000 wm4.stm32f10x.h.51.6e18fa0f6016a7ea66d7cfe7c3be3cd1
                           .group:00000000 wm4.core_cm3.h.25.d35e9a9b04ec4aaebae9bf79fff061f9
                           .group:00000000 wm4.features.h.22.2e382148a0560adabf236cddd4e880f4
                           .group:00000000 wm4._default_types.h.15.933e8edd27a65e0b69af4a865eb623d2
                           .group:00000000 wm4._intsup.h.10.35a45952db64d30146faa63a55c20c1c
                           .group:00000000 wm4._stdint.h.10.f76354baea1c7088202064e6f3d4f5e3
                           .group:00000000 wm4.stdint.h.23.373a9d32a9e4c2e88fd347156532d281
                           .group:00000000 wm4.core_cm3.h.113.b286929a54d33b4c8909a7132437b244
                           .group:00000000 wm4.stm32f10x.h.522.34c9721dbd76a587b38991fd58e2fdab
                           .group:00000000 wm4.stm32f10x_bkp.h.25.4622919f1e30efdad5eb44e12edd5513
                           .group:00000000 wm4.stm32f10x_flash.h.25.4be61fcb02863962a1e006449d310650
                           .group:00000000 wm4.stm32f10x_gpio.h.25.80c981af0e637567395034c576cfb3ce
                           .group:00000000 wm4.stm32f10x_pwr.h.25.37ef75009f751ef5fe27910e0bf00a62
                           .group:00000000 wm4.stm32f10x_rcc.h.25.cb32a32bef653f9e9414120b411eb1bf
                           .group:00000000 wm4.stm32f10x_tim.h.25.21c6ec062f1e74898cb96a57da276fec
                           .group:00000000 wm4.misc.h.25.068e106f368fa5369a681ef57c106f4b
                           .group:00000000 wm4.stm32f10x.h.8304.f7d8ad90959e99679b3257267c3aadfe

NO UNDEFINED SYMBOLS
