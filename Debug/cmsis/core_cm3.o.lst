   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 6
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.file	"core_cm3.c"
  15              		.text
  16              	.Ltext0:
  17              		.cfi_sections	.debug_frame
  18              		.section	.text.__get_PSP,"ax",%progbits
  19              		.align	2
  20              		.global	__get_PSP
  21              		.thumb
  22              		.thumb_func
  24              	__get_PSP:
  25              	.LFB0:
  26              		.file 1 "../cmsis/core_cm3.c"
   1:../cmsis/core_cm3.c **** /**************************************************************************//**
   2:../cmsis/core_cm3.c ****  * @file     core_cm3.c
   3:../cmsis/core_cm3.c ****  * @brief    CMSIS Cortex-M3 Core Peripheral Access Layer Source File
   4:../cmsis/core_cm3.c ****  * @version  V1.30
   5:../cmsis/core_cm3.c ****  * @date     30. October 2009
   6:../cmsis/core_cm3.c ****  *
   7:../cmsis/core_cm3.c ****  * @note
   8:../cmsis/core_cm3.c ****  * Copyright (C) 2009 ARM Limited. All rights reserved.
   9:../cmsis/core_cm3.c ****  *
  10:../cmsis/core_cm3.c ****  * @par
  11:../cmsis/core_cm3.c ****  * ARM Limited (ARM) is supplying this software for use with Cortex-M 
  12:../cmsis/core_cm3.c ****  * processor based microcontrollers.  This file can be freely distributed 
  13:../cmsis/core_cm3.c ****  * within development tools that are supporting such ARM based processors. 
  14:../cmsis/core_cm3.c ****  *
  15:../cmsis/core_cm3.c ****  * @par
  16:../cmsis/core_cm3.c ****  * THIS SOFTWARE IS PROVIDED "AS IS".  NO WARRANTIES, WHETHER EXPRESS, IMPLIED
  17:../cmsis/core_cm3.c ****  * OR STATUTORY, INCLUDING, BUT NOT LIMITED TO, IMPLIED WARRANTIES OF
  18:../cmsis/core_cm3.c ****  * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE APPLY TO THIS SOFTWARE.
  19:../cmsis/core_cm3.c ****  * ARM SHALL NOT, IN ANY CIRCUMSTANCES, BE LIABLE FOR SPECIAL, INCIDENTAL, OR
  20:../cmsis/core_cm3.c ****  * CONSEQUENTIAL DAMAGES, FOR ANY REASON WHATSOEVER.
  21:../cmsis/core_cm3.c ****  *
  22:../cmsis/core_cm3.c ****  ******************************************************************************/
  23:../cmsis/core_cm3.c **** 
  24:../cmsis/core_cm3.c **** #include <stdint.h>
  25:../cmsis/core_cm3.c **** 
  26:../cmsis/core_cm3.c **** /* define compiler specific symbols */
  27:../cmsis/core_cm3.c **** #if defined ( __CC_ARM   )
  28:../cmsis/core_cm3.c ****   #define __ASM            __asm                                      /*!< asm keyword for ARM Comp
  29:../cmsis/core_cm3.c ****   #define __INLINE         __inline                                   /*!< inline keyword for ARM C
  30:../cmsis/core_cm3.c **** 
  31:../cmsis/core_cm3.c **** #elif defined ( __ICCARM__ )
  32:../cmsis/core_cm3.c ****   #define __ASM           __asm                                       /*!< asm keyword for IAR Comp
  33:../cmsis/core_cm3.c ****   #define __INLINE        inline                                      /*!< inline keyword for IAR C
  34:../cmsis/core_cm3.c **** 
  35:../cmsis/core_cm3.c **** #elif defined   (  __GNUC__  )
  36:../cmsis/core_cm3.c ****   #define __ASM            __asm                                      /*!< asm keyword for GNU Comp
  37:../cmsis/core_cm3.c ****   #define __INLINE         inline                                     /*!< inline keyword for GNU C
  38:../cmsis/core_cm3.c **** 
  39:../cmsis/core_cm3.c **** #elif defined   (  __TASKING__  )
  40:../cmsis/core_cm3.c ****   #define __ASM            __asm                                      /*!< asm keyword for TASKING 
  41:../cmsis/core_cm3.c ****   #define __INLINE         inline                                     /*!< inline keyword for TASKI
  42:../cmsis/core_cm3.c **** 
  43:../cmsis/core_cm3.c **** #endif
  44:../cmsis/core_cm3.c **** 
  45:../cmsis/core_cm3.c **** 
  46:../cmsis/core_cm3.c **** /* ###################  Compiler specific Intrinsics  ########################### */
  47:../cmsis/core_cm3.c **** 
  48:../cmsis/core_cm3.c **** #if defined ( __CC_ARM   ) /*------------------RealView Compiler -----------------*/
  49:../cmsis/core_cm3.c **** /* ARM armcc specific functions */
  50:../cmsis/core_cm3.c **** 
  51:../cmsis/core_cm3.c **** /**
  52:../cmsis/core_cm3.c ****  * @brief  Return the Process Stack Pointer
  53:../cmsis/core_cm3.c ****  *
  54:../cmsis/core_cm3.c ****  * @return ProcessStackPointer
  55:../cmsis/core_cm3.c ****  *
  56:../cmsis/core_cm3.c ****  * Return the actual process stack pointer
  57:../cmsis/core_cm3.c ****  */
  58:../cmsis/core_cm3.c **** __ASM uint32_t __get_PSP(void)
  59:../cmsis/core_cm3.c **** {
  60:../cmsis/core_cm3.c ****   mrs r0, psp
  61:../cmsis/core_cm3.c ****   bx lr
  62:../cmsis/core_cm3.c **** }
  63:../cmsis/core_cm3.c **** 
  64:../cmsis/core_cm3.c **** /**
  65:../cmsis/core_cm3.c ****  * @brief  Set the Process Stack Pointer
  66:../cmsis/core_cm3.c ****  *
  67:../cmsis/core_cm3.c ****  * @param  topOfProcStack  Process Stack Pointer
  68:../cmsis/core_cm3.c ****  *
  69:../cmsis/core_cm3.c ****  * Assign the value ProcessStackPointer to the MSP 
  70:../cmsis/core_cm3.c ****  * (process stack pointer) Cortex processor register
  71:../cmsis/core_cm3.c ****  */
  72:../cmsis/core_cm3.c **** __ASM void __set_PSP(uint32_t topOfProcStack)
  73:../cmsis/core_cm3.c **** {
  74:../cmsis/core_cm3.c ****   msr psp, r0
  75:../cmsis/core_cm3.c ****   bx lr
  76:../cmsis/core_cm3.c **** }
  77:../cmsis/core_cm3.c **** 
  78:../cmsis/core_cm3.c **** /**
  79:../cmsis/core_cm3.c ****  * @brief  Return the Main Stack Pointer
  80:../cmsis/core_cm3.c ****  *
  81:../cmsis/core_cm3.c ****  * @return Main Stack Pointer
  82:../cmsis/core_cm3.c ****  *
  83:../cmsis/core_cm3.c ****  * Return the current value of the MSP (main stack pointer)
  84:../cmsis/core_cm3.c ****  * Cortex processor register
  85:../cmsis/core_cm3.c ****  */
  86:../cmsis/core_cm3.c **** __ASM uint32_t __get_MSP(void)
  87:../cmsis/core_cm3.c **** {
  88:../cmsis/core_cm3.c ****   mrs r0, msp
  89:../cmsis/core_cm3.c ****   bx lr
  90:../cmsis/core_cm3.c **** }
  91:../cmsis/core_cm3.c **** 
  92:../cmsis/core_cm3.c **** /**
  93:../cmsis/core_cm3.c ****  * @brief  Set the Main Stack Pointer
  94:../cmsis/core_cm3.c ****  *
  95:../cmsis/core_cm3.c ****  * @param  topOfMainStack  Main Stack Pointer
  96:../cmsis/core_cm3.c ****  *
  97:../cmsis/core_cm3.c ****  * Assign the value mainStackPointer to the MSP 
  98:../cmsis/core_cm3.c ****  * (main stack pointer) Cortex processor register
  99:../cmsis/core_cm3.c ****  */
 100:../cmsis/core_cm3.c **** __ASM void __set_MSP(uint32_t mainStackPointer)
 101:../cmsis/core_cm3.c **** {
 102:../cmsis/core_cm3.c ****   msr msp, r0
 103:../cmsis/core_cm3.c ****   bx lr
 104:../cmsis/core_cm3.c **** }
 105:../cmsis/core_cm3.c **** 
 106:../cmsis/core_cm3.c **** /**
 107:../cmsis/core_cm3.c ****  * @brief  Reverse byte order in unsigned short value
 108:../cmsis/core_cm3.c ****  *
 109:../cmsis/core_cm3.c ****  * @param   value  value to reverse
 110:../cmsis/core_cm3.c ****  * @return         reversed value
 111:../cmsis/core_cm3.c ****  *
 112:../cmsis/core_cm3.c ****  * Reverse byte order in unsigned short value
 113:../cmsis/core_cm3.c ****  */
 114:../cmsis/core_cm3.c **** __ASM uint32_t __REV16(uint16_t value)
 115:../cmsis/core_cm3.c **** {
 116:../cmsis/core_cm3.c ****   rev16 r0, r0
 117:../cmsis/core_cm3.c ****   bx lr
 118:../cmsis/core_cm3.c **** }
 119:../cmsis/core_cm3.c **** 
 120:../cmsis/core_cm3.c **** /**
 121:../cmsis/core_cm3.c ****  * @brief  Reverse byte order in signed short value with sign extension to integer
 122:../cmsis/core_cm3.c ****  *
 123:../cmsis/core_cm3.c ****  * @param   value  value to reverse
 124:../cmsis/core_cm3.c ****  * @return         reversed value
 125:../cmsis/core_cm3.c ****  *
 126:../cmsis/core_cm3.c ****  * Reverse byte order in signed short value with sign extension to integer
 127:../cmsis/core_cm3.c ****  */
 128:../cmsis/core_cm3.c **** __ASM int32_t __REVSH(int16_t value)
 129:../cmsis/core_cm3.c **** {
 130:../cmsis/core_cm3.c ****   revsh r0, r0
 131:../cmsis/core_cm3.c ****   bx lr
 132:../cmsis/core_cm3.c **** }
 133:../cmsis/core_cm3.c **** 
 134:../cmsis/core_cm3.c **** 
 135:../cmsis/core_cm3.c **** #if (__ARMCC_VERSION < 400000)
 136:../cmsis/core_cm3.c **** 
 137:../cmsis/core_cm3.c **** /**
 138:../cmsis/core_cm3.c ****  * @brief  Remove the exclusive lock created by ldrex
 139:../cmsis/core_cm3.c ****  *
 140:../cmsis/core_cm3.c ****  * Removes the exclusive lock which is created by ldrex.
 141:../cmsis/core_cm3.c ****  */
 142:../cmsis/core_cm3.c **** __ASM void __CLREX(void)
 143:../cmsis/core_cm3.c **** {
 144:../cmsis/core_cm3.c ****   clrex
 145:../cmsis/core_cm3.c **** }
 146:../cmsis/core_cm3.c **** 
 147:../cmsis/core_cm3.c **** /**
 148:../cmsis/core_cm3.c ****  * @brief  Return the Base Priority value
 149:../cmsis/core_cm3.c ****  *
 150:../cmsis/core_cm3.c ****  * @return BasePriority
 151:../cmsis/core_cm3.c ****  *
 152:../cmsis/core_cm3.c ****  * Return the content of the base priority register
 153:../cmsis/core_cm3.c ****  */
 154:../cmsis/core_cm3.c **** __ASM uint32_t  __get_BASEPRI(void)
 155:../cmsis/core_cm3.c **** {
 156:../cmsis/core_cm3.c ****   mrs r0, basepri
 157:../cmsis/core_cm3.c ****   bx lr
 158:../cmsis/core_cm3.c **** }
 159:../cmsis/core_cm3.c **** 
 160:../cmsis/core_cm3.c **** /**
 161:../cmsis/core_cm3.c ****  * @brief  Set the Base Priority value
 162:../cmsis/core_cm3.c ****  *
 163:../cmsis/core_cm3.c ****  * @param  basePri  BasePriority
 164:../cmsis/core_cm3.c ****  *
 165:../cmsis/core_cm3.c ****  * Set the base priority register
 166:../cmsis/core_cm3.c ****  */
 167:../cmsis/core_cm3.c **** __ASM void __set_BASEPRI(uint32_t basePri)
 168:../cmsis/core_cm3.c **** {
 169:../cmsis/core_cm3.c ****   msr basepri, r0
 170:../cmsis/core_cm3.c ****   bx lr
 171:../cmsis/core_cm3.c **** }
 172:../cmsis/core_cm3.c **** 
 173:../cmsis/core_cm3.c **** /**
 174:../cmsis/core_cm3.c ****  * @brief  Return the Priority Mask value
 175:../cmsis/core_cm3.c ****  *
 176:../cmsis/core_cm3.c ****  * @return PriMask
 177:../cmsis/core_cm3.c ****  *
 178:../cmsis/core_cm3.c ****  * Return state of the priority mask bit from the priority mask register
 179:../cmsis/core_cm3.c ****  */
 180:../cmsis/core_cm3.c **** __ASM uint32_t __get_PRIMASK(void)
 181:../cmsis/core_cm3.c **** {
 182:../cmsis/core_cm3.c ****   mrs r0, primask
 183:../cmsis/core_cm3.c ****   bx lr
 184:../cmsis/core_cm3.c **** }
 185:../cmsis/core_cm3.c **** 
 186:../cmsis/core_cm3.c **** /**
 187:../cmsis/core_cm3.c ****  * @brief  Set the Priority Mask value
 188:../cmsis/core_cm3.c ****  *
 189:../cmsis/core_cm3.c ****  * @param  priMask  PriMask
 190:../cmsis/core_cm3.c ****  *
 191:../cmsis/core_cm3.c ****  * Set the priority mask bit in the priority mask register
 192:../cmsis/core_cm3.c ****  */
 193:../cmsis/core_cm3.c **** __ASM void __set_PRIMASK(uint32_t priMask)
 194:../cmsis/core_cm3.c **** {
 195:../cmsis/core_cm3.c ****   msr primask, r0
 196:../cmsis/core_cm3.c ****   bx lr
 197:../cmsis/core_cm3.c **** }
 198:../cmsis/core_cm3.c **** 
 199:../cmsis/core_cm3.c **** /**
 200:../cmsis/core_cm3.c ****  * @brief  Return the Fault Mask value
 201:../cmsis/core_cm3.c ****  *
 202:../cmsis/core_cm3.c ****  * @return FaultMask
 203:../cmsis/core_cm3.c ****  *
 204:../cmsis/core_cm3.c ****  * Return the content of the fault mask register
 205:../cmsis/core_cm3.c ****  */
 206:../cmsis/core_cm3.c **** __ASM uint32_t  __get_FAULTMASK(void)
 207:../cmsis/core_cm3.c **** {
 208:../cmsis/core_cm3.c ****   mrs r0, faultmask
 209:../cmsis/core_cm3.c ****   bx lr
 210:../cmsis/core_cm3.c **** }
 211:../cmsis/core_cm3.c **** 
 212:../cmsis/core_cm3.c **** /**
 213:../cmsis/core_cm3.c ****  * @brief  Set the Fault Mask value
 214:../cmsis/core_cm3.c ****  *
 215:../cmsis/core_cm3.c ****  * @param  faultMask  faultMask value
 216:../cmsis/core_cm3.c ****  *
 217:../cmsis/core_cm3.c ****  * Set the fault mask register
 218:../cmsis/core_cm3.c ****  */
 219:../cmsis/core_cm3.c **** __ASM void __set_FAULTMASK(uint32_t faultMask)
 220:../cmsis/core_cm3.c **** {
 221:../cmsis/core_cm3.c ****   msr faultmask, r0
 222:../cmsis/core_cm3.c ****   bx lr
 223:../cmsis/core_cm3.c **** }
 224:../cmsis/core_cm3.c **** 
 225:../cmsis/core_cm3.c **** /**
 226:../cmsis/core_cm3.c ****  * @brief  Return the Control Register value
 227:../cmsis/core_cm3.c ****  * 
 228:../cmsis/core_cm3.c ****  * @return Control value
 229:../cmsis/core_cm3.c ****  *
 230:../cmsis/core_cm3.c ****  * Return the content of the control register
 231:../cmsis/core_cm3.c ****  */
 232:../cmsis/core_cm3.c **** __ASM uint32_t __get_CONTROL(void)
 233:../cmsis/core_cm3.c **** {
 234:../cmsis/core_cm3.c ****   mrs r0, control
 235:../cmsis/core_cm3.c ****   bx lr
 236:../cmsis/core_cm3.c **** }
 237:../cmsis/core_cm3.c **** 
 238:../cmsis/core_cm3.c **** /**
 239:../cmsis/core_cm3.c ****  * @brief  Set the Control Register value
 240:../cmsis/core_cm3.c ****  *
 241:../cmsis/core_cm3.c ****  * @param  control  Control value
 242:../cmsis/core_cm3.c ****  *
 243:../cmsis/core_cm3.c ****  * Set the control register
 244:../cmsis/core_cm3.c ****  */
 245:../cmsis/core_cm3.c **** __ASM void __set_CONTROL(uint32_t control)
 246:../cmsis/core_cm3.c **** {
 247:../cmsis/core_cm3.c ****   msr control, r0
 248:../cmsis/core_cm3.c ****   bx lr
 249:../cmsis/core_cm3.c **** }
 250:../cmsis/core_cm3.c **** 
 251:../cmsis/core_cm3.c **** #endif /* __ARMCC_VERSION  */ 
 252:../cmsis/core_cm3.c **** 
 253:../cmsis/core_cm3.c **** 
 254:../cmsis/core_cm3.c **** 
 255:../cmsis/core_cm3.c **** #elif (defined (__ICCARM__)) /*------------------ ICC Compiler -------------------*/
 256:../cmsis/core_cm3.c **** /* IAR iccarm specific functions */
 257:../cmsis/core_cm3.c **** #pragma diag_suppress=Pe940
 258:../cmsis/core_cm3.c **** 
 259:../cmsis/core_cm3.c **** /**
 260:../cmsis/core_cm3.c ****  * @brief  Return the Process Stack Pointer
 261:../cmsis/core_cm3.c ****  *
 262:../cmsis/core_cm3.c ****  * @return ProcessStackPointer
 263:../cmsis/core_cm3.c ****  *
 264:../cmsis/core_cm3.c ****  * Return the actual process stack pointer
 265:../cmsis/core_cm3.c ****  */
 266:../cmsis/core_cm3.c **** uint32_t __get_PSP(void)
 267:../cmsis/core_cm3.c **** {
 268:../cmsis/core_cm3.c ****   __ASM("mrs r0, psp");
 269:../cmsis/core_cm3.c ****   __ASM("bx lr");
 270:../cmsis/core_cm3.c **** }
 271:../cmsis/core_cm3.c **** 
 272:../cmsis/core_cm3.c **** /**
 273:../cmsis/core_cm3.c ****  * @brief  Set the Process Stack Pointer
 274:../cmsis/core_cm3.c ****  *
 275:../cmsis/core_cm3.c ****  * @param  topOfProcStack  Process Stack Pointer
 276:../cmsis/core_cm3.c ****  *
 277:../cmsis/core_cm3.c ****  * Assign the value ProcessStackPointer to the MSP 
 278:../cmsis/core_cm3.c ****  * (process stack pointer) Cortex processor register
 279:../cmsis/core_cm3.c ****  */
 280:../cmsis/core_cm3.c **** void __set_PSP(uint32_t topOfProcStack)
 281:../cmsis/core_cm3.c **** {
 282:../cmsis/core_cm3.c ****   __ASM("msr psp, r0");
 283:../cmsis/core_cm3.c ****   __ASM("bx lr");
 284:../cmsis/core_cm3.c **** }
 285:../cmsis/core_cm3.c **** 
 286:../cmsis/core_cm3.c **** /**
 287:../cmsis/core_cm3.c ****  * @brief  Return the Main Stack Pointer
 288:../cmsis/core_cm3.c ****  *
 289:../cmsis/core_cm3.c ****  * @return Main Stack Pointer
 290:../cmsis/core_cm3.c ****  *
 291:../cmsis/core_cm3.c ****  * Return the current value of the MSP (main stack pointer)
 292:../cmsis/core_cm3.c ****  * Cortex processor register
 293:../cmsis/core_cm3.c ****  */
 294:../cmsis/core_cm3.c **** uint32_t __get_MSP(void)
 295:../cmsis/core_cm3.c **** {
 296:../cmsis/core_cm3.c ****   __ASM("mrs r0, msp");
 297:../cmsis/core_cm3.c ****   __ASM("bx lr");
 298:../cmsis/core_cm3.c **** }
 299:../cmsis/core_cm3.c **** 
 300:../cmsis/core_cm3.c **** /**
 301:../cmsis/core_cm3.c ****  * @brief  Set the Main Stack Pointer
 302:../cmsis/core_cm3.c ****  *
 303:../cmsis/core_cm3.c ****  * @param  topOfMainStack  Main Stack Pointer
 304:../cmsis/core_cm3.c ****  *
 305:../cmsis/core_cm3.c ****  * Assign the value mainStackPointer to the MSP 
 306:../cmsis/core_cm3.c ****  * (main stack pointer) Cortex processor register
 307:../cmsis/core_cm3.c ****  */
 308:../cmsis/core_cm3.c **** void __set_MSP(uint32_t topOfMainStack)
 309:../cmsis/core_cm3.c **** {
 310:../cmsis/core_cm3.c ****   __ASM("msr msp, r0");
 311:../cmsis/core_cm3.c ****   __ASM("bx lr");
 312:../cmsis/core_cm3.c **** }
 313:../cmsis/core_cm3.c **** 
 314:../cmsis/core_cm3.c **** /**
 315:../cmsis/core_cm3.c ****  * @brief  Reverse byte order in unsigned short value
 316:../cmsis/core_cm3.c ****  *
 317:../cmsis/core_cm3.c ****  * @param  value  value to reverse
 318:../cmsis/core_cm3.c ****  * @return        reversed value
 319:../cmsis/core_cm3.c ****  *
 320:../cmsis/core_cm3.c ****  * Reverse byte order in unsigned short value
 321:../cmsis/core_cm3.c ****  */
 322:../cmsis/core_cm3.c **** uint32_t __REV16(uint16_t value)
 323:../cmsis/core_cm3.c **** {
 324:../cmsis/core_cm3.c ****   __ASM("rev16 r0, r0");
 325:../cmsis/core_cm3.c ****   __ASM("bx lr");
 326:../cmsis/core_cm3.c **** }
 327:../cmsis/core_cm3.c **** 
 328:../cmsis/core_cm3.c **** /**
 329:../cmsis/core_cm3.c ****  * @brief  Reverse bit order of value
 330:../cmsis/core_cm3.c ****  *
 331:../cmsis/core_cm3.c ****  * @param  value  value to reverse
 332:../cmsis/core_cm3.c ****  * @return        reversed value
 333:../cmsis/core_cm3.c ****  *
 334:../cmsis/core_cm3.c ****  * Reverse bit order of value
 335:../cmsis/core_cm3.c ****  */
 336:../cmsis/core_cm3.c **** uint32_t __RBIT(uint32_t value)
 337:../cmsis/core_cm3.c **** {
 338:../cmsis/core_cm3.c ****   __ASM("rbit r0, r0");
 339:../cmsis/core_cm3.c ****   __ASM("bx lr");
 340:../cmsis/core_cm3.c **** }
 341:../cmsis/core_cm3.c **** 
 342:../cmsis/core_cm3.c **** /**
 343:../cmsis/core_cm3.c ****  * @brief  LDR Exclusive (8 bit)
 344:../cmsis/core_cm3.c ****  *
 345:../cmsis/core_cm3.c ****  * @param  *addr  address pointer
 346:../cmsis/core_cm3.c ****  * @return        value of (*address)
 347:../cmsis/core_cm3.c ****  *
 348:../cmsis/core_cm3.c ****  * Exclusive LDR command for 8 bit values)
 349:../cmsis/core_cm3.c ****  */
 350:../cmsis/core_cm3.c **** uint8_t __LDREXB(uint8_t *addr)
 351:../cmsis/core_cm3.c **** {
 352:../cmsis/core_cm3.c ****   __ASM("ldrexb r0, [r0]");
 353:../cmsis/core_cm3.c ****   __ASM("bx lr"); 
 354:../cmsis/core_cm3.c **** }
 355:../cmsis/core_cm3.c **** 
 356:../cmsis/core_cm3.c **** /**
 357:../cmsis/core_cm3.c ****  * @brief  LDR Exclusive (16 bit)
 358:../cmsis/core_cm3.c ****  *
 359:../cmsis/core_cm3.c ****  * @param  *addr  address pointer
 360:../cmsis/core_cm3.c ****  * @return        value of (*address)
 361:../cmsis/core_cm3.c ****  *
 362:../cmsis/core_cm3.c ****  * Exclusive LDR command for 16 bit values
 363:../cmsis/core_cm3.c ****  */
 364:../cmsis/core_cm3.c **** uint16_t __LDREXH(uint16_t *addr)
 365:../cmsis/core_cm3.c **** {
 366:../cmsis/core_cm3.c ****   __ASM("ldrexh r0, [r0]");
 367:../cmsis/core_cm3.c ****   __ASM("bx lr");
 368:../cmsis/core_cm3.c **** }
 369:../cmsis/core_cm3.c **** 
 370:../cmsis/core_cm3.c **** /**
 371:../cmsis/core_cm3.c ****  * @brief  LDR Exclusive (32 bit)
 372:../cmsis/core_cm3.c ****  *
 373:../cmsis/core_cm3.c ****  * @param  *addr  address pointer
 374:../cmsis/core_cm3.c ****  * @return        value of (*address)
 375:../cmsis/core_cm3.c ****  *
 376:../cmsis/core_cm3.c ****  * Exclusive LDR command for 32 bit values
 377:../cmsis/core_cm3.c ****  */
 378:../cmsis/core_cm3.c **** uint32_t __LDREXW(uint32_t *addr)
 379:../cmsis/core_cm3.c **** {
 380:../cmsis/core_cm3.c ****   __ASM("ldrex r0, [r0]");
 381:../cmsis/core_cm3.c ****   __ASM("bx lr");
 382:../cmsis/core_cm3.c **** }
 383:../cmsis/core_cm3.c **** 
 384:../cmsis/core_cm3.c **** /**
 385:../cmsis/core_cm3.c ****  * @brief  STR Exclusive (8 bit)
 386:../cmsis/core_cm3.c ****  *
 387:../cmsis/core_cm3.c ****  * @param  value  value to store
 388:../cmsis/core_cm3.c ****  * @param  *addr  address pointer
 389:../cmsis/core_cm3.c ****  * @return        successful / failed
 390:../cmsis/core_cm3.c ****  *
 391:../cmsis/core_cm3.c ****  * Exclusive STR command for 8 bit values
 392:../cmsis/core_cm3.c ****  */
 393:../cmsis/core_cm3.c **** uint32_t __STREXB(uint8_t value, uint8_t *addr)
 394:../cmsis/core_cm3.c **** {
 395:../cmsis/core_cm3.c ****   __ASM("strexb r0, r0, [r1]");
 396:../cmsis/core_cm3.c ****   __ASM("bx lr");
 397:../cmsis/core_cm3.c **** }
 398:../cmsis/core_cm3.c **** 
 399:../cmsis/core_cm3.c **** /**
 400:../cmsis/core_cm3.c ****  * @brief  STR Exclusive (16 bit)
 401:../cmsis/core_cm3.c ****  *
 402:../cmsis/core_cm3.c ****  * @param  value  value to store
 403:../cmsis/core_cm3.c ****  * @param  *addr  address pointer
 404:../cmsis/core_cm3.c ****  * @return        successful / failed
 405:../cmsis/core_cm3.c ****  *
 406:../cmsis/core_cm3.c ****  * Exclusive STR command for 16 bit values
 407:../cmsis/core_cm3.c ****  */
 408:../cmsis/core_cm3.c **** uint32_t __STREXH(uint16_t value, uint16_t *addr)
 409:../cmsis/core_cm3.c **** {
 410:../cmsis/core_cm3.c ****   __ASM("strexh r0, r0, [r1]");
 411:../cmsis/core_cm3.c ****   __ASM("bx lr");
 412:../cmsis/core_cm3.c **** }
 413:../cmsis/core_cm3.c **** 
 414:../cmsis/core_cm3.c **** /**
 415:../cmsis/core_cm3.c ****  * @brief  STR Exclusive (32 bit)
 416:../cmsis/core_cm3.c ****  *
 417:../cmsis/core_cm3.c ****  * @param  value  value to store
 418:../cmsis/core_cm3.c ****  * @param  *addr  address pointer
 419:../cmsis/core_cm3.c ****  * @return        successful / failed
 420:../cmsis/core_cm3.c ****  *
 421:../cmsis/core_cm3.c ****  * Exclusive STR command for 32 bit values
 422:../cmsis/core_cm3.c ****  */
 423:../cmsis/core_cm3.c **** uint32_t __STREXW(uint32_t value, uint32_t *addr)
 424:../cmsis/core_cm3.c **** {
 425:../cmsis/core_cm3.c ****   __ASM("strex r0, r0, [r1]");
 426:../cmsis/core_cm3.c ****   __ASM("bx lr");
 427:../cmsis/core_cm3.c **** }
 428:../cmsis/core_cm3.c **** 
 429:../cmsis/core_cm3.c **** #pragma diag_default=Pe940
 430:../cmsis/core_cm3.c **** 
 431:../cmsis/core_cm3.c **** 
 432:../cmsis/core_cm3.c **** #elif (defined (__GNUC__)) /*------------------ GNU Compiler ---------------------*/
 433:../cmsis/core_cm3.c **** /* GNU gcc specific functions */
 434:../cmsis/core_cm3.c **** 
 435:../cmsis/core_cm3.c **** /**
 436:../cmsis/core_cm3.c ****  * @brief  Return the Process Stack Pointer
 437:../cmsis/core_cm3.c ****  *
 438:../cmsis/core_cm3.c ****  * @return ProcessStackPointer
 439:../cmsis/core_cm3.c ****  *
 440:../cmsis/core_cm3.c ****  * Return the actual process stack pointer
 441:../cmsis/core_cm3.c ****  */
 442:../cmsis/core_cm3.c **** uint32_t __get_PSP(void) __attribute__( ( naked ) );
 443:../cmsis/core_cm3.c **** uint32_t __get_PSP(void)
 444:../cmsis/core_cm3.c **** {
  27              		.loc 1 444 0
  28              		.cfi_startproc
  29              		@ Naked Function: prologue and epilogue provided by programmer.
  30              		@ args = 0, pretend = 0, frame = 0
  31              		@ frame_needed = 1, uses_anonymous_args = 0
 445:../cmsis/core_cm3.c ****   uint32_t result=0;
  32              		.loc 1 445 0
  33 0000 0024     		movs	r4, #0
 446:../cmsis/core_cm3.c **** 
 447:../cmsis/core_cm3.c ****   __ASM volatile ("MRS %0, psp\n\t" 
  34              		.loc 1 447 0
  35              	@ 447 "../cmsis/core_cm3.c" 1
  36 0002 EFF30983 		MRS r3, psp
  37 0006 1846     		MOV r0, r3 
  38 0008 7047     		BX  lr     
  39              		
  40              	@ 0 "" 2
  41              		.thumb
  42 000a 1C46     		mov	r4, r3
 448:../cmsis/core_cm3.c ****                   "MOV r0, %0 \n\t"
 449:../cmsis/core_cm3.c ****                   "BX  lr     \n\t"  : "=r" (result) );
 450:../cmsis/core_cm3.c ****   return(result);
  43              		.loc 1 450 0
  44 000c 2346     		mov	r3, r4
 451:../cmsis/core_cm3.c **** }
  45              		.loc 1 451 0
  46 000e 1846     		mov	r0, r3
  47              		.cfi_endproc
  48              	.LFE0:
  50              		.section	.text.__set_PSP,"ax",%progbits
  51              		.align	2
  52              		.global	__set_PSP
  53              		.thumb
  54              		.thumb_func
  56              	__set_PSP:
  57              	.LFB1:
 452:../cmsis/core_cm3.c **** 
 453:../cmsis/core_cm3.c **** /**
 454:../cmsis/core_cm3.c ****  * @brief  Set the Process Stack Pointer
 455:../cmsis/core_cm3.c ****  *
 456:../cmsis/core_cm3.c ****  * @param  topOfProcStack  Process Stack Pointer
 457:../cmsis/core_cm3.c ****  *
 458:../cmsis/core_cm3.c ****  * Assign the value ProcessStackPointer to the MSP 
 459:../cmsis/core_cm3.c ****  * (process stack pointer) Cortex processor register
 460:../cmsis/core_cm3.c ****  */
 461:../cmsis/core_cm3.c **** void __set_PSP(uint32_t topOfProcStack) __attribute__( ( naked ) );
 462:../cmsis/core_cm3.c **** void __set_PSP(uint32_t topOfProcStack)
 463:../cmsis/core_cm3.c **** {
  58              		.loc 1 463 0
  59              		.cfi_startproc
  60              		@ Naked Function: prologue and epilogue provided by programmer.
  61              		@ args = 0, pretend = 0, frame = 0
  62              		@ frame_needed = 1, uses_anonymous_args = 0
  63 0000 0346     		mov	r3, r0
 464:../cmsis/core_cm3.c ****   __ASM volatile ("MSR psp, %0\n\t"
  64              		.loc 1 464 0
  65              	@ 464 "../cmsis/core_cm3.c" 1
  66 0002 83F30988 		MSR psp, r3
  67 0006 7047     		BX  lr     
  68              		
  69              	@ 0 "" 2
 465:../cmsis/core_cm3.c ****                   "BX  lr     \n\t" : : "r" (topOfProcStack) );
 466:../cmsis/core_cm3.c **** }
  70              		.loc 1 466 0
  71              		.thumb
  72              		.cfi_endproc
  73              	.LFE1:
  75              		.section	.text.__get_MSP,"ax",%progbits
  76              		.align	2
  77              		.global	__get_MSP
  78              		.thumb
  79              		.thumb_func
  81              	__get_MSP:
  82              	.LFB2:
 467:../cmsis/core_cm3.c **** 
 468:../cmsis/core_cm3.c **** /**
 469:../cmsis/core_cm3.c ****  * @brief  Return the Main Stack Pointer
 470:../cmsis/core_cm3.c ****  *
 471:../cmsis/core_cm3.c ****  * @return Main Stack Pointer
 472:../cmsis/core_cm3.c ****  *
 473:../cmsis/core_cm3.c ****  * Return the current value of the MSP (main stack pointer)
 474:../cmsis/core_cm3.c ****  * Cortex processor register
 475:../cmsis/core_cm3.c ****  */
 476:../cmsis/core_cm3.c **** uint32_t __get_MSP(void) __attribute__( ( naked ) );
 477:../cmsis/core_cm3.c **** uint32_t __get_MSP(void)
 478:../cmsis/core_cm3.c **** {
  83              		.loc 1 478 0
  84              		.cfi_startproc
  85              		@ Naked Function: prologue and epilogue provided by programmer.
  86              		@ args = 0, pretend = 0, frame = 0
  87              		@ frame_needed = 1, uses_anonymous_args = 0
 479:../cmsis/core_cm3.c ****   uint32_t result=0;
  88              		.loc 1 479 0
  89 0000 0024     		movs	r4, #0
 480:../cmsis/core_cm3.c **** 
 481:../cmsis/core_cm3.c ****   __ASM volatile ("MRS %0, msp\n\t" 
  90              		.loc 1 481 0
  91              	@ 481 "../cmsis/core_cm3.c" 1
  92 0002 EFF30883 		MRS r3, msp
  93 0006 1846     		MOV r0, r3 
  94 0008 7047     		BX  lr     
  95              		
  96              	@ 0 "" 2
  97              		.thumb
  98 000a 1C46     		mov	r4, r3
 482:../cmsis/core_cm3.c ****                   "MOV r0, %0 \n\t"
 483:../cmsis/core_cm3.c ****                   "BX  lr     \n\t"  : "=r" (result) );
 484:../cmsis/core_cm3.c ****   return(result);
  99              		.loc 1 484 0
 100 000c 2346     		mov	r3, r4
 485:../cmsis/core_cm3.c **** }
 101              		.loc 1 485 0
 102 000e 1846     		mov	r0, r3
 103              		.cfi_endproc
 104              	.LFE2:
 106              		.section	.text.__set_MSP,"ax",%progbits
 107              		.align	2
 108              		.global	__set_MSP
 109              		.thumb
 110              		.thumb_func
 112              	__set_MSP:
 113              	.LFB3:
 486:../cmsis/core_cm3.c **** 
 487:../cmsis/core_cm3.c **** /**
 488:../cmsis/core_cm3.c ****  * @brief  Set the Main Stack Pointer
 489:../cmsis/core_cm3.c ****  *
 490:../cmsis/core_cm3.c ****  * @param  topOfMainStack  Main Stack Pointer
 491:../cmsis/core_cm3.c ****  *
 492:../cmsis/core_cm3.c ****  * Assign the value mainStackPointer to the MSP 
 493:../cmsis/core_cm3.c ****  * (main stack pointer) Cortex processor register
 494:../cmsis/core_cm3.c ****  */
 495:../cmsis/core_cm3.c **** void __set_MSP(uint32_t topOfMainStack) __attribute__( ( naked ) );
 496:../cmsis/core_cm3.c **** void __set_MSP(uint32_t topOfMainStack)
 497:../cmsis/core_cm3.c **** {
 114              		.loc 1 497 0
 115              		.cfi_startproc
 116              		@ Naked Function: prologue and epilogue provided by programmer.
 117              		@ args = 0, pretend = 0, frame = 0
 118              		@ frame_needed = 1, uses_anonymous_args = 0
 119 0000 0346     		mov	r3, r0
 498:../cmsis/core_cm3.c ****   __ASM volatile ("MSR msp, %0\n\t"
 120              		.loc 1 498 0
 121              	@ 498 "../cmsis/core_cm3.c" 1
 122 0002 83F30888 		MSR msp, r3
 123 0006 7047     		BX  lr     
 124              		
 125              	@ 0 "" 2
 499:../cmsis/core_cm3.c ****                   "BX  lr     \n\t" : : "r" (topOfMainStack) );
 500:../cmsis/core_cm3.c **** }
 126              		.loc 1 500 0
 127              		.thumb
 128              		.cfi_endproc
 129              	.LFE3:
 131              		.section	.text.__get_BASEPRI,"ax",%progbits
 132              		.align	2
 133              		.global	__get_BASEPRI
 134              		.thumb
 135              		.thumb_func
 137              	__get_BASEPRI:
 138              	.LFB4:
 501:../cmsis/core_cm3.c **** 
 502:../cmsis/core_cm3.c **** /**
 503:../cmsis/core_cm3.c ****  * @brief  Return the Base Priority value
 504:../cmsis/core_cm3.c ****  *
 505:../cmsis/core_cm3.c ****  * @return BasePriority
 506:../cmsis/core_cm3.c ****  *
 507:../cmsis/core_cm3.c ****  * Return the content of the base priority register
 508:../cmsis/core_cm3.c ****  */
 509:../cmsis/core_cm3.c **** uint32_t __get_BASEPRI(void)
 510:../cmsis/core_cm3.c **** {
 139              		.loc 1 510 0
 140              		.cfi_startproc
 141              		@ args = 0, pretend = 0, frame = 8
 142              		@ frame_needed = 1, uses_anonymous_args = 0
 143              		@ link register save eliminated.
 144 0000 80B4     		push	{r7}
 145              		.cfi_def_cfa_offset 4
 146              		.cfi_offset 7, -4
 147 0002 83B0     		sub	sp, sp, #12
 148              		.cfi_def_cfa_offset 16
 149 0004 00AF     		add	r7, sp, #0
 150              		.cfi_def_cfa_register 7
 511:../cmsis/core_cm3.c ****   uint32_t result=0;
 151              		.loc 1 511 0
 152 0006 0023     		movs	r3, #0
 153 0008 7B60     		str	r3, [r7, #4]
 512:../cmsis/core_cm3.c ****   
 513:../cmsis/core_cm3.c ****   __ASM volatile ("MRS %0, basepri_max" : "=r" (result) );
 154              		.loc 1 513 0
 155              	@ 513 "../cmsis/core_cm3.c" 1
 156 000a EFF31283 		MRS r3, basepri_max
 157              	@ 0 "" 2
 158              		.thumb
 159 000e 7B60     		str	r3, [r7, #4]
 514:../cmsis/core_cm3.c ****   return(result);
 160              		.loc 1 514 0
 161 0010 7B68     		ldr	r3, [r7, #4]
 515:../cmsis/core_cm3.c **** }
 162              		.loc 1 515 0
 163 0012 1846     		mov	r0, r3
 164 0014 0C37     		adds	r7, r7, #12
 165              		.cfi_def_cfa_offset 4
 166 0016 BD46     		mov	sp, r7
 167              		.cfi_def_cfa_register 13
 168              		@ sp needed
 169 0018 5DF8047B 		ldr	r7, [sp], #4
 170              		.cfi_restore 7
 171              		.cfi_def_cfa_offset 0
 172 001c 7047     		bx	lr
 173              		.cfi_endproc
 174              	.LFE4:
 176 001e 00BF     		.section	.text.__set_BASEPRI,"ax",%progbits
 177              		.align	2
 178              		.global	__set_BASEPRI
 179              		.thumb
 180              		.thumb_func
 182              	__set_BASEPRI:
 183              	.LFB5:
 516:../cmsis/core_cm3.c **** 
 517:../cmsis/core_cm3.c **** /**
 518:../cmsis/core_cm3.c ****  * @brief  Set the Base Priority value
 519:../cmsis/core_cm3.c ****  *
 520:../cmsis/core_cm3.c ****  * @param  basePri  BasePriority
 521:../cmsis/core_cm3.c ****  *
 522:../cmsis/core_cm3.c ****  * Set the base priority register
 523:../cmsis/core_cm3.c ****  */
 524:../cmsis/core_cm3.c **** void __set_BASEPRI(uint32_t value)
 525:../cmsis/core_cm3.c **** {
 184              		.loc 1 525 0
 185              		.cfi_startproc
 186              		@ args = 0, pretend = 0, frame = 8
 187              		@ frame_needed = 1, uses_anonymous_args = 0
 188              		@ link register save eliminated.
 189 0000 80B4     		push	{r7}
 190              		.cfi_def_cfa_offset 4
 191              		.cfi_offset 7, -4
 192 0002 83B0     		sub	sp, sp, #12
 193              		.cfi_def_cfa_offset 16
 194 0004 00AF     		add	r7, sp, #0
 195              		.cfi_def_cfa_register 7
 196 0006 7860     		str	r0, [r7, #4]
 526:../cmsis/core_cm3.c ****   __ASM volatile ("MSR basepri, %0" : : "r" (value) );
 197              		.loc 1 526 0
 198 0008 7B68     		ldr	r3, [r7, #4]
 199              	@ 526 "../cmsis/core_cm3.c" 1
 200 000a 83F31188 		MSR basepri, r3
 201              	@ 0 "" 2
 527:../cmsis/core_cm3.c **** }
 202              		.loc 1 527 0
 203              		.thumb
 204 000e 0C37     		adds	r7, r7, #12
 205              		.cfi_def_cfa_offset 4
 206 0010 BD46     		mov	sp, r7
 207              		.cfi_def_cfa_register 13
 208              		@ sp needed
 209 0012 5DF8047B 		ldr	r7, [sp], #4
 210              		.cfi_restore 7
 211              		.cfi_def_cfa_offset 0
 212 0016 7047     		bx	lr
 213              		.cfi_endproc
 214              	.LFE5:
 216              		.section	.text.__get_PRIMASK,"ax",%progbits
 217              		.align	2
 218              		.global	__get_PRIMASK
 219              		.thumb
 220              		.thumb_func
 222              	__get_PRIMASK:
 223              	.LFB6:
 528:../cmsis/core_cm3.c **** 
 529:../cmsis/core_cm3.c **** /**
 530:../cmsis/core_cm3.c ****  * @brief  Return the Priority Mask value
 531:../cmsis/core_cm3.c ****  *
 532:../cmsis/core_cm3.c ****  * @return PriMask
 533:../cmsis/core_cm3.c ****  *
 534:../cmsis/core_cm3.c ****  * Return state of the priority mask bit from the priority mask register
 535:../cmsis/core_cm3.c ****  */
 536:../cmsis/core_cm3.c **** uint32_t __get_PRIMASK(void)
 537:../cmsis/core_cm3.c **** {
 224              		.loc 1 537 0
 225              		.cfi_startproc
 226              		@ args = 0, pretend = 0, frame = 8
 227              		@ frame_needed = 1, uses_anonymous_args = 0
 228              		@ link register save eliminated.
 229 0000 80B4     		push	{r7}
 230              		.cfi_def_cfa_offset 4
 231              		.cfi_offset 7, -4
 232 0002 83B0     		sub	sp, sp, #12
 233              		.cfi_def_cfa_offset 16
 234 0004 00AF     		add	r7, sp, #0
 235              		.cfi_def_cfa_register 7
 538:../cmsis/core_cm3.c ****   uint32_t result=0;
 236              		.loc 1 538 0
 237 0006 0023     		movs	r3, #0
 238 0008 7B60     		str	r3, [r7, #4]
 539:../cmsis/core_cm3.c **** 
 540:../cmsis/core_cm3.c ****   __ASM volatile ("MRS %0, primask" : "=r" (result) );
 239              		.loc 1 540 0
 240              	@ 540 "../cmsis/core_cm3.c" 1
 241 000a EFF31083 		MRS r3, primask
 242              	@ 0 "" 2
 243              		.thumb
 244 000e 7B60     		str	r3, [r7, #4]
 541:../cmsis/core_cm3.c ****   return(result);
 245              		.loc 1 541 0
 246 0010 7B68     		ldr	r3, [r7, #4]
 542:../cmsis/core_cm3.c **** }
 247              		.loc 1 542 0
 248 0012 1846     		mov	r0, r3
 249 0014 0C37     		adds	r7, r7, #12
 250              		.cfi_def_cfa_offset 4
 251 0016 BD46     		mov	sp, r7
 252              		.cfi_def_cfa_register 13
 253              		@ sp needed
 254 0018 5DF8047B 		ldr	r7, [sp], #4
 255              		.cfi_restore 7
 256              		.cfi_def_cfa_offset 0
 257 001c 7047     		bx	lr
 258              		.cfi_endproc
 259              	.LFE6:
 261 001e 00BF     		.section	.text.__set_PRIMASK,"ax",%progbits
 262              		.align	2
 263              		.global	__set_PRIMASK
 264              		.thumb
 265              		.thumb_func
 267              	__set_PRIMASK:
 268              	.LFB7:
 543:../cmsis/core_cm3.c **** 
 544:../cmsis/core_cm3.c **** /**
 545:../cmsis/core_cm3.c ****  * @brief  Set the Priority Mask value
 546:../cmsis/core_cm3.c ****  *
 547:../cmsis/core_cm3.c ****  * @param  priMask  PriMask
 548:../cmsis/core_cm3.c ****  *
 549:../cmsis/core_cm3.c ****  * Set the priority mask bit in the priority mask register
 550:../cmsis/core_cm3.c ****  */
 551:../cmsis/core_cm3.c **** void __set_PRIMASK(uint32_t priMask)
 552:../cmsis/core_cm3.c **** {
 269              		.loc 1 552 0
 270              		.cfi_startproc
 271              		@ args = 0, pretend = 0, frame = 8
 272              		@ frame_needed = 1, uses_anonymous_args = 0
 273              		@ link register save eliminated.
 274 0000 80B4     		push	{r7}
 275              		.cfi_def_cfa_offset 4
 276              		.cfi_offset 7, -4
 277 0002 83B0     		sub	sp, sp, #12
 278              		.cfi_def_cfa_offset 16
 279 0004 00AF     		add	r7, sp, #0
 280              		.cfi_def_cfa_register 7
 281 0006 7860     		str	r0, [r7, #4]
 553:../cmsis/core_cm3.c ****   __ASM volatile ("MSR primask, %0" : : "r" (priMask) );
 282              		.loc 1 553 0
 283 0008 7B68     		ldr	r3, [r7, #4]
 284              	@ 553 "../cmsis/core_cm3.c" 1
 285 000a 83F31088 		MSR primask, r3
 286              	@ 0 "" 2
 554:../cmsis/core_cm3.c **** }
 287              		.loc 1 554 0
 288              		.thumb
 289 000e 0C37     		adds	r7, r7, #12
 290              		.cfi_def_cfa_offset 4
 291 0010 BD46     		mov	sp, r7
 292              		.cfi_def_cfa_register 13
 293              		@ sp needed
 294 0012 5DF8047B 		ldr	r7, [sp], #4
 295              		.cfi_restore 7
 296              		.cfi_def_cfa_offset 0
 297 0016 7047     		bx	lr
 298              		.cfi_endproc
 299              	.LFE7:
 301              		.section	.text.__get_FAULTMASK,"ax",%progbits
 302              		.align	2
 303              		.global	__get_FAULTMASK
 304              		.thumb
 305              		.thumb_func
 307              	__get_FAULTMASK:
 308              	.LFB8:
 555:../cmsis/core_cm3.c **** 
 556:../cmsis/core_cm3.c **** /**
 557:../cmsis/core_cm3.c ****  * @brief  Return the Fault Mask value
 558:../cmsis/core_cm3.c ****  *
 559:../cmsis/core_cm3.c ****  * @return FaultMask
 560:../cmsis/core_cm3.c ****  *
 561:../cmsis/core_cm3.c ****  * Return the content of the fault mask register
 562:../cmsis/core_cm3.c ****  */
 563:../cmsis/core_cm3.c **** uint32_t __get_FAULTMASK(void)
 564:../cmsis/core_cm3.c **** {
 309              		.loc 1 564 0
 310              		.cfi_startproc
 311              		@ args = 0, pretend = 0, frame = 8
 312              		@ frame_needed = 1, uses_anonymous_args = 0
 313              		@ link register save eliminated.
 314 0000 80B4     		push	{r7}
 315              		.cfi_def_cfa_offset 4
 316              		.cfi_offset 7, -4
 317 0002 83B0     		sub	sp, sp, #12
 318              		.cfi_def_cfa_offset 16
 319 0004 00AF     		add	r7, sp, #0
 320              		.cfi_def_cfa_register 7
 565:../cmsis/core_cm3.c ****   uint32_t result=0;
 321              		.loc 1 565 0
 322 0006 0023     		movs	r3, #0
 323 0008 7B60     		str	r3, [r7, #4]
 566:../cmsis/core_cm3.c ****   
 567:../cmsis/core_cm3.c ****   __ASM volatile ("MRS %0, faultmask" : "=r" (result) );
 324              		.loc 1 567 0
 325              	@ 567 "../cmsis/core_cm3.c" 1
 326 000a EFF31383 		MRS r3, faultmask
 327              	@ 0 "" 2
 328              		.thumb
 329 000e 7B60     		str	r3, [r7, #4]
 568:../cmsis/core_cm3.c ****   return(result);
 330              		.loc 1 568 0
 331 0010 7B68     		ldr	r3, [r7, #4]
 569:../cmsis/core_cm3.c **** }
 332              		.loc 1 569 0
 333 0012 1846     		mov	r0, r3
 334 0014 0C37     		adds	r7, r7, #12
 335              		.cfi_def_cfa_offset 4
 336 0016 BD46     		mov	sp, r7
 337              		.cfi_def_cfa_register 13
 338              		@ sp needed
 339 0018 5DF8047B 		ldr	r7, [sp], #4
 340              		.cfi_restore 7
 341              		.cfi_def_cfa_offset 0
 342 001c 7047     		bx	lr
 343              		.cfi_endproc
 344              	.LFE8:
 346 001e 00BF     		.section	.text.__set_FAULTMASK,"ax",%progbits
 347              		.align	2
 348              		.global	__set_FAULTMASK
 349              		.thumb
 350              		.thumb_func
 352              	__set_FAULTMASK:
 353              	.LFB9:
 570:../cmsis/core_cm3.c **** 
 571:../cmsis/core_cm3.c **** /**
 572:../cmsis/core_cm3.c ****  * @brief  Set the Fault Mask value
 573:../cmsis/core_cm3.c ****  *
 574:../cmsis/core_cm3.c ****  * @param  faultMask  faultMask value
 575:../cmsis/core_cm3.c ****  *
 576:../cmsis/core_cm3.c ****  * Set the fault mask register
 577:../cmsis/core_cm3.c ****  */
 578:../cmsis/core_cm3.c **** void __set_FAULTMASK(uint32_t faultMask)
 579:../cmsis/core_cm3.c **** {
 354              		.loc 1 579 0
 355              		.cfi_startproc
 356              		@ args = 0, pretend = 0, frame = 8
 357              		@ frame_needed = 1, uses_anonymous_args = 0
 358              		@ link register save eliminated.
 359 0000 80B4     		push	{r7}
 360              		.cfi_def_cfa_offset 4
 361              		.cfi_offset 7, -4
 362 0002 83B0     		sub	sp, sp, #12
 363              		.cfi_def_cfa_offset 16
 364 0004 00AF     		add	r7, sp, #0
 365              		.cfi_def_cfa_register 7
 366 0006 7860     		str	r0, [r7, #4]
 580:../cmsis/core_cm3.c ****   __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) );
 367              		.loc 1 580 0
 368 0008 7B68     		ldr	r3, [r7, #4]
 369              	@ 580 "../cmsis/core_cm3.c" 1
 370 000a 83F31388 		MSR faultmask, r3
 371              	@ 0 "" 2
 581:../cmsis/core_cm3.c **** }
 372              		.loc 1 581 0
 373              		.thumb
 374 000e 0C37     		adds	r7, r7, #12
 375              		.cfi_def_cfa_offset 4
 376 0010 BD46     		mov	sp, r7
 377              		.cfi_def_cfa_register 13
 378              		@ sp needed
 379 0012 5DF8047B 		ldr	r7, [sp], #4
 380              		.cfi_restore 7
 381              		.cfi_def_cfa_offset 0
 382 0016 7047     		bx	lr
 383              		.cfi_endproc
 384              	.LFE9:
 386              		.section	.text.__get_CONTROL,"ax",%progbits
 387              		.align	2
 388              		.global	__get_CONTROL
 389              		.thumb
 390              		.thumb_func
 392              	__get_CONTROL:
 393              	.LFB10:
 582:../cmsis/core_cm3.c **** 
 583:../cmsis/core_cm3.c **** /**
 584:../cmsis/core_cm3.c ****  * @brief  Return the Control Register value
 585:../cmsis/core_cm3.c **** * 
 586:../cmsis/core_cm3.c **** *  @return Control value
 587:../cmsis/core_cm3.c ****  *
 588:../cmsis/core_cm3.c ****  * Return the content of the control register
 589:../cmsis/core_cm3.c ****  */
 590:../cmsis/core_cm3.c **** uint32_t __get_CONTROL(void)
 591:../cmsis/core_cm3.c **** {
 394              		.loc 1 591 0
 395              		.cfi_startproc
 396              		@ args = 0, pretend = 0, frame = 8
 397              		@ frame_needed = 1, uses_anonymous_args = 0
 398              		@ link register save eliminated.
 399 0000 80B4     		push	{r7}
 400              		.cfi_def_cfa_offset 4
 401              		.cfi_offset 7, -4
 402 0002 83B0     		sub	sp, sp, #12
 403              		.cfi_def_cfa_offset 16
 404 0004 00AF     		add	r7, sp, #0
 405              		.cfi_def_cfa_register 7
 592:../cmsis/core_cm3.c ****   uint32_t result=0;
 406              		.loc 1 592 0
 407 0006 0023     		movs	r3, #0
 408 0008 7B60     		str	r3, [r7, #4]
 593:../cmsis/core_cm3.c **** 
 594:../cmsis/core_cm3.c ****   __ASM volatile ("MRS %0, control" : "=r" (result) );
 409              		.loc 1 594 0
 410              	@ 594 "../cmsis/core_cm3.c" 1
 411 000a EFF31483 		MRS r3, control
 412              	@ 0 "" 2
 413              		.thumb
 414 000e 7B60     		str	r3, [r7, #4]
 595:../cmsis/core_cm3.c ****   return(result);
 415              		.loc 1 595 0
 416 0010 7B68     		ldr	r3, [r7, #4]
 596:../cmsis/core_cm3.c **** }
 417              		.loc 1 596 0
 418 0012 1846     		mov	r0, r3
 419 0014 0C37     		adds	r7, r7, #12
 420              		.cfi_def_cfa_offset 4
 421 0016 BD46     		mov	sp, r7
 422              		.cfi_def_cfa_register 13
 423              		@ sp needed
 424 0018 5DF8047B 		ldr	r7, [sp], #4
 425              		.cfi_restore 7
 426              		.cfi_def_cfa_offset 0
 427 001c 7047     		bx	lr
 428              		.cfi_endproc
 429              	.LFE10:
 431 001e 00BF     		.section	.text.__set_CONTROL,"ax",%progbits
 432              		.align	2
 433              		.global	__set_CONTROL
 434              		.thumb
 435              		.thumb_func
 437              	__set_CONTROL:
 438              	.LFB11:
 597:../cmsis/core_cm3.c **** 
 598:../cmsis/core_cm3.c **** /**
 599:../cmsis/core_cm3.c ****  * @brief  Set the Control Register value
 600:../cmsis/core_cm3.c ****  *
 601:../cmsis/core_cm3.c ****  * @param  control  Control value
 602:../cmsis/core_cm3.c ****  *
 603:../cmsis/core_cm3.c ****  * Set the control register
 604:../cmsis/core_cm3.c ****  */
 605:../cmsis/core_cm3.c **** void __set_CONTROL(uint32_t control)
 606:../cmsis/core_cm3.c **** {
 439              		.loc 1 606 0
 440              		.cfi_startproc
 441              		@ args = 0, pretend = 0, frame = 8
 442              		@ frame_needed = 1, uses_anonymous_args = 0
 443              		@ link register save eliminated.
 444 0000 80B4     		push	{r7}
 445              		.cfi_def_cfa_offset 4
 446              		.cfi_offset 7, -4
 447 0002 83B0     		sub	sp, sp, #12
 448              		.cfi_def_cfa_offset 16
 449 0004 00AF     		add	r7, sp, #0
 450              		.cfi_def_cfa_register 7
 451 0006 7860     		str	r0, [r7, #4]
 607:../cmsis/core_cm3.c ****   __ASM volatile ("MSR control, %0" : : "r" (control) );
 452              		.loc 1 607 0
 453 0008 7B68     		ldr	r3, [r7, #4]
 454              	@ 607 "../cmsis/core_cm3.c" 1
 455 000a 83F31488 		MSR control, r3
 456              	@ 0 "" 2
 608:../cmsis/core_cm3.c **** }
 457              		.loc 1 608 0
 458              		.thumb
 459 000e 0C37     		adds	r7, r7, #12
 460              		.cfi_def_cfa_offset 4
 461 0010 BD46     		mov	sp, r7
 462              		.cfi_def_cfa_register 13
 463              		@ sp needed
 464 0012 5DF8047B 		ldr	r7, [sp], #4
 465              		.cfi_restore 7
 466              		.cfi_def_cfa_offset 0
 467 0016 7047     		bx	lr
 468              		.cfi_endproc
 469              	.LFE11:
 471              		.section	.text.__REV,"ax",%progbits
 472              		.align	2
 473              		.global	__REV
 474              		.thumb
 475              		.thumb_func
 477              	__REV:
 478              	.LFB12:
 609:../cmsis/core_cm3.c **** 
 610:../cmsis/core_cm3.c **** 
 611:../cmsis/core_cm3.c **** /**
 612:../cmsis/core_cm3.c ****  * @brief  Reverse byte order in integer value
 613:../cmsis/core_cm3.c ****  *
 614:../cmsis/core_cm3.c ****  * @param  value  value to reverse
 615:../cmsis/core_cm3.c ****  * @return        reversed value
 616:../cmsis/core_cm3.c ****  *
 617:../cmsis/core_cm3.c ****  * Reverse byte order in integer value
 618:../cmsis/core_cm3.c ****  */
 619:../cmsis/core_cm3.c **** uint32_t __REV(uint32_t value)
 620:../cmsis/core_cm3.c **** {
 479              		.loc 1 620 0
 480              		.cfi_startproc
 481              		@ args = 0, pretend = 0, frame = 16
 482              		@ frame_needed = 1, uses_anonymous_args = 0
 483              		@ link register save eliminated.
 484 0000 80B4     		push	{r7}
 485              		.cfi_def_cfa_offset 4
 486              		.cfi_offset 7, -4
 487 0002 85B0     		sub	sp, sp, #20
 488              		.cfi_def_cfa_offset 24
 489 0004 00AF     		add	r7, sp, #0
 490              		.cfi_def_cfa_register 7
 491 0006 7860     		str	r0, [r7, #4]
 621:../cmsis/core_cm3.c ****   uint32_t result=0;
 492              		.loc 1 621 0
 493 0008 0023     		movs	r3, #0
 494 000a FB60     		str	r3, [r7, #12]
 622:../cmsis/core_cm3.c ****   
 623:../cmsis/core_cm3.c ****   __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
 495              		.loc 1 623 0
 496 000c 7B68     		ldr	r3, [r7, #4]
 497              	@ 623 "../cmsis/core_cm3.c" 1
 498 000e 1BBA     		rev r3, r3
 499              	@ 0 "" 2
 500              		.thumb
 501 0010 FB60     		str	r3, [r7, #12]
 624:../cmsis/core_cm3.c ****   return(result);
 502              		.loc 1 624 0
 503 0012 FB68     		ldr	r3, [r7, #12]
 625:../cmsis/core_cm3.c **** }
 504              		.loc 1 625 0
 505 0014 1846     		mov	r0, r3
 506 0016 1437     		adds	r7, r7, #20
 507              		.cfi_def_cfa_offset 4
 508 0018 BD46     		mov	sp, r7
 509              		.cfi_def_cfa_register 13
 510              		@ sp needed
 511 001a 5DF8047B 		ldr	r7, [sp], #4
 512              		.cfi_restore 7
 513              		.cfi_def_cfa_offset 0
 514 001e 7047     		bx	lr
 515              		.cfi_endproc
 516              	.LFE12:
 518              		.section	.text.__REV16,"ax",%progbits
 519              		.align	2
 520              		.global	__REV16
 521              		.thumb
 522              		.thumb_func
 524              	__REV16:
 525              	.LFB13:
 626:../cmsis/core_cm3.c **** 
 627:../cmsis/core_cm3.c **** /**
 628:../cmsis/core_cm3.c ****  * @brief  Reverse byte order in unsigned short value
 629:../cmsis/core_cm3.c ****  *
 630:../cmsis/core_cm3.c ****  * @param  value  value to reverse
 631:../cmsis/core_cm3.c ****  * @return        reversed value
 632:../cmsis/core_cm3.c ****  *
 633:../cmsis/core_cm3.c ****  * Reverse byte order in unsigned short value
 634:../cmsis/core_cm3.c ****  */
 635:../cmsis/core_cm3.c **** uint32_t __REV16(uint16_t value)
 636:../cmsis/core_cm3.c **** {
 526              		.loc 1 636 0
 527              		.cfi_startproc
 528              		@ args = 0, pretend = 0, frame = 16
 529              		@ frame_needed = 1, uses_anonymous_args = 0
 530              		@ link register save eliminated.
 531 0000 80B4     		push	{r7}
 532              		.cfi_def_cfa_offset 4
 533              		.cfi_offset 7, -4
 534 0002 85B0     		sub	sp, sp, #20
 535              		.cfi_def_cfa_offset 24
 536 0004 00AF     		add	r7, sp, #0
 537              		.cfi_def_cfa_register 7
 538 0006 0346     		mov	r3, r0
 539 0008 FB80     		strh	r3, [r7, #6]	@ movhi
 637:../cmsis/core_cm3.c ****   uint32_t result=0;
 540              		.loc 1 637 0
 541 000a 0023     		movs	r3, #0
 542 000c FB60     		str	r3, [r7, #12]
 638:../cmsis/core_cm3.c ****   
 639:../cmsis/core_cm3.c ****   __ASM volatile ("rev16 %0, %1" : "=r" (result) : "r" (value) );
 543              		.loc 1 639 0
 544 000e FB88     		ldrh	r3, [r7, #6]	@ movhi
 545              	@ 639 "../cmsis/core_cm3.c" 1
 546 0010 5BBA     		rev16 r3, r3
 547              	@ 0 "" 2
 548              		.thumb
 549 0012 FB60     		str	r3, [r7, #12]
 640:../cmsis/core_cm3.c ****   return(result);
 550              		.loc 1 640 0
 551 0014 FB68     		ldr	r3, [r7, #12]
 641:../cmsis/core_cm3.c **** }
 552              		.loc 1 641 0
 553 0016 1846     		mov	r0, r3
 554 0018 1437     		adds	r7, r7, #20
 555              		.cfi_def_cfa_offset 4
 556 001a BD46     		mov	sp, r7
 557              		.cfi_def_cfa_register 13
 558              		@ sp needed
 559 001c 5DF8047B 		ldr	r7, [sp], #4
 560              		.cfi_restore 7
 561              		.cfi_def_cfa_offset 0
 562 0020 7047     		bx	lr
 563              		.cfi_endproc
 564              	.LFE13:
 566              		.section	.text.__REVSH,"ax",%progbits
 567              		.align	2
 568              		.global	__REVSH
 569              		.thumb
 570              		.thumb_func
 572              	__REVSH:
 573              	.LFB14:
 642:../cmsis/core_cm3.c **** 
 643:../cmsis/core_cm3.c **** /**
 644:../cmsis/core_cm3.c ****  * @brief  Reverse byte order in signed short value with sign extension to integer
 645:../cmsis/core_cm3.c ****  *
 646:../cmsis/core_cm3.c ****  * @param  value  value to reverse
 647:../cmsis/core_cm3.c ****  * @return        reversed value
 648:../cmsis/core_cm3.c ****  *
 649:../cmsis/core_cm3.c ****  * Reverse byte order in signed short value with sign extension to integer
 650:../cmsis/core_cm3.c ****  */
 651:../cmsis/core_cm3.c **** int32_t __REVSH(int16_t value)
 652:../cmsis/core_cm3.c **** {
 574              		.loc 1 652 0
 575              		.cfi_startproc
 576              		@ args = 0, pretend = 0, frame = 16
 577              		@ frame_needed = 1, uses_anonymous_args = 0
 578              		@ link register save eliminated.
 579 0000 80B4     		push	{r7}
 580              		.cfi_def_cfa_offset 4
 581              		.cfi_offset 7, -4
 582 0002 85B0     		sub	sp, sp, #20
 583              		.cfi_def_cfa_offset 24
 584 0004 00AF     		add	r7, sp, #0
 585              		.cfi_def_cfa_register 7
 586 0006 0346     		mov	r3, r0
 587 0008 FB80     		strh	r3, [r7, #6]	@ movhi
 653:../cmsis/core_cm3.c ****   uint32_t result=0;
 588              		.loc 1 653 0
 589 000a 0023     		movs	r3, #0
 590 000c FB60     		str	r3, [r7, #12]
 654:../cmsis/core_cm3.c ****   
 655:../cmsis/core_cm3.c ****   __ASM volatile ("revsh %0, %1" : "=r" (result) : "r" (value) );
 591              		.loc 1 655 0
 592 000e FB88     		ldrh	r3, [r7, #6]	@ movhi
 593              	@ 655 "../cmsis/core_cm3.c" 1
 594 0010 DBBA     		revsh r3, r3
 595              	@ 0 "" 2
 596              		.thumb
 597 0012 FB60     		str	r3, [r7, #12]
 656:../cmsis/core_cm3.c ****   return(result);
 598              		.loc 1 656 0
 599 0014 FB68     		ldr	r3, [r7, #12]
 657:../cmsis/core_cm3.c **** }
 600              		.loc 1 657 0
 601 0016 1846     		mov	r0, r3
 602 0018 1437     		adds	r7, r7, #20
 603              		.cfi_def_cfa_offset 4
 604 001a BD46     		mov	sp, r7
 605              		.cfi_def_cfa_register 13
 606              		@ sp needed
 607 001c 5DF8047B 		ldr	r7, [sp], #4
 608              		.cfi_restore 7
 609              		.cfi_def_cfa_offset 0
 610 0020 7047     		bx	lr
 611              		.cfi_endproc
 612              	.LFE14:
 614              		.section	.text.__RBIT,"ax",%progbits
 615              		.align	2
 616              		.global	__RBIT
 617              		.thumb
 618              		.thumb_func
 620              	__RBIT:
 621              	.LFB15:
 658:../cmsis/core_cm3.c **** 
 659:../cmsis/core_cm3.c **** /**
 660:../cmsis/core_cm3.c ****  * @brief  Reverse bit order of value
 661:../cmsis/core_cm3.c ****  *
 662:../cmsis/core_cm3.c ****  * @param  value  value to reverse
 663:../cmsis/core_cm3.c ****  * @return        reversed value
 664:../cmsis/core_cm3.c ****  *
 665:../cmsis/core_cm3.c ****  * Reverse bit order of value
 666:../cmsis/core_cm3.c ****  */
 667:../cmsis/core_cm3.c **** uint32_t __RBIT(uint32_t value)
 668:../cmsis/core_cm3.c **** {
 622              		.loc 1 668 0
 623              		.cfi_startproc
 624              		@ args = 0, pretend = 0, frame = 16
 625              		@ frame_needed = 1, uses_anonymous_args = 0
 626              		@ link register save eliminated.
 627 0000 80B4     		push	{r7}
 628              		.cfi_def_cfa_offset 4
 629              		.cfi_offset 7, -4
 630 0002 85B0     		sub	sp, sp, #20
 631              		.cfi_def_cfa_offset 24
 632 0004 00AF     		add	r7, sp, #0
 633              		.cfi_def_cfa_register 7
 634 0006 7860     		str	r0, [r7, #4]
 669:../cmsis/core_cm3.c ****   uint32_t result=0;
 635              		.loc 1 669 0
 636 0008 0023     		movs	r3, #0
 637 000a FB60     		str	r3, [r7, #12]
 670:../cmsis/core_cm3.c ****   
 671:../cmsis/core_cm3.c ****    __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 638              		.loc 1 671 0
 639 000c 7B68     		ldr	r3, [r7, #4]
 640              	@ 671 "../cmsis/core_cm3.c" 1
 641 000e 93FAA3F3 		rbit r3, r3
 642              	@ 0 "" 2
 643              		.thumb
 644 0012 FB60     		str	r3, [r7, #12]
 672:../cmsis/core_cm3.c ****    return(result);
 645              		.loc 1 672 0
 646 0014 FB68     		ldr	r3, [r7, #12]
 673:../cmsis/core_cm3.c **** }
 647              		.loc 1 673 0
 648 0016 1846     		mov	r0, r3
 649 0018 1437     		adds	r7, r7, #20
 650              		.cfi_def_cfa_offset 4
 651 001a BD46     		mov	sp, r7
 652              		.cfi_def_cfa_register 13
 653              		@ sp needed
 654 001c 5DF8047B 		ldr	r7, [sp], #4
 655              		.cfi_restore 7
 656              		.cfi_def_cfa_offset 0
 657 0020 7047     		bx	lr
 658              		.cfi_endproc
 659              	.LFE15:
 661 0022 00BF     		.section	.text.__LDREXB,"ax",%progbits
 662              		.align	2
 663              		.global	__LDREXB
 664              		.thumb
 665              		.thumb_func
 667              	__LDREXB:
 668              	.LFB16:
 674:../cmsis/core_cm3.c **** 
 675:../cmsis/core_cm3.c **** /**
 676:../cmsis/core_cm3.c ****  * @brief  LDR Exclusive (8 bit)
 677:../cmsis/core_cm3.c ****  *
 678:../cmsis/core_cm3.c ****  * @param  *addr  address pointer
 679:../cmsis/core_cm3.c ****  * @return        value of (*address)
 680:../cmsis/core_cm3.c ****  *
 681:../cmsis/core_cm3.c ****  * Exclusive LDR command for 8 bit value
 682:../cmsis/core_cm3.c ****  */
 683:../cmsis/core_cm3.c **** uint8_t __LDREXB(uint8_t *addr)
 684:../cmsis/core_cm3.c **** {
 669              		.loc 1 684 0
 670              		.cfi_startproc
 671              		@ args = 0, pretend = 0, frame = 16
 672              		@ frame_needed = 1, uses_anonymous_args = 0
 673              		@ link register save eliminated.
 674 0000 80B4     		push	{r7}
 675              		.cfi_def_cfa_offset 4
 676              		.cfi_offset 7, -4
 677 0002 85B0     		sub	sp, sp, #20
 678              		.cfi_def_cfa_offset 24
 679 0004 00AF     		add	r7, sp, #0
 680              		.cfi_def_cfa_register 7
 681 0006 7860     		str	r0, [r7, #4]
 685:../cmsis/core_cm3.c ****     uint8_t result=0;
 682              		.loc 1 685 0
 683 0008 0023     		movs	r3, #0
 684 000a FB73     		strb	r3, [r7, #15]
 686:../cmsis/core_cm3.c ****   
 687:../cmsis/core_cm3.c ****    __ASM volatile ("ldrexb %0, [%1]" : "=r" (result) : "r" (addr) );
 685              		.loc 1 687 0
 686 000c 7B68     		ldr	r3, [r7, #4]
 687              	@ 687 "../cmsis/core_cm3.c" 1
 688 000e D3E84F3F 		ldrexb r3, [r3]
 689              	@ 0 "" 2
 690              		.thumb
 691 0012 FB73     		strb	r3, [r7, #15]
 688:../cmsis/core_cm3.c ****    return(result);
 692              		.loc 1 688 0
 693 0014 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 689:../cmsis/core_cm3.c **** }
 694              		.loc 1 689 0
 695 0016 1846     		mov	r0, r3
 696 0018 1437     		adds	r7, r7, #20
 697              		.cfi_def_cfa_offset 4
 698 001a BD46     		mov	sp, r7
 699              		.cfi_def_cfa_register 13
 700              		@ sp needed
 701 001c 5DF8047B 		ldr	r7, [sp], #4
 702              		.cfi_restore 7
 703              		.cfi_def_cfa_offset 0
 704 0020 7047     		bx	lr
 705              		.cfi_endproc
 706              	.LFE16:
 708 0022 00BF     		.section	.text.__LDREXH,"ax",%progbits
 709              		.align	2
 710              		.global	__LDREXH
 711              		.thumb
 712              		.thumb_func
 714              	__LDREXH:
 715              	.LFB17:
 690:../cmsis/core_cm3.c **** 
 691:../cmsis/core_cm3.c **** /**
 692:../cmsis/core_cm3.c ****  * @brief  LDR Exclusive (16 bit)
 693:../cmsis/core_cm3.c ****  *
 694:../cmsis/core_cm3.c ****  * @param  *addr  address pointer
 695:../cmsis/core_cm3.c ****  * @return        value of (*address)
 696:../cmsis/core_cm3.c ****  *
 697:../cmsis/core_cm3.c ****  * Exclusive LDR command for 16 bit values
 698:../cmsis/core_cm3.c ****  */
 699:../cmsis/core_cm3.c **** uint16_t __LDREXH(uint16_t *addr)
 700:../cmsis/core_cm3.c **** {
 716              		.loc 1 700 0
 717              		.cfi_startproc
 718              		@ args = 0, pretend = 0, frame = 16
 719              		@ frame_needed = 1, uses_anonymous_args = 0
 720              		@ link register save eliminated.
 721 0000 80B4     		push	{r7}
 722              		.cfi_def_cfa_offset 4
 723              		.cfi_offset 7, -4
 724 0002 85B0     		sub	sp, sp, #20
 725              		.cfi_def_cfa_offset 24
 726 0004 00AF     		add	r7, sp, #0
 727              		.cfi_def_cfa_register 7
 728 0006 7860     		str	r0, [r7, #4]
 701:../cmsis/core_cm3.c ****     uint16_t result=0;
 729              		.loc 1 701 0
 730 0008 0023     		movs	r3, #0
 731 000a FB81     		strh	r3, [r7, #14]	@ movhi
 702:../cmsis/core_cm3.c ****   
 703:../cmsis/core_cm3.c ****    __ASM volatile ("ldrexh %0, [%1]" : "=r" (result) : "r" (addr) );
 732              		.loc 1 703 0
 733 000c 7B68     		ldr	r3, [r7, #4]
 734              	@ 703 "../cmsis/core_cm3.c" 1
 735 000e D3E85F3F 		ldrexh r3, [r3]
 736              	@ 0 "" 2
 737              		.thumb
 738 0012 FB81     		strh	r3, [r7, #14]	@ movhi
 704:../cmsis/core_cm3.c ****    return(result);
 739              		.loc 1 704 0
 740 0014 FB89     		ldrh	r3, [r7, #14]
 705:../cmsis/core_cm3.c **** }
 741              		.loc 1 705 0
 742 0016 1846     		mov	r0, r3
 743 0018 1437     		adds	r7, r7, #20
 744              		.cfi_def_cfa_offset 4
 745 001a BD46     		mov	sp, r7
 746              		.cfi_def_cfa_register 13
 747              		@ sp needed
 748 001c 5DF8047B 		ldr	r7, [sp], #4
 749              		.cfi_restore 7
 750              		.cfi_def_cfa_offset 0
 751 0020 7047     		bx	lr
 752              		.cfi_endproc
 753              	.LFE17:
 755 0022 00BF     		.section	.text.__LDREXW,"ax",%progbits
 756              		.align	2
 757              		.global	__LDREXW
 758              		.thumb
 759              		.thumb_func
 761              	__LDREXW:
 762              	.LFB18:
 706:../cmsis/core_cm3.c **** 
 707:../cmsis/core_cm3.c **** /**
 708:../cmsis/core_cm3.c ****  * @brief  LDR Exclusive (32 bit)
 709:../cmsis/core_cm3.c ****  *
 710:../cmsis/core_cm3.c ****  * @param  *addr  address pointer
 711:../cmsis/core_cm3.c ****  * @return        value of (*address)
 712:../cmsis/core_cm3.c ****  *
 713:../cmsis/core_cm3.c ****  * Exclusive LDR command for 32 bit values
 714:../cmsis/core_cm3.c ****  */
 715:../cmsis/core_cm3.c **** uint32_t __LDREXW(uint32_t *addr)
 716:../cmsis/core_cm3.c **** {
 763              		.loc 1 716 0
 764              		.cfi_startproc
 765              		@ args = 0, pretend = 0, frame = 16
 766              		@ frame_needed = 1, uses_anonymous_args = 0
 767              		@ link register save eliminated.
 768 0000 80B4     		push	{r7}
 769              		.cfi_def_cfa_offset 4
 770              		.cfi_offset 7, -4
 771 0002 85B0     		sub	sp, sp, #20
 772              		.cfi_def_cfa_offset 24
 773 0004 00AF     		add	r7, sp, #0
 774              		.cfi_def_cfa_register 7
 775 0006 7860     		str	r0, [r7, #4]
 717:../cmsis/core_cm3.c ****     uint32_t result=0;
 776              		.loc 1 717 0
 777 0008 0023     		movs	r3, #0
 778 000a FB60     		str	r3, [r7, #12]
 718:../cmsis/core_cm3.c ****   
 719:../cmsis/core_cm3.c ****    __ASM volatile ("ldrex %0, [%1]" : "=r" (result) : "r" (addr) );
 779              		.loc 1 719 0
 780 000c 7B68     		ldr	r3, [r7, #4]
 781              	@ 719 "../cmsis/core_cm3.c" 1
 782 000e 53E8003F 		ldrex r3, [r3]
 783              	@ 0 "" 2
 784              		.thumb
 785 0012 FB60     		str	r3, [r7, #12]
 720:../cmsis/core_cm3.c ****    return(result);
 786              		.loc 1 720 0
 787 0014 FB68     		ldr	r3, [r7, #12]
 721:../cmsis/core_cm3.c **** }
 788              		.loc 1 721 0
 789 0016 1846     		mov	r0, r3
 790 0018 1437     		adds	r7, r7, #20
 791              		.cfi_def_cfa_offset 4
 792 001a BD46     		mov	sp, r7
 793              		.cfi_def_cfa_register 13
 794              		@ sp needed
 795 001c 5DF8047B 		ldr	r7, [sp], #4
 796              		.cfi_restore 7
 797              		.cfi_def_cfa_offset 0
 798 0020 7047     		bx	lr
 799              		.cfi_endproc
 800              	.LFE18:
 802 0022 00BF     		.section	.text.__STREXB,"ax",%progbits
 803              		.align	2
 804              		.global	__STREXB
 805              		.thumb
 806              		.thumb_func
 808              	__STREXB:
 809              	.LFB19:
 722:../cmsis/core_cm3.c **** 
 723:../cmsis/core_cm3.c **** /**
 724:../cmsis/core_cm3.c ****  * @brief  STR Exclusive (8 bit)
 725:../cmsis/core_cm3.c ****  *
 726:../cmsis/core_cm3.c ****  * @param  value  value to store
 727:../cmsis/core_cm3.c ****  * @param  *addr  address pointer
 728:../cmsis/core_cm3.c ****  * @return        successful / failed
 729:../cmsis/core_cm3.c ****  *
 730:../cmsis/core_cm3.c ****  * Exclusive STR command for 8 bit values
 731:../cmsis/core_cm3.c ****  */
 732:../cmsis/core_cm3.c **** uint32_t __STREXB(uint8_t value, uint8_t *addr)
 733:../cmsis/core_cm3.c **** {
 810              		.loc 1 733 0
 811              		.cfi_startproc
 812              		@ args = 0, pretend = 0, frame = 16
 813              		@ frame_needed = 1, uses_anonymous_args = 0
 814              		@ link register save eliminated.
 815 0000 80B4     		push	{r7}
 816              		.cfi_def_cfa_offset 4
 817              		.cfi_offset 7, -4
 818 0002 85B0     		sub	sp, sp, #20
 819              		.cfi_def_cfa_offset 24
 820 0004 00AF     		add	r7, sp, #0
 821              		.cfi_def_cfa_register 7
 822 0006 0346     		mov	r3, r0
 823 0008 3960     		str	r1, [r7]
 824 000a FB71     		strb	r3, [r7, #7]
 734:../cmsis/core_cm3.c ****    uint32_t result=0;
 825              		.loc 1 734 0
 826 000c 0023     		movs	r3, #0
 827 000e FB60     		str	r3, [r7, #12]
 735:../cmsis/core_cm3.c ****    __ASM volatile ("strexb %0, %2, [%1]" : "=&r" (result) : "r" (addr), "r" (value) );
 828              		.loc 1 735 0
 829 0010 3A68     		ldr	r2, [r7]
 830 0012 F979     		ldrb	r1, [r7, #7]
 831              	@ 735 "../cmsis/core_cm3.c" 1
 832 0014 C2E8431F 		strexb r3, r1, [r2]
 833              	@ 0 "" 2
 834              		.thumb
 835 0018 FB60     		str	r3, [r7, #12]
 736:../cmsis/core_cm3.c ****    return(result);
 836              		.loc 1 736 0
 837 001a FB68     		ldr	r3, [r7, #12]
 737:../cmsis/core_cm3.c **** }
 838              		.loc 1 737 0
 839 001c 1846     		mov	r0, r3
 840 001e 1437     		adds	r7, r7, #20
 841              		.cfi_def_cfa_offset 4
 842 0020 BD46     		mov	sp, r7
 843              		.cfi_def_cfa_register 13
 844              		@ sp needed
 845 0022 5DF8047B 		ldr	r7, [sp], #4
 846              		.cfi_restore 7
 847              		.cfi_def_cfa_offset 0
 848 0026 7047     		bx	lr
 849              		.cfi_endproc
 850              	.LFE19:
 852              		.section	.text.__STREXH,"ax",%progbits
 853              		.align	2
 854              		.global	__STREXH
 855              		.thumb
 856              		.thumb_func
 858              	__STREXH:
 859              	.LFB20:
 738:../cmsis/core_cm3.c **** 
 739:../cmsis/core_cm3.c **** /**
 740:../cmsis/core_cm3.c ****  * @brief  STR Exclusive (16 bit)
 741:../cmsis/core_cm3.c ****  *
 742:../cmsis/core_cm3.c ****  * @param  value  value to store
 743:../cmsis/core_cm3.c ****  * @param  *addr  address pointer
 744:../cmsis/core_cm3.c ****  * @return        successful / failed
 745:../cmsis/core_cm3.c ****  *
 746:../cmsis/core_cm3.c ****  * Exclusive STR command for 16 bit values
 747:../cmsis/core_cm3.c ****  */
 748:../cmsis/core_cm3.c **** uint32_t __STREXH(uint16_t value, uint16_t *addr)
 749:../cmsis/core_cm3.c **** {
 860              		.loc 1 749 0
 861              		.cfi_startproc
 862              		@ args = 0, pretend = 0, frame = 16
 863              		@ frame_needed = 1, uses_anonymous_args = 0
 864              		@ link register save eliminated.
 865 0000 80B4     		push	{r7}
 866              		.cfi_def_cfa_offset 4
 867              		.cfi_offset 7, -4
 868 0002 85B0     		sub	sp, sp, #20
 869              		.cfi_def_cfa_offset 24
 870 0004 00AF     		add	r7, sp, #0
 871              		.cfi_def_cfa_register 7
 872 0006 0346     		mov	r3, r0
 873 0008 3960     		str	r1, [r7]
 874 000a FB80     		strh	r3, [r7, #6]	@ movhi
 750:../cmsis/core_cm3.c ****    uint32_t result=0;
 875              		.loc 1 750 0
 876 000c 0023     		movs	r3, #0
 877 000e FB60     		str	r3, [r7, #12]
 751:../cmsis/core_cm3.c ****    __ASM volatile ("strexh %0, %2, [%1]" : "=&r" (result) : "r" (addr), "r" (value) );
 878              		.loc 1 751 0
 879 0010 3A68     		ldr	r2, [r7]
 880 0012 F988     		ldrh	r1, [r7, #6]	@ movhi
 881              	@ 751 "../cmsis/core_cm3.c" 1
 882 0014 C2E8531F 		strexh r3, r1, [r2]
 883              	@ 0 "" 2
 884              		.thumb
 885 0018 FB60     		str	r3, [r7, #12]
 752:../cmsis/core_cm3.c ****    return(result);
 886              		.loc 1 752 0
 887 001a FB68     		ldr	r3, [r7, #12]
 753:../cmsis/core_cm3.c **** }
 888              		.loc 1 753 0
 889 001c 1846     		mov	r0, r3
 890 001e 1437     		adds	r7, r7, #20
 891              		.cfi_def_cfa_offset 4
 892 0020 BD46     		mov	sp, r7
 893              		.cfi_def_cfa_register 13
 894              		@ sp needed
 895 0022 5DF8047B 		ldr	r7, [sp], #4
 896              		.cfi_restore 7
 897              		.cfi_def_cfa_offset 0
 898 0026 7047     		bx	lr
 899              		.cfi_endproc
 900              	.LFE20:
 902              		.section	.text.__STREXW,"ax",%progbits
 903              		.align	2
 904              		.global	__STREXW
 905              		.thumb
 906              		.thumb_func
 908              	__STREXW:
 909              	.LFB21:
 754:../cmsis/core_cm3.c **** 
 755:../cmsis/core_cm3.c **** /**
 756:../cmsis/core_cm3.c ****  * @brief  STR Exclusive (32 bit)
 757:../cmsis/core_cm3.c ****  *
 758:../cmsis/core_cm3.c ****  * @param  value  value to store
 759:../cmsis/core_cm3.c ****  * @param  *addr  address pointer
 760:../cmsis/core_cm3.c ****  * @return        successful / failed
 761:../cmsis/core_cm3.c ****  *
 762:../cmsis/core_cm3.c ****  * Exclusive STR command for 32 bit values
 763:../cmsis/core_cm3.c ****  */
 764:../cmsis/core_cm3.c **** uint32_t __STREXW(uint32_t value, uint32_t *addr)
 765:../cmsis/core_cm3.c **** {
 910              		.loc 1 765 0
 911              		.cfi_startproc
 912              		@ args = 0, pretend = 0, frame = 16
 913              		@ frame_needed = 1, uses_anonymous_args = 0
 914              		@ link register save eliminated.
 915 0000 80B4     		push	{r7}
 916              		.cfi_def_cfa_offset 4
 917              		.cfi_offset 7, -4
 918 0002 85B0     		sub	sp, sp, #20
 919              		.cfi_def_cfa_offset 24
 920 0004 00AF     		add	r7, sp, #0
 921              		.cfi_def_cfa_register 7
 922 0006 7860     		str	r0, [r7, #4]
 923 0008 3960     		str	r1, [r7]
 766:../cmsis/core_cm3.c ****    uint32_t result=0;
 924              		.loc 1 766 0
 925 000a 0023     		movs	r3, #0
 926 000c FB60     		str	r3, [r7, #12]
 767:../cmsis/core_cm3.c ****   
 768:../cmsis/core_cm3.c ****    __ASM volatile ("strex %0, %2, [%1]" : "=r" (result) : "r" (addr), "r" (value) );
 927              		.loc 1 768 0
 928 000e 3B68     		ldr	r3, [r7]
 929 0010 7A68     		ldr	r2, [r7, #4]
 930              	@ 768 "../cmsis/core_cm3.c" 1
 931 0012 43E80023 		strex r3, r2, [r3]
 932              	@ 0 "" 2
 933              		.thumb
 934 0016 FB60     		str	r3, [r7, #12]
 769:../cmsis/core_cm3.c ****    return(result);
 935              		.loc 1 769 0
 936 0018 FB68     		ldr	r3, [r7, #12]
 770:../cmsis/core_cm3.c **** }
 937              		.loc 1 770 0
 938 001a 1846     		mov	r0, r3
 939 001c 1437     		adds	r7, r7, #20
 940              		.cfi_def_cfa_offset 4
 941 001e BD46     		mov	sp, r7
 942              		.cfi_def_cfa_register 13
 943              		@ sp needed
 944 0020 5DF8047B 		ldr	r7, [sp], #4
 945              		.cfi_restore 7
 946              		.cfi_def_cfa_offset 0
 947 0024 7047     		bx	lr
 948              		.cfi_endproc
 949              	.LFE21:
 951 0026 00BF     		.text
 952              	.Letext0:
 953              		.file 2 "f:\\eclipse\\gcc\\arm-none-eabi\\include\\machine\\_default_types.h"
 954              		.file 3 "f:\\eclipse\\gcc\\arm-none-eabi\\include\\sys\\_stdint.h"
DEFINED SYMBOLS
                            *ABS*:00000000 core_cm3.c
C:\Users\MISAKA~1.MIS\AppData\Local\Temp\cc1vvk50.s:19     .text.__get_PSP:00000000 $t
C:\Users\MISAKA~1.MIS\AppData\Local\Temp\cc1vvk50.s:24     .text.__get_PSP:00000000 __get_PSP
C:\Users\MISAKA~1.MIS\AppData\Local\Temp\cc1vvk50.s:51     .text.__set_PSP:00000000 $t
C:\Users\MISAKA~1.MIS\AppData\Local\Temp\cc1vvk50.s:56     .text.__set_PSP:00000000 __set_PSP
C:\Users\MISAKA~1.MIS\AppData\Local\Temp\cc1vvk50.s:76     .text.__get_MSP:00000000 $t
C:\Users\MISAKA~1.MIS\AppData\Local\Temp\cc1vvk50.s:81     .text.__get_MSP:00000000 __get_MSP
C:\Users\MISAKA~1.MIS\AppData\Local\Temp\cc1vvk50.s:107    .text.__set_MSP:00000000 $t
C:\Users\MISAKA~1.MIS\AppData\Local\Temp\cc1vvk50.s:112    .text.__set_MSP:00000000 __set_MSP
C:\Users\MISAKA~1.MIS\AppData\Local\Temp\cc1vvk50.s:132    .text.__get_BASEPRI:00000000 $t
C:\Users\MISAKA~1.MIS\AppData\Local\Temp\cc1vvk50.s:137    .text.__get_BASEPRI:00000000 __get_BASEPRI
C:\Users\MISAKA~1.MIS\AppData\Local\Temp\cc1vvk50.s:177    .text.__set_BASEPRI:00000000 $t
C:\Users\MISAKA~1.MIS\AppData\Local\Temp\cc1vvk50.s:182    .text.__set_BASEPRI:00000000 __set_BASEPRI
C:\Users\MISAKA~1.MIS\AppData\Local\Temp\cc1vvk50.s:217    .text.__get_PRIMASK:00000000 $t
C:\Users\MISAKA~1.MIS\AppData\Local\Temp\cc1vvk50.s:222    .text.__get_PRIMASK:00000000 __get_PRIMASK
C:\Users\MISAKA~1.MIS\AppData\Local\Temp\cc1vvk50.s:262    .text.__set_PRIMASK:00000000 $t
C:\Users\MISAKA~1.MIS\AppData\Local\Temp\cc1vvk50.s:267    .text.__set_PRIMASK:00000000 __set_PRIMASK
C:\Users\MISAKA~1.MIS\AppData\Local\Temp\cc1vvk50.s:302    .text.__get_FAULTMASK:00000000 $t
C:\Users\MISAKA~1.MIS\AppData\Local\Temp\cc1vvk50.s:307    .text.__get_FAULTMASK:00000000 __get_FAULTMASK
C:\Users\MISAKA~1.MIS\AppData\Local\Temp\cc1vvk50.s:347    .text.__set_FAULTMASK:00000000 $t
C:\Users\MISAKA~1.MIS\AppData\Local\Temp\cc1vvk50.s:352    .text.__set_FAULTMASK:00000000 __set_FAULTMASK
C:\Users\MISAKA~1.MIS\AppData\Local\Temp\cc1vvk50.s:387    .text.__get_CONTROL:00000000 $t
C:\Users\MISAKA~1.MIS\AppData\Local\Temp\cc1vvk50.s:392    .text.__get_CONTROL:00000000 __get_CONTROL
C:\Users\MISAKA~1.MIS\AppData\Local\Temp\cc1vvk50.s:432    .text.__set_CONTROL:00000000 $t
C:\Users\MISAKA~1.MIS\AppData\Local\Temp\cc1vvk50.s:437    .text.__set_CONTROL:00000000 __set_CONTROL
C:\Users\MISAKA~1.MIS\AppData\Local\Temp\cc1vvk50.s:472    .text.__REV:00000000 $t
C:\Users\MISAKA~1.MIS\AppData\Local\Temp\cc1vvk50.s:477    .text.__REV:00000000 __REV
C:\Users\MISAKA~1.MIS\AppData\Local\Temp\cc1vvk50.s:519    .text.__REV16:00000000 $t
C:\Users\MISAKA~1.MIS\AppData\Local\Temp\cc1vvk50.s:524    .text.__REV16:00000000 __REV16
C:\Users\MISAKA~1.MIS\AppData\Local\Temp\cc1vvk50.s:567    .text.__REVSH:00000000 $t
C:\Users\MISAKA~1.MIS\AppData\Local\Temp\cc1vvk50.s:572    .text.__REVSH:00000000 __REVSH
C:\Users\MISAKA~1.MIS\AppData\Local\Temp\cc1vvk50.s:615    .text.__RBIT:00000000 $t
C:\Users\MISAKA~1.MIS\AppData\Local\Temp\cc1vvk50.s:620    .text.__RBIT:00000000 __RBIT
C:\Users\MISAKA~1.MIS\AppData\Local\Temp\cc1vvk50.s:662    .text.__LDREXB:00000000 $t
C:\Users\MISAKA~1.MIS\AppData\Local\Temp\cc1vvk50.s:667    .text.__LDREXB:00000000 __LDREXB
C:\Users\MISAKA~1.MIS\AppData\Local\Temp\cc1vvk50.s:709    .text.__LDREXH:00000000 $t
C:\Users\MISAKA~1.MIS\AppData\Local\Temp\cc1vvk50.s:714    .text.__LDREXH:00000000 __LDREXH
C:\Users\MISAKA~1.MIS\AppData\Local\Temp\cc1vvk50.s:756    .text.__LDREXW:00000000 $t
C:\Users\MISAKA~1.MIS\AppData\Local\Temp\cc1vvk50.s:761    .text.__LDREXW:00000000 __LDREXW
C:\Users\MISAKA~1.MIS\AppData\Local\Temp\cc1vvk50.s:803    .text.__STREXB:00000000 $t
C:\Users\MISAKA~1.MIS\AppData\Local\Temp\cc1vvk50.s:808    .text.__STREXB:00000000 __STREXB
C:\Users\MISAKA~1.MIS\AppData\Local\Temp\cc1vvk50.s:853    .text.__STREXH:00000000 $t
C:\Users\MISAKA~1.MIS\AppData\Local\Temp\cc1vvk50.s:858    .text.__STREXH:00000000 __STREXH
C:\Users\MISAKA~1.MIS\AppData\Local\Temp\cc1vvk50.s:903    .text.__STREXW:00000000 $t
C:\Users\MISAKA~1.MIS\AppData\Local\Temp\cc1vvk50.s:908    .text.__STREXW:00000000 __STREXW
                     .debug_frame:00000010 $d
                           .group:00000000 wm4.0.2d80f1b5ce3c69d13e258577ddf29668
                           .group:00000000 wm4.features.h.22.2e382148a0560adabf236cddd4e880f4
                           .group:00000000 wm4._default_types.h.15.933e8edd27a65e0b69af4a865eb623d2
                           .group:00000000 wm4._intsup.h.10.35a45952db64d30146faa63a55c20c1c
                           .group:00000000 wm4._stdint.h.10.f76354baea1c7088202064e6f3d4f5e3
                           .group:00000000 wm4.stdint.h.23.373a9d32a9e4c2e88fd347156532d281

NO UNDEFINED SYMBOLS
