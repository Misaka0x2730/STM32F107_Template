   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 6
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.file	"tcp_in.c"
  15              		.text
  16              	.Ltext0:
  17              		.cfi_sections	.debug_frame
  18              		.bss
  19              		.align	2
  20              	inseg:
  21 0000 00000000 		.space	20
  21      00000000 
  21      00000000 
  21      00000000 
  21      00000000 
  22              		.align	2
  23              	tcphdr:
  24 0014 00000000 		.space	4
  25              		.align	2
  26              	iphdr:
  27 0018 00000000 		.space	4
  28              		.align	2
  29              	seqno:
  30 001c 00000000 		.space	4
  31              		.align	2
  32              	ackno:
  33 0020 00000000 		.space	4
  34              	flags:
  35 0024 00       		.space	1
  36 0025 00       		.align	1
  37              	tcplen:
  38 0026 0000     		.space	2
  39              	recv_flags:
  40 0028 00       		.space	1
  41 0029 000000   		.align	2
  42              	recv_data:
  43 002c 00000000 		.space	4
  44              		.comm	tcp_input_pcb,4,4
  45              		.section	.text.tcp_input,"ax",%progbits
  46              		.align	2
  47              		.global	tcp_input
  48              		.thumb
  49              		.thumb_func
  51              	tcp_input:
  52              	.LFB0:
  53              		.file 1 "../lwip-1.4.1/src/core/tcp_in.c"
   1:../lwip-1.4.1/src/core/tcp_in.c **** /**
   2:../lwip-1.4.1/src/core/tcp_in.c ****  * @file
   3:../lwip-1.4.1/src/core/tcp_in.c ****  * Transmission Control Protocol, incoming traffic
   4:../lwip-1.4.1/src/core/tcp_in.c ****  *
   5:../lwip-1.4.1/src/core/tcp_in.c ****  * The input processing functions of the TCP layer.
   6:../lwip-1.4.1/src/core/tcp_in.c ****  *
   7:../lwip-1.4.1/src/core/tcp_in.c ****  * These functions are generally called in the order (ip_input() ->)
   8:../lwip-1.4.1/src/core/tcp_in.c ****  * tcp_input() -> * tcp_process() -> tcp_receive() (-> application).
   9:../lwip-1.4.1/src/core/tcp_in.c ****  * 
  10:../lwip-1.4.1/src/core/tcp_in.c ****  */
  11:../lwip-1.4.1/src/core/tcp_in.c **** 
  12:../lwip-1.4.1/src/core/tcp_in.c **** /*
  13:../lwip-1.4.1/src/core/tcp_in.c ****  * Copyright (c) 2001-2004 Swedish Institute of Computer Science.
  14:../lwip-1.4.1/src/core/tcp_in.c ****  * All rights reserved.
  15:../lwip-1.4.1/src/core/tcp_in.c ****  *
  16:../lwip-1.4.1/src/core/tcp_in.c ****  * Redistribution and use in source and binary forms, with or without modification,
  17:../lwip-1.4.1/src/core/tcp_in.c ****  * are permitted provided that the following conditions are met:
  18:../lwip-1.4.1/src/core/tcp_in.c ****  *
  19:../lwip-1.4.1/src/core/tcp_in.c ****  * 1. Redistributions of source code must retain the above copyright notice,
  20:../lwip-1.4.1/src/core/tcp_in.c ****  *    this list of conditions and the following disclaimer.
  21:../lwip-1.4.1/src/core/tcp_in.c ****  * 2. Redistributions in binary form must reproduce the above copyright notice,
  22:../lwip-1.4.1/src/core/tcp_in.c ****  *    this list of conditions and the following disclaimer in the documentation
  23:../lwip-1.4.1/src/core/tcp_in.c ****  *    and/or other materials provided with the distribution.
  24:../lwip-1.4.1/src/core/tcp_in.c ****  * 3. The name of the author may not be used to endorse or promote products
  25:../lwip-1.4.1/src/core/tcp_in.c ****  *    derived from this software without specific prior written permission.
  26:../lwip-1.4.1/src/core/tcp_in.c ****  *
  27:../lwip-1.4.1/src/core/tcp_in.c ****  * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR IMPLIED
  28:../lwip-1.4.1/src/core/tcp_in.c ****  * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
  29:../lwip-1.4.1/src/core/tcp_in.c ****  * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT
  30:../lwip-1.4.1/src/core/tcp_in.c ****  * SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
  31:../lwip-1.4.1/src/core/tcp_in.c ****  * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT
  32:../lwip-1.4.1/src/core/tcp_in.c ****  * OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  33:../lwip-1.4.1/src/core/tcp_in.c ****  * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  34:../lwip-1.4.1/src/core/tcp_in.c ****  * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING
  35:../lwip-1.4.1/src/core/tcp_in.c ****  * IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY
  36:../lwip-1.4.1/src/core/tcp_in.c ****  * OF SUCH DAMAGE.
  37:../lwip-1.4.1/src/core/tcp_in.c ****  *
  38:../lwip-1.4.1/src/core/tcp_in.c ****  * This file is part of the lwIP TCP/IP stack.
  39:../lwip-1.4.1/src/core/tcp_in.c ****  *
  40:../lwip-1.4.1/src/core/tcp_in.c ****  * Author: Adam Dunkels <adam@sics.se>
  41:../lwip-1.4.1/src/core/tcp_in.c ****  *
  42:../lwip-1.4.1/src/core/tcp_in.c ****  */
  43:../lwip-1.4.1/src/core/tcp_in.c **** 
  44:../lwip-1.4.1/src/core/tcp_in.c **** #include "lwip/opt.h"
  45:../lwip-1.4.1/src/core/tcp_in.c **** 
  46:../lwip-1.4.1/src/core/tcp_in.c **** #if LWIP_TCP /* don't build if not configured for use in lwipopts.h */
  47:../lwip-1.4.1/src/core/tcp_in.c **** 
  48:../lwip-1.4.1/src/core/tcp_in.c **** #include "lwip/tcp_impl.h"
  49:../lwip-1.4.1/src/core/tcp_in.c **** #include "lwip/def.h"
  50:../lwip-1.4.1/src/core/tcp_in.c **** #include "lwip/ip_addr.h"
  51:../lwip-1.4.1/src/core/tcp_in.c **** #include "lwip/netif.h"
  52:../lwip-1.4.1/src/core/tcp_in.c **** #include "lwip/mem.h"
  53:../lwip-1.4.1/src/core/tcp_in.c **** #include "lwip/memp.h"
  54:../lwip-1.4.1/src/core/tcp_in.c **** #include "lwip/inet_chksum.h"
  55:../lwip-1.4.1/src/core/tcp_in.c **** #include "lwip/stats.h"
  56:../lwip-1.4.1/src/core/tcp_in.c **** #include "lwip/snmp.h"
  57:../lwip-1.4.1/src/core/tcp_in.c **** #include "arch/perf.h"
  58:../lwip-1.4.1/src/core/tcp_in.c **** 
  59:../lwip-1.4.1/src/core/tcp_in.c **** /* These variables are global to all functions involved in the input
  60:../lwip-1.4.1/src/core/tcp_in.c ****    processing of TCP segments. They are set by the tcp_input()
  61:../lwip-1.4.1/src/core/tcp_in.c ****    function. */
  62:../lwip-1.4.1/src/core/tcp_in.c **** static struct tcp_seg inseg;
  63:../lwip-1.4.1/src/core/tcp_in.c **** static struct tcp_hdr *tcphdr;
  64:../lwip-1.4.1/src/core/tcp_in.c **** static struct ip_hdr *iphdr;
  65:../lwip-1.4.1/src/core/tcp_in.c **** static u32_t seqno, ackno;
  66:../lwip-1.4.1/src/core/tcp_in.c **** static u8_t flags;
  67:../lwip-1.4.1/src/core/tcp_in.c **** static u16_t tcplen;
  68:../lwip-1.4.1/src/core/tcp_in.c **** 
  69:../lwip-1.4.1/src/core/tcp_in.c **** static u8_t recv_flags;
  70:../lwip-1.4.1/src/core/tcp_in.c **** static struct pbuf *recv_data;
  71:../lwip-1.4.1/src/core/tcp_in.c **** 
  72:../lwip-1.4.1/src/core/tcp_in.c **** struct tcp_pcb *tcp_input_pcb;
  73:../lwip-1.4.1/src/core/tcp_in.c **** 
  74:../lwip-1.4.1/src/core/tcp_in.c **** /* Forward declarations. */
  75:../lwip-1.4.1/src/core/tcp_in.c **** static err_t tcp_process(struct tcp_pcb *pcb);
  76:../lwip-1.4.1/src/core/tcp_in.c **** static void tcp_receive(struct tcp_pcb *pcb);
  77:../lwip-1.4.1/src/core/tcp_in.c **** static void tcp_parseopt(struct tcp_pcb *pcb);
  78:../lwip-1.4.1/src/core/tcp_in.c **** 
  79:../lwip-1.4.1/src/core/tcp_in.c **** static err_t tcp_listen_input(struct tcp_pcb_listen *pcb);
  80:../lwip-1.4.1/src/core/tcp_in.c **** static err_t tcp_timewait_input(struct tcp_pcb *pcb);
  81:../lwip-1.4.1/src/core/tcp_in.c **** 
  82:../lwip-1.4.1/src/core/tcp_in.c **** /**
  83:../lwip-1.4.1/src/core/tcp_in.c ****  * The initial input processing of TCP. It verifies the TCP header, demultiplexes
  84:../lwip-1.4.1/src/core/tcp_in.c ****  * the segment between the PCBs and passes it on to tcp_process(), which implements
  85:../lwip-1.4.1/src/core/tcp_in.c ****  * the TCP finite state machine. This function is called by the IP layer (in
  86:../lwip-1.4.1/src/core/tcp_in.c ****  * ip_input()).
  87:../lwip-1.4.1/src/core/tcp_in.c ****  *
  88:../lwip-1.4.1/src/core/tcp_in.c ****  * @param p received TCP segment to process (p->payload pointing to the IP header)
  89:../lwip-1.4.1/src/core/tcp_in.c ****  * @param inp network interface on which this segment was received
  90:../lwip-1.4.1/src/core/tcp_in.c ****  */
  91:../lwip-1.4.1/src/core/tcp_in.c **** void
  92:../lwip-1.4.1/src/core/tcp_in.c **** tcp_input(struct pbuf *p, struct netif *inp)
  93:../lwip-1.4.1/src/core/tcp_in.c **** {
  54              		.loc 1 93 0
  55              		.cfi_startproc
  56              		@ args = 0, pretend = 0, frame = 24
  57              		@ frame_needed = 1, uses_anonymous_args = 0
  58 0000 90B5     		push	{r4, r7, lr}
  59              		.cfi_def_cfa_offset 12
  60              		.cfi_offset 4, -12
  61              		.cfi_offset 7, -8
  62              		.cfi_offset 14, -4
  63 0002 89B0     		sub	sp, sp, #36
  64              		.cfi_def_cfa_offset 48
  65 0004 02AF     		add	r7, sp, #8
  66              		.cfi_def_cfa 7, 40
  67 0006 7860     		str	r0, [r7, #4]
  68 0008 3960     		str	r1, [r7]
  94:../lwip-1.4.1/src/core/tcp_in.c ****   struct tcp_pcb *pcb, *prev;
  95:../lwip-1.4.1/src/core/tcp_in.c ****   struct tcp_pcb_listen *lpcb;
  96:../lwip-1.4.1/src/core/tcp_in.c **** #if SO_REUSE
  97:../lwip-1.4.1/src/core/tcp_in.c ****   struct tcp_pcb *lpcb_prev = NULL;
  98:../lwip-1.4.1/src/core/tcp_in.c ****   struct tcp_pcb_listen *lpcb_any = NULL;
  99:../lwip-1.4.1/src/core/tcp_in.c **** #endif /* SO_REUSE */
 100:../lwip-1.4.1/src/core/tcp_in.c ****   u8_t hdrlen;
 101:../lwip-1.4.1/src/core/tcp_in.c ****   err_t err;
 102:../lwip-1.4.1/src/core/tcp_in.c **** 
 103:../lwip-1.4.1/src/core/tcp_in.c ****   PERF_START;
 104:../lwip-1.4.1/src/core/tcp_in.c **** 
 105:../lwip-1.4.1/src/core/tcp_in.c ****   TCP_STATS_INC(tcp.recv);
  69              		.loc 1 105 0
  70 000a 9C4B     		ldr	r3, .L50
  71 000c D3F82431 		ldr	r3, [r3, #292]
  72 0010 0133     		adds	r3, r3, #1
  73 0012 9A4A     		ldr	r2, .L50
  74 0014 C2F82431 		str	r3, [r2, #292]
 106:../lwip-1.4.1/src/core/tcp_in.c ****   snmp_inc_tcpinsegs();
 107:../lwip-1.4.1/src/core/tcp_in.c **** 
 108:../lwip-1.4.1/src/core/tcp_in.c ****   iphdr = (struct ip_hdr *)p->payload;
  75              		.loc 1 108 0
  76 0018 7B68     		ldr	r3, [r7, #4]
  77 001a 5B68     		ldr	r3, [r3, #4]
  78 001c 984A     		ldr	r2, .L50+4
  79 001e 1360     		str	r3, [r2]
 109:../lwip-1.4.1/src/core/tcp_in.c ****   tcphdr = (struct tcp_hdr *)((u8_t *)p->payload + IPH_HL(iphdr) * 4);
  80              		.loc 1 109 0
  81 0020 7B68     		ldr	r3, [r7, #4]
  82 0022 5B68     		ldr	r3, [r3, #4]
  83 0024 964A     		ldr	r2, .L50+4
  84 0026 1268     		ldr	r2, [r2]
  85 0028 1278     		ldrb	r2, [r2]	@ zero_extendqisi2
  86 002a 02F00F02 		and	r2, r2, #15
  87 002e 9200     		lsls	r2, r2, #2
  88 0030 1344     		add	r3, r3, r2
  89 0032 944A     		ldr	r2, .L50+8
  90 0034 1360     		str	r3, [r2]
 110:../lwip-1.4.1/src/core/tcp_in.c **** 
 111:../lwip-1.4.1/src/core/tcp_in.c **** #if TCP_INPUT_DEBUG
 112:../lwip-1.4.1/src/core/tcp_in.c ****   tcp_debug_print(tcphdr);
 113:../lwip-1.4.1/src/core/tcp_in.c **** #endif
 114:../lwip-1.4.1/src/core/tcp_in.c **** 
 115:../lwip-1.4.1/src/core/tcp_in.c ****   /* remove header from payload */
 116:../lwip-1.4.1/src/core/tcp_in.c ****   if (pbuf_header(p, -((s16_t)(IPH_HL(iphdr) * 4))) || (p->tot_len < sizeof(struct tcp_hdr))) {
  91              		.loc 1 116 0
  92 0036 924B     		ldr	r3, .L50+4
  93 0038 1B68     		ldr	r3, [r3]
  94 003a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
  95 003c 9BB2     		uxth	r3, r3
  96 003e 03F00F03 		and	r3, r3, #15
  97 0042 9BB2     		uxth	r3, r3
  98 0044 9B00     		lsls	r3, r3, #2
  99 0046 9BB2     		uxth	r3, r3
 100 0048 5B42     		negs	r3, r3
 101 004a 9BB2     		uxth	r3, r3
 102 004c 9BB2     		uxth	r3, r3
 103 004e 1BB2     		sxth	r3, r3
 104 0050 7868     		ldr	r0, [r7, #4]
 105 0052 1946     		mov	r1, r3
 106 0054 FFF7FEFF 		bl	pbuf_header
 107 0058 0346     		mov	r3, r0
 108 005a 002B     		cmp	r3, #0
 109 005c 03D1     		bne	.L2
 110              		.loc 1 116 0 is_stmt 0 discriminator 1
 111 005e 7B68     		ldr	r3, [r7, #4]
 112 0060 1B89     		ldrh	r3, [r3, #8]
 113 0062 132B     		cmp	r3, #19
 114 0064 07D8     		bhi	.L3
 115              	.L2:
 117:../lwip-1.4.1/src/core/tcp_in.c ****     /* drop short packets */
 118:../lwip-1.4.1/src/core/tcp_in.c ****     LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: short packet (%"U16_F" bytes) discarded\n", p->tot_le
 119:../lwip-1.4.1/src/core/tcp_in.c ****     TCP_STATS_INC(tcp.lenerr);
 116              		.loc 1 119 0 is_stmt 1
 117 0066 854B     		ldr	r3, .L50
 118 0068 D3F83431 		ldr	r3, [r3, #308]
 119 006c 0133     		adds	r3, r3, #1
 120 006e 834A     		ldr	r2, .L50
 121 0070 C2F83431 		str	r3, [r2, #308]
 120:../lwip-1.4.1/src/core/tcp_in.c ****     goto dropped;
 122              		.loc 1 120 0
 123 0074 DAE2     		b	.L4
 124              	.L3:
 121:../lwip-1.4.1/src/core/tcp_in.c ****   }
 122:../lwip-1.4.1/src/core/tcp_in.c **** 
 123:../lwip-1.4.1/src/core/tcp_in.c ****   /* Don't even process incoming broadcasts/multicasts. */
 124:../lwip-1.4.1/src/core/tcp_in.c ****   if (ip_addr_isbroadcast(&current_iphdr_dest, inp) ||
 125              		.loc 1 124 0
 126 0076 844B     		ldr	r3, .L50+12
 127 0078 1B68     		ldr	r3, [r3]
 128 007a 1846     		mov	r0, r3
 129 007c 3968     		ldr	r1, [r7]
 130 007e FFF7FEFF 		bl	ip4_addr_isbroadcast
 131 0082 0346     		mov	r3, r0
 132 0084 002B     		cmp	r3, #0
 133 0086 05D1     		bne	.L5
 125:../lwip-1.4.1/src/core/tcp_in.c ****       ip_addr_ismulticast(&current_iphdr_dest)) {
 134              		.loc 1 125 0 discriminator 1
 135 0088 7F4B     		ldr	r3, .L50+12
 136 008a 1B68     		ldr	r3, [r3]
 137 008c 03F0F003 		and	r3, r3, #240
 124:../lwip-1.4.1/src/core/tcp_in.c ****       ip_addr_ismulticast(&current_iphdr_dest)) {
 138              		.loc 1 124 0 discriminator 1
 139 0090 E02B     		cmp	r3, #224
 140 0092 07D1     		bne	.L6
 141              	.L5:
 126:../lwip-1.4.1/src/core/tcp_in.c ****     TCP_STATS_INC(tcp.proterr);
 142              		.loc 1 126 0
 143 0094 794B     		ldr	r3, .L50
 144 0096 D3F84031 		ldr	r3, [r3, #320]
 145 009a 0133     		adds	r3, r3, #1
 146 009c 774A     		ldr	r2, .L50
 147 009e C2F84031 		str	r3, [r2, #320]
 127:../lwip-1.4.1/src/core/tcp_in.c ****     goto dropped;
 148              		.loc 1 127 0
 149 00a2 C3E2     		b	.L4
 150              	.L6:
 128:../lwip-1.4.1/src/core/tcp_in.c ****   }
 129:../lwip-1.4.1/src/core/tcp_in.c **** 
 130:../lwip-1.4.1/src/core/tcp_in.c **** #if CHECKSUM_CHECK_TCP
 131:../lwip-1.4.1/src/core/tcp_in.c ****   /* Verify TCP checksum. */
 132:../lwip-1.4.1/src/core/tcp_in.c ****   if (inet_chksum_pseudo(p, ip_current_src_addr(), ip_current_dest_addr(),
 133:../lwip-1.4.1/src/core/tcp_in.c ****       IP_PROTO_TCP, p->tot_len) != 0) {
 134:../lwip-1.4.1/src/core/tcp_in.c ****       LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: packet discarded due to failing checksum 0x%04"X16_
 135:../lwip-1.4.1/src/core/tcp_in.c ****         inet_chksum_pseudo(p, ip_current_src_addr(), ip_current_dest_addr(),
 136:../lwip-1.4.1/src/core/tcp_in.c ****       IP_PROTO_TCP, p->tot_len)));
 137:../lwip-1.4.1/src/core/tcp_in.c **** #if TCP_DEBUG
 138:../lwip-1.4.1/src/core/tcp_in.c ****     tcp_debug_print(tcphdr);
 139:../lwip-1.4.1/src/core/tcp_in.c **** #endif /* TCP_DEBUG */
 140:../lwip-1.4.1/src/core/tcp_in.c ****     TCP_STATS_INC(tcp.chkerr);
 141:../lwip-1.4.1/src/core/tcp_in.c ****     goto dropped;
 142:../lwip-1.4.1/src/core/tcp_in.c ****   }
 143:../lwip-1.4.1/src/core/tcp_in.c **** #endif
 144:../lwip-1.4.1/src/core/tcp_in.c **** 
 145:../lwip-1.4.1/src/core/tcp_in.c ****   /* Move the payload pointer in the pbuf so that it points to the
 146:../lwip-1.4.1/src/core/tcp_in.c ****      TCP data instead of the TCP header. */
 147:../lwip-1.4.1/src/core/tcp_in.c ****   hdrlen = TCPH_HDRLEN(tcphdr);
 151              		.loc 1 147 0
 152 00a4 774B     		ldr	r3, .L50+8
 153 00a6 1B68     		ldr	r3, [r3]
 154 00a8 9B89     		ldrh	r3, [r3, #12]	@ unaligned
 155 00aa 9BB2     		uxth	r3, r3
 156 00ac 1846     		mov	r0, r3
 157 00ae FFF7FEFF 		bl	lwip_ntohs
 158 00b2 0346     		mov	r3, r0
 159 00b4 1B0B     		lsrs	r3, r3, #12
 160 00b6 9BB2     		uxth	r3, r3
 161 00b8 BB72     		strb	r3, [r7, #10]
 148:../lwip-1.4.1/src/core/tcp_in.c ****   if(pbuf_header(p, -(hdrlen * 4))){
 162              		.loc 1 148 0
 163 00ba BB7A     		ldrb	r3, [r7, #10]	@ zero_extendqisi2
 164 00bc 9BB2     		uxth	r3, r3
 165 00be 1A46     		mov	r2, r3	@ movhi
 166 00c0 9203     		lsls	r2, r2, #14
 167 00c2 D31A     		subs	r3, r2, r3
 168 00c4 9B00     		lsls	r3, r3, #2
 169 00c6 9BB2     		uxth	r3, r3
 170 00c8 9BB2     		uxth	r3, r3
 171 00ca 1BB2     		sxth	r3, r3
 172 00cc 7868     		ldr	r0, [r7, #4]
 173 00ce 1946     		mov	r1, r3
 174 00d0 FFF7FEFF 		bl	pbuf_header
 175 00d4 0346     		mov	r3, r0
 176 00d6 002B     		cmp	r3, #0
 177 00d8 07D0     		beq	.L7
 149:../lwip-1.4.1/src/core/tcp_in.c ****     /* drop short packets */
 150:../lwip-1.4.1/src/core/tcp_in.c ****     LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: short packet\n"));
 151:../lwip-1.4.1/src/core/tcp_in.c ****     TCP_STATS_INC(tcp.lenerr);
 178              		.loc 1 151 0
 179 00da 684B     		ldr	r3, .L50
 180 00dc D3F83431 		ldr	r3, [r3, #308]
 181 00e0 0133     		adds	r3, r3, #1
 182 00e2 664A     		ldr	r2, .L50
 183 00e4 C2F83431 		str	r3, [r2, #308]
 152:../lwip-1.4.1/src/core/tcp_in.c ****     goto dropped;
 184              		.loc 1 152 0
 185 00e8 A0E2     		b	.L4
 186              	.L7:
 153:../lwip-1.4.1/src/core/tcp_in.c ****   }
 154:../lwip-1.4.1/src/core/tcp_in.c **** 
 155:../lwip-1.4.1/src/core/tcp_in.c ****   /* Convert fields in TCP header to host byte order. */
 156:../lwip-1.4.1/src/core/tcp_in.c ****   tcphdr->src = ntohs(tcphdr->src);
 187              		.loc 1 156 0
 188 00ea 664B     		ldr	r3, .L50+8
 189 00ec 1C68     		ldr	r4, [r3]
 190 00ee 654B     		ldr	r3, .L50+8
 191 00f0 1B68     		ldr	r3, [r3]
 192 00f2 1B88     		ldrh	r3, [r3]	@ unaligned
 193 00f4 9BB2     		uxth	r3, r3
 194 00f6 1846     		mov	r0, r3
 195 00f8 FFF7FEFF 		bl	lwip_ntohs
 196 00fc 0346     		mov	r3, r0
 197 00fe 2380     		strh	r3, [r4]	@ unaligned
 157:../lwip-1.4.1/src/core/tcp_in.c ****   tcphdr->dest = ntohs(tcphdr->dest);
 198              		.loc 1 157 0
 199 0100 604B     		ldr	r3, .L50+8
 200 0102 1C68     		ldr	r4, [r3]
 201 0104 5F4B     		ldr	r3, .L50+8
 202 0106 1B68     		ldr	r3, [r3]
 203 0108 5B88     		ldrh	r3, [r3, #2]	@ unaligned
 204 010a 9BB2     		uxth	r3, r3
 205 010c 1846     		mov	r0, r3
 206 010e FFF7FEFF 		bl	lwip_ntohs
 207 0112 0346     		mov	r3, r0
 208 0114 6380     		strh	r3, [r4, #2]	@ unaligned
 158:../lwip-1.4.1/src/core/tcp_in.c ****   seqno = tcphdr->seqno = ntohl(tcphdr->seqno);
 209              		.loc 1 158 0
 210 0116 5B4B     		ldr	r3, .L50+8
 211 0118 1C68     		ldr	r4, [r3]
 212 011a 5A4B     		ldr	r3, .L50+8
 213 011c 1B68     		ldr	r3, [r3]
 214 011e 5B68     		ldr	r3, [r3, #4]	@ unaligned
 215 0120 1846     		mov	r0, r3
 216 0122 FFF7FEFF 		bl	lwip_ntohl
 217 0126 0346     		mov	r3, r0
 218 0128 6360     		str	r3, [r4, #4]	@ unaligned
 219 012a 6368     		ldr	r3, [r4, #4]	@ unaligned
 220 012c 574A     		ldr	r2, .L50+16
 221 012e 1360     		str	r3, [r2]
 159:../lwip-1.4.1/src/core/tcp_in.c ****   ackno = tcphdr->ackno = ntohl(tcphdr->ackno);
 222              		.loc 1 159 0
 223 0130 544B     		ldr	r3, .L50+8
 224 0132 1C68     		ldr	r4, [r3]
 225 0134 534B     		ldr	r3, .L50+8
 226 0136 1B68     		ldr	r3, [r3]
 227 0138 9B68     		ldr	r3, [r3, #8]	@ unaligned
 228 013a 1846     		mov	r0, r3
 229 013c FFF7FEFF 		bl	lwip_ntohl
 230 0140 0346     		mov	r3, r0
 231 0142 A360     		str	r3, [r4, #8]	@ unaligned
 232 0144 A368     		ldr	r3, [r4, #8]	@ unaligned
 233 0146 524A     		ldr	r2, .L50+20
 234 0148 1360     		str	r3, [r2]
 160:../lwip-1.4.1/src/core/tcp_in.c ****   tcphdr->wnd = ntohs(tcphdr->wnd);
 235              		.loc 1 160 0
 236 014a 4E4B     		ldr	r3, .L50+8
 237 014c 1C68     		ldr	r4, [r3]
 238 014e 4D4B     		ldr	r3, .L50+8
 239 0150 1B68     		ldr	r3, [r3]
 240 0152 DB89     		ldrh	r3, [r3, #14]	@ unaligned
 241 0154 9BB2     		uxth	r3, r3
 242 0156 1846     		mov	r0, r3
 243 0158 FFF7FEFF 		bl	lwip_ntohs
 244 015c 0346     		mov	r3, r0
 245 015e E381     		strh	r3, [r4, #14]	@ unaligned
 161:../lwip-1.4.1/src/core/tcp_in.c **** 
 162:../lwip-1.4.1/src/core/tcp_in.c ****   flags = TCPH_FLAGS(tcphdr);
 246              		.loc 1 162 0
 247 0160 484B     		ldr	r3, .L50+8
 248 0162 1B68     		ldr	r3, [r3]
 249 0164 9B89     		ldrh	r3, [r3, #12]	@ unaligned
 250 0166 9BB2     		uxth	r3, r3
 251 0168 1846     		mov	r0, r3
 252 016a FFF7FEFF 		bl	lwip_ntohs
 253 016e 0346     		mov	r3, r0
 254 0170 DBB2     		uxtb	r3, r3
 255 0172 03F03F03 		and	r3, r3, #63
 256 0176 DAB2     		uxtb	r2, r3
 257 0178 464B     		ldr	r3, .L50+24
 258 017a 1A70     		strb	r2, [r3]
 163:../lwip-1.4.1/src/core/tcp_in.c ****   tcplen = p->tot_len + ((flags & (TCP_FIN | TCP_SYN)) ? 1 : 0);
 259              		.loc 1 163 0
 260 017c 7B68     		ldr	r3, [r7, #4]
 261 017e 1A89     		ldrh	r2, [r3, #8]
 262 0180 444B     		ldr	r3, .L50+24
 263 0182 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 264 0184 03F00303 		and	r3, r3, #3
 265 0188 002B     		cmp	r3, #0
 266 018a 14BF     		ite	ne
 267 018c 0123     		movne	r3, #1
 268 018e 0023     		moveq	r3, #0
 269 0190 DBB2     		uxtb	r3, r3
 270 0192 9BB2     		uxth	r3, r3
 271 0194 1344     		add	r3, r3, r2
 272 0196 9AB2     		uxth	r2, r3
 273 0198 3F4B     		ldr	r3, .L50+28
 274 019a 1A80     		strh	r2, [r3]	@ movhi
 164:../lwip-1.4.1/src/core/tcp_in.c **** 
 165:../lwip-1.4.1/src/core/tcp_in.c ****   /* Demultiplex an incoming segment. First, we check if it is destined
 166:../lwip-1.4.1/src/core/tcp_in.c ****      for an active connection. */
 167:../lwip-1.4.1/src/core/tcp_in.c ****   prev = NULL;
 275              		.loc 1 167 0
 276 019c 0023     		movs	r3, #0
 277 019e 3B61     		str	r3, [r7, #16]
 168:../lwip-1.4.1/src/core/tcp_in.c **** 
 169:../lwip-1.4.1/src/core/tcp_in.c ****   
 170:../lwip-1.4.1/src/core/tcp_in.c ****   for(pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 278              		.loc 1 170 0
 279 01a0 3E4B     		ldr	r3, .L50+32
 280 01a2 1B68     		ldr	r3, [r3]
 281 01a4 7B61     		str	r3, [r7, #20]
 282 01a6 30E0     		b	.L8
 283              	.L12:
 171:../lwip-1.4.1/src/core/tcp_in.c ****     LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 172:../lwip-1.4.1/src/core/tcp_in.c ****     LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 173:../lwip-1.4.1/src/core/tcp_in.c ****     LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 174:../lwip-1.4.1/src/core/tcp_in.c ****     if (pcb->remote_port == tcphdr->src &&
 284              		.loc 1 174 0
 285 01a8 7B69     		ldr	r3, [r7, #20]
 286 01aa 9A8B     		ldrh	r2, [r3, #28]
 287 01ac 354B     		ldr	r3, .L50+8
 288 01ae 1B68     		ldr	r3, [r3]
 289 01b0 1B88     		ldrh	r3, [r3]	@ unaligned
 290 01b2 9BB2     		uxth	r3, r3
 291 01b4 9A42     		cmp	r2, r3
 292 01b6 23D1     		bne	.L9
 175:../lwip-1.4.1/src/core/tcp_in.c ****        pcb->local_port == tcphdr->dest &&
 293              		.loc 1 175 0 discriminator 1
 294 01b8 7B69     		ldr	r3, [r7, #20]
 295 01ba 5A8B     		ldrh	r2, [r3, #26]
 296 01bc 314B     		ldr	r3, .L50+8
 297 01be 1B68     		ldr	r3, [r3]
 298 01c0 5B88     		ldrh	r3, [r3, #2]	@ unaligned
 299 01c2 9BB2     		uxth	r3, r3
 174:../lwip-1.4.1/src/core/tcp_in.c ****        pcb->local_port == tcphdr->dest &&
 300              		.loc 1 174 0 discriminator 1
 301 01c4 9A42     		cmp	r2, r3
 302 01c6 1BD1     		bne	.L9
 176:../lwip-1.4.1/src/core/tcp_in.c ****        ip_addr_cmp(&(pcb->remote_ip), &current_iphdr_src) &&
 303              		.loc 1 176 0
 304 01c8 7B69     		ldr	r3, [r7, #20]
 305 01ca 5A68     		ldr	r2, [r3, #4]
 306 01cc 344B     		ldr	r3, .L50+36
 307 01ce 1B68     		ldr	r3, [r3]
 175:../lwip-1.4.1/src/core/tcp_in.c ****        pcb->local_port == tcphdr->dest &&
 308              		.loc 1 175 0
 309 01d0 9A42     		cmp	r2, r3
 310 01d2 15D1     		bne	.L9
 177:../lwip-1.4.1/src/core/tcp_in.c ****        ip_addr_cmp(&(pcb->local_ip), &current_iphdr_dest)) {
 311              		.loc 1 177 0
 312 01d4 7B69     		ldr	r3, [r7, #20]
 313 01d6 1A68     		ldr	r2, [r3]
 314 01d8 2B4B     		ldr	r3, .L50+12
 315 01da 1B68     		ldr	r3, [r3]
 176:../lwip-1.4.1/src/core/tcp_in.c ****        ip_addr_cmp(&(pcb->remote_ip), &current_iphdr_src) &&
 316              		.loc 1 176 0
 317 01dc 9A42     		cmp	r2, r3
 318 01de 0FD1     		bne	.L9
 178:../lwip-1.4.1/src/core/tcp_in.c **** 
 179:../lwip-1.4.1/src/core/tcp_in.c ****       /* Move this PCB to the front of the list so that subsequent
 180:../lwip-1.4.1/src/core/tcp_in.c ****          lookups will be faster (we exploit locality in TCP segment
 181:../lwip-1.4.1/src/core/tcp_in.c ****          arrivals). */
 182:../lwip-1.4.1/src/core/tcp_in.c ****       LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 183:../lwip-1.4.1/src/core/tcp_in.c ****       if (prev != NULL) {
 319              		.loc 1 183 0
 320 01e0 3B69     		ldr	r3, [r7, #16]
 321 01e2 002B     		cmp	r3, #0
 322 01e4 0BD0     		beq	.L10
 184:../lwip-1.4.1/src/core/tcp_in.c ****         prev->next = pcb->next;
 323              		.loc 1 184 0
 324 01e6 7B69     		ldr	r3, [r7, #20]
 325 01e8 DA68     		ldr	r2, [r3, #12]
 326 01ea 3B69     		ldr	r3, [r7, #16]
 327 01ec DA60     		str	r2, [r3, #12]
 185:../lwip-1.4.1/src/core/tcp_in.c ****         pcb->next = tcp_active_pcbs;
 328              		.loc 1 185 0
 329 01ee 2B4B     		ldr	r3, .L50+32
 330 01f0 1A68     		ldr	r2, [r3]
 331 01f2 7B69     		ldr	r3, [r7, #20]
 332 01f4 DA60     		str	r2, [r3, #12]
 186:../lwip-1.4.1/src/core/tcp_in.c ****         tcp_active_pcbs = pcb;
 333              		.loc 1 186 0
 334 01f6 294A     		ldr	r2, .L50+32
 335 01f8 7B69     		ldr	r3, [r7, #20]
 336 01fa 1360     		str	r3, [r2]
 187:../lwip-1.4.1/src/core/tcp_in.c ****       }
 188:../lwip-1.4.1/src/core/tcp_in.c ****       LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 189:../lwip-1.4.1/src/core/tcp_in.c ****       break;
 337              		.loc 1 189 0
 338 01fc 08E0     		b	.L11
 339              	.L10:
 340 01fe 07E0     		b	.L11
 341              	.L9:
 190:../lwip-1.4.1/src/core/tcp_in.c ****     }
 191:../lwip-1.4.1/src/core/tcp_in.c ****     prev = pcb;
 342              		.loc 1 191 0 discriminator 2
 343 0200 7B69     		ldr	r3, [r7, #20]
 344 0202 3B61     		str	r3, [r7, #16]
 170:../lwip-1.4.1/src/core/tcp_in.c ****     LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 345              		.loc 1 170 0 discriminator 2
 346 0204 7B69     		ldr	r3, [r7, #20]
 347 0206 DB68     		ldr	r3, [r3, #12]
 348 0208 7B61     		str	r3, [r7, #20]
 349              	.L8:
 170:../lwip-1.4.1/src/core/tcp_in.c ****     LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 350              		.loc 1 170 0 is_stmt 0 discriminator 1
 351 020a 7B69     		ldr	r3, [r7, #20]
 352 020c 002B     		cmp	r3, #0
 353 020e CBD1     		bne	.L12
 354              	.L11:
 192:../lwip-1.4.1/src/core/tcp_in.c ****   }
 193:../lwip-1.4.1/src/core/tcp_in.c **** 
 194:../lwip-1.4.1/src/core/tcp_in.c ****   if (pcb == NULL) {
 355              		.loc 1 194 0 is_stmt 1
 356 0210 7B69     		ldr	r3, [r7, #20]
 357 0212 002B     		cmp	r3, #0
 358 0214 7FD1     		bne	.L13
 195:../lwip-1.4.1/src/core/tcp_in.c ****     /* If it did not go to an active connection, we check the connections
 196:../lwip-1.4.1/src/core/tcp_in.c ****        in the TIME-WAIT state. */
 197:../lwip-1.4.1/src/core/tcp_in.c ****     for(pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 359              		.loc 1 197 0
 360 0216 234B     		ldr	r3, .L50+40
 361 0218 1B68     		ldr	r3, [r3]
 362 021a 7B61     		str	r3, [r7, #20]
 363 021c 25E0     		b	.L14
 364              	.L17:
 198:../lwip-1.4.1/src/core/tcp_in.c ****       LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 199:../lwip-1.4.1/src/core/tcp_in.c ****       if (pcb->remote_port == tcphdr->src &&
 365              		.loc 1 199 0
 366 021e 7B69     		ldr	r3, [r7, #20]
 367 0220 9A8B     		ldrh	r2, [r3, #28]
 368 0222 184B     		ldr	r3, .L50+8
 369 0224 1B68     		ldr	r3, [r3]
 370 0226 1B88     		ldrh	r3, [r3]	@ unaligned
 371 0228 9BB2     		uxth	r3, r3
 372 022a 9A42     		cmp	r2, r3
 373 022c 1AD1     		bne	.L15
 200:../lwip-1.4.1/src/core/tcp_in.c ****          pcb->local_port == tcphdr->dest &&
 374              		.loc 1 200 0 discriminator 1
 375 022e 7B69     		ldr	r3, [r7, #20]
 376 0230 5A8B     		ldrh	r2, [r3, #26]
 377 0232 144B     		ldr	r3, .L50+8
 378 0234 1B68     		ldr	r3, [r3]
 379 0236 5B88     		ldrh	r3, [r3, #2]	@ unaligned
 380 0238 9BB2     		uxth	r3, r3
 199:../lwip-1.4.1/src/core/tcp_in.c ****          pcb->local_port == tcphdr->dest &&
 381              		.loc 1 199 0 discriminator 1
 382 023a 9A42     		cmp	r2, r3
 383 023c 12D1     		bne	.L15
 201:../lwip-1.4.1/src/core/tcp_in.c ****          ip_addr_cmp(&(pcb->remote_ip), &current_iphdr_src) &&
 384              		.loc 1 201 0
 385 023e 7B69     		ldr	r3, [r7, #20]
 386 0240 5A68     		ldr	r2, [r3, #4]
 387 0242 174B     		ldr	r3, .L50+36
 388 0244 1B68     		ldr	r3, [r3]
 200:../lwip-1.4.1/src/core/tcp_in.c ****          pcb->local_port == tcphdr->dest &&
 389              		.loc 1 200 0
 390 0246 9A42     		cmp	r2, r3
 391 0248 0CD1     		bne	.L15
 202:../lwip-1.4.1/src/core/tcp_in.c ****          ip_addr_cmp(&(pcb->local_ip), &current_iphdr_dest)) {
 392              		.loc 1 202 0
 393 024a 7B69     		ldr	r3, [r7, #20]
 394 024c 1A68     		ldr	r2, [r3]
 395 024e 0E4B     		ldr	r3, .L50+12
 396 0250 1B68     		ldr	r3, [r3]
 201:../lwip-1.4.1/src/core/tcp_in.c ****          ip_addr_cmp(&(pcb->remote_ip), &current_iphdr_src) &&
 397              		.loc 1 201 0
 398 0252 9A42     		cmp	r2, r3
 399 0254 06D1     		bne	.L15
 203:../lwip-1.4.1/src/core/tcp_in.c ****         /* We don't really care enough to move this PCB to the front
 204:../lwip-1.4.1/src/core/tcp_in.c ****            of the list since we are not very likely to receive that
 205:../lwip-1.4.1/src/core/tcp_in.c ****            many segments for connections in TIME-WAIT. */
 206:../lwip-1.4.1/src/core/tcp_in.c ****         LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: packed for TIME_WAITing connection.\n"));
 207:../lwip-1.4.1/src/core/tcp_in.c ****         tcp_timewait_input(pcb);
 400              		.loc 1 207 0
 401 0256 7869     		ldr	r0, [r7, #20]
 402 0258 FFF7FEFF 		bl	tcp_timewait_input
 208:../lwip-1.4.1/src/core/tcp_in.c ****         pbuf_free(p);
 403              		.loc 1 208 0
 404 025c 7868     		ldr	r0, [r7, #4]
 405 025e FFF7FEFF 		bl	pbuf_free
 209:../lwip-1.4.1/src/core/tcp_in.c ****         return;
 406              		.loc 1 209 0
 407 0262 EDE1     		b	.L1
 408              	.L15:
 197:../lwip-1.4.1/src/core/tcp_in.c ****       LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 409              		.loc 1 197 0 discriminator 2
 410 0264 7B69     		ldr	r3, [r7, #20]
 411 0266 DB68     		ldr	r3, [r3, #12]
 412 0268 7B61     		str	r3, [r7, #20]
 413              	.L14:
 197:../lwip-1.4.1/src/core/tcp_in.c ****       LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 414              		.loc 1 197 0 is_stmt 0 discriminator 1
 415 026a 7B69     		ldr	r3, [r7, #20]
 416 026c 002B     		cmp	r3, #0
 417 026e D6D1     		bne	.L17
 210:../lwip-1.4.1/src/core/tcp_in.c ****       }
 211:../lwip-1.4.1/src/core/tcp_in.c ****     }
 212:../lwip-1.4.1/src/core/tcp_in.c **** 
 213:../lwip-1.4.1/src/core/tcp_in.c ****     /* Finally, if we still did not get a match, we check all PCBs that
 214:../lwip-1.4.1/src/core/tcp_in.c ****        are LISTENing for incoming connections. */
 215:../lwip-1.4.1/src/core/tcp_in.c ****     prev = NULL;
 418              		.loc 1 215 0 is_stmt 1
 419 0270 0023     		movs	r3, #0
 420 0272 3B61     		str	r3, [r7, #16]
 216:../lwip-1.4.1/src/core/tcp_in.c ****     for(lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 421              		.loc 1 216 0
 422 0274 0C4B     		ldr	r3, .L50+44
 423 0276 1B68     		ldr	r3, [r3]
 424 0278 FB60     		str	r3, [r7, #12]
 425 027a 31E0     		b	.L18
 426              	.L51:
 427              		.align	2
 428              	.L50:
 429 027c 00000000 		.word	lwip_stats
 430 0280 18000000 		.word	iphdr
 431 0284 14000000 		.word	tcphdr
 432 0288 00000000 		.word	current_iphdr_dest
 433 028c 1C000000 		.word	seqno
 434 0290 20000000 		.word	ackno
 435 0294 24000000 		.word	flags
 436 0298 26000000 		.word	tcplen
 437 029c 00000000 		.word	tcp_active_pcbs
 438 02a0 00000000 		.word	current_iphdr_src
 439 02a4 00000000 		.word	tcp_tw_pcbs
 440 02a8 00000000 		.word	tcp_listen_pcbs
 441              	.L21:
 217:../lwip-1.4.1/src/core/tcp_in.c ****       if (lpcb->local_port == tcphdr->dest) {
 442              		.loc 1 217 0
 443 02ac FB68     		ldr	r3, [r7, #12]
 444 02ae 5A8B     		ldrh	r2, [r3, #26]
 445 02b0 994B     		ldr	r3, .L52
 446 02b2 1B68     		ldr	r3, [r3]
 447 02b4 5B88     		ldrh	r3, [r3, #2]	@ unaligned
 448 02b6 9BB2     		uxth	r3, r3
 449 02b8 9A42     		cmp	r2, r3
 450 02ba 0CD1     		bne	.L19
 218:../lwip-1.4.1/src/core/tcp_in.c **** #if SO_REUSE
 219:../lwip-1.4.1/src/core/tcp_in.c ****         if (ip_addr_cmp(&(lpcb->local_ip), &current_iphdr_dest)) {
 220:../lwip-1.4.1/src/core/tcp_in.c ****           /* found an exact match */
 221:../lwip-1.4.1/src/core/tcp_in.c ****           break;
 222:../lwip-1.4.1/src/core/tcp_in.c ****         } else if(ip_addr_isany(&(lpcb->local_ip))) {
 223:../lwip-1.4.1/src/core/tcp_in.c ****           /* found an ANY-match */
 224:../lwip-1.4.1/src/core/tcp_in.c ****           lpcb_any = lpcb;
 225:../lwip-1.4.1/src/core/tcp_in.c ****           lpcb_prev = prev;
 226:../lwip-1.4.1/src/core/tcp_in.c ****         }
 227:../lwip-1.4.1/src/core/tcp_in.c **** #else /* SO_REUSE */
 228:../lwip-1.4.1/src/core/tcp_in.c ****         if (ip_addr_cmp(&(lpcb->local_ip), &current_iphdr_dest) ||
 451              		.loc 1 228 0
 452 02bc FB68     		ldr	r3, [r7, #12]
 453 02be 1A68     		ldr	r2, [r3]
 454 02c0 964B     		ldr	r3, .L52+4
 455 02c2 1B68     		ldr	r3, [r3]
 456 02c4 9A42     		cmp	r2, r3
 457 02c6 0ED0     		beq	.L20
 229:../lwip-1.4.1/src/core/tcp_in.c ****             ip_addr_isany(&(lpcb->local_ip))) {
 458              		.loc 1 229 0 discriminator 1
 459 02c8 FB68     		ldr	r3, [r7, #12]
 228:../lwip-1.4.1/src/core/tcp_in.c ****             ip_addr_isany(&(lpcb->local_ip))) {
 460              		.loc 1 228 0 discriminator 1
 461 02ca 002B     		cmp	r3, #0
 462 02cc 0BD0     		beq	.L20
 463              		.loc 1 229 0
 464 02ce FB68     		ldr	r3, [r7, #12]
 465 02d0 1B68     		ldr	r3, [r3]
 466 02d2 002B     		cmp	r3, #0
 467 02d4 07D0     		beq	.L20
 468              	.L19:
 230:../lwip-1.4.1/src/core/tcp_in.c ****           /* found a match */
 231:../lwip-1.4.1/src/core/tcp_in.c ****           break;
 232:../lwip-1.4.1/src/core/tcp_in.c ****         }
 233:../lwip-1.4.1/src/core/tcp_in.c **** #endif /* SO_REUSE */
 234:../lwip-1.4.1/src/core/tcp_in.c ****       }
 235:../lwip-1.4.1/src/core/tcp_in.c ****       prev = (struct tcp_pcb *)lpcb;
 469              		.loc 1 235 0 discriminator 2
 470 02d6 FB68     		ldr	r3, [r7, #12]
 471 02d8 3B61     		str	r3, [r7, #16]
 216:../lwip-1.4.1/src/core/tcp_in.c ****       if (lpcb->local_port == tcphdr->dest) {
 472              		.loc 1 216 0 discriminator 2
 473 02da FB68     		ldr	r3, [r7, #12]
 474 02dc DB68     		ldr	r3, [r3, #12]
 475 02de FB60     		str	r3, [r7, #12]
 476              	.L18:
 216:../lwip-1.4.1/src/core/tcp_in.c ****       if (lpcb->local_port == tcphdr->dest) {
 477              		.loc 1 216 0 is_stmt 0 discriminator 1
 478 02e0 FB68     		ldr	r3, [r7, #12]
 479 02e2 002B     		cmp	r3, #0
 480 02e4 E2D1     		bne	.L21
 481              	.L20:
 236:../lwip-1.4.1/src/core/tcp_in.c ****     }
 237:../lwip-1.4.1/src/core/tcp_in.c **** #if SO_REUSE
 238:../lwip-1.4.1/src/core/tcp_in.c ****     /* first try specific local IP */
 239:../lwip-1.4.1/src/core/tcp_in.c ****     if (lpcb == NULL) {
 240:../lwip-1.4.1/src/core/tcp_in.c ****       /* only pass to ANY if no specific local IP has been found */
 241:../lwip-1.4.1/src/core/tcp_in.c ****       lpcb = lpcb_any;
 242:../lwip-1.4.1/src/core/tcp_in.c ****       prev = lpcb_prev;
 243:../lwip-1.4.1/src/core/tcp_in.c ****     }
 244:../lwip-1.4.1/src/core/tcp_in.c **** #endif /* SO_REUSE */
 245:../lwip-1.4.1/src/core/tcp_in.c ****     if (lpcb != NULL) {
 482              		.loc 1 245 0 is_stmt 1
 483 02e6 FB68     		ldr	r3, [r7, #12]
 484 02e8 002B     		cmp	r3, #0
 485 02ea 14D0     		beq	.L13
 246:../lwip-1.4.1/src/core/tcp_in.c ****       /* Move this PCB to the front of the list so that subsequent
 247:../lwip-1.4.1/src/core/tcp_in.c ****          lookups will be faster (we exploit locality in TCP segment
 248:../lwip-1.4.1/src/core/tcp_in.c ****          arrivals). */
 249:../lwip-1.4.1/src/core/tcp_in.c ****       if (prev != NULL) {
 486              		.loc 1 249 0
 487 02ec 3B69     		ldr	r3, [r7, #16]
 488 02ee 002B     		cmp	r3, #0
 489 02f0 0AD0     		beq	.L48
 250:../lwip-1.4.1/src/core/tcp_in.c ****         ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 490              		.loc 1 250 0
 491 02f2 FB68     		ldr	r3, [r7, #12]
 492 02f4 DA68     		ldr	r2, [r3, #12]
 493 02f6 3B69     		ldr	r3, [r7, #16]
 494 02f8 DA60     		str	r2, [r3, #12]
 251:../lwip-1.4.1/src/core/tcp_in.c ****               /* our successor is the remainder of the listening list */
 252:../lwip-1.4.1/src/core/tcp_in.c ****         lpcb->next = tcp_listen_pcbs.listen_pcbs;
 495              		.loc 1 252 0
 496 02fa 894B     		ldr	r3, .L52+8
 497 02fc 1A68     		ldr	r2, [r3]
 498 02fe FB68     		ldr	r3, [r7, #12]
 499 0300 DA60     		str	r2, [r3, #12]
 253:../lwip-1.4.1/src/core/tcp_in.c ****               /* put this listening pcb at the head of the listening list */
 254:../lwip-1.4.1/src/core/tcp_in.c ****         tcp_listen_pcbs.listen_pcbs = lpcb;
 500              		.loc 1 254 0
 501 0302 874A     		ldr	r2, .L52+8
 502 0304 FB68     		ldr	r3, [r7, #12]
 503 0306 1360     		str	r3, [r2]
 504              	.L48:
 255:../lwip-1.4.1/src/core/tcp_in.c ****       }
 256:../lwip-1.4.1/src/core/tcp_in.c ****     
 257:../lwip-1.4.1/src/core/tcp_in.c ****       LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: packed for LISTENing connection.\n"));
 258:../lwip-1.4.1/src/core/tcp_in.c ****       tcp_listen_input(lpcb);
 505              		.loc 1 258 0
 506 0308 F868     		ldr	r0, [r7, #12]
 507 030a FFF7FEFF 		bl	tcp_listen_input
 259:../lwip-1.4.1/src/core/tcp_in.c ****       pbuf_free(p);
 508              		.loc 1 259 0
 509 030e 7868     		ldr	r0, [r7, #4]
 510 0310 FFF7FEFF 		bl	pbuf_free
 260:../lwip-1.4.1/src/core/tcp_in.c ****       return;
 511              		.loc 1 260 0
 512 0314 94E1     		b	.L1
 513              	.L13:
 261:../lwip-1.4.1/src/core/tcp_in.c ****     }
 262:../lwip-1.4.1/src/core/tcp_in.c ****   }
 263:../lwip-1.4.1/src/core/tcp_in.c **** 
 264:../lwip-1.4.1/src/core/tcp_in.c **** #if TCP_INPUT_DEBUG
 265:../lwip-1.4.1/src/core/tcp_in.c ****   LWIP_DEBUGF(TCP_INPUT_DEBUG, ("+-+-+-+-+-+-+-+-+-+-+-+-+-+- tcp_input: flags "));
 266:../lwip-1.4.1/src/core/tcp_in.c ****   tcp_debug_print_flags(TCPH_FLAGS(tcphdr));
 267:../lwip-1.4.1/src/core/tcp_in.c ****   LWIP_DEBUGF(TCP_INPUT_DEBUG, ("-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n"));
 268:../lwip-1.4.1/src/core/tcp_in.c **** #endif /* TCP_INPUT_DEBUG */
 269:../lwip-1.4.1/src/core/tcp_in.c **** 
 270:../lwip-1.4.1/src/core/tcp_in.c **** 
 271:../lwip-1.4.1/src/core/tcp_in.c ****   if (pcb != NULL) {
 514              		.loc 1 271 0
 515 0316 7B69     		ldr	r3, [r7, #20]
 516 0318 002B     		cmp	r3, #0
 517 031a 00F05281 		beq	.L23
 272:../lwip-1.4.1/src/core/tcp_in.c ****     /* The incoming segment belongs to a connection. */
 273:../lwip-1.4.1/src/core/tcp_in.c **** #if TCP_INPUT_DEBUG
 274:../lwip-1.4.1/src/core/tcp_in.c **** #if TCP_DEBUG
 275:../lwip-1.4.1/src/core/tcp_in.c ****     tcp_debug_print_state(pcb->state);
 276:../lwip-1.4.1/src/core/tcp_in.c **** #endif /* TCP_DEBUG */
 277:../lwip-1.4.1/src/core/tcp_in.c **** #endif /* TCP_INPUT_DEBUG */
 278:../lwip-1.4.1/src/core/tcp_in.c **** 
 279:../lwip-1.4.1/src/core/tcp_in.c ****     /* Set up a tcp_seg structure. */
 280:../lwip-1.4.1/src/core/tcp_in.c ****     inseg.next = NULL;
 518              		.loc 1 280 0
 519 031e 814B     		ldr	r3, .L52+12
 520 0320 0022     		movs	r2, #0
 521 0322 1A60     		str	r2, [r3]
 281:../lwip-1.4.1/src/core/tcp_in.c ****     inseg.len = p->tot_len;
 522              		.loc 1 281 0
 523 0324 7B68     		ldr	r3, [r7, #4]
 524 0326 1A89     		ldrh	r2, [r3, #8]
 525 0328 7E4B     		ldr	r3, .L52+12
 526 032a 1A81     		strh	r2, [r3, #8]	@ movhi
 282:../lwip-1.4.1/src/core/tcp_in.c ****     inseg.p = p;
 527              		.loc 1 282 0
 528 032c 7D4A     		ldr	r2, .L52+12
 529 032e 7B68     		ldr	r3, [r7, #4]
 530 0330 5360     		str	r3, [r2, #4]
 283:../lwip-1.4.1/src/core/tcp_in.c ****     inseg.tcphdr = tcphdr;
 531              		.loc 1 283 0
 532 0332 794B     		ldr	r3, .L52
 533 0334 1B68     		ldr	r3, [r3]
 534 0336 7B4A     		ldr	r2, .L52+12
 535 0338 1361     		str	r3, [r2, #16]
 284:../lwip-1.4.1/src/core/tcp_in.c **** 
 285:../lwip-1.4.1/src/core/tcp_in.c ****     recv_data = NULL;
 536              		.loc 1 285 0
 537 033a 7B4B     		ldr	r3, .L52+16
 538 033c 0022     		movs	r2, #0
 539 033e 1A60     		str	r2, [r3]
 286:../lwip-1.4.1/src/core/tcp_in.c ****     recv_flags = 0;
 540              		.loc 1 286 0
 541 0340 7A4B     		ldr	r3, .L52+20
 542 0342 0022     		movs	r2, #0
 543 0344 1A70     		strb	r2, [r3]
 287:../lwip-1.4.1/src/core/tcp_in.c **** 
 288:../lwip-1.4.1/src/core/tcp_in.c ****     if (flags & TCP_PSH) {
 544              		.loc 1 288 0
 545 0346 7A4B     		ldr	r3, .L52+24
 546 0348 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 547 034a 03F00803 		and	r3, r3, #8
 548 034e 002B     		cmp	r3, #0
 549 0350 06D0     		beq	.L24
 289:../lwip-1.4.1/src/core/tcp_in.c ****       p->flags |= PBUF_FLAG_PUSH;
 550              		.loc 1 289 0
 551 0352 7B68     		ldr	r3, [r7, #4]
 552 0354 5B7B     		ldrb	r3, [r3, #13]	@ zero_extendqisi2
 553 0356 43F00103 		orr	r3, r3, #1
 554 035a DAB2     		uxtb	r2, r3
 555 035c 7B68     		ldr	r3, [r7, #4]
 556 035e 5A73     		strb	r2, [r3, #13]
 557              	.L24:
 290:../lwip-1.4.1/src/core/tcp_in.c ****     }
 291:../lwip-1.4.1/src/core/tcp_in.c **** 
 292:../lwip-1.4.1/src/core/tcp_in.c ****     /* If there is data which was previously "refused" by upper layer */
 293:../lwip-1.4.1/src/core/tcp_in.c ****     if (pcb->refused_data != NULL) {
 558              		.loc 1 293 0
 559 0360 7B69     		ldr	r3, [r7, #20]
 560 0362 9B6F     		ldr	r3, [r3, #120]
 561 0364 002B     		cmp	r3, #0
 562 0366 16D0     		beq	.L25
 294:../lwip-1.4.1/src/core/tcp_in.c ****       if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 563              		.loc 1 294 0
 564 0368 7869     		ldr	r0, [r7, #20]
 565 036a FFF7FEFF 		bl	tcp_process_refused_data
 566 036e 0346     		mov	r3, r0
 567 0370 13F10A0F 		cmn	r3, #10
 568 0374 07D0     		beq	.L26
 295:../lwip-1.4.1/src/core/tcp_in.c ****         ((pcb->refused_data != NULL) && (tcplen > 0))) {
 569              		.loc 1 295 0 discriminator 1
 570 0376 7B69     		ldr	r3, [r7, #20]
 571 0378 9B6F     		ldr	r3, [r3, #120]
 294:../lwip-1.4.1/src/core/tcp_in.c ****       if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 572              		.loc 1 294 0 discriminator 1
 573 037a 002B     		cmp	r3, #0
 574 037c 0BD0     		beq	.L25
 575              		.loc 1 295 0
 576 037e 6D4B     		ldr	r3, .L52+28
 577 0380 1B88     		ldrh	r3, [r3]
 578 0382 002B     		cmp	r3, #0
 579 0384 07D0     		beq	.L25
 580              	.L26:
 296:../lwip-1.4.1/src/core/tcp_in.c ****         /* pcb has been aborted or refused data is still refused and the new
 297:../lwip-1.4.1/src/core/tcp_in.c ****            segment contains data */
 298:../lwip-1.4.1/src/core/tcp_in.c ****         TCP_STATS_INC(tcp.drop);
 581              		.loc 1 298 0
 582 0386 6C4B     		ldr	r3, .L52+32
 583 0388 D3F82C31 		ldr	r3, [r3, #300]
 584 038c 0133     		adds	r3, r3, #1
 585 038e 6A4A     		ldr	r2, .L52+32
 586 0390 C2F82C31 		str	r3, [r2, #300]
 299:../lwip-1.4.1/src/core/tcp_in.c ****         snmp_inc_tcpinerrs();
 300:../lwip-1.4.1/src/core/tcp_in.c ****         goto aborted;
 587              		.loc 1 300 0
 588 0394 02E1     		b	.L27
 589              	.L25:
 301:../lwip-1.4.1/src/core/tcp_in.c ****       }
 302:../lwip-1.4.1/src/core/tcp_in.c ****     }
 303:../lwip-1.4.1/src/core/tcp_in.c ****     tcp_input_pcb = pcb;
 590              		.loc 1 303 0
 591 0396 694A     		ldr	r2, .L52+36
 592 0398 7B69     		ldr	r3, [r7, #20]
 593 039a 1360     		str	r3, [r2]
 304:../lwip-1.4.1/src/core/tcp_in.c ****     err = tcp_process(pcb);
 594              		.loc 1 304 0
 595 039c 7869     		ldr	r0, [r7, #20]
 596 039e FFF7FEFF 		bl	tcp_process
 597 03a2 0346     		mov	r3, r0
 598 03a4 FB72     		strb	r3, [r7, #11]
 305:../lwip-1.4.1/src/core/tcp_in.c ****     /* A return value of ERR_ABRT means that tcp_abort() was called
 306:../lwip-1.4.1/src/core/tcp_in.c ****        and that the pcb has been freed. If so, we don't do anything. */
 307:../lwip-1.4.1/src/core/tcp_in.c ****     if (err != ERR_ABRT) {
 599              		.loc 1 307 0
 600 03a6 97F90B30 		ldrsb	r3, [r7, #11]
 601 03aa 13F10A0F 		cmn	r3, #10
 602 03ae 00F0F580 		beq	.L27
 308:../lwip-1.4.1/src/core/tcp_in.c ****       if (recv_flags & TF_RESET) {
 603              		.loc 1 308 0
 604 03b2 5E4B     		ldr	r3, .L52+20
 605 03b4 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 606 03b6 03F00803 		and	r3, r3, #8
 607 03ba 002B     		cmp	r3, #0
 608 03bc 16D0     		beq	.L28
 309:../lwip-1.4.1/src/core/tcp_in.c ****         /* TF_RESET means that the connection was reset by the other
 310:../lwip-1.4.1/src/core/tcp_in.c ****            end. We then call the error callback to inform the
 311:../lwip-1.4.1/src/core/tcp_in.c ****            application that the connection is dead before we
 312:../lwip-1.4.1/src/core/tcp_in.c ****            deallocate the PCB. */
 313:../lwip-1.4.1/src/core/tcp_in.c ****         TCP_EVENT_ERR(pcb->errf, pcb->callback_arg, ERR_RST);
 609              		.loc 1 313 0
 610 03be 7B69     		ldr	r3, [r7, #20]
 611 03c0 D3F88C30 		ldr	r3, [r3, #140]
 612 03c4 002B     		cmp	r3, #0
 613 03c6 08D0     		beq	.L29
 614              		.loc 1 313 0 is_stmt 0 discriminator 1
 615 03c8 7B69     		ldr	r3, [r7, #20]
 616 03ca D3F88C30 		ldr	r3, [r3, #140]
 617 03ce 7A69     		ldr	r2, [r7, #20]
 618 03d0 1269     		ldr	r2, [r2, #16]
 619 03d2 1046     		mov	r0, r2
 620 03d4 6FF00A01 		mvn	r1, #10
 621 03d8 9847     		blx	r3
 622              	.L29:
 314:../lwip-1.4.1/src/core/tcp_in.c ****         tcp_pcb_remove(&tcp_active_pcbs, pcb);
 623              		.loc 1 314 0 is_stmt 1
 624 03da 5948     		ldr	r0, .L52+40
 625 03dc 7969     		ldr	r1, [r7, #20]
 626 03de FFF7FEFF 		bl	tcp_pcb_remove
 315:../lwip-1.4.1/src/core/tcp_in.c ****         memp_free(MEMP_TCP_PCB, pcb);
 627              		.loc 1 315 0
 628 03e2 0220     		movs	r0, #2
 629 03e4 7969     		ldr	r1, [r7, #20]
 630 03e6 FFF7FEFF 		bl	memp_free
 631 03ea D7E0     		b	.L27
 632              	.L28:
 316:../lwip-1.4.1/src/core/tcp_in.c ****       } else if (recv_flags & TF_CLOSED) {
 633              		.loc 1 316 0
 634 03ec 4F4B     		ldr	r3, .L52+20
 635 03ee 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 636 03f0 03F01003 		and	r3, r3, #16
 637 03f4 002B     		cmp	r3, #0
 638 03f6 1CD0     		beq	.L30
 317:../lwip-1.4.1/src/core/tcp_in.c ****         /* The connection has been closed and we will deallocate the
 318:../lwip-1.4.1/src/core/tcp_in.c ****            PCB. */
 319:../lwip-1.4.1/src/core/tcp_in.c ****         if (!(pcb->flags & TF_RXCLOSED)) {
 639              		.loc 1 319 0
 640 03f8 7B69     		ldr	r3, [r7, #20]
 641 03fa 9B7F     		ldrb	r3, [r3, #30]	@ zero_extendqisi2
 642 03fc 03F01003 		and	r3, r3, #16
 643 0400 002B     		cmp	r3, #0
 644 0402 0DD1     		bne	.L31
 320:../lwip-1.4.1/src/core/tcp_in.c ****           /* Connection closed although the application has only shut down the
 321:../lwip-1.4.1/src/core/tcp_in.c ****              tx side: call the PCB's err callback and indicate the closure to
 322:../lwip-1.4.1/src/core/tcp_in.c ****              ensure the application doesn't continue using the PCB. */
 323:../lwip-1.4.1/src/core/tcp_in.c ****           TCP_EVENT_ERR(pcb->errf, pcb->callback_arg, ERR_CLSD);
 645              		.loc 1 323 0
 646 0404 7B69     		ldr	r3, [r7, #20]
 647 0406 D3F88C30 		ldr	r3, [r3, #140]
 648 040a 002B     		cmp	r3, #0
 649 040c 08D0     		beq	.L31
 650              		.loc 1 323 0 is_stmt 0 discriminator 1
 651 040e 7B69     		ldr	r3, [r7, #20]
 652 0410 D3F88C30 		ldr	r3, [r3, #140]
 653 0414 7A69     		ldr	r2, [r7, #20]
 654 0416 1269     		ldr	r2, [r2, #16]
 655 0418 1046     		mov	r0, r2
 656 041a 6FF00B01 		mvn	r1, #11
 657 041e 9847     		blx	r3
 658              	.L31:
 324:../lwip-1.4.1/src/core/tcp_in.c ****         }
 325:../lwip-1.4.1/src/core/tcp_in.c ****         tcp_pcb_remove(&tcp_active_pcbs, pcb);
 659              		.loc 1 325 0 is_stmt 1
 660 0420 4748     		ldr	r0, .L52+40
 661 0422 7969     		ldr	r1, [r7, #20]
 662 0424 FFF7FEFF 		bl	tcp_pcb_remove
 326:../lwip-1.4.1/src/core/tcp_in.c ****         memp_free(MEMP_TCP_PCB, pcb);
 663              		.loc 1 326 0
 664 0428 0220     		movs	r0, #2
 665 042a 7969     		ldr	r1, [r7, #20]
 666 042c FFF7FEFF 		bl	memp_free
 667 0430 B4E0     		b	.L27
 668              	.L30:
 327:../lwip-1.4.1/src/core/tcp_in.c ****       } else {
 328:../lwip-1.4.1/src/core/tcp_in.c ****         err = ERR_OK;
 669              		.loc 1 328 0
 670 0432 0023     		movs	r3, #0
 671 0434 FB72     		strb	r3, [r7, #11]
 329:../lwip-1.4.1/src/core/tcp_in.c ****         /* If the application has registered a "sent" function to be
 330:../lwip-1.4.1/src/core/tcp_in.c ****            called when new send buffer space is available, we call it
 331:../lwip-1.4.1/src/core/tcp_in.c ****            now. */
 332:../lwip-1.4.1/src/core/tcp_in.c ****         if (pcb->acked > 0) {
 672              		.loc 1 332 0
 673 0436 7B69     		ldr	r3, [r7, #20]
 674 0438 B3F86430 		ldrh	r3, [r3, #100]
 675 043c 002B     		cmp	r3, #0
 676 043e 18D0     		beq	.L32
 333:../lwip-1.4.1/src/core/tcp_in.c ****           TCP_EVENT_SENT(pcb, pcb->acked, err);
 677              		.loc 1 333 0
 678 0440 7B69     		ldr	r3, [r7, #20]
 679 0442 DB6F     		ldr	r3, [r3, #124]
 680 0444 002B     		cmp	r3, #0
 681 0446 0CD0     		beq	.L33
 682              		.loc 1 333 0 is_stmt 0 discriminator 1
 683 0448 7B69     		ldr	r3, [r7, #20]
 684 044a DB6F     		ldr	r3, [r3, #124]
 685 044c 7A69     		ldr	r2, [r7, #20]
 686 044e 1169     		ldr	r1, [r2, #16]
 687 0450 7A69     		ldr	r2, [r7, #20]
 688 0452 B2F86420 		ldrh	r2, [r2, #100]
 689 0456 0846     		mov	r0, r1
 690 0458 7969     		ldr	r1, [r7, #20]
 691 045a 9847     		blx	r3
 692 045c 0346     		mov	r3, r0
 693 045e FB72     		strb	r3, [r7, #11]
 694 0460 01E0     		b	.L34
 695              	.L33:
 696              		.loc 1 333 0 discriminator 2
 697 0462 0023     		movs	r3, #0
 698 0464 FB72     		strb	r3, [r7, #11]
 699              	.L34:
 334:../lwip-1.4.1/src/core/tcp_in.c ****           if (err == ERR_ABRT) {
 700              		.loc 1 334 0 is_stmt 1
 701 0466 97F90B30 		ldrsb	r3, [r7, #11]
 702 046a 13F10A0F 		cmn	r3, #10
 703 046e 00D1     		bne	.L32
 335:../lwip-1.4.1/src/core/tcp_in.c ****             goto aborted;
 704              		.loc 1 335 0
 705 0470 94E0     		b	.L27
 706              	.L32:
 336:../lwip-1.4.1/src/core/tcp_in.c ****           }
 337:../lwip-1.4.1/src/core/tcp_in.c ****         }
 338:../lwip-1.4.1/src/core/tcp_in.c **** 
 339:../lwip-1.4.1/src/core/tcp_in.c ****         if (recv_data != NULL) {
 707              		.loc 1 339 0
 708 0472 2D4B     		ldr	r3, .L52+16
 709 0474 1B68     		ldr	r3, [r3]
 710 0476 002B     		cmp	r3, #0
 711 0478 3AD0     		beq	.L35
 340:../lwip-1.4.1/src/core/tcp_in.c ****           LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 341:../lwip-1.4.1/src/core/tcp_in.c ****           if (pcb->flags & TF_RXCLOSED) {
 712              		.loc 1 341 0
 713 047a 7B69     		ldr	r3, [r7, #20]
 714 047c 9B7F     		ldrb	r3, [r3, #30]	@ zero_extendqisi2
 715 047e 03F01003 		and	r3, r3, #16
 716 0482 002B     		cmp	r3, #0
 717 0484 08D0     		beq	.L36
 342:../lwip-1.4.1/src/core/tcp_in.c ****             /* received data although already closed -> abort (send RST) to
 343:../lwip-1.4.1/src/core/tcp_in.c ****                notify the remote host that not all data has been processed */
 344:../lwip-1.4.1/src/core/tcp_in.c ****             pbuf_free(recv_data);
 718              		.loc 1 344 0
 719 0486 284B     		ldr	r3, .L52+16
 720 0488 1B68     		ldr	r3, [r3]
 721 048a 1846     		mov	r0, r3
 722 048c FFF7FEFF 		bl	pbuf_free
 345:../lwip-1.4.1/src/core/tcp_in.c ****             tcp_abort(pcb);
 723              		.loc 1 345 0
 724 0490 7869     		ldr	r0, [r7, #20]
 725 0492 FFF7FEFF 		bl	tcp_abort
 346:../lwip-1.4.1/src/core/tcp_in.c ****             goto aborted;
 726              		.loc 1 346 0
 727 0496 81E0     		b	.L27
 728              	.L36:
 347:../lwip-1.4.1/src/core/tcp_in.c ****           }
 348:../lwip-1.4.1/src/core/tcp_in.c **** 
 349:../lwip-1.4.1/src/core/tcp_in.c ****           /* Notify application that data has been received. */
 350:../lwip-1.4.1/src/core/tcp_in.c ****           TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 729              		.loc 1 350 0
 730 0498 7B69     		ldr	r3, [r7, #20]
 731 049a D3F88030 		ldr	r3, [r3, #128]
 732 049e 002B     		cmp	r3, #0
 733 04a0 0ED0     		beq	.L37
 734              		.loc 1 350 0 is_stmt 0 discriminator 1
 735 04a2 7B69     		ldr	r3, [r7, #20]
 736 04a4 D3F88040 		ldr	r4, [r3, #128]
 737 04a8 7B69     		ldr	r3, [r7, #20]
 738 04aa 1A69     		ldr	r2, [r3, #16]
 739 04ac 1E4B     		ldr	r3, .L52+16
 740 04ae 1B68     		ldr	r3, [r3]
 741 04b0 1046     		mov	r0, r2
 742 04b2 7969     		ldr	r1, [r7, #20]
 743 04b4 1A46     		mov	r2, r3
 744 04b6 0023     		movs	r3, #0
 745 04b8 A047     		blx	r4
 746 04ba 0346     		mov	r3, r0
 747 04bc FB72     		strb	r3, [r7, #11]
 748 04be 09E0     		b	.L38
 749              	.L37:
 750              		.loc 1 350 0 discriminator 2
 751 04c0 194B     		ldr	r3, .L52+16
 752 04c2 1B68     		ldr	r3, [r3]
 753 04c4 0020     		movs	r0, #0
 754 04c6 7969     		ldr	r1, [r7, #20]
 755 04c8 1A46     		mov	r2, r3
 756 04ca 0023     		movs	r3, #0
 757 04cc FFF7FEFF 		bl	tcp_recv_null
 758 04d0 0346     		mov	r3, r0
 759 04d2 FB72     		strb	r3, [r7, #11]
 760              	.L38:
 351:../lwip-1.4.1/src/core/tcp_in.c ****           if (err == ERR_ABRT) {
 761              		.loc 1 351 0 is_stmt 1
 762 04d4 97F90B30 		ldrsb	r3, [r7, #11]
 763 04d8 13F10A0F 		cmn	r3, #10
 764 04dc 00D1     		bne	.L39
 352:../lwip-1.4.1/src/core/tcp_in.c ****             goto aborted;
 765              		.loc 1 352 0
 766 04de 5DE0     		b	.L27
 767              	.L39:
 353:../lwip-1.4.1/src/core/tcp_in.c ****           }
 354:../lwip-1.4.1/src/core/tcp_in.c **** 
 355:../lwip-1.4.1/src/core/tcp_in.c ****           /* If the upper layer can't receive this data, store it */
 356:../lwip-1.4.1/src/core/tcp_in.c ****           if (err != ERR_OK) {
 768              		.loc 1 356 0
 769 04e0 97F90B30 		ldrsb	r3, [r7, #11]
 770 04e4 002B     		cmp	r3, #0
 771 04e6 03D0     		beq	.L35
 357:../lwip-1.4.1/src/core/tcp_in.c ****             pcb->refused_data = recv_data;
 772              		.loc 1 357 0
 773 04e8 0F4B     		ldr	r3, .L52+16
 774 04ea 1A68     		ldr	r2, [r3]
 775 04ec 7B69     		ldr	r3, [r7, #20]
 776 04ee 9A67     		str	r2, [r3, #120]
 777              	.L35:
 358:../lwip-1.4.1/src/core/tcp_in.c ****             LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: keep incoming packet, because pcb is \"full\"
 359:../lwip-1.4.1/src/core/tcp_in.c ****           }
 360:../lwip-1.4.1/src/core/tcp_in.c ****         }
 361:../lwip-1.4.1/src/core/tcp_in.c **** 
 362:../lwip-1.4.1/src/core/tcp_in.c ****         /* If a FIN segment was received, we call the callback
 363:../lwip-1.4.1/src/core/tcp_in.c ****            function with a NULL buffer to indicate EOF. */
 364:../lwip-1.4.1/src/core/tcp_in.c ****         if (recv_flags & TF_GOT_FIN) {
 778              		.loc 1 364 0
 779 04f0 0E4B     		ldr	r3, .L52+20
 780 04f2 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 781 04f4 03F02003 		and	r3, r3, #32
 782 04f8 002B     		cmp	r3, #0
 783 04fa 49D0     		beq	.L40
 365:../lwip-1.4.1/src/core/tcp_in.c ****           if (pcb->refused_data != NULL) {
 784              		.loc 1 365 0
 785 04fc 7B69     		ldr	r3, [r7, #20]
 786 04fe 9B6F     		ldr	r3, [r3, #120]
 787 0500 002B     		cmp	r3, #0
 788 0502 1FD0     		beq	.L41
 366:../lwip-1.4.1/src/core/tcp_in.c ****             /* Delay this if we have refused data. */
 367:../lwip-1.4.1/src/core/tcp_in.c ****             pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 789              		.loc 1 367 0
 790 0504 7B69     		ldr	r3, [r7, #20]
 791 0506 9B6F     		ldr	r3, [r3, #120]
 792 0508 7A69     		ldr	r2, [r7, #20]
 793 050a 926F     		ldr	r2, [r2, #120]
 794 050c 527B     		ldrb	r2, [r2, #13]	@ zero_extendqisi2
 795 050e 42F02002 		orr	r2, r2, #32
 796 0512 D2B2     		uxtb	r2, r2
 797 0514 5A73     		strb	r2, [r3, #13]
 798 0516 3BE0     		b	.L40
 799              	.L53:
 800              		.align	2
 801              	.L52:
 802 0518 14000000 		.word	tcphdr
 803 051c 00000000 		.word	current_iphdr_dest
 804 0520 00000000 		.word	tcp_listen_pcbs
 805 0524 00000000 		.word	inseg
 806 0528 2C000000 		.word	recv_data
 807 052c 28000000 		.word	recv_flags
 808 0530 24000000 		.word	flags
 809 0534 26000000 		.word	tcplen
 810 0538 00000000 		.word	lwip_stats
 811 053c 00000000 		.word	tcp_input_pcb
 812 0540 00000000 		.word	tcp_active_pcbs
 813              	.L41:
 368:../lwip-1.4.1/src/core/tcp_in.c ****           } else {
 369:../lwip-1.4.1/src/core/tcp_in.c ****             /* correct rcv_wnd as the application won't call tcp_recved()
 370:../lwip-1.4.1/src/core/tcp_in.c ****                for the FIN's seqno */
 371:../lwip-1.4.1/src/core/tcp_in.c ****             if (pcb->rcv_wnd != TCP_WND) {
 814              		.loc 1 371 0
 815 0544 7B69     		ldr	r3, [r7, #20]
 816 0546 9B8D     		ldrh	r3, [r3, #44]
 817 0548 40F66832 		movw	r2, #2920
 818 054c 9342     		cmp	r3, r2
 819 054e 05D0     		beq	.L42
 372:../lwip-1.4.1/src/core/tcp_in.c ****               pcb->rcv_wnd++;
 820              		.loc 1 372 0
 821 0550 7B69     		ldr	r3, [r7, #20]
 822 0552 9B8D     		ldrh	r3, [r3, #44]
 823 0554 0133     		adds	r3, r3, #1
 824 0556 9AB2     		uxth	r2, r3
 825 0558 7B69     		ldr	r3, [r7, #20]
 826 055a 9A85     		strh	r2, [r3, #44]	@ movhi
 827              	.L42:
 373:../lwip-1.4.1/src/core/tcp_in.c ****             }
 374:../lwip-1.4.1/src/core/tcp_in.c ****             TCP_EVENT_CLOSED(pcb, err);
 828              		.loc 1 374 0
 829 055c 7B69     		ldr	r3, [r7, #20]
 830 055e D3F88030 		ldr	r3, [r3, #128]
 831 0562 002B     		cmp	r3, #0
 832 0564 0CD0     		beq	.L43
 833              		.loc 1 374 0 is_stmt 0 discriminator 1
 834 0566 7B69     		ldr	r3, [r7, #20]
 835 0568 D3F88040 		ldr	r4, [r3, #128]
 836 056c 7B69     		ldr	r3, [r7, #20]
 837 056e 1B69     		ldr	r3, [r3, #16]
 838 0570 1846     		mov	r0, r3
 839 0572 7969     		ldr	r1, [r7, #20]
 840 0574 0022     		movs	r2, #0
 841 0576 0023     		movs	r3, #0
 842 0578 A047     		blx	r4
 843 057a 0346     		mov	r3, r0
 844 057c FB72     		strb	r3, [r7, #11]
 845 057e 01E0     		b	.L44
 846              	.L43:
 847              		.loc 1 374 0 discriminator 2
 848 0580 0023     		movs	r3, #0
 849 0582 FB72     		strb	r3, [r7, #11]
 850              	.L44:
 375:../lwip-1.4.1/src/core/tcp_in.c ****             if (err == ERR_ABRT) {
 851              		.loc 1 375 0 is_stmt 1
 852 0584 97F90B30 		ldrsb	r3, [r7, #11]
 853 0588 13F10A0F 		cmn	r3, #10
 854 058c 00D1     		bne	.L40
 376:../lwip-1.4.1/src/core/tcp_in.c ****               goto aborted;
 855              		.loc 1 376 0
 856 058e 05E0     		b	.L27
 857              	.L40:
 377:../lwip-1.4.1/src/core/tcp_in.c ****             }
 378:../lwip-1.4.1/src/core/tcp_in.c ****           }
 379:../lwip-1.4.1/src/core/tcp_in.c ****         }
 380:../lwip-1.4.1/src/core/tcp_in.c **** 
 381:../lwip-1.4.1/src/core/tcp_in.c ****         tcp_input_pcb = NULL;
 858              		.loc 1 381 0
 859 0590 2D4B     		ldr	r3, .L54
 860 0592 0022     		movs	r2, #0
 861 0594 1A60     		str	r2, [r3]
 382:../lwip-1.4.1/src/core/tcp_in.c ****         /* Try to send something out. */
 383:../lwip-1.4.1/src/core/tcp_in.c ****         tcp_output(pcb);
 862              		.loc 1 383 0
 863 0596 7869     		ldr	r0, [r7, #20]
 864 0598 FFF7FEFF 		bl	tcp_output
 865              	.L27:
 384:../lwip-1.4.1/src/core/tcp_in.c **** #if TCP_INPUT_DEBUG
 385:../lwip-1.4.1/src/core/tcp_in.c **** #if TCP_DEBUG
 386:../lwip-1.4.1/src/core/tcp_in.c ****         tcp_debug_print_state(pcb->state);
 387:../lwip-1.4.1/src/core/tcp_in.c **** #endif /* TCP_DEBUG */
 388:../lwip-1.4.1/src/core/tcp_in.c **** #endif /* TCP_INPUT_DEBUG */
 389:../lwip-1.4.1/src/core/tcp_in.c ****       }
 390:../lwip-1.4.1/src/core/tcp_in.c ****     }
 391:../lwip-1.4.1/src/core/tcp_in.c ****     /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
 392:../lwip-1.4.1/src/core/tcp_in.c ****        Below this line, 'pcb' may not be dereferenced! */
 393:../lwip-1.4.1/src/core/tcp_in.c **** aborted:
 394:../lwip-1.4.1/src/core/tcp_in.c ****     tcp_input_pcb = NULL;
 866              		.loc 1 394 0
 867 059c 2A4B     		ldr	r3, .L54
 868 059e 0022     		movs	r2, #0
 869 05a0 1A60     		str	r2, [r3]
 395:../lwip-1.4.1/src/core/tcp_in.c ****     recv_data = NULL;
 870              		.loc 1 395 0
 871 05a2 2A4B     		ldr	r3, .L54+4
 872 05a4 0022     		movs	r2, #0
 873 05a6 1A60     		str	r2, [r3]
 396:../lwip-1.4.1/src/core/tcp_in.c **** 
 397:../lwip-1.4.1/src/core/tcp_in.c ****     /* give up our reference to inseg.p */
 398:../lwip-1.4.1/src/core/tcp_in.c ****     if (inseg.p != NULL)
 874              		.loc 1 398 0
 875 05a8 294B     		ldr	r3, .L54+8
 876 05aa 5B68     		ldr	r3, [r3, #4]
 877 05ac 002B     		cmp	r3, #0
 878 05ae 3CD0     		beq	.L49
 399:../lwip-1.4.1/src/core/tcp_in.c ****     {
 400:../lwip-1.4.1/src/core/tcp_in.c ****       pbuf_free(inseg.p);
 879              		.loc 1 400 0
 880 05b0 274B     		ldr	r3, .L54+8
 881 05b2 5B68     		ldr	r3, [r3, #4]
 882 05b4 1846     		mov	r0, r3
 883 05b6 FFF7FEFF 		bl	pbuf_free
 401:../lwip-1.4.1/src/core/tcp_in.c ****       inseg.p = NULL;
 884              		.loc 1 401 0
 885 05ba 254B     		ldr	r3, .L54+8
 886 05bc 0022     		movs	r2, #0
 887 05be 5A60     		str	r2, [r3, #4]
 888 05c0 33E0     		b	.L49
 889              	.L23:
 402:../lwip-1.4.1/src/core/tcp_in.c ****     }
 403:../lwip-1.4.1/src/core/tcp_in.c ****   } else {
 404:../lwip-1.4.1/src/core/tcp_in.c **** 
 405:../lwip-1.4.1/src/core/tcp_in.c ****     /* If no matching PCB was found, send a TCP RST (reset) to the
 406:../lwip-1.4.1/src/core/tcp_in.c ****        sender. */
 407:../lwip-1.4.1/src/core/tcp_in.c ****     LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_input: no PCB match found, resetting.\n"));
 408:../lwip-1.4.1/src/core/tcp_in.c ****     if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 890              		.loc 1 408 0
 891 05c2 244B     		ldr	r3, .L54+12
 892 05c4 1B68     		ldr	r3, [r3]
 893 05c6 9B89     		ldrh	r3, [r3, #12]	@ unaligned
 894 05c8 9BB2     		uxth	r3, r3
 895 05ca 1846     		mov	r0, r3
 896 05cc FFF7FEFF 		bl	lwip_ntohs
 897 05d0 0346     		mov	r3, r0
 898 05d2 03F00403 		and	r3, r3, #4
 899 05d6 002B     		cmp	r3, #0
 900 05d8 23D1     		bne	.L47
 409:../lwip-1.4.1/src/core/tcp_in.c ****       TCP_STATS_INC(tcp.proterr);
 901              		.loc 1 409 0
 902 05da 1F4B     		ldr	r3, .L54+16
 903 05dc D3F84031 		ldr	r3, [r3, #320]
 904 05e0 0133     		adds	r3, r3, #1
 905 05e2 1D4A     		ldr	r2, .L54+16
 906 05e4 C2F84031 		str	r3, [r2, #320]
 410:../lwip-1.4.1/src/core/tcp_in.c ****       TCP_STATS_INC(tcp.drop);
 907              		.loc 1 410 0
 908 05e8 1B4B     		ldr	r3, .L54+16
 909 05ea D3F82C31 		ldr	r3, [r3, #300]
 910 05ee 0133     		adds	r3, r3, #1
 911 05f0 194A     		ldr	r2, .L54+16
 912 05f2 C2F82C31 		str	r3, [r2, #300]
 411:../lwip-1.4.1/src/core/tcp_in.c ****       tcp_rst(ackno, seqno + tcplen,
 913              		.loc 1 411 0
 914 05f6 194B     		ldr	r3, .L54+20
 915 05f8 1868     		ldr	r0, [r3]
 916 05fa 194B     		ldr	r3, .L54+24
 917 05fc 1B88     		ldrh	r3, [r3]
 918 05fe 1A46     		mov	r2, r3
 919 0600 184B     		ldr	r3, .L54+28
 920 0602 1B68     		ldr	r3, [r3]
 921 0604 D118     		adds	r1, r2, r3
 412:../lwip-1.4.1/src/core/tcp_in.c ****         ip_current_dest_addr(), ip_current_src_addr(),
 413:../lwip-1.4.1/src/core/tcp_in.c ****         tcphdr->dest, tcphdr->src);
 922              		.loc 1 413 0
 923 0606 134B     		ldr	r3, .L54+12
 924 0608 1B68     		ldr	r3, [r3]
 411:../lwip-1.4.1/src/core/tcp_in.c ****       tcp_rst(ackno, seqno + tcplen,
 925              		.loc 1 411 0
 926 060a 5B88     		ldrh	r3, [r3, #2]	@ unaligned
 927 060c 9AB2     		uxth	r2, r3
 928              		.loc 1 413 0
 929 060e 114B     		ldr	r3, .L54+12
 930 0610 1B68     		ldr	r3, [r3]
 411:../lwip-1.4.1/src/core/tcp_in.c ****       tcp_rst(ackno, seqno + tcplen,
 931              		.loc 1 411 0
 932 0612 1B88     		ldrh	r3, [r3]	@ unaligned
 933 0614 9BB2     		uxth	r3, r3
 934 0616 0092     		str	r2, [sp]
 935 0618 0193     		str	r3, [sp, #4]
 936 061a 134A     		ldr	r2, .L54+32
 937 061c 134B     		ldr	r3, .L54+36
 938 061e FFF7FEFF 		bl	tcp_rst
 939              	.L47:
 414:../lwip-1.4.1/src/core/tcp_in.c ****     }
 415:../lwip-1.4.1/src/core/tcp_in.c ****     pbuf_free(p);
 940              		.loc 1 415 0
 941 0622 7868     		ldr	r0, [r7, #4]
 942 0624 FFF7FEFF 		bl	pbuf_free
 416:../lwip-1.4.1/src/core/tcp_in.c ****   }
 417:../lwip-1.4.1/src/core/tcp_in.c **** 
 418:../lwip-1.4.1/src/core/tcp_in.c ****   LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
 419:../lwip-1.4.1/src/core/tcp_in.c ****   PERF_STOP("tcp_input");
 420:../lwip-1.4.1/src/core/tcp_in.c ****   return;
 943              		.loc 1 420 0
 944 0628 0AE0     		b	.L1
 945              	.L49:
 946 062a 09E0     		b	.L1
 947              	.L4:
 421:../lwip-1.4.1/src/core/tcp_in.c **** dropped:
 422:../lwip-1.4.1/src/core/tcp_in.c ****   TCP_STATS_INC(tcp.drop);
 948              		.loc 1 422 0
 949 062c 0A4B     		ldr	r3, .L54+16
 950 062e D3F82C31 		ldr	r3, [r3, #300]
 951 0632 0133     		adds	r3, r3, #1
 952 0634 084A     		ldr	r2, .L54+16
 953 0636 C2F82C31 		str	r3, [r2, #300]
 423:../lwip-1.4.1/src/core/tcp_in.c ****   snmp_inc_tcpinerrs();
 424:../lwip-1.4.1/src/core/tcp_in.c ****   pbuf_free(p);
 954              		.loc 1 424 0
 955 063a 7868     		ldr	r0, [r7, #4]
 956 063c FFF7FEFF 		bl	pbuf_free
 957              	.L1:
 425:../lwip-1.4.1/src/core/tcp_in.c **** }
 958              		.loc 1 425 0
 959 0640 1C37     		adds	r7, r7, #28
 960              		.cfi_def_cfa_offset 12
 961 0642 BD46     		mov	sp, r7
 962              		.cfi_def_cfa_register 13
 963              		@ sp needed
 964 0644 90BD     		pop	{r4, r7, pc}
 965              	.L55:
 966 0646 00BF     		.align	2
 967              	.L54:
 968 0648 00000000 		.word	tcp_input_pcb
 969 064c 2C000000 		.word	recv_data
 970 0650 00000000 		.word	inseg
 971 0654 14000000 		.word	tcphdr
 972 0658 00000000 		.word	lwip_stats
 973 065c 20000000 		.word	ackno
 974 0660 26000000 		.word	tcplen
 975 0664 1C000000 		.word	seqno
 976 0668 00000000 		.word	current_iphdr_dest
 977 066c 00000000 		.word	current_iphdr_src
 978              		.cfi_endproc
 979              	.LFE0:
 981              		.section	.text.tcp_listen_input,"ax",%progbits
 982              		.align	2
 983              		.thumb
 984              		.thumb_func
 986              	tcp_listen_input:
 987              	.LFB1:
 426:../lwip-1.4.1/src/core/tcp_in.c **** 
 427:../lwip-1.4.1/src/core/tcp_in.c **** /**
 428:../lwip-1.4.1/src/core/tcp_in.c ****  * Called by tcp_input() when a segment arrives for a listening
 429:../lwip-1.4.1/src/core/tcp_in.c ****  * connection (from tcp_input()).
 430:../lwip-1.4.1/src/core/tcp_in.c ****  *
 431:../lwip-1.4.1/src/core/tcp_in.c ****  * @param pcb the tcp_pcb_listen for which a segment arrived
 432:../lwip-1.4.1/src/core/tcp_in.c ****  * @return ERR_OK if the segment was processed
 433:../lwip-1.4.1/src/core/tcp_in.c ****  *         another err_t on error
 434:../lwip-1.4.1/src/core/tcp_in.c ****  *
 435:../lwip-1.4.1/src/core/tcp_in.c ****  * @note the return value is not (yet?) used in tcp_input()
 436:../lwip-1.4.1/src/core/tcp_in.c ****  * @note the segment which arrived is saved in global variables, therefore only the pcb
 437:../lwip-1.4.1/src/core/tcp_in.c ****  *       involved is passed as a parameter to this function
 438:../lwip-1.4.1/src/core/tcp_in.c ****  */
 439:../lwip-1.4.1/src/core/tcp_in.c **** static err_t
 440:../lwip-1.4.1/src/core/tcp_in.c **** tcp_listen_input(struct tcp_pcb_listen *pcb)
 441:../lwip-1.4.1/src/core/tcp_in.c **** {
 988              		.loc 1 441 0
 989              		.cfi_startproc
 990              		@ args = 0, pretend = 0, frame = 16
 991              		@ frame_needed = 1, uses_anonymous_args = 0
 992 0000 80B5     		push	{r7, lr}
 993              		.cfi_def_cfa_offset 8
 994              		.cfi_offset 7, -8
 995              		.cfi_offset 14, -4
 996 0002 86B0     		sub	sp, sp, #24
 997              		.cfi_def_cfa_offset 32
 998 0004 02AF     		add	r7, sp, #8
 999              		.cfi_def_cfa 7, 24
 1000 0006 7860     		str	r0, [r7, #4]
 442:../lwip-1.4.1/src/core/tcp_in.c ****   struct tcp_pcb *npcb;
 443:../lwip-1.4.1/src/core/tcp_in.c ****   err_t rc;
 444:../lwip-1.4.1/src/core/tcp_in.c **** 
 445:../lwip-1.4.1/src/core/tcp_in.c ****   if (flags & TCP_RST) {
 1001              		.loc 1 445 0
 1002 0008 634B     		ldr	r3, .L64
 1003 000a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1004 000c 03F00403 		and	r3, r3, #4
 1005 0010 002B     		cmp	r3, #0
 1006 0012 01D0     		beq	.L57
 446:../lwip-1.4.1/src/core/tcp_in.c ****     /* An incoming RST should be ignored. Return. */
 447:../lwip-1.4.1/src/core/tcp_in.c ****     return ERR_OK;
 1007              		.loc 1 447 0
 1008 0014 0023     		movs	r3, #0
 1009 0016 BAE0     		b	.L58
 1010              	.L57:
 448:../lwip-1.4.1/src/core/tcp_in.c ****   }
 449:../lwip-1.4.1/src/core/tcp_in.c **** 
 450:../lwip-1.4.1/src/core/tcp_in.c ****   /* In the LISTEN state, we check for incoming SYN segments,
 451:../lwip-1.4.1/src/core/tcp_in.c ****      creates a new PCB, and responds with a SYN|ACK. */
 452:../lwip-1.4.1/src/core/tcp_in.c ****   if (flags & TCP_ACK) {
 1011              		.loc 1 452 0
 1012 0018 5F4B     		ldr	r3, .L64
 1013 001a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1014 001c 03F01003 		and	r3, r3, #16
 1015 0020 002B     		cmp	r3, #0
 1016 0022 16D0     		beq	.L59
 453:../lwip-1.4.1/src/core/tcp_in.c ****     /* For incoming segments with the ACK flag set, respond with a
 454:../lwip-1.4.1/src/core/tcp_in.c ****        RST. */
 455:../lwip-1.4.1/src/core/tcp_in.c ****     LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
 456:../lwip-1.4.1/src/core/tcp_in.c ****     tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 1017              		.loc 1 456 0
 1018 0024 5D4B     		ldr	r3, .L64+4
 1019 0026 1868     		ldr	r0, [r3]
 1020 0028 5D4B     		ldr	r3, .L64+8
 1021 002a 1B88     		ldrh	r3, [r3]
 1022 002c 1A46     		mov	r2, r3
 1023 002e 5D4B     		ldr	r3, .L64+12
 1024 0030 1B68     		ldr	r3, [r3]
 1025 0032 D118     		adds	r1, r2, r3
 457:../lwip-1.4.1/src/core/tcp_in.c ****       ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 1026              		.loc 1 457 0
 1027 0034 5C4B     		ldr	r3, .L64+16
 1028 0036 1B68     		ldr	r3, [r3]
 456:../lwip-1.4.1/src/core/tcp_in.c ****       ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 1029              		.loc 1 456 0
 1030 0038 5B88     		ldrh	r3, [r3, #2]	@ unaligned
 1031 003a 9AB2     		uxth	r2, r3
 1032              		.loc 1 457 0
 1033 003c 5A4B     		ldr	r3, .L64+16
 1034 003e 1B68     		ldr	r3, [r3]
 456:../lwip-1.4.1/src/core/tcp_in.c ****       ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 1035              		.loc 1 456 0
 1036 0040 1B88     		ldrh	r3, [r3]	@ unaligned
 1037 0042 9BB2     		uxth	r3, r3
 1038 0044 0092     		str	r2, [sp]
 1039 0046 0193     		str	r3, [sp, #4]
 1040 0048 584A     		ldr	r2, .L64+20
 1041 004a 594B     		ldr	r3, .L64+24
 1042 004c FFF7FEFF 		bl	tcp_rst
 1043 0050 9CE0     		b	.L60
 1044              	.L59:
 458:../lwip-1.4.1/src/core/tcp_in.c ****   } else if (flags & TCP_SYN) {
 1045              		.loc 1 458 0
 1046 0052 514B     		ldr	r3, .L64
 1047 0054 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1048 0056 03F00203 		and	r3, r3, #2
 1049 005a 002B     		cmp	r3, #0
 1050 005c 00F09680 		beq	.L60
 459:../lwip-1.4.1/src/core/tcp_in.c ****     LWIP_DEBUGF(TCP_DEBUG, ("TCP connection request %"U16_F" -> %"U16_F".\n", tcphdr->src, tcphdr->
 460:../lwip-1.4.1/src/core/tcp_in.c **** #if TCP_LISTEN_BACKLOG
 461:../lwip-1.4.1/src/core/tcp_in.c ****     if (pcb->accepts_pending >= pcb->backlog) {
 1051              		.loc 1 461 0
 1052 0060 7B68     		ldr	r3, [r7, #4]
 1053 0062 5A7F     		ldrb	r2, [r3, #29]	@ zero_extendqisi2
 1054 0064 7B68     		ldr	r3, [r7, #4]
 1055 0066 1B7F     		ldrb	r3, [r3, #28]	@ zero_extendqisi2
 1056 0068 9A42     		cmp	r2, r3
 1057 006a 01D3     		bcc	.L61
 462:../lwip-1.4.1/src/core/tcp_in.c ****       LWIP_DEBUGF(TCP_DEBUG, ("tcp_listen_input: listen backlog exceeded for port %"U16_F"\n", tcph
 463:../lwip-1.4.1/src/core/tcp_in.c ****       return ERR_ABRT;
 1058              		.loc 1 463 0
 1059 006c F623     		movs	r3, #246
 1060 006e 8EE0     		b	.L58
 1061              	.L61:
 464:../lwip-1.4.1/src/core/tcp_in.c ****     }
 465:../lwip-1.4.1/src/core/tcp_in.c **** #endif /* TCP_LISTEN_BACKLOG */
 466:../lwip-1.4.1/src/core/tcp_in.c ****     npcb = tcp_alloc(pcb->prio);
 1062              		.loc 1 466 0
 1063 0070 7B68     		ldr	r3, [r7, #4]
 1064 0072 5B7E     		ldrb	r3, [r3, #25]	@ zero_extendqisi2
 1065 0074 1846     		mov	r0, r3
 1066 0076 FFF7FEFF 		bl	tcp_alloc
 1067 007a F860     		str	r0, [r7, #12]
 467:../lwip-1.4.1/src/core/tcp_in.c ****     /* If a new PCB could not be created (probably due to lack of memory),
 468:../lwip-1.4.1/src/core/tcp_in.c ****        we don't do anything, but rely on the sender will retransmit the
 469:../lwip-1.4.1/src/core/tcp_in.c ****        SYN at a time when we have more memory available. */
 470:../lwip-1.4.1/src/core/tcp_in.c ****     if (npcb == NULL) {
 1068              		.loc 1 470 0
 1069 007c FB68     		ldr	r3, [r7, #12]
 1070 007e 002B     		cmp	r3, #0
 1071 0080 08D1     		bne	.L62
 471:../lwip-1.4.1/src/core/tcp_in.c ****       LWIP_DEBUGF(TCP_DEBUG, ("tcp_listen_input: could not allocate PCB\n"));
 472:../lwip-1.4.1/src/core/tcp_in.c ****       TCP_STATS_INC(tcp.memerr);
 1072              		.loc 1 472 0
 1073 0082 4C4B     		ldr	r3, .L64+28
 1074 0084 D3F83831 		ldr	r3, [r3, #312]
 1075 0088 0133     		adds	r3, r3, #1
 1076 008a 4A4A     		ldr	r2, .L64+28
 1077 008c C2F83831 		str	r3, [r2, #312]
 473:../lwip-1.4.1/src/core/tcp_in.c ****       return ERR_MEM;
 1078              		.loc 1 473 0
 1079 0090 FF23     		movs	r3, #255
 1080 0092 7CE0     		b	.L58
 1081              	.L62:
 474:../lwip-1.4.1/src/core/tcp_in.c ****     }
 475:../lwip-1.4.1/src/core/tcp_in.c **** #if TCP_LISTEN_BACKLOG
 476:../lwip-1.4.1/src/core/tcp_in.c ****     pcb->accepts_pending++;
 1082              		.loc 1 476 0
 1083 0094 7B68     		ldr	r3, [r7, #4]
 1084 0096 5B7F     		ldrb	r3, [r3, #29]	@ zero_extendqisi2
 1085 0098 0133     		adds	r3, r3, #1
 1086 009a DAB2     		uxtb	r2, r3
 1087 009c 7B68     		ldr	r3, [r7, #4]
 1088 009e 5A77     		strb	r2, [r3, #29]
 477:../lwip-1.4.1/src/core/tcp_in.c **** #endif /* TCP_LISTEN_BACKLOG */
 478:../lwip-1.4.1/src/core/tcp_in.c ****     /* Set up the new PCB. */
 479:../lwip-1.4.1/src/core/tcp_in.c ****     ip_addr_copy(npcb->local_ip, current_iphdr_dest);
 1089              		.loc 1 479 0
 1090 00a0 424B     		ldr	r3, .L64+20
 1091 00a2 1A68     		ldr	r2, [r3]
 1092 00a4 FB68     		ldr	r3, [r7, #12]
 1093 00a6 1A60     		str	r2, [r3]
 480:../lwip-1.4.1/src/core/tcp_in.c ****     npcb->local_port = pcb->local_port;
 1094              		.loc 1 480 0
 1095 00a8 7B68     		ldr	r3, [r7, #4]
 1096 00aa 5A8B     		ldrh	r2, [r3, #26]
 1097 00ac FB68     		ldr	r3, [r7, #12]
 1098 00ae 5A83     		strh	r2, [r3, #26]	@ movhi
 481:../lwip-1.4.1/src/core/tcp_in.c ****     ip_addr_copy(npcb->remote_ip, current_iphdr_src);
 1099              		.loc 1 481 0
 1100 00b0 3F4B     		ldr	r3, .L64+24
 1101 00b2 1A68     		ldr	r2, [r3]
 1102 00b4 FB68     		ldr	r3, [r7, #12]
 1103 00b6 5A60     		str	r2, [r3, #4]
 482:../lwip-1.4.1/src/core/tcp_in.c ****     npcb->remote_port = tcphdr->src;
 1104              		.loc 1 482 0
 1105 00b8 3B4B     		ldr	r3, .L64+16
 1106 00ba 1B68     		ldr	r3, [r3]
 1107 00bc 1B88     		ldrh	r3, [r3]	@ unaligned
 1108 00be 9AB2     		uxth	r2, r3
 1109 00c0 FB68     		ldr	r3, [r7, #12]
 1110 00c2 9A83     		strh	r2, [r3, #28]	@ movhi
 483:../lwip-1.4.1/src/core/tcp_in.c ****     npcb->state = SYN_RCVD;
 1111              		.loc 1 483 0
 1112 00c4 FB68     		ldr	r3, [r7, #12]
 1113 00c6 0322     		movs	r2, #3
 1114 00c8 1A76     		strb	r2, [r3, #24]
 484:../lwip-1.4.1/src/core/tcp_in.c ****     npcb->rcv_nxt = seqno + 1;
 1115              		.loc 1 484 0
 1116 00ca 364B     		ldr	r3, .L64+12
 1117 00cc 1B68     		ldr	r3, [r3]
 1118 00ce 5A1C     		adds	r2, r3, #1
 1119 00d0 FB68     		ldr	r3, [r7, #12]
 1120 00d2 9A62     		str	r2, [r3, #40]
 485:../lwip-1.4.1/src/core/tcp_in.c ****     npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 1121              		.loc 1 485 0
 1122 00d4 FB68     		ldr	r3, [r7, #12]
 1123 00d6 9A6A     		ldr	r2, [r3, #40]
 1124 00d8 FB68     		ldr	r3, [r7, #12]
 1125 00da 1A63     		str	r2, [r3, #48]
 486:../lwip-1.4.1/src/core/tcp_in.c ****     npcb->snd_wnd = tcphdr->wnd;
 1126              		.loc 1 486 0
 1127 00dc 324B     		ldr	r3, .L64+16
 1128 00de 1B68     		ldr	r3, [r3]
 1129 00e0 DB89     		ldrh	r3, [r3, #14]	@ unaligned
 1130 00e2 9AB2     		uxth	r2, r3
 1131 00e4 FB68     		ldr	r3, [r7, #12]
 1132 00e6 A3F86020 		strh	r2, [r3, #96]	@ movhi
 487:../lwip-1.4.1/src/core/tcp_in.c ****     npcb->snd_wnd_max = tcphdr->wnd;
 1133              		.loc 1 487 0
 1134 00ea 2F4B     		ldr	r3, .L64+16
 1135 00ec 1B68     		ldr	r3, [r3]
 1136 00ee DB89     		ldrh	r3, [r3, #14]	@ unaligned
 1137 00f0 9AB2     		uxth	r2, r3
 1138 00f2 FB68     		ldr	r3, [r7, #12]
 1139 00f4 A3F86220 		strh	r2, [r3, #98]	@ movhi
 488:../lwip-1.4.1/src/core/tcp_in.c ****     npcb->ssthresh = npcb->snd_wnd;
 1140              		.loc 1 488 0
 1141 00f8 FB68     		ldr	r3, [r7, #12]
 1142 00fa B3F86020 		ldrh	r2, [r3, #96]
 1143 00fe FB68     		ldr	r3, [r7, #12]
 1144 0100 A3F84E20 		strh	r2, [r3, #78]	@ movhi
 489:../lwip-1.4.1/src/core/tcp_in.c ****     npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 1145              		.loc 1 489 0
 1146 0104 274B     		ldr	r3, .L64+12
 1147 0106 1B68     		ldr	r3, [r3]
 1148 0108 5A1E     		subs	r2, r3, #1
 1149 010a FB68     		ldr	r3, [r7, #12]
 1150 010c 5A65     		str	r2, [r3, #84]
 490:../lwip-1.4.1/src/core/tcp_in.c ****     npcb->callback_arg = pcb->callback_arg;
 1151              		.loc 1 490 0
 1152 010e 7B68     		ldr	r3, [r7, #4]
 1153 0110 1A69     		ldr	r2, [r3, #16]
 1154 0112 FB68     		ldr	r3, [r7, #12]
 1155 0114 1A61     		str	r2, [r3, #16]
 491:../lwip-1.4.1/src/core/tcp_in.c **** #if LWIP_CALLBACK_API
 492:../lwip-1.4.1/src/core/tcp_in.c ****     npcb->accept = pcb->accept;
 1156              		.loc 1 492 0
 1157 0116 7B68     		ldr	r3, [r7, #4]
 1158 0118 5A69     		ldr	r2, [r3, #20]
 1159 011a FB68     		ldr	r3, [r7, #12]
 1160 011c 5A61     		str	r2, [r3, #20]
 493:../lwip-1.4.1/src/core/tcp_in.c **** #endif /* LWIP_CALLBACK_API */
 494:../lwip-1.4.1/src/core/tcp_in.c ****     /* inherit socket options */
 495:../lwip-1.4.1/src/core/tcp_in.c ****     npcb->so_options = pcb->so_options & SOF_INHERITED;
 1161              		.loc 1 495 0
 1162 011e 7B68     		ldr	r3, [r7, #4]
 1163 0120 1B7A     		ldrb	r3, [r3, #8]	@ zero_extendqisi2
 1164 0122 23F07303 		bic	r3, r3, #115
 1165 0126 DAB2     		uxtb	r2, r3
 1166 0128 FB68     		ldr	r3, [r7, #12]
 1167 012a 1A72     		strb	r2, [r3, #8]
 496:../lwip-1.4.1/src/core/tcp_in.c ****     /* Register the new PCB so that we can begin receiving segments
 497:../lwip-1.4.1/src/core/tcp_in.c ****        for it. */
 498:../lwip-1.4.1/src/core/tcp_in.c ****     TCP_REG_ACTIVE(npcb);
 1168              		.loc 1 498 0
 1169 012c 224B     		ldr	r3, .L64+32
 1170 012e 1A68     		ldr	r2, [r3]
 1171 0130 FB68     		ldr	r3, [r7, #12]
 1172 0132 DA60     		str	r2, [r3, #12]
 1173 0134 204A     		ldr	r2, .L64+32
 1174 0136 FB68     		ldr	r3, [r7, #12]
 1175 0138 1360     		str	r3, [r2]
 1176 013a FFF7FEFF 		bl	tcp_timer_needed
 1177 013e 1F4B     		ldr	r3, .L64+36
 1178 0140 0122     		movs	r2, #1
 1179 0142 1A70     		strb	r2, [r3]
 499:../lwip-1.4.1/src/core/tcp_in.c **** 
 500:../lwip-1.4.1/src/core/tcp_in.c ****     /* Parse any options in the SYN. */
 501:../lwip-1.4.1/src/core/tcp_in.c ****     tcp_parseopt(npcb);
 1180              		.loc 1 501 0
 1181 0144 F868     		ldr	r0, [r7, #12]
 1182 0146 FFF7FEFF 		bl	tcp_parseopt
 502:../lwip-1.4.1/src/core/tcp_in.c **** #if TCP_CALCULATE_EFF_SEND_MSS
 503:../lwip-1.4.1/src/core/tcp_in.c ****     npcb->mss = tcp_eff_send_mss(npcb->mss, &(npcb->remote_ip));
 1183              		.loc 1 503 0
 1184 014a FB68     		ldr	r3, [r7, #12]
 1185 014c DA8E     		ldrh	r2, [r3, #54]
 1186 014e FB68     		ldr	r3, [r7, #12]
 1187 0150 0433     		adds	r3, r3, #4
 1188 0152 1046     		mov	r0, r2
 1189 0154 1946     		mov	r1, r3
 1190 0156 FFF7FEFF 		bl	tcp_eff_send_mss
 1191 015a 0346     		mov	r3, r0
 1192 015c 1A46     		mov	r2, r3
 1193 015e FB68     		ldr	r3, [r7, #12]
 1194 0160 DA86     		strh	r2, [r3, #54]	@ movhi
 504:../lwip-1.4.1/src/core/tcp_in.c **** #endif /* TCP_CALCULATE_EFF_SEND_MSS */
 505:../lwip-1.4.1/src/core/tcp_in.c **** 
 506:../lwip-1.4.1/src/core/tcp_in.c ****     snmp_inc_tcppassiveopens();
 507:../lwip-1.4.1/src/core/tcp_in.c **** 
 508:../lwip-1.4.1/src/core/tcp_in.c ****     /* Send a SYN|ACK together with the MSS option. */
 509:../lwip-1.4.1/src/core/tcp_in.c ****     rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 1195              		.loc 1 509 0
 1196 0162 F868     		ldr	r0, [r7, #12]
 1197 0164 1221     		movs	r1, #18
 1198 0166 FFF7FEFF 		bl	tcp_enqueue_flags
 1199 016a 0346     		mov	r3, r0
 1200 016c FB72     		strb	r3, [r7, #11]
 510:../lwip-1.4.1/src/core/tcp_in.c ****     if (rc != ERR_OK) {
 1201              		.loc 1 510 0
 1202 016e 97F90B30 		ldrsb	r3, [r7, #11]
 1203 0172 002B     		cmp	r3, #0
 1204 0174 05D0     		beq	.L63
 511:../lwip-1.4.1/src/core/tcp_in.c ****       tcp_abandon(npcb, 0);
 1205              		.loc 1 511 0
 1206 0176 F868     		ldr	r0, [r7, #12]
 1207 0178 0021     		movs	r1, #0
 1208 017a FFF7FEFF 		bl	tcp_abandon
 512:../lwip-1.4.1/src/core/tcp_in.c ****       return rc;
 1209              		.loc 1 512 0
 1210 017e FB7A     		ldrb	r3, [r7, #11]	@ zero_extendqisi2
 1211 0180 05E0     		b	.L58
 1212              	.L63:
 513:../lwip-1.4.1/src/core/tcp_in.c ****     }
 514:../lwip-1.4.1/src/core/tcp_in.c ****     return tcp_output(npcb);
 1213              		.loc 1 514 0
 1214 0182 F868     		ldr	r0, [r7, #12]
 1215 0184 FFF7FEFF 		bl	tcp_output
 1216 0188 0346     		mov	r3, r0
 1217 018a 00E0     		b	.L58
 1218              	.L60:
 515:../lwip-1.4.1/src/core/tcp_in.c ****   }
 516:../lwip-1.4.1/src/core/tcp_in.c ****   return ERR_OK;
 1219              		.loc 1 516 0
 1220 018c 0023     		movs	r3, #0
 1221              	.L58:
 1222 018e 5BB2     		sxtb	r3, r3
 517:../lwip-1.4.1/src/core/tcp_in.c **** }
 1223              		.loc 1 517 0
 1224 0190 1846     		mov	r0, r3
 1225 0192 1037     		adds	r7, r7, #16
 1226              		.cfi_def_cfa_offset 8
 1227 0194 BD46     		mov	sp, r7
 1228              		.cfi_def_cfa_register 13
 1229              		@ sp needed
 1230 0196 80BD     		pop	{r7, pc}
 1231              	.L65:
 1232              		.align	2
 1233              	.L64:
 1234 0198 24000000 		.word	flags
 1235 019c 20000000 		.word	ackno
 1236 01a0 26000000 		.word	tcplen
 1237 01a4 1C000000 		.word	seqno
 1238 01a8 14000000 		.word	tcphdr
 1239 01ac 00000000 		.word	current_iphdr_dest
 1240 01b0 00000000 		.word	current_iphdr_src
 1241 01b4 00000000 		.word	lwip_stats
 1242 01b8 00000000 		.word	tcp_active_pcbs
 1243 01bc 00000000 		.word	tcp_active_pcbs_changed
 1244              		.cfi_endproc
 1245              	.LFE1:
 1247              		.section	.text.tcp_timewait_input,"ax",%progbits
 1248              		.align	2
 1249              		.thumb
 1250              		.thumb_func
 1252              	tcp_timewait_input:
 1253              	.LFB2:
 518:../lwip-1.4.1/src/core/tcp_in.c **** 
 519:../lwip-1.4.1/src/core/tcp_in.c **** /**
 520:../lwip-1.4.1/src/core/tcp_in.c ****  * Called by tcp_input() when a segment arrives for a connection in
 521:../lwip-1.4.1/src/core/tcp_in.c ****  * TIME_WAIT.
 522:../lwip-1.4.1/src/core/tcp_in.c ****  *
 523:../lwip-1.4.1/src/core/tcp_in.c ****  * @param pcb the tcp_pcb for which a segment arrived
 524:../lwip-1.4.1/src/core/tcp_in.c ****  *
 525:../lwip-1.4.1/src/core/tcp_in.c ****  * @note the segment which arrived is saved in global variables, therefore only the pcb
 526:../lwip-1.4.1/src/core/tcp_in.c ****  *       involved is passed as a parameter to this function
 527:../lwip-1.4.1/src/core/tcp_in.c ****  */
 528:../lwip-1.4.1/src/core/tcp_in.c **** static err_t
 529:../lwip-1.4.1/src/core/tcp_in.c **** tcp_timewait_input(struct tcp_pcb *pcb)
 530:../lwip-1.4.1/src/core/tcp_in.c **** {
 1254              		.loc 1 530 0
 1255              		.cfi_startproc
 1256              		@ args = 0, pretend = 0, frame = 8
 1257              		@ frame_needed = 1, uses_anonymous_args = 0
 1258 0000 80B5     		push	{r7, lr}
 1259              		.cfi_def_cfa_offset 8
 1260              		.cfi_offset 7, -8
 1261              		.cfi_offset 14, -4
 1262 0002 84B0     		sub	sp, sp, #16
 1263              		.cfi_def_cfa_offset 24
 1264 0004 02AF     		add	r7, sp, #8
 1265              		.cfi_def_cfa 7, 16
 1266 0006 7860     		str	r0, [r7, #4]
 531:../lwip-1.4.1/src/core/tcp_in.c ****   /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
 532:../lwip-1.4.1/src/core/tcp_in.c ****   /* RFC 793 3.9 Event Processing - Segment Arrives:
 533:../lwip-1.4.1/src/core/tcp_in.c ****    * - first check sequence number - we skip that one in TIME_WAIT (always
 534:../lwip-1.4.1/src/core/tcp_in.c ****    *   acceptable since we only send ACKs)
 535:../lwip-1.4.1/src/core/tcp_in.c ****    * - second check the RST bit (... return) */
 536:../lwip-1.4.1/src/core/tcp_in.c ****   if (flags & TCP_RST)  {
 1267              		.loc 1 536 0
 1268 0008 2B4B     		ldr	r3, .L72
 1269 000a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1270 000c 03F00403 		and	r3, r3, #4
 1271 0010 002B     		cmp	r3, #0
 1272 0012 01D0     		beq	.L67
 537:../lwip-1.4.1/src/core/tcp_in.c ****     return ERR_OK;
 1273              		.loc 1 537 0
 1274 0014 0023     		movs	r3, #0
 1275 0016 49E0     		b	.L68
 1276              	.L67:
 538:../lwip-1.4.1/src/core/tcp_in.c ****   }
 539:../lwip-1.4.1/src/core/tcp_in.c ****   /* - fourth, check the SYN bit, */
 540:../lwip-1.4.1/src/core/tcp_in.c ****   if (flags & TCP_SYN) {
 1277              		.loc 1 540 0
 1278 0018 274B     		ldr	r3, .L72
 1279 001a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1280 001c 03F00203 		and	r3, r3, #2
 1281 0020 002B     		cmp	r3, #0
 1282 0022 28D0     		beq	.L69
 541:../lwip-1.4.1/src/core/tcp_in.c ****     /* If an incoming segment is not acceptable, an acknowledgment
 542:../lwip-1.4.1/src/core/tcp_in.c ****        should be sent in reply */
 543:../lwip-1.4.1/src/core/tcp_in.c ****     if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt+pcb->rcv_wnd)) {
 1283              		.loc 1 543 0
 1284 0024 254B     		ldr	r3, .L72+4
 1285 0026 1A68     		ldr	r2, [r3]
 1286 0028 7B68     		ldr	r3, [r7, #4]
 1287 002a 9B6A     		ldr	r3, [r3, #40]
 1288 002c D31A     		subs	r3, r2, r3
 1289 002e 002B     		cmp	r3, #0
 1290 0030 2BDB     		blt	.L70
 1291              		.loc 1 543 0 is_stmt 0 discriminator 1
 1292 0032 224B     		ldr	r3, .L72+4
 1293 0034 1A68     		ldr	r2, [r3]
 1294 0036 7B68     		ldr	r3, [r7, #4]
 1295 0038 9B6A     		ldr	r3, [r3, #40]
 1296 003a 7968     		ldr	r1, [r7, #4]
 1297 003c 898D     		ldrh	r1, [r1, #44]
 1298 003e 0B44     		add	r3, r3, r1
 1299 0040 D31A     		subs	r3, r2, r3
 1300 0042 002B     		cmp	r3, #0
 1301 0044 21DC     		bgt	.L70
 544:../lwip-1.4.1/src/core/tcp_in.c ****       /* If the SYN is in the window it is an error, send a reset */
 545:../lwip-1.4.1/src/core/tcp_in.c ****       tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(), ip_current_src_addr(),
 1302              		.loc 1 545 0 is_stmt 1
 1303 0046 1E4B     		ldr	r3, .L72+8
 1304 0048 1868     		ldr	r0, [r3]
 1305 004a 1E4B     		ldr	r3, .L72+12
 1306 004c 1B88     		ldrh	r3, [r3]
 1307 004e 1A46     		mov	r2, r3
 1308 0050 1A4B     		ldr	r3, .L72+4
 1309 0052 1B68     		ldr	r3, [r3]
 1310 0054 D118     		adds	r1, r2, r3
 546:../lwip-1.4.1/src/core/tcp_in.c ****         tcphdr->dest, tcphdr->src);
 1311              		.loc 1 546 0
 1312 0056 1C4B     		ldr	r3, .L72+16
 1313 0058 1B68     		ldr	r3, [r3]
 545:../lwip-1.4.1/src/core/tcp_in.c ****         tcphdr->dest, tcphdr->src);
 1314              		.loc 1 545 0
 1315 005a 5B88     		ldrh	r3, [r3, #2]	@ unaligned
 1316 005c 9AB2     		uxth	r2, r3
 1317              		.loc 1 546 0
 1318 005e 1A4B     		ldr	r3, .L72+16
 1319 0060 1B68     		ldr	r3, [r3]
 545:../lwip-1.4.1/src/core/tcp_in.c ****         tcphdr->dest, tcphdr->src);
 1320              		.loc 1 545 0
 1321 0062 1B88     		ldrh	r3, [r3]	@ unaligned
 1322 0064 9BB2     		uxth	r3, r3
 1323 0066 0092     		str	r2, [sp]
 1324 0068 0193     		str	r3, [sp, #4]
 1325 006a 184A     		ldr	r2, .L72+20
 1326 006c 184B     		ldr	r3, .L72+24
 1327 006e FFF7FEFF 		bl	tcp_rst
 547:../lwip-1.4.1/src/core/tcp_in.c ****       return ERR_OK;
 1328              		.loc 1 547 0
 1329 0072 0023     		movs	r3, #0
 1330 0074 1AE0     		b	.L68
 1331              	.L69:
 548:../lwip-1.4.1/src/core/tcp_in.c ****     }
 549:../lwip-1.4.1/src/core/tcp_in.c ****   } else if (flags & TCP_FIN) {
 1332              		.loc 1 549 0
 1333 0076 104B     		ldr	r3, .L72
 1334 0078 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1335 007a 03F00103 		and	r3, r3, #1
 1336 007e 002B     		cmp	r3, #0
 1337 0080 03D0     		beq	.L70
 550:../lwip-1.4.1/src/core/tcp_in.c ****     /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
 551:../lwip-1.4.1/src/core/tcp_in.c ****          Restart the 2 MSL time-wait timeout.*/
 552:../lwip-1.4.1/src/core/tcp_in.c ****     pcb->tmr = tcp_ticks;
 1338              		.loc 1 552 0
 1339 0082 144B     		ldr	r3, .L72+28
 1340 0084 1A68     		ldr	r2, [r3]
 1341 0086 7B68     		ldr	r3, [r7, #4]
 1342 0088 5A62     		str	r2, [r3, #36]
 1343              	.L70:
 553:../lwip-1.4.1/src/core/tcp_in.c ****   }
 554:../lwip-1.4.1/src/core/tcp_in.c **** 
 555:../lwip-1.4.1/src/core/tcp_in.c ****   if ((tcplen > 0))  {
 1344              		.loc 1 555 0
 1345 008a 0E4B     		ldr	r3, .L72+12
 1346 008c 1B88     		ldrh	r3, [r3]
 1347 008e 002B     		cmp	r3, #0
 1348 0090 0BD0     		beq	.L71
 556:../lwip-1.4.1/src/core/tcp_in.c ****     /* Acknowledge data, FIN or out-of-window SYN */
 557:../lwip-1.4.1/src/core/tcp_in.c ****     pcb->flags |= TF_ACK_NOW;
 1349              		.loc 1 557 0
 1350 0092 7B68     		ldr	r3, [r7, #4]
 1351 0094 9B7F     		ldrb	r3, [r3, #30]	@ zero_extendqisi2
 1352 0096 43F00203 		orr	r3, r3, #2
 1353 009a DAB2     		uxtb	r2, r3
 1354 009c 7B68     		ldr	r3, [r7, #4]
 1355 009e 9A77     		strb	r2, [r3, #30]
 558:../lwip-1.4.1/src/core/tcp_in.c ****     return tcp_output(pcb);
 1356              		.loc 1 558 0
 1357 00a0 7868     		ldr	r0, [r7, #4]
 1358 00a2 FFF7FEFF 		bl	tcp_output
 1359 00a6 0346     		mov	r3, r0
 1360 00a8 00E0     		b	.L68
 1361              	.L71:
 559:../lwip-1.4.1/src/core/tcp_in.c ****   }
 560:../lwip-1.4.1/src/core/tcp_in.c ****   return ERR_OK;
 1362              		.loc 1 560 0
 1363 00aa 0023     		movs	r3, #0
 1364              	.L68:
 1365 00ac 5BB2     		sxtb	r3, r3
 561:../lwip-1.4.1/src/core/tcp_in.c **** }
 1366              		.loc 1 561 0
 1367 00ae 1846     		mov	r0, r3
 1368 00b0 0837     		adds	r7, r7, #8
 1369              		.cfi_def_cfa_offset 8
 1370 00b2 BD46     		mov	sp, r7
 1371              		.cfi_def_cfa_register 13
 1372              		@ sp needed
 1373 00b4 80BD     		pop	{r7, pc}
 1374              	.L73:
 1375 00b6 00BF     		.align	2
 1376              	.L72:
 1377 00b8 24000000 		.word	flags
 1378 00bc 1C000000 		.word	seqno
 1379 00c0 20000000 		.word	ackno
 1380 00c4 26000000 		.word	tcplen
 1381 00c8 14000000 		.word	tcphdr
 1382 00cc 00000000 		.word	current_iphdr_dest
 1383 00d0 00000000 		.word	current_iphdr_src
 1384 00d4 00000000 		.word	tcp_ticks
 1385              		.cfi_endproc
 1386              	.LFE2:
 1388              		.section	.text.tcp_process,"ax",%progbits
 1389              		.align	2
 1390              		.thumb
 1391              		.thumb_func
 1393              	tcp_process:
 1394              	.LFB3:
 562:../lwip-1.4.1/src/core/tcp_in.c **** 
 563:../lwip-1.4.1/src/core/tcp_in.c **** /**
 564:../lwip-1.4.1/src/core/tcp_in.c ****  * Implements the TCP state machine. Called by tcp_input. In some
 565:../lwip-1.4.1/src/core/tcp_in.c ****  * states tcp_receive() is called to receive data. The tcp_seg
 566:../lwip-1.4.1/src/core/tcp_in.c ****  * argument will be freed by the caller (tcp_input()) unless the
 567:../lwip-1.4.1/src/core/tcp_in.c ****  * recv_data pointer in the pcb is set.
 568:../lwip-1.4.1/src/core/tcp_in.c ****  *
 569:../lwip-1.4.1/src/core/tcp_in.c ****  * @param pcb the tcp_pcb for which a segment arrived
 570:../lwip-1.4.1/src/core/tcp_in.c ****  *
 571:../lwip-1.4.1/src/core/tcp_in.c ****  * @note the segment which arrived is saved in global variables, therefore only the pcb
 572:../lwip-1.4.1/src/core/tcp_in.c ****  *       involved is passed as a parameter to this function
 573:../lwip-1.4.1/src/core/tcp_in.c ****  */
 574:../lwip-1.4.1/src/core/tcp_in.c **** static err_t
 575:../lwip-1.4.1/src/core/tcp_in.c **** tcp_process(struct tcp_pcb *pcb)
 576:../lwip-1.4.1/src/core/tcp_in.c **** {
 1395              		.loc 1 576 0
 1396              		.cfi_startproc
 1397              		@ args = 0, pretend = 0, frame = 24
 1398              		@ frame_needed = 1, uses_anonymous_args = 0
 1399 0000 80B5     		push	{r7, lr}
 1400              		.cfi_def_cfa_offset 8
 1401              		.cfi_offset 7, -8
 1402              		.cfi_offset 14, -4
 1403 0002 88B0     		sub	sp, sp, #32
 1404              		.cfi_def_cfa_offset 40
 1405 0004 02AF     		add	r7, sp, #8
 1406              		.cfi_def_cfa 7, 32
 1407 0006 7860     		str	r0, [r7, #4]
 577:../lwip-1.4.1/src/core/tcp_in.c ****   struct tcp_seg *rseg;
 578:../lwip-1.4.1/src/core/tcp_in.c ****   u8_t acceptable = 0;
 1408              		.loc 1 578 0
 1409 0008 0023     		movs	r3, #0
 1410 000a FB75     		strb	r3, [r7, #23]
 579:../lwip-1.4.1/src/core/tcp_in.c ****   err_t err;
 580:../lwip-1.4.1/src/core/tcp_in.c **** 
 581:../lwip-1.4.1/src/core/tcp_in.c ****   err = ERR_OK;
 1411              		.loc 1 581 0
 1412 000c 0023     		movs	r3, #0
 1413 000e BB75     		strb	r3, [r7, #22]
 582:../lwip-1.4.1/src/core/tcp_in.c **** 
 583:../lwip-1.4.1/src/core/tcp_in.c ****   /* Process incoming RST segments. */
 584:../lwip-1.4.1/src/core/tcp_in.c ****   if (flags & TCP_RST) {
 1414              		.loc 1 584 0
 1415 0010 A44B     		ldr	r3, .L138
 1416 0012 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1417 0014 03F00403 		and	r3, r3, #4
 1418 0018 002B     		cmp	r3, #0
 1419 001a 34D0     		beq	.L75
 585:../lwip-1.4.1/src/core/tcp_in.c ****     /* First, determine if the reset is acceptable. */
 586:../lwip-1.4.1/src/core/tcp_in.c ****     if (pcb->state == SYN_SENT) {
 1420              		.loc 1 586 0
 1421 001c 7B68     		ldr	r3, [r7, #4]
 1422 001e 1B7E     		ldrb	r3, [r3, #24]	@ zero_extendqisi2
 1423 0020 022B     		cmp	r3, #2
 1424 0022 08D1     		bne	.L76
 587:../lwip-1.4.1/src/core/tcp_in.c ****       if (ackno == pcb->snd_nxt) {
 1425              		.loc 1 587 0
 1426 0024 7B68     		ldr	r3, [r7, #4]
 1427 0026 1A6D     		ldr	r2, [r3, #80]
 1428 0028 9F4B     		ldr	r3, .L138+4
 1429 002a 1B68     		ldr	r3, [r3]
 1430 002c 9A42     		cmp	r2, r3
 1431 002e 15D1     		bne	.L78
 588:../lwip-1.4.1/src/core/tcp_in.c ****         acceptable = 1;
 1432              		.loc 1 588 0
 1433 0030 0123     		movs	r3, #1
 1434 0032 FB75     		strb	r3, [r7, #23]
 1435 0034 12E0     		b	.L78
 1436              	.L76:
 589:../lwip-1.4.1/src/core/tcp_in.c ****       }
 590:../lwip-1.4.1/src/core/tcp_in.c ****     } else {
 591:../lwip-1.4.1/src/core/tcp_in.c ****       if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, 
 1437              		.loc 1 591 0
 1438 0036 9D4B     		ldr	r3, .L138+8
 1439 0038 1A68     		ldr	r2, [r3]
 1440 003a 7B68     		ldr	r3, [r7, #4]
 1441 003c 9B6A     		ldr	r3, [r3, #40]
 1442 003e D31A     		subs	r3, r2, r3
 1443 0040 002B     		cmp	r3, #0
 1444 0042 0BDB     		blt	.L78
 1445              		.loc 1 591 0 is_stmt 0 discriminator 1
 1446 0044 994B     		ldr	r3, .L138+8
 1447 0046 1A68     		ldr	r2, [r3]
 1448 0048 7B68     		ldr	r3, [r7, #4]
 1449 004a 9B6A     		ldr	r3, [r3, #40]
 1450 004c 7968     		ldr	r1, [r7, #4]
 1451 004e 898D     		ldrh	r1, [r1, #44]
 1452 0050 0B44     		add	r3, r3, r1
 1453 0052 D31A     		subs	r3, r2, r3
 1454 0054 002B     		cmp	r3, #0
 1455 0056 01DC     		bgt	.L78
 592:../lwip-1.4.1/src/core/tcp_in.c ****                           pcb->rcv_nxt+pcb->rcv_wnd)) {
 593:../lwip-1.4.1/src/core/tcp_in.c ****         acceptable = 1;
 1456              		.loc 1 593 0 is_stmt 1
 1457 0058 0123     		movs	r3, #1
 1458 005a FB75     		strb	r3, [r7, #23]
 1459              	.L78:
 594:../lwip-1.4.1/src/core/tcp_in.c ****       }
 595:../lwip-1.4.1/src/core/tcp_in.c ****     }
 596:../lwip-1.4.1/src/core/tcp_in.c **** 
 597:../lwip-1.4.1/src/core/tcp_in.c ****     if (acceptable) {
 1460              		.loc 1 597 0
 1461 005c FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 1462 005e 002B     		cmp	r3, #0
 1463 0060 0FD0     		beq	.L79
 598:../lwip-1.4.1/src/core/tcp_in.c ****       LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
 599:../lwip-1.4.1/src/core/tcp_in.c ****       LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 600:../lwip-1.4.1/src/core/tcp_in.c ****       recv_flags |= TF_RESET;
 1464              		.loc 1 600 0
 1465 0062 934B     		ldr	r3, .L138+12
 1466 0064 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1467 0066 43F00803 		orr	r3, r3, #8
 1468 006a DAB2     		uxtb	r2, r3
 1469 006c 904B     		ldr	r3, .L138+12
 1470 006e 1A70     		strb	r2, [r3]
 601:../lwip-1.4.1/src/core/tcp_in.c ****       pcb->flags &= ~TF_ACK_DELAY;
 1471              		.loc 1 601 0
 1472 0070 7B68     		ldr	r3, [r7, #4]
 1473 0072 9B7F     		ldrb	r3, [r3, #30]	@ zero_extendqisi2
 1474 0074 23F00103 		bic	r3, r3, #1
 1475 0078 DAB2     		uxtb	r2, r3
 1476 007a 7B68     		ldr	r3, [r7, #4]
 1477 007c 9A77     		strb	r2, [r3, #30]
 602:../lwip-1.4.1/src/core/tcp_in.c ****       return ERR_RST;
 1478              		.loc 1 602 0
 1479 007e F523     		movs	r3, #245
 1480 0080 07E3     		b	.L80
 1481              	.L79:
 603:../lwip-1.4.1/src/core/tcp_in.c ****     } else {
 604:../lwip-1.4.1/src/core/tcp_in.c ****       LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F
 605:../lwip-1.4.1/src/core/tcp_in.c ****        seqno, pcb->rcv_nxt));
 606:../lwip-1.4.1/src/core/tcp_in.c ****       LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
 607:../lwip-1.4.1/src/core/tcp_in.c ****        seqno, pcb->rcv_nxt));
 608:../lwip-1.4.1/src/core/tcp_in.c ****       return ERR_OK;
 1482              		.loc 1 608 0
 1483 0082 0023     		movs	r3, #0
 1484 0084 05E3     		b	.L80
 1485              	.L75:
 609:../lwip-1.4.1/src/core/tcp_in.c ****     }
 610:../lwip-1.4.1/src/core/tcp_in.c ****   }
 611:../lwip-1.4.1/src/core/tcp_in.c **** 
 612:../lwip-1.4.1/src/core/tcp_in.c ****   if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) { 
 1486              		.loc 1 612 0
 1487 0086 874B     		ldr	r3, .L138
 1488 0088 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1489 008a 03F00203 		and	r3, r3, #2
 1490 008e 002B     		cmp	r3, #0
 1491 0090 10D0     		beq	.L81
 1492              		.loc 1 612 0 is_stmt 0 discriminator 1
 1493 0092 7B68     		ldr	r3, [r7, #4]
 1494 0094 1B7E     		ldrb	r3, [r3, #24]	@ zero_extendqisi2
 1495 0096 022B     		cmp	r3, #2
 1496 0098 0CD0     		beq	.L81
 1497              		.loc 1 612 0 discriminator 2
 1498 009a 7B68     		ldr	r3, [r7, #4]
 1499 009c 1B7E     		ldrb	r3, [r3, #24]	@ zero_extendqisi2
 1500 009e 032B     		cmp	r3, #3
 1501 00a0 08D0     		beq	.L81
 613:../lwip-1.4.1/src/core/tcp_in.c ****     /* Cope with new connection attempt after remote end crashed */
 614:../lwip-1.4.1/src/core/tcp_in.c ****     tcp_ack_now(pcb);
 1502              		.loc 1 614 0 is_stmt 1
 1503 00a2 7B68     		ldr	r3, [r7, #4]
 1504 00a4 9B7F     		ldrb	r3, [r3, #30]	@ zero_extendqisi2
 1505 00a6 43F00203 		orr	r3, r3, #2
 1506 00aa DAB2     		uxtb	r2, r3
 1507 00ac 7B68     		ldr	r3, [r7, #4]
 1508 00ae 9A77     		strb	r2, [r3, #30]
 615:../lwip-1.4.1/src/core/tcp_in.c ****     return ERR_OK;
 1509              		.loc 1 615 0
 1510 00b0 0023     		movs	r3, #0
 1511 00b2 EEE2     		b	.L80
 1512              	.L81:
 616:../lwip-1.4.1/src/core/tcp_in.c ****   }
 617:../lwip-1.4.1/src/core/tcp_in.c ****   
 618:../lwip-1.4.1/src/core/tcp_in.c ****   if ((pcb->flags & TF_RXCLOSED) == 0) {
 1513              		.loc 1 618 0
 1514 00b4 7B68     		ldr	r3, [r7, #4]
 1515 00b6 9B7F     		ldrb	r3, [r3, #30]	@ zero_extendqisi2
 1516 00b8 03F01003 		and	r3, r3, #16
 1517 00bc 002B     		cmp	r3, #0
 1518 00be 03D1     		bne	.L82
 619:../lwip-1.4.1/src/core/tcp_in.c ****     /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
 620:../lwip-1.4.1/src/core/tcp_in.c ****     pcb->tmr = tcp_ticks;
 1519              		.loc 1 620 0
 1520 00c0 7C4B     		ldr	r3, .L138+16
 1521 00c2 1A68     		ldr	r2, [r3]
 1522 00c4 7B68     		ldr	r3, [r7, #4]
 1523 00c6 5A62     		str	r2, [r3, #36]
 1524              	.L82:
 621:../lwip-1.4.1/src/core/tcp_in.c ****   }
 622:../lwip-1.4.1/src/core/tcp_in.c ****   pcb->keep_cnt_sent = 0;
 1525              		.loc 1 622 0
 1526 00c8 7B68     		ldr	r3, [r7, #4]
 1527 00ca 0022     		movs	r2, #0
 1528 00cc 83F89620 		strb	r2, [r3, #150]
 623:../lwip-1.4.1/src/core/tcp_in.c **** 
 624:../lwip-1.4.1/src/core/tcp_in.c ****   tcp_parseopt(pcb);
 1529              		.loc 1 624 0
 1530 00d0 7868     		ldr	r0, [r7, #4]
 1531 00d2 FFF7FEFF 		bl	tcp_parseopt
 625:../lwip-1.4.1/src/core/tcp_in.c **** 
 626:../lwip-1.4.1/src/core/tcp_in.c ****   /* Do different things depending on the TCP state. */
 627:../lwip-1.4.1/src/core/tcp_in.c ****   switch (pcb->state) {
 1532              		.loc 1 627 0
 1533 00d6 7B68     		ldr	r3, [r7, #4]
 1534 00d8 1B7E     		ldrb	r3, [r3, #24]	@ zero_extendqisi2
 1535 00da 023B     		subs	r3, r3, #2
 1536 00dc 072B     		cmp	r3, #7
 1537 00de 00F2D682 		bhi	.L137
 1538 00e2 01A2     		adr	r2, .L85
 1539 00e4 52F823F0 		ldr	pc, [r2, r3, lsl #2]
 1540              		.p2align 2
 1541              	.L85:
 1542 00e8 09010000 		.word	.L84+1
 1543 00ec C9020000 		.word	.L86+1
 1544 00f0 F1030000 		.word	.L87+1
 1545 00f4 1B040000 		.word	.L88+1
 1546 00f8 01050000 		.word	.L89+1
 1547 00fc F1030000 		.word	.L87+1
 1548 0100 C9050000 		.word	.L90+1
 1549 0104 5F060000 		.word	.L91+1
 1550              		.p2align 1
 1551              	.L84:
 628:../lwip-1.4.1/src/core/tcp_in.c ****   case SYN_SENT:
 629:../lwip-1.4.1/src/core/tcp_in.c ****     LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\
 630:../lwip-1.4.1/src/core/tcp_in.c ****      pcb->snd_nxt, ntohl(pcb->unacked->tcphdr->seqno)));
 631:../lwip-1.4.1/src/core/tcp_in.c ****     /* received SYN ACK with expected sequence number? */
 632:../lwip-1.4.1/src/core/tcp_in.c ****     if ((flags & TCP_ACK) && (flags & TCP_SYN)
 1552              		.loc 1 632 0
 1553 0108 664B     		ldr	r3, .L138
 1554 010a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1555 010c 03F01003 		and	r3, r3, #16
 1556 0110 002B     		cmp	r3, #0
 1557 0112 00F0A980 		beq	.L92
 1558              		.loc 1 632 0 is_stmt 0 discriminator 1
 1559 0116 634B     		ldr	r3, .L138
 1560 0118 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1561 011a 03F00203 		and	r3, r3, #2
 1562 011e 002B     		cmp	r3, #0
 1563 0120 00F0A280 		beq	.L92
 633:../lwip-1.4.1/src/core/tcp_in.c ****         && ackno == ntohl(pcb->unacked->tcphdr->seqno) + 1) {
 1564              		.loc 1 633 0 is_stmt 1
 1565 0124 7B68     		ldr	r3, [r7, #4]
 1566 0126 1B6F     		ldr	r3, [r3, #112]
 1567 0128 1B69     		ldr	r3, [r3, #16]
 1568 012a 5B68     		ldr	r3, [r3, #4]	@ unaligned
 1569 012c 1846     		mov	r0, r3
 1570 012e FFF7FEFF 		bl	lwip_ntohl
 1571 0132 0346     		mov	r3, r0
 1572 0134 5A1C     		adds	r2, r3, #1
 1573 0136 5C4B     		ldr	r3, .L138+4
 1574 0138 1B68     		ldr	r3, [r3]
 1575 013a 9A42     		cmp	r2, r3
 1576 013c 40F09480 		bne	.L92
 634:../lwip-1.4.1/src/core/tcp_in.c ****       pcb->snd_buf++;
 1577              		.loc 1 634 0
 1578 0140 7B68     		ldr	r3, [r7, #4]
 1579 0142 B3F86630 		ldrh	r3, [r3, #102]
 1580 0146 0133     		adds	r3, r3, #1
 1581 0148 9AB2     		uxth	r2, r3
 1582 014a 7B68     		ldr	r3, [r7, #4]
 1583 014c A3F86620 		strh	r2, [r3, #102]	@ movhi
 635:../lwip-1.4.1/src/core/tcp_in.c ****       pcb->rcv_nxt = seqno + 1;
 1584              		.loc 1 635 0
 1585 0150 564B     		ldr	r3, .L138+8
 1586 0152 1B68     		ldr	r3, [r3]
 1587 0154 5A1C     		adds	r2, r3, #1
 1588 0156 7B68     		ldr	r3, [r7, #4]
 1589 0158 9A62     		str	r2, [r3, #40]
 636:../lwip-1.4.1/src/core/tcp_in.c ****       pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 1590              		.loc 1 636 0
 1591 015a 7B68     		ldr	r3, [r7, #4]
 1592 015c 9A6A     		ldr	r2, [r3, #40]
 1593 015e 7B68     		ldr	r3, [r7, #4]
 1594 0160 1A63     		str	r2, [r3, #48]
 637:../lwip-1.4.1/src/core/tcp_in.c ****       pcb->lastack = ackno;
 1595              		.loc 1 637 0
 1596 0162 514B     		ldr	r3, .L138+4
 1597 0164 1A68     		ldr	r2, [r3]
 1598 0166 7B68     		ldr	r3, [r7, #4]
 1599 0168 9A64     		str	r2, [r3, #72]
 638:../lwip-1.4.1/src/core/tcp_in.c ****       pcb->snd_wnd = tcphdr->wnd;
 1600              		.loc 1 638 0
 1601 016a 534B     		ldr	r3, .L138+20
 1602 016c 1B68     		ldr	r3, [r3]
 1603 016e DB89     		ldrh	r3, [r3, #14]	@ unaligned
 1604 0170 9AB2     		uxth	r2, r3
 1605 0172 7B68     		ldr	r3, [r7, #4]
 1606 0174 A3F86020 		strh	r2, [r3, #96]	@ movhi
 639:../lwip-1.4.1/src/core/tcp_in.c ****       pcb->snd_wnd_max = tcphdr->wnd;
 1607              		.loc 1 639 0
 1608 0178 4F4B     		ldr	r3, .L138+20
 1609 017a 1B68     		ldr	r3, [r3]
 1610 017c DB89     		ldrh	r3, [r3, #14]	@ unaligned
 1611 017e 9AB2     		uxth	r2, r3
 1612 0180 7B68     		ldr	r3, [r7, #4]
 1613 0182 A3F86220 		strh	r2, [r3, #98]	@ movhi
 640:../lwip-1.4.1/src/core/tcp_in.c ****       pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 1614              		.loc 1 640 0
 1615 0186 494B     		ldr	r3, .L138+8
 1616 0188 1B68     		ldr	r3, [r3]
 1617 018a 5A1E     		subs	r2, r3, #1
 1618 018c 7B68     		ldr	r3, [r7, #4]
 1619 018e 5A65     		str	r2, [r3, #84]
 641:../lwip-1.4.1/src/core/tcp_in.c ****       pcb->state = ESTABLISHED;
 1620              		.loc 1 641 0
 1621 0190 7B68     		ldr	r3, [r7, #4]
 1622 0192 0422     		movs	r2, #4
 1623 0194 1A76     		strb	r2, [r3, #24]
 642:../lwip-1.4.1/src/core/tcp_in.c **** 
 643:../lwip-1.4.1/src/core/tcp_in.c **** #if TCP_CALCULATE_EFF_SEND_MSS
 644:../lwip-1.4.1/src/core/tcp_in.c ****       pcb->mss = tcp_eff_send_mss(pcb->mss, &(pcb->remote_ip));
 1624              		.loc 1 644 0
 1625 0196 7B68     		ldr	r3, [r7, #4]
 1626 0198 DA8E     		ldrh	r2, [r3, #54]
 1627 019a 7B68     		ldr	r3, [r7, #4]
 1628 019c 0433     		adds	r3, r3, #4
 1629 019e 1046     		mov	r0, r2
 1630 01a0 1946     		mov	r1, r3
 1631 01a2 FFF7FEFF 		bl	tcp_eff_send_mss
 1632 01a6 0346     		mov	r3, r0
 1633 01a8 1A46     		mov	r2, r3
 1634 01aa 7B68     		ldr	r3, [r7, #4]
 1635 01ac DA86     		strh	r2, [r3, #54]	@ movhi
 645:../lwip-1.4.1/src/core/tcp_in.c **** #endif /* TCP_CALCULATE_EFF_SEND_MSS */
 646:../lwip-1.4.1/src/core/tcp_in.c **** 
 647:../lwip-1.4.1/src/core/tcp_in.c ****       /* Set ssthresh again after changing pcb->mss (already set in tcp_connect
 648:../lwip-1.4.1/src/core/tcp_in.c ****        * but for the default value of pcb->mss) */
 649:../lwip-1.4.1/src/core/tcp_in.c ****       pcb->ssthresh = pcb->mss * 10;
 1636              		.loc 1 649 0
 1637 01ae 7B68     		ldr	r3, [r7, #4]
 1638 01b0 DB8E     		ldrh	r3, [r3, #54]
 1639 01b2 1A46     		mov	r2, r3	@ movhi
 1640 01b4 9200     		lsls	r2, r2, #2
 1641 01b6 1344     		add	r3, r3, r2
 1642 01b8 5B00     		lsls	r3, r3, #1
 1643 01ba 9AB2     		uxth	r2, r3
 1644 01bc 7B68     		ldr	r3, [r7, #4]
 1645 01be A3F84E20 		strh	r2, [r3, #78]	@ movhi
 650:../lwip-1.4.1/src/core/tcp_in.c **** 
 651:../lwip-1.4.1/src/core/tcp_in.c ****       pcb->cwnd = ((pcb->cwnd == 1) ? (pcb->mss * 2) : pcb->mss);
 1646              		.loc 1 651 0
 1647 01c2 7B68     		ldr	r3, [r7, #4]
 1648 01c4 B3F84C30 		ldrh	r3, [r3, #76]
 1649 01c8 012B     		cmp	r3, #1
 1650 01ca 04D1     		bne	.L93
 1651              		.loc 1 651 0 is_stmt 0 discriminator 1
 1652 01cc 7B68     		ldr	r3, [r7, #4]
 1653 01ce DB8E     		ldrh	r3, [r3, #54]
 1654 01d0 5B00     		lsls	r3, r3, #1
 1655 01d2 9BB2     		uxth	r3, r3
 1656 01d4 01E0     		b	.L94
 1657              	.L93:
 1658              		.loc 1 651 0 discriminator 2
 1659 01d6 7B68     		ldr	r3, [r7, #4]
 1660 01d8 DB8E     		ldrh	r3, [r3, #54]
 1661              	.L94:
 1662              		.loc 1 651 0 discriminator 4
 1663 01da 7A68     		ldr	r2, [r7, #4]
 1664 01dc A2F84C30 		strh	r3, [r2, #76]	@ movhi
 652:../lwip-1.4.1/src/core/tcp_in.c ****       LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 653:../lwip-1.4.1/src/core/tcp_in.c ****       --pcb->snd_queuelen;
 1665              		.loc 1 653 0 is_stmt 1 discriminator 4
 1666 01e0 7B68     		ldr	r3, [r7, #4]
 1667 01e2 B3F86830 		ldrh	r3, [r3, #104]
 1668 01e6 013B     		subs	r3, r3, #1
 1669 01e8 9AB2     		uxth	r2, r3
 1670 01ea 7B68     		ldr	r3, [r7, #4]
 1671 01ec A3F86820 		strh	r2, [r3, #104]	@ movhi
 654:../lwip-1.4.1/src/core/tcp_in.c ****       LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"U16_F"\n", (u16_t)pcb->snd_q
 655:../lwip-1.4.1/src/core/tcp_in.c ****       rseg = pcb->unacked;
 1672              		.loc 1 655 0 discriminator 4
 1673 01f0 7B68     		ldr	r3, [r7, #4]
 1674 01f2 1B6F     		ldr	r3, [r3, #112]
 1675 01f4 3B61     		str	r3, [r7, #16]
 656:../lwip-1.4.1/src/core/tcp_in.c ****       pcb->unacked = rseg->next;
 1676              		.loc 1 656 0 discriminator 4
 1677 01f6 3B69     		ldr	r3, [r7, #16]
 1678 01f8 1A68     		ldr	r2, [r3]
 1679 01fa 7B68     		ldr	r3, [r7, #4]
 1680 01fc 1A67     		str	r2, [r3, #112]
 657:../lwip-1.4.1/src/core/tcp_in.c ****       tcp_seg_free(rseg);
 1681              		.loc 1 657 0 discriminator 4
 1682 01fe 3869     		ldr	r0, [r7, #16]
 1683 0200 FFF7FEFF 		bl	tcp_seg_free
 658:../lwip-1.4.1/src/core/tcp_in.c **** 
 659:../lwip-1.4.1/src/core/tcp_in.c ****       /* If there's nothing left to acknowledge, stop the retransmit
 660:../lwip-1.4.1/src/core/tcp_in.c ****          timer, otherwise reset it to start again */
 661:../lwip-1.4.1/src/core/tcp_in.c ****       if(pcb->unacked == NULL)
 1684              		.loc 1 661 0 discriminator 4
 1685 0204 7B68     		ldr	r3, [r7, #4]
 1686 0206 1B6F     		ldr	r3, [r3, #112]
 1687 0208 002B     		cmp	r3, #0
 1688 020a 04D1     		bne	.L95
 662:../lwip-1.4.1/src/core/tcp_in.c ****         pcb->rtime = -1;
 1689              		.loc 1 662 0
 1690 020c 7B68     		ldr	r3, [r7, #4]
 1691 020e 4FF6FF72 		movw	r2, #65535
 1692 0212 9A86     		strh	r2, [r3, #52]	@ movhi
 1693 0214 06E0     		b	.L96
 1694              	.L95:
 663:../lwip-1.4.1/src/core/tcp_in.c ****       else {
 664:../lwip-1.4.1/src/core/tcp_in.c ****         pcb->rtime = 0;
 1695              		.loc 1 664 0
 1696 0216 7B68     		ldr	r3, [r7, #4]
 1697 0218 0022     		movs	r2, #0
 1698 021a 9A86     		strh	r2, [r3, #52]	@ movhi
 665:../lwip-1.4.1/src/core/tcp_in.c ****         pcb->nrtx = 0;
 1699              		.loc 1 665 0
 1700 021c 7B68     		ldr	r3, [r7, #4]
 1701 021e 0022     		movs	r2, #0
 1702 0220 83F84620 		strb	r2, [r3, #70]
 1703              	.L96:
 666:../lwip-1.4.1/src/core/tcp_in.c ****       }
 667:../lwip-1.4.1/src/core/tcp_in.c **** 
 668:../lwip-1.4.1/src/core/tcp_in.c ****       /* Call the user specified function to call when sucessfully
 669:../lwip-1.4.1/src/core/tcp_in.c ****        * connected. */
 670:../lwip-1.4.1/src/core/tcp_in.c ****       TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 1704              		.loc 1 670 0
 1705 0224 7B68     		ldr	r3, [r7, #4]
 1706 0226 D3F88430 		ldr	r3, [r3, #132]
 1707 022a 002B     		cmp	r3, #0
 1708 022c 0BD0     		beq	.L97
 1709              		.loc 1 670 0 is_stmt 0 discriminator 1
 1710 022e 7B68     		ldr	r3, [r7, #4]
 1711 0230 D3F88430 		ldr	r3, [r3, #132]
 1712 0234 7A68     		ldr	r2, [r7, #4]
 1713 0236 1269     		ldr	r2, [r2, #16]
 1714 0238 1046     		mov	r0, r2
 1715 023a 7968     		ldr	r1, [r7, #4]
 1716 023c 0022     		movs	r2, #0
 1717 023e 9847     		blx	r3
 1718 0240 0346     		mov	r3, r0
 1719 0242 BB75     		strb	r3, [r7, #22]
 1720 0244 01E0     		b	.L98
 1721              	.L97:
 1722              		.loc 1 670 0 discriminator 2
 1723 0246 0023     		movs	r3, #0
 1724 0248 BB75     		strb	r3, [r7, #22]
 1725              	.L98:
 671:../lwip-1.4.1/src/core/tcp_in.c ****       if (err == ERR_ABRT) {
 1726              		.loc 1 671 0 is_stmt 1
 1727 024a 97F91630 		ldrsb	r3, [r7, #22]
 1728 024e 13F10A0F 		cmn	r3, #10
 1729 0252 01D1     		bne	.L99
 672:../lwip-1.4.1/src/core/tcp_in.c ****         return ERR_ABRT;
 1730              		.loc 1 672 0
 1731 0254 F623     		movs	r3, #246
 1732 0256 1CE2     		b	.L80
 1733              	.L99:
 673:../lwip-1.4.1/src/core/tcp_in.c ****       }
 674:../lwip-1.4.1/src/core/tcp_in.c ****       tcp_ack_now(pcb);
 1734              		.loc 1 674 0
 1735 0258 7B68     		ldr	r3, [r7, #4]
 1736 025a 9B7F     		ldrb	r3, [r3, #30]	@ zero_extendqisi2
 1737 025c 43F00203 		orr	r3, r3, #2
 1738 0260 DAB2     		uxtb	r2, r3
 1739 0262 7B68     		ldr	r3, [r7, #4]
 1740 0264 9A77     		strb	r2, [r3, #30]
 1741 0266 1CE0     		b	.L100
 1742              	.L92:
 675:../lwip-1.4.1/src/core/tcp_in.c ****     }
 676:../lwip-1.4.1/src/core/tcp_in.c ****     /* received ACK? possibly a half-open connection */
 677:../lwip-1.4.1/src/core/tcp_in.c ****     else if (flags & TCP_ACK) {
 1743              		.loc 1 677 0
 1744 0268 0E4B     		ldr	r3, .L138
 1745 026a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1746 026c 03F01003 		and	r3, r3, #16
 1747 0270 002B     		cmp	r3, #0
 1748 0272 16D0     		beq	.L100
 678:../lwip-1.4.1/src/core/tcp_in.c ****       /* send a RST to bring the other side in a non-synchronized state. */
 679:../lwip-1.4.1/src/core/tcp_in.c ****       tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(), ip_current_src_addr(),
 1749              		.loc 1 679 0
 1750 0274 0C4B     		ldr	r3, .L138+4
 1751 0276 1868     		ldr	r0, [r3]
 1752 0278 104B     		ldr	r3, .L138+24
 1753 027a 1B88     		ldrh	r3, [r3]
 1754 027c 1A46     		mov	r2, r3
 1755 027e 0B4B     		ldr	r3, .L138+8
 1756 0280 1B68     		ldr	r3, [r3]
 1757 0282 D118     		adds	r1, r2, r3
 680:../lwip-1.4.1/src/core/tcp_in.c ****         tcphdr->dest, tcphdr->src);
 1758              		.loc 1 680 0
 1759 0284 0C4B     		ldr	r3, .L138+20
 1760 0286 1B68     		ldr	r3, [r3]
 679:../lwip-1.4.1/src/core/tcp_in.c ****         tcphdr->dest, tcphdr->src);
 1761              		.loc 1 679 0
 1762 0288 5B88     		ldrh	r3, [r3, #2]	@ unaligned
 1763 028a 9AB2     		uxth	r2, r3
 1764              		.loc 1 680 0
 1765 028c 0A4B     		ldr	r3, .L138+20
 1766 028e 1B68     		ldr	r3, [r3]
 679:../lwip-1.4.1/src/core/tcp_in.c ****         tcphdr->dest, tcphdr->src);
 1767              		.loc 1 679 0
 1768 0290 1B88     		ldrh	r3, [r3]	@ unaligned
 1769 0292 9BB2     		uxth	r3, r3
 1770 0294 0092     		str	r2, [sp]
 1771 0296 0193     		str	r3, [sp, #4]
 1772 0298 094A     		ldr	r2, .L138+28
 1773 029a 0A4B     		ldr	r3, .L138+32
 1774 029c FFF7FEFF 		bl	tcp_rst
 681:../lwip-1.4.1/src/core/tcp_in.c ****     }
 682:../lwip-1.4.1/src/core/tcp_in.c ****     break;
 1775              		.loc 1 682 0
 1776 02a0 F6E1     		b	.L101
 1777              	.L100:
 1778 02a2 F5E1     		b	.L101
 1779              	.L139:
 1780              		.align	2
 1781              	.L138:
 1782 02a4 24000000 		.word	flags
 1783 02a8 20000000 		.word	ackno
 1784 02ac 1C000000 		.word	seqno
 1785 02b0 28000000 		.word	recv_flags
 1786 02b4 00000000 		.word	tcp_ticks
 1787 02b8 14000000 		.word	tcphdr
 1788 02bc 26000000 		.word	tcplen
 1789 02c0 00000000 		.word	current_iphdr_dest
 1790 02c4 00000000 		.word	current_iphdr_src
 1791              	.L86:
 683:../lwip-1.4.1/src/core/tcp_in.c ****   case SYN_RCVD:
 684:../lwip-1.4.1/src/core/tcp_in.c ****     if (flags & TCP_ACK) {
 1792              		.loc 1 684 0
 1793 02c8 9C4B     		ldr	r3, .L140
 1794 02ca 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1795 02cc 03F01003 		and	r3, r3, #16
 1796 02d0 002B     		cmp	r3, #0
 1797 02d2 7BD0     		beq	.L102
 685:../lwip-1.4.1/src/core/tcp_in.c ****       /* expected ACK number? */
 686:../lwip-1.4.1/src/core/tcp_in.c ****       if (TCP_SEQ_BETWEEN(ackno, pcb->lastack+1, pcb->snd_nxt)) {
 1798              		.loc 1 686 0
 1799 02d4 9A4B     		ldr	r3, .L140+4
 1800 02d6 1A68     		ldr	r2, [r3]
 1801 02d8 7B68     		ldr	r3, [r7, #4]
 1802 02da 9B6C     		ldr	r3, [r3, #72]
 1803 02dc D31A     		subs	r3, r2, r3
 1804 02de 013B     		subs	r3, r3, #1
 1805 02e0 002B     		cmp	r3, #0
 1806 02e2 5BDB     		blt	.L103
 1807              		.loc 1 686 0 is_stmt 0 discriminator 1
 1808 02e4 964B     		ldr	r3, .L140+4
 1809 02e6 1A68     		ldr	r2, [r3]
 1810 02e8 7B68     		ldr	r3, [r7, #4]
 1811 02ea 1B6D     		ldr	r3, [r3, #80]
 1812 02ec D31A     		subs	r3, r2, r3
 1813 02ee 002B     		cmp	r3, #0
 1814 02f0 54DC     		bgt	.L103
 1815              	.LBB2:
 687:../lwip-1.4.1/src/core/tcp_in.c ****         u16_t old_cwnd;
 688:../lwip-1.4.1/src/core/tcp_in.c ****         pcb->state = ESTABLISHED;
 1816              		.loc 1 688 0 is_stmt 1
 1817 02f2 7B68     		ldr	r3, [r7, #4]
 1818 02f4 0422     		movs	r2, #4
 1819 02f6 1A76     		strb	r2, [r3, #24]
 689:../lwip-1.4.1/src/core/tcp_in.c ****         LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr-
 690:../lwip-1.4.1/src/core/tcp_in.c **** #if LWIP_CALLBACK_API
 691:../lwip-1.4.1/src/core/tcp_in.c ****         LWIP_ASSERT("pcb->accept != NULL", pcb->accept != NULL);
 692:../lwip-1.4.1/src/core/tcp_in.c **** #endif
 693:../lwip-1.4.1/src/core/tcp_in.c ****         /* Call the accept function. */
 694:../lwip-1.4.1/src/core/tcp_in.c ****         TCP_EVENT_ACCEPT(pcb, ERR_OK, err);
 1820              		.loc 1 694 0
 1821 02f8 7B68     		ldr	r3, [r7, #4]
 1822 02fa 5B69     		ldr	r3, [r3, #20]
 1823 02fc 002B     		cmp	r3, #0
 1824 02fe 0AD0     		beq	.L104
 1825              		.loc 1 694 0 is_stmt 0 discriminator 1
 1826 0300 7B68     		ldr	r3, [r7, #4]
 1827 0302 5B69     		ldr	r3, [r3, #20]
 1828 0304 7A68     		ldr	r2, [r7, #4]
 1829 0306 1269     		ldr	r2, [r2, #16]
 1830 0308 1046     		mov	r0, r2
 1831 030a 7968     		ldr	r1, [r7, #4]
 1832 030c 0022     		movs	r2, #0
 1833 030e 9847     		blx	r3
 1834 0310 0346     		mov	r3, r0
 1835 0312 BB75     		strb	r3, [r7, #22]
 1836 0314 01E0     		b	.L105
 1837              	.L104:
 1838              		.loc 1 694 0 discriminator 2
 1839 0316 F223     		movs	r3, #242
 1840 0318 BB75     		strb	r3, [r7, #22]
 1841              	.L105:
 695:../lwip-1.4.1/src/core/tcp_in.c ****         if (err != ERR_OK) {
 1842              		.loc 1 695 0 is_stmt 1
 1843 031a 97F91630 		ldrsb	r3, [r7, #22]
 1844 031e 002B     		cmp	r3, #0
 1845 0320 09D0     		beq	.L106
 696:../lwip-1.4.1/src/core/tcp_in.c ****           /* If the accept function returns with an error, we abort
 697:../lwip-1.4.1/src/core/tcp_in.c ****            * the connection. */
 698:../lwip-1.4.1/src/core/tcp_in.c ****           /* Already aborted? */
 699:../lwip-1.4.1/src/core/tcp_in.c ****           if (err != ERR_ABRT) {
 1846              		.loc 1 699 0
 1847 0322 97F91630 		ldrsb	r3, [r7, #22]
 1848 0326 13F10A0F 		cmn	r3, #10
 1849 032a 02D0     		beq	.L107
 700:../lwip-1.4.1/src/core/tcp_in.c ****             tcp_abort(pcb);
 1850              		.loc 1 700 0
 1851 032c 7868     		ldr	r0, [r7, #4]
 1852 032e FFF7FEFF 		bl	tcp_abort
 1853              	.L107:
 701:../lwip-1.4.1/src/core/tcp_in.c ****           }
 702:../lwip-1.4.1/src/core/tcp_in.c ****           return ERR_ABRT;
 1854              		.loc 1 702 0
 1855 0332 F623     		movs	r3, #246
 1856 0334 ADE1     		b	.L80
 1857              	.L106:
 703:../lwip-1.4.1/src/core/tcp_in.c ****         }
 704:../lwip-1.4.1/src/core/tcp_in.c ****         old_cwnd = pcb->cwnd;
 1858              		.loc 1 704 0
 1859 0336 7B68     		ldr	r3, [r7, #4]
 1860 0338 B3F84C30 		ldrh	r3, [r3, #76]	@ movhi
 1861 033c FB81     		strh	r3, [r7, #14]	@ movhi
 705:../lwip-1.4.1/src/core/tcp_in.c ****         /* If there was any data contained within this ACK,
 706:../lwip-1.4.1/src/core/tcp_in.c ****          * we'd better pass it on to the application as well. */
 707:../lwip-1.4.1/src/core/tcp_in.c ****         tcp_receive(pcb);
 1862              		.loc 1 707 0
 1863 033e 7868     		ldr	r0, [r7, #4]
 1864 0340 FFF7FEFF 		bl	tcp_receive
 708:../lwip-1.4.1/src/core/tcp_in.c **** 
 709:../lwip-1.4.1/src/core/tcp_in.c ****         /* Prevent ACK for SYN to generate a sent event */
 710:../lwip-1.4.1/src/core/tcp_in.c ****         if (pcb->acked != 0) {
 1865              		.loc 1 710 0
 1866 0344 7B68     		ldr	r3, [r7, #4]
 1867 0346 B3F86430 		ldrh	r3, [r3, #100]
 1868 034a 002B     		cmp	r3, #0
 1869 034c 07D0     		beq	.L108
 711:../lwip-1.4.1/src/core/tcp_in.c ****           pcb->acked--;
 1870              		.loc 1 711 0
 1871 034e 7B68     		ldr	r3, [r7, #4]
 1872 0350 B3F86430 		ldrh	r3, [r3, #100]
 1873 0354 013B     		subs	r3, r3, #1
 1874 0356 9AB2     		uxth	r2, r3
 1875 0358 7B68     		ldr	r3, [r7, #4]
 1876 035a A3F86420 		strh	r2, [r3, #100]	@ movhi
 1877              	.L108:
 712:../lwip-1.4.1/src/core/tcp_in.c ****         }
 713:../lwip-1.4.1/src/core/tcp_in.c **** 
 714:../lwip-1.4.1/src/core/tcp_in.c ****         pcb->cwnd = ((old_cwnd == 1) ? (pcb->mss * 2) : pcb->mss);
 1878              		.loc 1 714 0
 1879 035e FB89     		ldrh	r3, [r7, #14]
 1880 0360 012B     		cmp	r3, #1
 1881 0362 04D1     		bne	.L109
 1882              		.loc 1 714 0 is_stmt 0 discriminator 1
 1883 0364 7B68     		ldr	r3, [r7, #4]
 1884 0366 DB8E     		ldrh	r3, [r3, #54]
 1885 0368 5B00     		lsls	r3, r3, #1
 1886 036a 9BB2     		uxth	r3, r3
 1887 036c 01E0     		b	.L110
 1888              	.L109:
 1889              		.loc 1 714 0 discriminator 2
 1890 036e 7B68     		ldr	r3, [r7, #4]
 1891 0370 DB8E     		ldrh	r3, [r3, #54]
 1892              	.L110:
 1893              		.loc 1 714 0 discriminator 4
 1894 0372 7A68     		ldr	r2, [r7, #4]
 1895 0374 A2F84C30 		strh	r3, [r2, #76]	@ movhi
 715:../lwip-1.4.1/src/core/tcp_in.c **** 
 716:../lwip-1.4.1/src/core/tcp_in.c ****         if (recv_flags & TF_GOT_FIN) {
 1896              		.loc 1 716 0 is_stmt 1 discriminator 4
 1897 0378 724B     		ldr	r3, .L140+8
 1898 037a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1899 037c 03F02003 		and	r3, r3, #32
 1900 0380 002B     		cmp	r3, #0
 1901 0382 0AD0     		beq	.L111
 717:../lwip-1.4.1/src/core/tcp_in.c ****           tcp_ack_now(pcb);
 1902              		.loc 1 717 0
 1903 0384 7B68     		ldr	r3, [r7, #4]
 1904 0386 9B7F     		ldrb	r3, [r3, #30]	@ zero_extendqisi2
 1905 0388 43F00203 		orr	r3, r3, #2
 1906 038c DAB2     		uxtb	r2, r3
 1907 038e 7B68     		ldr	r3, [r7, #4]
 1908 0390 9A77     		strb	r2, [r3, #30]
 718:../lwip-1.4.1/src/core/tcp_in.c ****           pcb->state = CLOSE_WAIT;
 1909              		.loc 1 718 0
 1910 0392 7B68     		ldr	r3, [r7, #4]
 1911 0394 0722     		movs	r2, #7
 1912 0396 1A76     		strb	r2, [r3, #24]
 1913              	.LBE2:
 686:../lwip-1.4.1/src/core/tcp_in.c ****         u16_t old_cwnd;
 1914              		.loc 1 686 0
 1915 0398 17E0     		b	.L112
 1916              	.L111:
 1917 039a 16E0     		b	.L112
 1918              	.L103:
 719:../lwip-1.4.1/src/core/tcp_in.c ****         }
 720:../lwip-1.4.1/src/core/tcp_in.c ****       } else {
 721:../lwip-1.4.1/src/core/tcp_in.c ****         /* incorrect ACK number, send RST */
 722:../lwip-1.4.1/src/core/tcp_in.c ****         tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(), ip_current_src_addr(),
 1919              		.loc 1 722 0
 1920 039c 684B     		ldr	r3, .L140+4
 1921 039e 1868     		ldr	r0, [r3]
 1922 03a0 694B     		ldr	r3, .L140+12
 1923 03a2 1B88     		ldrh	r3, [r3]
 1924 03a4 1A46     		mov	r2, r3
 1925 03a6 694B     		ldr	r3, .L140+16
 1926 03a8 1B68     		ldr	r3, [r3]
 1927 03aa D118     		adds	r1, r2, r3
 723:../lwip-1.4.1/src/core/tcp_in.c ****                 tcphdr->dest, tcphdr->src);
 1928              		.loc 1 723 0
 1929 03ac 684B     		ldr	r3, .L140+20
 1930 03ae 1B68     		ldr	r3, [r3]
 722:../lwip-1.4.1/src/core/tcp_in.c ****                 tcphdr->dest, tcphdr->src);
 1931              		.loc 1 722 0
 1932 03b0 5B88     		ldrh	r3, [r3, #2]	@ unaligned
 1933 03b2 9AB2     		uxth	r2, r3
 1934              		.loc 1 723 0
 1935 03b4 664B     		ldr	r3, .L140+20
 1936 03b6 1B68     		ldr	r3, [r3]
 722:../lwip-1.4.1/src/core/tcp_in.c ****                 tcphdr->dest, tcphdr->src);
 1937              		.loc 1 722 0
 1938 03b8 1B88     		ldrh	r3, [r3]	@ unaligned
 1939 03ba 9BB2     		uxth	r3, r3
 1940 03bc 0092     		str	r2, [sp]
 1941 03be 0193     		str	r3, [sp, #4]
 1942 03c0 644A     		ldr	r2, .L140+24
 1943 03c2 654B     		ldr	r3, .L140+28
 1944 03c4 FFF7FEFF 		bl	tcp_rst
 1945 03c8 11E0     		b	.L113
 1946              	.L112:
 1947 03ca 10E0     		b	.L113
 1948              	.L102:
 724:../lwip-1.4.1/src/core/tcp_in.c ****       }
 725:../lwip-1.4.1/src/core/tcp_in.c ****     } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 1949              		.loc 1 725 0
 1950 03cc 5B4B     		ldr	r3, .L140
 1951 03ce 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1952 03d0 03F00203 		and	r3, r3, #2
 1953 03d4 002B     		cmp	r3, #0
 1954 03d6 0AD0     		beq	.L113
 1955              		.loc 1 725 0 is_stmt 0 discriminator 1
 1956 03d8 7B68     		ldr	r3, [r7, #4]
 1957 03da 9B6A     		ldr	r3, [r3, #40]
 1958 03dc 5A1E     		subs	r2, r3, #1
 1959 03de 5B4B     		ldr	r3, .L140+16
 1960 03e0 1B68     		ldr	r3, [r3]
 1961 03e2 9A42     		cmp	r2, r3
 1962 03e4 03D1     		bne	.L113
 726:../lwip-1.4.1/src/core/tcp_in.c ****       /* Looks like another copy of the SYN - retransmit our SYN-ACK */
 727:../lwip-1.4.1/src/core/tcp_in.c ****       tcp_rexmit(pcb);
 1963              		.loc 1 727 0 is_stmt 1
 1964 03e6 7868     		ldr	r0, [r7, #4]
 1965 03e8 FFF7FEFF 		bl	tcp_rexmit
 728:../lwip-1.4.1/src/core/tcp_in.c ****     }
 729:../lwip-1.4.1/src/core/tcp_in.c ****     break;
 1966              		.loc 1 729 0
 1967 03ec 50E1     		b	.L101
 1968              	.L113:
 1969              		.loc 1 729 0 is_stmt 0 discriminator 8
 1970 03ee 4FE1     		b	.L101
 1971              	.L87:
 730:../lwip-1.4.1/src/core/tcp_in.c ****   case CLOSE_WAIT:
 731:../lwip-1.4.1/src/core/tcp_in.c ****     /* FALLTHROUGH */
 732:../lwip-1.4.1/src/core/tcp_in.c ****   case ESTABLISHED:
 733:../lwip-1.4.1/src/core/tcp_in.c ****     tcp_receive(pcb);
 1972              		.loc 1 733 0 is_stmt 1
 1973 03f0 7868     		ldr	r0, [r7, #4]
 1974 03f2 FFF7FEFF 		bl	tcp_receive
 734:../lwip-1.4.1/src/core/tcp_in.c ****     if (recv_flags & TF_GOT_FIN) { /* passive close */
 1975              		.loc 1 734 0
 1976 03f6 534B     		ldr	r3, .L140+8
 1977 03f8 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1978 03fa 03F02003 		and	r3, r3, #32
 1979 03fe 002B     		cmp	r3, #0
 1980 0400 0AD0     		beq	.L114
 735:../lwip-1.4.1/src/core/tcp_in.c ****       tcp_ack_now(pcb);
 1981              		.loc 1 735 0
 1982 0402 7B68     		ldr	r3, [r7, #4]
 1983 0404 9B7F     		ldrb	r3, [r3, #30]	@ zero_extendqisi2
 1984 0406 43F00203 		orr	r3, r3, #2
 1985 040a DAB2     		uxtb	r2, r3
 1986 040c 7B68     		ldr	r3, [r7, #4]
 1987 040e 9A77     		strb	r2, [r3, #30]
 736:../lwip-1.4.1/src/core/tcp_in.c ****       pcb->state = CLOSE_WAIT;
 1988              		.loc 1 736 0
 1989 0410 7B68     		ldr	r3, [r7, #4]
 1990 0412 0722     		movs	r2, #7
 1991 0414 1A76     		strb	r2, [r3, #24]
 737:../lwip-1.4.1/src/core/tcp_in.c ****     }
 738:../lwip-1.4.1/src/core/tcp_in.c ****     break;
 1992              		.loc 1 738 0
 1993 0416 3BE1     		b	.L101
 1994              	.L114:
 1995 0418 3AE1     		b	.L101
 1996              	.L88:
 739:../lwip-1.4.1/src/core/tcp_in.c ****   case FIN_WAIT_1:
 740:../lwip-1.4.1/src/core/tcp_in.c ****     tcp_receive(pcb);
 1997              		.loc 1 740 0
 1998 041a 7868     		ldr	r0, [r7, #4]
 1999 041c FFF7FEFF 		bl	tcp_receive
 741:../lwip-1.4.1/src/core/tcp_in.c ****     if (recv_flags & TF_GOT_FIN) {
 2000              		.loc 1 741 0
 2001 0420 484B     		ldr	r3, .L140+8
 2002 0422 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2003 0424 03F02003 		and	r3, r3, #32
 2004 0428 002B     		cmp	r3, #0
 2005 042a 58D0     		beq	.L115
 742:../lwip-1.4.1/src/core/tcp_in.c ****       if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt)) {
 2006              		.loc 1 742 0
 2007 042c 434B     		ldr	r3, .L140
 2008 042e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2009 0430 03F01003 		and	r3, r3, #16
 2010 0434 002B     		cmp	r3, #0
 2011 0436 47D0     		beq	.L116
 2012              		.loc 1 742 0 is_stmt 0 discriminator 1
 2013 0438 7B68     		ldr	r3, [r7, #4]
 2014 043a 1A6D     		ldr	r2, [r3, #80]
 2015 043c 404B     		ldr	r3, .L140+4
 2016 043e 1B68     		ldr	r3, [r3]
 2017 0440 9A42     		cmp	r2, r3
 2018 0442 41D1     		bne	.L116
 743:../lwip-1.4.1/src/core/tcp_in.c ****         LWIP_DEBUGF(TCP_DEBUG,
 744:../lwip-1.4.1/src/core/tcp_in.c ****           ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tc
 745:../lwip-1.4.1/src/core/tcp_in.c ****         tcp_ack_now(pcb);
 2019              		.loc 1 745 0 is_stmt 1
 2020 0444 7B68     		ldr	r3, [r7, #4]
 2021 0446 9B7F     		ldrb	r3, [r3, #30]	@ zero_extendqisi2
 2022 0448 43F00203 		orr	r3, r3, #2
 2023 044c DAB2     		uxtb	r2, r3
 2024 044e 7B68     		ldr	r3, [r7, #4]
 2025 0450 9A77     		strb	r2, [r3, #30]
 746:../lwip-1.4.1/src/core/tcp_in.c ****         tcp_pcb_purge(pcb);
 2026              		.loc 1 746 0
 2027 0452 7868     		ldr	r0, [r7, #4]
 2028 0454 FFF7FEFF 		bl	tcp_pcb_purge
 747:../lwip-1.4.1/src/core/tcp_in.c ****         TCP_RMV_ACTIVE(pcb);
 2029              		.loc 1 747 0
 2030 0458 404B     		ldr	r3, .L140+32
 2031 045a 1A68     		ldr	r2, [r3]
 2032 045c 7B68     		ldr	r3, [r7, #4]
 2033 045e 9A42     		cmp	r2, r3
 2034 0460 05D1     		bne	.L117
 2035              		.loc 1 747 0 is_stmt 0 discriminator 1
 2036 0462 3E4B     		ldr	r3, .L140+32
 2037 0464 1B68     		ldr	r3, [r3]
 2038 0466 DB68     		ldr	r3, [r3, #12]
 2039 0468 3C4A     		ldr	r2, .L140+32
 2040 046a 1360     		str	r3, [r2]
 2041 046c 19E0     		b	.L118
 2042              	.L117:
 2043              		.loc 1 747 0 discriminator 2
 2044 046e 3B4B     		ldr	r3, .L140+32
 2045 0470 1B68     		ldr	r3, [r3]
 2046 0472 3B4A     		ldr	r2, .L140+36
 2047 0474 1360     		str	r3, [r2]
 2048 0476 10E0     		b	.L119
 2049              	.L121:
 2050              		.loc 1 747 0 discriminator 9
 2051 0478 394B     		ldr	r3, .L140+36
 2052 047a 1B68     		ldr	r3, [r3]
 2053 047c DA68     		ldr	r2, [r3, #12]
 2054 047e 7B68     		ldr	r3, [r7, #4]
 2055 0480 9A42     		cmp	r2, r3
 2056 0482 05D1     		bne	.L120
 2057              		.loc 1 747 0 discriminator 5
 2058 0484 364B     		ldr	r3, .L140+36
 2059 0486 1B68     		ldr	r3, [r3]
 2060 0488 7A68     		ldr	r2, [r7, #4]
 2061 048a D268     		ldr	r2, [r2, #12]
 2062 048c DA60     		str	r2, [r3, #12]
 2063 048e 08E0     		b	.L118
 2064              	.L120:
 2065              		.loc 1 747 0 discriminator 6
 2066 0490 334B     		ldr	r3, .L140+36
 2067 0492 1B68     		ldr	r3, [r3]
 2068 0494 DB68     		ldr	r3, [r3, #12]
 2069 0496 324A     		ldr	r2, .L140+36
 2070 0498 1360     		str	r3, [r2]
 2071              	.L119:
 2072              		.loc 1 747 0 discriminator 8
 2073 049a 314B     		ldr	r3, .L140+36
 2074 049c 1B68     		ldr	r3, [r3]
 2075 049e 002B     		cmp	r3, #0
 2076 04a0 EAD1     		bne	.L121
 2077              	.L118:
 2078              		.loc 1 747 0 discriminator 10
 2079 04a2 7B68     		ldr	r3, [r7, #4]
 2080 04a4 0022     		movs	r2, #0
 2081 04a6 DA60     		str	r2, [r3, #12]
 2082 04a8 2E4B     		ldr	r3, .L140+40
 2083 04aa 0122     		movs	r2, #1
 2084 04ac 1A70     		strb	r2, [r3]
 748:../lwip-1.4.1/src/core/tcp_in.c ****         pcb->state = TIME_WAIT;
 2085              		.loc 1 748 0 is_stmt 1 discriminator 10
 2086 04ae 7B68     		ldr	r3, [r7, #4]
 2087 04b0 0A22     		movs	r2, #10
 2088 04b2 1A76     		strb	r2, [r3, #24]
 749:../lwip-1.4.1/src/core/tcp_in.c ****         TCP_REG(&tcp_tw_pcbs, pcb);
 2089              		.loc 1 749 0 discriminator 10
 2090 04b4 2C4B     		ldr	r3, .L140+44
 2091 04b6 1A68     		ldr	r2, [r3]
 2092 04b8 7B68     		ldr	r3, [r7, #4]
 2093 04ba DA60     		str	r2, [r3, #12]
 2094 04bc 2A4A     		ldr	r2, .L140+44
 2095 04be 7B68     		ldr	r3, [r7, #4]
 2096 04c0 1360     		str	r3, [r2]
 2097 04c2 FFF7FEFF 		bl	tcp_timer_needed
 2098 04c6 1AE0     		b	.L123
 2099              	.L116:
 750:../lwip-1.4.1/src/core/tcp_in.c ****       } else {
 751:../lwip-1.4.1/src/core/tcp_in.c ****         tcp_ack_now(pcb);
 2100              		.loc 1 751 0
 2101 04c8 7B68     		ldr	r3, [r7, #4]
 2102 04ca 9B7F     		ldrb	r3, [r3, #30]	@ zero_extendqisi2
 2103 04cc 43F00203 		orr	r3, r3, #2
 2104 04d0 DAB2     		uxtb	r2, r3
 2105 04d2 7B68     		ldr	r3, [r7, #4]
 2106 04d4 9A77     		strb	r2, [r3, #30]
 752:../lwip-1.4.1/src/core/tcp_in.c ****         pcb->state = CLOSING;
 2107              		.loc 1 752 0
 2108 04d6 7B68     		ldr	r3, [r7, #4]
 2109 04d8 0822     		movs	r2, #8
 2110 04da 1A76     		strb	r2, [r3, #24]
 2111 04dc 0FE0     		b	.L123
 2112              	.L115:
 753:../lwip-1.4.1/src/core/tcp_in.c ****       }
 754:../lwip-1.4.1/src/core/tcp_in.c ****     } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt)) {
 2113              		.loc 1 754 0
 2114 04de 174B     		ldr	r3, .L140
 2115 04e0 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2116 04e2 03F01003 		and	r3, r3, #16
 2117 04e6 002B     		cmp	r3, #0
 2118 04e8 09D0     		beq	.L123
 2119              		.loc 1 754 0 is_stmt 0 discriminator 1
 2120 04ea 7B68     		ldr	r3, [r7, #4]
 2121 04ec 1A6D     		ldr	r2, [r3, #80]
 2122 04ee 144B     		ldr	r3, .L140+4
 2123 04f0 1B68     		ldr	r3, [r3]
 2124 04f2 9A42     		cmp	r2, r3
 2125 04f4 03D1     		bne	.L123
 755:../lwip-1.4.1/src/core/tcp_in.c ****       pcb->state = FIN_WAIT_2;
 2126              		.loc 1 755 0 is_stmt 1
 2127 04f6 7B68     		ldr	r3, [r7, #4]
 2128 04f8 0622     		movs	r2, #6
 2129 04fa 1A76     		strb	r2, [r3, #24]
 756:../lwip-1.4.1/src/core/tcp_in.c ****     }
 757:../lwip-1.4.1/src/core/tcp_in.c ****     break;
 2130              		.loc 1 757 0
 2131 04fc C8E0     		b	.L101
 2132              	.L123:
 2133              		.loc 1 757 0 is_stmt 0 discriminator 10
 2134 04fe C7E0     		b	.L101
 2135              	.L89:
 758:../lwip-1.4.1/src/core/tcp_in.c ****   case FIN_WAIT_2:
 759:../lwip-1.4.1/src/core/tcp_in.c ****     tcp_receive(pcb);
 2136              		.loc 1 759 0 is_stmt 1
 2137 0500 7868     		ldr	r0, [r7, #4]
 2138 0502 FFF7FEFF 		bl	tcp_receive
 760:../lwip-1.4.1/src/core/tcp_in.c ****     if (recv_flags & TF_GOT_FIN) {
 2139              		.loc 1 760 0
 2140 0506 0F4B     		ldr	r3, .L140+8
 2141 0508 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2142 050a 03F02003 		and	r3, r3, #32
 2143 050e 002B     		cmp	r3, #0
 2144 0510 59D0     		beq	.L124
 761:../lwip-1.4.1/src/core/tcp_in.c ****       LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tc
 762:../lwip-1.4.1/src/core/tcp_in.c ****       tcp_ack_now(pcb);
 2145              		.loc 1 762 0
 2146 0512 7B68     		ldr	r3, [r7, #4]
 2147 0514 9B7F     		ldrb	r3, [r3, #30]	@ zero_extendqisi2
 2148 0516 43F00203 		orr	r3, r3, #2
 2149 051a DAB2     		uxtb	r2, r3
 2150 051c 7B68     		ldr	r3, [r7, #4]
 2151 051e 9A77     		strb	r2, [r3, #30]
 763:../lwip-1.4.1/src/core/tcp_in.c ****       tcp_pcb_purge(pcb);
 2152              		.loc 1 763 0
 2153 0520 7868     		ldr	r0, [r7, #4]
 2154 0522 FFF7FEFF 		bl	tcp_pcb_purge
 764:../lwip-1.4.1/src/core/tcp_in.c ****       TCP_RMV_ACTIVE(pcb);
 2155              		.loc 1 764 0
 2156 0526 0D4B     		ldr	r3, .L140+32
 2157 0528 1A68     		ldr	r2, [r3]
 2158 052a 7B68     		ldr	r3, [r7, #4]
 2159 052c 9A42     		cmp	r2, r3
 2160 052e 1DD1     		bne	.L125
 2161              		.loc 1 764 0 is_stmt 0 discriminator 1
 2162 0530 0A4B     		ldr	r3, .L140+32
 2163 0532 1B68     		ldr	r3, [r3]
 2164 0534 DB68     		ldr	r3, [r3, #12]
 2165 0536 094A     		ldr	r2, .L140+32
 2166 0538 1360     		str	r3, [r2]
 2167 053a 31E0     		b	.L126
 2168              	.L141:
 2169              		.align	2
 2170              	.L140:
 2171 053c 24000000 		.word	flags
 2172 0540 20000000 		.word	ackno
 2173 0544 28000000 		.word	recv_flags
 2174 0548 26000000 		.word	tcplen
 2175 054c 1C000000 		.word	seqno
 2176 0550 14000000 		.word	tcphdr
 2177 0554 00000000 		.word	current_iphdr_dest
 2178 0558 00000000 		.word	current_iphdr_src
 2179 055c 00000000 		.word	tcp_active_pcbs
 2180 0560 00000000 		.word	tcp_tmp_pcb
 2181 0564 00000000 		.word	tcp_active_pcbs_changed
 2182 0568 00000000 		.word	tcp_tw_pcbs
 2183              	.L125:
 2184              		.loc 1 764 0 discriminator 2
 2185 056c 4B4B     		ldr	r3, .L142
 2186 056e 1B68     		ldr	r3, [r3]
 2187 0570 4B4A     		ldr	r2, .L142+4
 2188 0572 1360     		str	r3, [r2]
 2189 0574 10E0     		b	.L127
 2190              	.L129:
 2191              		.loc 1 764 0 discriminator 9
 2192 0576 4A4B     		ldr	r3, .L142+4
 2193 0578 1B68     		ldr	r3, [r3]
 2194 057a DA68     		ldr	r2, [r3, #12]
 2195 057c 7B68     		ldr	r3, [r7, #4]
 2196 057e 9A42     		cmp	r2, r3
 2197 0580 05D1     		bne	.L128
 2198              		.loc 1 764 0 discriminator 5
 2199 0582 474B     		ldr	r3, .L142+4
 2200 0584 1B68     		ldr	r3, [r3]
 2201 0586 7A68     		ldr	r2, [r7, #4]
 2202 0588 D268     		ldr	r2, [r2, #12]
 2203 058a DA60     		str	r2, [r3, #12]
 2204 058c 08E0     		b	.L126
 2205              	.L128:
 2206              		.loc 1 764 0 discriminator 6
 2207 058e 444B     		ldr	r3, .L142+4
 2208 0590 1B68     		ldr	r3, [r3]
 2209 0592 DB68     		ldr	r3, [r3, #12]
 2210 0594 424A     		ldr	r2, .L142+4
 2211 0596 1360     		str	r3, [r2]
 2212              	.L127:
 2213              		.loc 1 764 0 discriminator 8
 2214 0598 414B     		ldr	r3, .L142+4
 2215 059a 1B68     		ldr	r3, [r3]
 2216 059c 002B     		cmp	r3, #0
 2217 059e EAD1     		bne	.L129
 2218              	.L126:
 2219              		.loc 1 764 0 discriminator 10
 2220 05a0 7B68     		ldr	r3, [r7, #4]
 2221 05a2 0022     		movs	r2, #0
 2222 05a4 DA60     		str	r2, [r3, #12]
 2223 05a6 3F4B     		ldr	r3, .L142+8
 2224 05a8 0122     		movs	r2, #1
 2225 05aa 1A70     		strb	r2, [r3]
 765:../lwip-1.4.1/src/core/tcp_in.c ****       pcb->state = TIME_WAIT;
 2226              		.loc 1 765 0 is_stmt 1 discriminator 10
 2227 05ac 7B68     		ldr	r3, [r7, #4]
 2228 05ae 0A22     		movs	r2, #10
 2229 05b0 1A76     		strb	r2, [r3, #24]
 766:../lwip-1.4.1/src/core/tcp_in.c ****       TCP_REG(&tcp_tw_pcbs, pcb);
 2230              		.loc 1 766 0 discriminator 10
 2231 05b2 3D4B     		ldr	r3, .L142+12
 2232 05b4 1A68     		ldr	r2, [r3]
 2233 05b6 7B68     		ldr	r3, [r7, #4]
 2234 05b8 DA60     		str	r2, [r3, #12]
 2235 05ba 3B4A     		ldr	r2, .L142+12
 2236 05bc 7B68     		ldr	r3, [r7, #4]
 2237 05be 1360     		str	r3, [r2]
 2238 05c0 FFF7FEFF 		bl	tcp_timer_needed
 767:../lwip-1.4.1/src/core/tcp_in.c ****     }
 768:../lwip-1.4.1/src/core/tcp_in.c ****     break;
 2239              		.loc 1 768 0 discriminator 10
 2240 05c4 64E0     		b	.L101
 2241              	.L124:
 2242              		.loc 1 768 0 is_stmt 0
 2243 05c6 63E0     		b	.L101
 2244              	.L90:
 769:../lwip-1.4.1/src/core/tcp_in.c ****   case CLOSING:
 770:../lwip-1.4.1/src/core/tcp_in.c ****     tcp_receive(pcb);
 2245              		.loc 1 770 0 is_stmt 1
 2246 05c8 7868     		ldr	r0, [r7, #4]
 2247 05ca FFF7FEFF 		bl	tcp_receive
 771:../lwip-1.4.1/src/core/tcp_in.c ****     if (flags & TCP_ACK && ackno == pcb->snd_nxt) {
 2248              		.loc 1 771 0
 2249 05ce 374B     		ldr	r3, .L142+16
 2250 05d0 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2251 05d2 03F01003 		and	r3, r3, #16
 2252 05d6 002B     		cmp	r3, #0
 2253 05d8 40D0     		beq	.L130
 2254              		.loc 1 771 0 is_stmt 0 discriminator 1
 2255 05da 7B68     		ldr	r3, [r7, #4]
 2256 05dc 1A6D     		ldr	r2, [r3, #80]
 2257 05de 344B     		ldr	r3, .L142+20
 2258 05e0 1B68     		ldr	r3, [r3]
 2259 05e2 9A42     		cmp	r2, r3
 2260 05e4 3AD1     		bne	.L130
 772:../lwip-1.4.1/src/core/tcp_in.c ****       LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphd
 773:../lwip-1.4.1/src/core/tcp_in.c ****       tcp_pcb_purge(pcb);
 2261              		.loc 1 773 0 is_stmt 1
 2262 05e6 7868     		ldr	r0, [r7, #4]
 2263 05e8 FFF7FEFF 		bl	tcp_pcb_purge
 774:../lwip-1.4.1/src/core/tcp_in.c ****       TCP_RMV_ACTIVE(pcb);
 2264              		.loc 1 774 0
 2265 05ec 2B4B     		ldr	r3, .L142
 2266 05ee 1A68     		ldr	r2, [r3]
 2267 05f0 7B68     		ldr	r3, [r7, #4]
 2268 05f2 9A42     		cmp	r2, r3
 2269 05f4 05D1     		bne	.L131
 2270              		.loc 1 774 0 is_stmt 0 discriminator 1
 2271 05f6 294B     		ldr	r3, .L142
 2272 05f8 1B68     		ldr	r3, [r3]
 2273 05fa DB68     		ldr	r3, [r3, #12]
 2274 05fc 274A     		ldr	r2, .L142
 2275 05fe 1360     		str	r3, [r2]
 2276 0600 19E0     		b	.L132
 2277              	.L131:
 2278              		.loc 1 774 0 discriminator 2
 2279 0602 264B     		ldr	r3, .L142
 2280 0604 1B68     		ldr	r3, [r3]
 2281 0606 264A     		ldr	r2, .L142+4
 2282 0608 1360     		str	r3, [r2]
 2283 060a 10E0     		b	.L133
 2284              	.L135:
 2285              		.loc 1 774 0 discriminator 9
 2286 060c 244B     		ldr	r3, .L142+4
 2287 060e 1B68     		ldr	r3, [r3]
 2288 0610 DA68     		ldr	r2, [r3, #12]
 2289 0612 7B68     		ldr	r3, [r7, #4]
 2290 0614 9A42     		cmp	r2, r3
 2291 0616 05D1     		bne	.L134
 2292              		.loc 1 774 0 discriminator 5
 2293 0618 214B     		ldr	r3, .L142+4
 2294 061a 1B68     		ldr	r3, [r3]
 2295 061c 7A68     		ldr	r2, [r7, #4]
 2296 061e D268     		ldr	r2, [r2, #12]
 2297 0620 DA60     		str	r2, [r3, #12]
 2298 0622 08E0     		b	.L132
 2299              	.L134:
 2300              		.loc 1 774 0 discriminator 6
 2301 0624 1E4B     		ldr	r3, .L142+4
 2302 0626 1B68     		ldr	r3, [r3]
 2303 0628 DB68     		ldr	r3, [r3, #12]
 2304 062a 1D4A     		ldr	r2, .L142+4
 2305 062c 1360     		str	r3, [r2]
 2306              	.L133:
 2307              		.loc 1 774 0 discriminator 8
 2308 062e 1C4B     		ldr	r3, .L142+4
 2309 0630 1B68     		ldr	r3, [r3]
 2310 0632 002B     		cmp	r3, #0
 2311 0634 EAD1     		bne	.L135
 2312              	.L132:
 2313              		.loc 1 774 0 discriminator 10
 2314 0636 7B68     		ldr	r3, [r7, #4]
 2315 0638 0022     		movs	r2, #0
 2316 063a DA60     		str	r2, [r3, #12]
 2317 063c 194B     		ldr	r3, .L142+8
 2318 063e 0122     		movs	r2, #1
 2319 0640 1A70     		strb	r2, [r3]
 775:../lwip-1.4.1/src/core/tcp_in.c ****       pcb->state = TIME_WAIT;
 2320              		.loc 1 775 0 is_stmt 1 discriminator 10
 2321 0642 7B68     		ldr	r3, [r7, #4]
 2322 0644 0A22     		movs	r2, #10
 2323 0646 1A76     		strb	r2, [r3, #24]
 776:../lwip-1.4.1/src/core/tcp_in.c ****       TCP_REG(&tcp_tw_pcbs, pcb);
 2324              		.loc 1 776 0 discriminator 10
 2325 0648 174B     		ldr	r3, .L142+12
 2326 064a 1A68     		ldr	r2, [r3]
 2327 064c 7B68     		ldr	r3, [r7, #4]
 2328 064e DA60     		str	r2, [r3, #12]
 2329 0650 154A     		ldr	r2, .L142+12
 2330 0652 7B68     		ldr	r3, [r7, #4]
 2331 0654 1360     		str	r3, [r2]
 2332 0656 FFF7FEFF 		bl	tcp_timer_needed
 777:../lwip-1.4.1/src/core/tcp_in.c ****     }
 778:../lwip-1.4.1/src/core/tcp_in.c ****     break;
 2333              		.loc 1 778 0 discriminator 10
 2334 065a 19E0     		b	.L101
 2335              	.L130:
 2336              		.loc 1 778 0 is_stmt 0
 2337 065c 18E0     		b	.L101
 2338              	.L91:
 779:../lwip-1.4.1/src/core/tcp_in.c ****   case LAST_ACK:
 780:../lwip-1.4.1/src/core/tcp_in.c ****     tcp_receive(pcb);
 2339              		.loc 1 780 0 is_stmt 1
 2340 065e 7868     		ldr	r0, [r7, #4]
 2341 0660 FFF7FEFF 		bl	tcp_receive
 781:../lwip-1.4.1/src/core/tcp_in.c ****     if (flags & TCP_ACK && ackno == pcb->snd_nxt) {
 2342              		.loc 1 781 0
 2343 0664 114B     		ldr	r3, .L142+16
 2344 0666 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2345 0668 03F01003 		and	r3, r3, #16
 2346 066c 002B     		cmp	r3, #0
 2347 066e 0DD0     		beq	.L136
 2348              		.loc 1 781 0 is_stmt 0 discriminator 1
 2349 0670 7B68     		ldr	r3, [r7, #4]
 2350 0672 1A6D     		ldr	r2, [r3, #80]
 2351 0674 0E4B     		ldr	r3, .L142+20
 2352 0676 1B68     		ldr	r3, [r3]
 2353 0678 9A42     		cmp	r2, r3
 2354 067a 07D1     		bne	.L136
 782:../lwip-1.4.1/src/core/tcp_in.c ****       LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcph
 783:../lwip-1.4.1/src/core/tcp_in.c ****       /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
 784:../lwip-1.4.1/src/core/tcp_in.c ****       recv_flags |= TF_CLOSED;
 2355              		.loc 1 784 0 is_stmt 1
 2356 067c 0D4B     		ldr	r3, .L142+24
 2357 067e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2358 0680 43F01003 		orr	r3, r3, #16
 2359 0684 DAB2     		uxtb	r2, r3
 2360 0686 0B4B     		ldr	r3, .L142+24
 2361 0688 1A70     		strb	r2, [r3]
 785:../lwip-1.4.1/src/core/tcp_in.c ****     }
 786:../lwip-1.4.1/src/core/tcp_in.c ****     break;
 2362              		.loc 1 786 0
 2363 068a 01E0     		b	.L101
 2364              	.L136:
 2365 068c 00E0     		b	.L101
 2366              	.L137:
 787:../lwip-1.4.1/src/core/tcp_in.c ****   default:
 788:../lwip-1.4.1/src/core/tcp_in.c ****     break;
 2367              		.loc 1 788 0
 2368 068e 00BF     		nop
 2369              	.L101:
 789:../lwip-1.4.1/src/core/tcp_in.c ****   }
 790:../lwip-1.4.1/src/core/tcp_in.c ****   return ERR_OK;
 2370              		.loc 1 790 0
 2371 0690 0023     		movs	r3, #0
 2372              	.L80:
 2373 0692 5BB2     		sxtb	r3, r3
 791:../lwip-1.4.1/src/core/tcp_in.c **** }
 2374              		.loc 1 791 0
 2375 0694 1846     		mov	r0, r3
 2376 0696 1837     		adds	r7, r7, #24
 2377              		.cfi_def_cfa_offset 8
 2378 0698 BD46     		mov	sp, r7
 2379              		.cfi_def_cfa_register 13
 2380              		@ sp needed
 2381 069a 80BD     		pop	{r7, pc}
 2382              	.L143:
 2383              		.align	2
 2384              	.L142:
 2385 069c 00000000 		.word	tcp_active_pcbs
 2386 06a0 00000000 		.word	tcp_tmp_pcb
 2387 06a4 00000000 		.word	tcp_active_pcbs_changed
 2388 06a8 00000000 		.word	tcp_tw_pcbs
 2389 06ac 24000000 		.word	flags
 2390 06b0 20000000 		.word	ackno
 2391 06b4 28000000 		.word	recv_flags
 2392              		.cfi_endproc
 2393              	.LFE3:
 2395              		.section	.text.tcp_oos_insert_segment,"ax",%progbits
 2396              		.align	2
 2397              		.thumb
 2398              		.thumb_func
 2400              	tcp_oos_insert_segment:
 2401              	.LFB4:
 792:../lwip-1.4.1/src/core/tcp_in.c **** 
 793:../lwip-1.4.1/src/core/tcp_in.c **** #if TCP_QUEUE_OOSEQ
 794:../lwip-1.4.1/src/core/tcp_in.c **** /**
 795:../lwip-1.4.1/src/core/tcp_in.c ****  * Insert segment into the list (segments covered with new one will be deleted)
 796:../lwip-1.4.1/src/core/tcp_in.c ****  *
 797:../lwip-1.4.1/src/core/tcp_in.c ****  * Called from tcp_receive()
 798:../lwip-1.4.1/src/core/tcp_in.c ****  */
 799:../lwip-1.4.1/src/core/tcp_in.c **** static void
 800:../lwip-1.4.1/src/core/tcp_in.c **** tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
 801:../lwip-1.4.1/src/core/tcp_in.c **** {
 2402              		.loc 1 801 0
 2403              		.cfi_startproc
 2404              		@ args = 0, pretend = 0, frame = 16
 2405              		@ frame_needed = 1, uses_anonymous_args = 0
 2406 0000 B0B5     		push	{r4, r5, r7, lr}
 2407              		.cfi_def_cfa_offset 16
 2408              		.cfi_offset 4, -16
 2409              		.cfi_offset 5, -12
 2410              		.cfi_offset 7, -8
 2411              		.cfi_offset 14, -4
 2412 0002 84B0     		sub	sp, sp, #16
 2413              		.cfi_def_cfa_offset 32
 2414 0004 00AF     		add	r7, sp, #0
 2415              		.cfi_def_cfa_register 7
 2416 0006 7860     		str	r0, [r7, #4]
 2417 0008 3960     		str	r1, [r7]
 802:../lwip-1.4.1/src/core/tcp_in.c ****   struct tcp_seg *old_seg;
 803:../lwip-1.4.1/src/core/tcp_in.c **** 
 804:../lwip-1.4.1/src/core/tcp_in.c ****   if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 2418              		.loc 1 804 0
 2419 000a 7B68     		ldr	r3, [r7, #4]
 2420 000c 1B69     		ldr	r3, [r3, #16]
 2421 000e 9B89     		ldrh	r3, [r3, #12]	@ unaligned
 2422 0010 9BB2     		uxth	r3, r3
 2423 0012 1846     		mov	r0, r3
 2424 0014 FFF7FEFF 		bl	lwip_ntohs
 2425 0018 0346     		mov	r3, r0
 2426 001a 03F00103 		and	r3, r3, #1
 2427 001e 002B     		cmp	r3, #0
 2428 0020 05D0     		beq	.L145
 805:../lwip-1.4.1/src/core/tcp_in.c ****     /* received segment overlaps all following segments */
 806:../lwip-1.4.1/src/core/tcp_in.c ****     tcp_segs_free(next);
 2429              		.loc 1 806 0
 2430 0022 3868     		ldr	r0, [r7]
 2431 0024 FFF7FEFF 		bl	tcp_segs_free
 807:../lwip-1.4.1/src/core/tcp_in.c ****     next = NULL;
 2432              		.loc 1 807 0
 2433 0028 0023     		movs	r3, #0
 2434 002a 3B60     		str	r3, [r7]
 2435 002c 55E0     		b	.L146
 2436              	.L145:
 808:../lwip-1.4.1/src/core/tcp_in.c ****   }
 809:../lwip-1.4.1/src/core/tcp_in.c ****   else {
 810:../lwip-1.4.1/src/core/tcp_in.c ****     /* delete some following segments
 811:../lwip-1.4.1/src/core/tcp_in.c ****        oos queue may have segments with FIN flag */
 812:../lwip-1.4.1/src/core/tcp_in.c ****     while (next &&
 2437              		.loc 1 812 0
 2438 002e 20E0     		b	.L147
 2439              	.L150:
 813:../lwip-1.4.1/src/core/tcp_in.c ****            TCP_SEQ_GEQ((seqno + cseg->len),
 814:../lwip-1.4.1/src/core/tcp_in.c ****                       (next->tcphdr->seqno + next->len))) {
 815:../lwip-1.4.1/src/core/tcp_in.c ****       /* cseg with FIN already processed */
 816:../lwip-1.4.1/src/core/tcp_in.c ****       if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 2440              		.loc 1 816 0
 2441 0030 3B68     		ldr	r3, [r7]
 2442 0032 1B69     		ldr	r3, [r3, #16]
 2443 0034 9B89     		ldrh	r3, [r3, #12]	@ unaligned
 2444 0036 9BB2     		uxth	r3, r3
 2445 0038 1846     		mov	r0, r3
 2446 003a FFF7FEFF 		bl	lwip_ntohs
 2447 003e 0346     		mov	r3, r0
 2448 0040 03F00103 		and	r3, r3, #1
 2449 0044 002B     		cmp	r3, #0
 2450 0046 0CD0     		beq	.L148
 817:../lwip-1.4.1/src/core/tcp_in.c ****         TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 2451              		.loc 1 817 0
 2452 0048 7B68     		ldr	r3, [r7, #4]
 2453 004a 1C69     		ldr	r4, [r3, #16]
 2454 004c 7B68     		ldr	r3, [r7, #4]
 2455 004e 1B69     		ldr	r3, [r3, #16]
 2456 0050 9B89     		ldrh	r3, [r3, #12]	@ unaligned
 2457 0052 9DB2     		uxth	r5, r3
 2458 0054 0120     		movs	r0, #1
 2459 0056 FFF7FEFF 		bl	lwip_htons
 2460 005a 0346     		mov	r3, r0
 2461 005c 2B43     		orrs	r3, r3, r5
 2462 005e 9BB2     		uxth	r3, r3
 2463 0060 A381     		strh	r3, [r4, #12]	@ unaligned
 2464              	.L148:
 818:../lwip-1.4.1/src/core/tcp_in.c ****       }
 819:../lwip-1.4.1/src/core/tcp_in.c ****       old_seg = next;
 2465              		.loc 1 819 0
 2466 0062 3B68     		ldr	r3, [r7]
 2467 0064 FB60     		str	r3, [r7, #12]
 820:../lwip-1.4.1/src/core/tcp_in.c ****       next = next->next;
 2468              		.loc 1 820 0
 2469 0066 3B68     		ldr	r3, [r7]
 2470 0068 1B68     		ldr	r3, [r3]
 2471 006a 3B60     		str	r3, [r7]
 821:../lwip-1.4.1/src/core/tcp_in.c ****       tcp_seg_free(old_seg);
 2472              		.loc 1 821 0
 2473 006c F868     		ldr	r0, [r7, #12]
 2474 006e FFF7FEFF 		bl	tcp_seg_free
 2475              	.L147:
 812:../lwip-1.4.1/src/core/tcp_in.c ****            TCP_SEQ_GEQ((seqno + cseg->len),
 2476              		.loc 1 812 0
 2477 0072 3B68     		ldr	r3, [r7]
 2478 0074 002B     		cmp	r3, #0
 2479 0076 0ED0     		beq	.L149
 813:../lwip-1.4.1/src/core/tcp_in.c ****                       (next->tcphdr->seqno + next->len))) {
 2480              		.loc 1 813 0 discriminator 1
 2481 0078 7B68     		ldr	r3, [r7, #4]
 2482 007a 1B89     		ldrh	r3, [r3, #8]
 2483 007c 1A46     		mov	r2, r3
 2484 007e 1A4B     		ldr	r3, .L151
 2485 0080 1B68     		ldr	r3, [r3]
 2486 0082 1A44     		add	r2, r2, r3
 2487 0084 3B68     		ldr	r3, [r7]
 2488 0086 1B69     		ldr	r3, [r3, #16]
 2489 0088 5B68     		ldr	r3, [r3, #4]	@ unaligned
 2490 008a 3968     		ldr	r1, [r7]
 2491 008c 0989     		ldrh	r1, [r1, #8]
 2492 008e 0B44     		add	r3, r3, r1
 2493 0090 D31A     		subs	r3, r2, r3
 812:../lwip-1.4.1/src/core/tcp_in.c ****            TCP_SEQ_GEQ((seqno + cseg->len),
 2494              		.loc 1 812 0 discriminator 1
 2495 0092 002B     		cmp	r3, #0
 2496 0094 CCDA     		bge	.L150
 2497              	.L149:
 822:../lwip-1.4.1/src/core/tcp_in.c ****     }
 823:../lwip-1.4.1/src/core/tcp_in.c ****     if (next &&
 2498              		.loc 1 823 0
 2499 0096 3B68     		ldr	r3, [r7]
 2500 0098 002B     		cmp	r3, #0
 2501 009a 1ED0     		beq	.L146
 824:../lwip-1.4.1/src/core/tcp_in.c ****         TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 2502              		.loc 1 824 0 discriminator 1
 2503 009c 7B68     		ldr	r3, [r7, #4]
 2504 009e 1B89     		ldrh	r3, [r3, #8]
 2505 00a0 1A46     		mov	r2, r3
 2506 00a2 114B     		ldr	r3, .L151
 2507 00a4 1B68     		ldr	r3, [r3]
 2508 00a6 1A44     		add	r2, r2, r3
 2509 00a8 3B68     		ldr	r3, [r7]
 2510 00aa 1B69     		ldr	r3, [r3, #16]
 2511 00ac 5B68     		ldr	r3, [r3, #4]	@ unaligned
 2512 00ae D31A     		subs	r3, r2, r3
 823:../lwip-1.4.1/src/core/tcp_in.c ****         TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 2513              		.loc 1 823 0 discriminator 1
 2514 00b0 002B     		cmp	r3, #0
 2515 00b2 12DD     		ble	.L146
 825:../lwip-1.4.1/src/core/tcp_in.c ****       /* We need to trim the incoming segment. */
 826:../lwip-1.4.1/src/core/tcp_in.c ****       cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 2516              		.loc 1 826 0
 2517 00b4 3B68     		ldr	r3, [r7]
 2518 00b6 1B69     		ldr	r3, [r3, #16]
 2519 00b8 5B68     		ldr	r3, [r3, #4]	@ unaligned
 2520 00ba 9AB2     		uxth	r2, r3
 2521 00bc 0A4B     		ldr	r3, .L151
 2522 00be 1B68     		ldr	r3, [r3]
 2523 00c0 9BB2     		uxth	r3, r3
 2524 00c2 D31A     		subs	r3, r2, r3
 2525 00c4 9AB2     		uxth	r2, r3
 2526 00c6 7B68     		ldr	r3, [r7, #4]
 2527 00c8 1A81     		strh	r2, [r3, #8]	@ movhi
 827:../lwip-1.4.1/src/core/tcp_in.c ****       pbuf_realloc(cseg->p, cseg->len);
 2528              		.loc 1 827 0
 2529 00ca 7B68     		ldr	r3, [r7, #4]
 2530 00cc 5A68     		ldr	r2, [r3, #4]
 2531 00ce 7B68     		ldr	r3, [r7, #4]
 2532 00d0 1B89     		ldrh	r3, [r3, #8]
 2533 00d2 1046     		mov	r0, r2
 2534 00d4 1946     		mov	r1, r3
 2535 00d6 FFF7FEFF 		bl	pbuf_realloc
 2536              	.L146:
 828:../lwip-1.4.1/src/core/tcp_in.c ****     }
 829:../lwip-1.4.1/src/core/tcp_in.c ****   }
 830:../lwip-1.4.1/src/core/tcp_in.c ****   cseg->next = next;
 2537              		.loc 1 830 0
 2538 00da 7B68     		ldr	r3, [r7, #4]
 2539 00dc 3A68     		ldr	r2, [r7]
 2540 00de 1A60     		str	r2, [r3]
 831:../lwip-1.4.1/src/core/tcp_in.c **** }
 2541              		.loc 1 831 0
 2542 00e0 1037     		adds	r7, r7, #16
 2543              		.cfi_def_cfa_offset 16
 2544 00e2 BD46     		mov	sp, r7
 2545              		.cfi_def_cfa_register 13
 2546              		@ sp needed
 2547 00e4 B0BD     		pop	{r4, r5, r7, pc}
 2548              	.L152:
 2549 00e6 00BF     		.align	2
 2550              	.L151:
 2551 00e8 1C000000 		.word	seqno
 2552              		.cfi_endproc
 2553              	.LFE4:
 2555              		.section	.text.tcp_receive,"ax",%progbits
 2556              		.align	2
 2557              		.thumb
 2558              		.thumb_func
 2560              	tcp_receive:
 2561              	.LFB5:
 832:../lwip-1.4.1/src/core/tcp_in.c **** #endif /* TCP_QUEUE_OOSEQ */
 833:../lwip-1.4.1/src/core/tcp_in.c **** 
 834:../lwip-1.4.1/src/core/tcp_in.c **** /**
 835:../lwip-1.4.1/src/core/tcp_in.c ****  * Called by tcp_process. Checks if the given segment is an ACK for outstanding
 836:../lwip-1.4.1/src/core/tcp_in.c ****  * data, and if so frees the memory of the buffered data. Next, is places the
 837:../lwip-1.4.1/src/core/tcp_in.c ****  * segment on any of the receive queues (pcb->recved or pcb->ooseq). If the segment
 838:../lwip-1.4.1/src/core/tcp_in.c ****  * is buffered, the pbuf is referenced by pbuf_ref so that it will not be freed until
 839:../lwip-1.4.1/src/core/tcp_in.c ****  * it has been removed from the buffer.
 840:../lwip-1.4.1/src/core/tcp_in.c ****  *
 841:../lwip-1.4.1/src/core/tcp_in.c ****  * If the incoming segment constitutes an ACK for a segment that was used for RTT
 842:../lwip-1.4.1/src/core/tcp_in.c ****  * estimation, the RTT is estimated here as well.
 843:../lwip-1.4.1/src/core/tcp_in.c ****  *
 844:../lwip-1.4.1/src/core/tcp_in.c ****  * Called from tcp_process().
 845:../lwip-1.4.1/src/core/tcp_in.c ****  */
 846:../lwip-1.4.1/src/core/tcp_in.c **** static void
 847:../lwip-1.4.1/src/core/tcp_in.c **** tcp_receive(struct tcp_pcb *pcb)
 848:../lwip-1.4.1/src/core/tcp_in.c **** {
 2562              		.loc 1 848 0
 2563              		.cfi_startproc
 2564              		@ args = 0, pretend = 0, frame = 48
 2565              		@ frame_needed = 1, uses_anonymous_args = 0
 2566 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 2567              		.cfi_def_cfa_offset 20
 2568              		.cfi_offset 4, -20
 2569              		.cfi_offset 5, -16
 2570              		.cfi_offset 6, -12
 2571              		.cfi_offset 7, -8
 2572              		.cfi_offset 14, -4
 2573 0002 8DB0     		sub	sp, sp, #52
 2574              		.cfi_def_cfa_offset 72
 2575 0004 00AF     		add	r7, sp, #0
 2576              		.cfi_def_cfa_register 7
 2577 0006 7860     		str	r0, [r7, #4]
 849:../lwip-1.4.1/src/core/tcp_in.c ****   struct tcp_seg *next;
 850:../lwip-1.4.1/src/core/tcp_in.c **** #if TCP_QUEUE_OOSEQ
 851:../lwip-1.4.1/src/core/tcp_in.c ****   struct tcp_seg *prev, *cseg;
 852:../lwip-1.4.1/src/core/tcp_in.c **** #endif /* TCP_QUEUE_OOSEQ */
 853:../lwip-1.4.1/src/core/tcp_in.c ****   struct pbuf *p;
 854:../lwip-1.4.1/src/core/tcp_in.c ****   s32_t off;
 855:../lwip-1.4.1/src/core/tcp_in.c ****   s16_t m;
 856:../lwip-1.4.1/src/core/tcp_in.c ****   u32_t right_wnd_edge;
 857:../lwip-1.4.1/src/core/tcp_in.c ****   u16_t new_tot_len;
 858:../lwip-1.4.1/src/core/tcp_in.c ****   int found_dupack = 0;
 2578              		.loc 1 858 0
 2579 0008 0023     		movs	r3, #0
 2580 000a BB61     		str	r3, [r7, #24]
 859:../lwip-1.4.1/src/core/tcp_in.c **** #if TCP_OOSEQ_MAX_BYTES || TCP_OOSEQ_MAX_PBUFS
 860:../lwip-1.4.1/src/core/tcp_in.c ****   u32_t ooseq_blen;
 861:../lwip-1.4.1/src/core/tcp_in.c ****   u16_t ooseq_qlen;
 862:../lwip-1.4.1/src/core/tcp_in.c **** #endif /* TCP_OOSEQ_MAX_BYTES || TCP_OOSEQ_MAX_PBUFS */
 863:../lwip-1.4.1/src/core/tcp_in.c **** 
 864:../lwip-1.4.1/src/core/tcp_in.c ****   LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 865:../lwip-1.4.1/src/core/tcp_in.c **** 
 866:../lwip-1.4.1/src/core/tcp_in.c ****   if (flags & TCP_ACK) {
 2581              		.loc 1 866 0
 2582 000c A54B     		ldr	r3, .L244
 2583 000e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2584 0010 03F01003 		and	r3, r3, #16
 2585 0014 002B     		cmp	r3, #0
 2586 0016 00F0BD82 		beq	.L154
 867:../lwip-1.4.1/src/core/tcp_in.c ****     right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 2587              		.loc 1 867 0
 2588 001a 7B68     		ldr	r3, [r7, #4]
 2589 001c B3F86030 		ldrh	r3, [r3, #96]
 2590 0020 1A46     		mov	r2, r3
 2591 0022 7B68     		ldr	r3, [r7, #4]
 2592 0024 9B6D     		ldr	r3, [r3, #88]
 2593 0026 1344     		add	r3, r3, r2
 2594 0028 7B61     		str	r3, [r7, #20]
 868:../lwip-1.4.1/src/core/tcp_in.c **** 
 869:../lwip-1.4.1/src/core/tcp_in.c ****     /* Update window. */
 870:../lwip-1.4.1/src/core/tcp_in.c ****     if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 2595              		.loc 1 870 0
 2596 002a 7B68     		ldr	r3, [r7, #4]
 2597 002c 5A6D     		ldr	r2, [r3, #84]
 2598 002e 9E4B     		ldr	r3, .L244+4
 2599 0030 1B68     		ldr	r3, [r3]
 2600 0032 D31A     		subs	r3, r2, r3
 2601 0034 002B     		cmp	r3, #0
 2602 0036 1BDB     		blt	.L155
 871:../lwip-1.4.1/src/core/tcp_in.c ****        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 2603              		.loc 1 871 0 discriminator 1
 2604 0038 7B68     		ldr	r3, [r7, #4]
 2605 003a 5A6D     		ldr	r2, [r3, #84]
 2606 003c 9A4B     		ldr	r3, .L244+4
 2607 003e 1B68     		ldr	r3, [r3]
 870:../lwip-1.4.1/src/core/tcp_in.c ****        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 2608              		.loc 1 870 0 discriminator 1
 2609 0040 9A42     		cmp	r2, r3
 2610 0042 06D1     		bne	.L156
 2611              		.loc 1 871 0
 2612 0044 7B68     		ldr	r3, [r7, #4]
 2613 0046 9A6D     		ldr	r2, [r3, #88]
 2614 0048 984B     		ldr	r3, .L244+8
 2615 004a 1B68     		ldr	r3, [r3]
 2616 004c D31A     		subs	r3, r2, r3
 2617 004e 002B     		cmp	r3, #0
 2618 0050 0EDB     		blt	.L155
 2619              	.L156:
 872:../lwip-1.4.1/src/core/tcp_in.c ****        (pcb->snd_wl2 == ackno && tcphdr->wnd > pcb->snd_wnd)) {
 2620              		.loc 1 872 0 discriminator 1
 2621 0052 7B68     		ldr	r3, [r7, #4]
 2622 0054 9A6D     		ldr	r2, [r3, #88]
 2623 0056 954B     		ldr	r3, .L244+8
 2624 0058 1B68     		ldr	r3, [r3]
 871:../lwip-1.4.1/src/core/tcp_in.c ****        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 2625              		.loc 1 871 0 discriminator 1
 2626 005a 9A42     		cmp	r2, r3
 2627 005c 43D1     		bne	.L157
 2628              		.loc 1 872 0
 2629 005e 944B     		ldr	r3, .L244+12
 2630 0060 1B68     		ldr	r3, [r3]
 2631 0062 DB89     		ldrh	r3, [r3, #14]	@ unaligned
 2632 0064 9AB2     		uxth	r2, r3
 2633 0066 7B68     		ldr	r3, [r7, #4]
 2634 0068 B3F86030 		ldrh	r3, [r3, #96]
 2635 006c 9A42     		cmp	r2, r3
 2636 006e 3AD9     		bls	.L157
 2637              	.L155:
 873:../lwip-1.4.1/src/core/tcp_in.c ****       pcb->snd_wnd = tcphdr->wnd;
 2638              		.loc 1 873 0
 2639 0070 8F4B     		ldr	r3, .L244+12
 2640 0072 1B68     		ldr	r3, [r3]
 2641 0074 DB89     		ldrh	r3, [r3, #14]	@ unaligned
 2642 0076 9AB2     		uxth	r2, r3
 2643 0078 7B68     		ldr	r3, [r7, #4]
 2644 007a A3F86020 		strh	r2, [r3, #96]	@ movhi
 874:../lwip-1.4.1/src/core/tcp_in.c ****       /* keep track of the biggest window announced by the remote host to calculate
 875:../lwip-1.4.1/src/core/tcp_in.c ****          the maximum segment size */
 876:../lwip-1.4.1/src/core/tcp_in.c ****       if (pcb->snd_wnd_max < tcphdr->wnd) {
 2645              		.loc 1 876 0
 2646 007e 7B68     		ldr	r3, [r7, #4]
 2647 0080 B3F86220 		ldrh	r2, [r3, #98]
 2648 0084 8A4B     		ldr	r3, .L244+12
 2649 0086 1B68     		ldr	r3, [r3]
 2650 0088 DB89     		ldrh	r3, [r3, #14]	@ unaligned
 2651 008a 9BB2     		uxth	r3, r3
 2652 008c 9A42     		cmp	r2, r3
 2653 008e 06D2     		bcs	.L158
 877:../lwip-1.4.1/src/core/tcp_in.c ****         pcb->snd_wnd_max = tcphdr->wnd;
 2654              		.loc 1 877 0
 2655 0090 874B     		ldr	r3, .L244+12
 2656 0092 1B68     		ldr	r3, [r3]
 2657 0094 DB89     		ldrh	r3, [r3, #14]	@ unaligned
 2658 0096 9AB2     		uxth	r2, r3
 2659 0098 7B68     		ldr	r3, [r7, #4]
 2660 009a A3F86220 		strh	r2, [r3, #98]	@ movhi
 2661              	.L158:
 878:../lwip-1.4.1/src/core/tcp_in.c ****       }
 879:../lwip-1.4.1/src/core/tcp_in.c ****       pcb->snd_wl1 = seqno;
 2662              		.loc 1 879 0
 2663 009e 824B     		ldr	r3, .L244+4
 2664 00a0 1A68     		ldr	r2, [r3]
 2665 00a2 7B68     		ldr	r3, [r7, #4]
 2666 00a4 5A65     		str	r2, [r3, #84]
 880:../lwip-1.4.1/src/core/tcp_in.c ****       pcb->snd_wl2 = ackno;
 2667              		.loc 1 880 0
 2668 00a6 814B     		ldr	r3, .L244+8
 2669 00a8 1A68     		ldr	r2, [r3]
 2670 00aa 7B68     		ldr	r3, [r7, #4]
 2671 00ac 9A65     		str	r2, [r3, #88]
 881:../lwip-1.4.1/src/core/tcp_in.c ****       if (pcb->snd_wnd == 0) {
 2672              		.loc 1 881 0
 2673 00ae 7B68     		ldr	r3, [r7, #4]
 2674 00b0 B3F86030 		ldrh	r3, [r3, #96]
 2675 00b4 002B     		cmp	r3, #0
 2676 00b6 0DD1     		bne	.L159
 882:../lwip-1.4.1/src/core/tcp_in.c ****         if (pcb->persist_backoff == 0) {
 2677              		.loc 1 882 0
 2678 00b8 7B68     		ldr	r3, [r7, #4]
 2679 00ba 93F89530 		ldrb	r3, [r3, #149]	@ zero_extendqisi2
 2680 00be 002B     		cmp	r3, #0
 2681 00c0 11D1     		bne	.L157
 883:../lwip-1.4.1/src/core/tcp_in.c ****           /* start persist timer */
 884:../lwip-1.4.1/src/core/tcp_in.c ****           pcb->persist_cnt = 0;
 2682              		.loc 1 884 0
 2683 00c2 7B68     		ldr	r3, [r7, #4]
 2684 00c4 0022     		movs	r2, #0
 2685 00c6 83F89420 		strb	r2, [r3, #148]
 885:../lwip-1.4.1/src/core/tcp_in.c ****           pcb->persist_backoff = 1;
 2686              		.loc 1 885 0
 2687 00ca 7B68     		ldr	r3, [r7, #4]
 2688 00cc 0122     		movs	r2, #1
 2689 00ce 83F89520 		strb	r2, [r3, #149]
 2690 00d2 08E0     		b	.L157
 2691              	.L159:
 886:../lwip-1.4.1/src/core/tcp_in.c ****         }
 887:../lwip-1.4.1/src/core/tcp_in.c ****       } else if (pcb->persist_backoff > 0) {
 2692              		.loc 1 887 0
 2693 00d4 7B68     		ldr	r3, [r7, #4]
 2694 00d6 93F89530 		ldrb	r3, [r3, #149]	@ zero_extendqisi2
 2695 00da 002B     		cmp	r3, #0
 2696 00dc 03D0     		beq	.L157
 888:../lwip-1.4.1/src/core/tcp_in.c ****         /* stop persist timer */
 889:../lwip-1.4.1/src/core/tcp_in.c ****           pcb->persist_backoff = 0;
 2697              		.loc 1 889 0
 2698 00de 7B68     		ldr	r3, [r7, #4]
 2699 00e0 0022     		movs	r2, #0
 2700 00e2 83F89520 		strb	r2, [r3, #149]
 2701              	.L157:
 890:../lwip-1.4.1/src/core/tcp_in.c ****       }
 891:../lwip-1.4.1/src/core/tcp_in.c ****       LWIP_DEBUGF(TCP_WND_DEBUG, ("tcp_receive: window update %"U16_F"\n", pcb->snd_wnd));
 892:../lwip-1.4.1/src/core/tcp_in.c **** #if TCP_WND_DEBUG
 893:../lwip-1.4.1/src/core/tcp_in.c ****     } else {
 894:../lwip-1.4.1/src/core/tcp_in.c ****       if (pcb->snd_wnd != tcphdr->wnd) {
 895:../lwip-1.4.1/src/core/tcp_in.c ****         LWIP_DEBUGF(TCP_WND_DEBUG, 
 896:../lwip-1.4.1/src/core/tcp_in.c ****                     ("tcp_receive: no window update lastack %"U32_F" ackno %"
 897:../lwip-1.4.1/src/core/tcp_in.c ****                      U32_F" wl1 %"U32_F" seqno %"U32_F" wl2 %"U32_F"\n",
 898:../lwip-1.4.1/src/core/tcp_in.c ****                      pcb->lastack, ackno, pcb->snd_wl1, seqno, pcb->snd_wl2));
 899:../lwip-1.4.1/src/core/tcp_in.c ****       }
 900:../lwip-1.4.1/src/core/tcp_in.c **** #endif /* TCP_WND_DEBUG */
 901:../lwip-1.4.1/src/core/tcp_in.c ****     }
 902:../lwip-1.4.1/src/core/tcp_in.c **** 
 903:../lwip-1.4.1/src/core/tcp_in.c ****     /* (From Stevens TCP/IP Illustrated Vol II, p970.) Its only a
 904:../lwip-1.4.1/src/core/tcp_in.c ****      * duplicate ack if:
 905:../lwip-1.4.1/src/core/tcp_in.c ****      * 1) It doesn't ACK new data 
 906:../lwip-1.4.1/src/core/tcp_in.c ****      * 2) length of received packet is zero (i.e. no payload) 
 907:../lwip-1.4.1/src/core/tcp_in.c ****      * 3) the advertised window hasn't changed 
 908:../lwip-1.4.1/src/core/tcp_in.c ****      * 4) There is outstanding unacknowledged data (retransmission timer running)
 909:../lwip-1.4.1/src/core/tcp_in.c ****      * 5) The ACK is == biggest ACK sequence number so far seen (snd_una)
 910:../lwip-1.4.1/src/core/tcp_in.c ****      * 
 911:../lwip-1.4.1/src/core/tcp_in.c ****      * If it passes all five, should process as a dupack: 
 912:../lwip-1.4.1/src/core/tcp_in.c ****      * a) dupacks < 3: do nothing 
 913:../lwip-1.4.1/src/core/tcp_in.c ****      * b) dupacks == 3: fast retransmit 
 914:../lwip-1.4.1/src/core/tcp_in.c ****      * c) dupacks > 3: increase cwnd 
 915:../lwip-1.4.1/src/core/tcp_in.c ****      * 
 916:../lwip-1.4.1/src/core/tcp_in.c ****      * If it only passes 1-3, should reset dupack counter (and add to
 917:../lwip-1.4.1/src/core/tcp_in.c ****      * stats, which we don't do in lwIP)
 918:../lwip-1.4.1/src/core/tcp_in.c ****      *
 919:../lwip-1.4.1/src/core/tcp_in.c ****      * If it only passes 1, should reset dupack counter
 920:../lwip-1.4.1/src/core/tcp_in.c ****      *
 921:../lwip-1.4.1/src/core/tcp_in.c ****      */
 922:../lwip-1.4.1/src/core/tcp_in.c **** 
 923:../lwip-1.4.1/src/core/tcp_in.c ****     /* Clause 1 */
 924:../lwip-1.4.1/src/core/tcp_in.c ****     if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 2702              		.loc 1 924 0
 2703 00e6 714B     		ldr	r3, .L244+8
 2704 00e8 1A68     		ldr	r2, [r3]
 2705 00ea 7B68     		ldr	r3, [r7, #4]
 2706 00ec 9B6C     		ldr	r3, [r3, #72]
 2707 00ee D31A     		subs	r3, r2, r3
 2708 00f0 002B     		cmp	r3, #0
 2709 00f2 5CDC     		bgt	.L162
 925:../lwip-1.4.1/src/core/tcp_in.c ****       pcb->acked = 0;
 2710              		.loc 1 925 0
 2711 00f4 7B68     		ldr	r3, [r7, #4]
 2712 00f6 0022     		movs	r2, #0
 2713 00f8 A3F86420 		strh	r2, [r3, #100]	@ movhi
 926:../lwip-1.4.1/src/core/tcp_in.c ****       /* Clause 2 */
 927:../lwip-1.4.1/src/core/tcp_in.c ****       if (tcplen == 0) {
 2714              		.loc 1 927 0
 2715 00fc 6D4B     		ldr	r3, .L244+16
 2716 00fe 1B88     		ldrh	r3, [r3]
 2717 0100 002B     		cmp	r3, #0
 2718 0102 4BD1     		bne	.L163
 928:../lwip-1.4.1/src/core/tcp_in.c ****         /* Clause 3 */
 929:../lwip-1.4.1/src/core/tcp_in.c ****         if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge){
 2719              		.loc 1 929 0
 2720 0104 7B68     		ldr	r3, [r7, #4]
 2721 0106 9B6D     		ldr	r3, [r3, #88]
 2722 0108 7A68     		ldr	r2, [r7, #4]
 2723 010a B2F86020 		ldrh	r2, [r2, #96]
 2724 010e 1A44     		add	r2, r2, r3
 2725 0110 7B69     		ldr	r3, [r7, #20]
 2726 0112 9A42     		cmp	r2, r3
 2727 0114 42D1     		bne	.L163
 930:../lwip-1.4.1/src/core/tcp_in.c ****           /* Clause 4 */
 931:../lwip-1.4.1/src/core/tcp_in.c ****           if (pcb->rtime >= 0) {
 2728              		.loc 1 931 0
 2729 0116 7B68     		ldr	r3, [r7, #4]
 2730 0118 9B8E     		ldrh	r3, [r3, #52]
 2731 011a 1BB2     		sxth	r3, r3
 2732 011c 002B     		cmp	r3, #0
 2733 011e 3DDB     		blt	.L163
 932:../lwip-1.4.1/src/core/tcp_in.c ****             /* Clause 5 */
 933:../lwip-1.4.1/src/core/tcp_in.c ****             if (pcb->lastack == ackno) {
 2734              		.loc 1 933 0
 2735 0120 7B68     		ldr	r3, [r7, #4]
 2736 0122 9A6C     		ldr	r2, [r3, #72]
 2737 0124 614B     		ldr	r3, .L244+8
 2738 0126 1B68     		ldr	r3, [r3]
 2739 0128 9A42     		cmp	r2, r3
 2740 012a 37D1     		bne	.L163
 934:../lwip-1.4.1/src/core/tcp_in.c ****               found_dupack = 1;
 2741              		.loc 1 934 0
 2742 012c 0123     		movs	r3, #1
 2743 012e BB61     		str	r3, [r7, #24]
 935:../lwip-1.4.1/src/core/tcp_in.c ****               if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 2744              		.loc 1 935 0
 2745 0130 7B68     		ldr	r3, [r7, #4]
 2746 0132 93F84730 		ldrb	r3, [r3, #71]	@ zero_extendqisi2
 2747 0136 0133     		adds	r3, r3, #1
 2748 0138 DAB2     		uxtb	r2, r3
 2749 013a 7B68     		ldr	r3, [r7, #4]
 2750 013c 93F84730 		ldrb	r3, [r3, #71]	@ zero_extendqisi2
 2751 0140 9A42     		cmp	r2, r3
 2752 0142 07D9     		bls	.L164
 936:../lwip-1.4.1/src/core/tcp_in.c ****                 ++pcb->dupacks;
 2753              		.loc 1 936 0
 2754 0144 7B68     		ldr	r3, [r7, #4]
 2755 0146 93F84730 		ldrb	r3, [r3, #71]	@ zero_extendqisi2
 2756 014a 0133     		adds	r3, r3, #1
 2757 014c DAB2     		uxtb	r2, r3
 2758 014e 7B68     		ldr	r3, [r7, #4]
 2759 0150 83F84720 		strb	r2, [r3, #71]
 2760              	.L164:
 937:../lwip-1.4.1/src/core/tcp_in.c ****               }
 938:../lwip-1.4.1/src/core/tcp_in.c ****               if (pcb->dupacks > 3) {
 2761              		.loc 1 938 0
 2762 0154 7B68     		ldr	r3, [r7, #4]
 2763 0156 93F84730 		ldrb	r3, [r3, #71]	@ zero_extendqisi2
 2764 015a 032B     		cmp	r3, #3
 2765 015c 16D9     		bls	.L165
 939:../lwip-1.4.1/src/core/tcp_in.c ****                 /* Inflate the congestion window, but not if it means that
 940:../lwip-1.4.1/src/core/tcp_in.c ****                    the value overflows. */
 941:../lwip-1.4.1/src/core/tcp_in.c ****                 if ((u16_t)(pcb->cwnd + pcb->mss) > pcb->cwnd) {
 2766              		.loc 1 941 0
 2767 015e 7B68     		ldr	r3, [r7, #4]
 2768 0160 B3F84C20 		ldrh	r2, [r3, #76]
 2769 0164 7B68     		ldr	r3, [r7, #4]
 2770 0166 DB8E     		ldrh	r3, [r3, #54]
 2771 0168 1344     		add	r3, r3, r2
 2772 016a 9AB2     		uxth	r2, r3
 2773 016c 7B68     		ldr	r3, [r7, #4]
 2774 016e B3F84C30 		ldrh	r3, [r3, #76]
 2775 0172 9A42     		cmp	r2, r3
 2776 0174 12D9     		bls	.L163
 942:../lwip-1.4.1/src/core/tcp_in.c ****                   pcb->cwnd += pcb->mss;
 2777              		.loc 1 942 0
 2778 0176 7B68     		ldr	r3, [r7, #4]
 2779 0178 B3F84C20 		ldrh	r2, [r3, #76]
 2780 017c 7B68     		ldr	r3, [r7, #4]
 2781 017e DB8E     		ldrh	r3, [r3, #54]
 2782 0180 1344     		add	r3, r3, r2
 2783 0182 9AB2     		uxth	r2, r3
 2784 0184 7B68     		ldr	r3, [r7, #4]
 2785 0186 A3F84C20 		strh	r2, [r3, #76]	@ movhi
 2786 018a 07E0     		b	.L163
 2787              	.L165:
 943:../lwip-1.4.1/src/core/tcp_in.c ****                 }
 944:../lwip-1.4.1/src/core/tcp_in.c ****               } else if (pcb->dupacks == 3) {
 2788              		.loc 1 944 0
 2789 018c 7B68     		ldr	r3, [r7, #4]
 2790 018e 93F84730 		ldrb	r3, [r3, #71]	@ zero_extendqisi2
 2791 0192 032B     		cmp	r3, #3
 2792 0194 02D1     		bne	.L163
 945:../lwip-1.4.1/src/core/tcp_in.c ****                 /* Do fast retransmit */
 946:../lwip-1.4.1/src/core/tcp_in.c ****                 tcp_rexmit_fast(pcb);
 2793              		.loc 1 946 0
 2794 0196 7868     		ldr	r0, [r7, #4]
 2795 0198 FFF7FEFF 		bl	tcp_rexmit_fast
 2796              	.L163:
 947:../lwip-1.4.1/src/core/tcp_in.c ****               }
 948:../lwip-1.4.1/src/core/tcp_in.c ****             }
 949:../lwip-1.4.1/src/core/tcp_in.c ****           }
 950:../lwip-1.4.1/src/core/tcp_in.c ****         }
 951:../lwip-1.4.1/src/core/tcp_in.c ****       }
 952:../lwip-1.4.1/src/core/tcp_in.c ****       /* If Clause (1) or more is true, but not a duplicate ack, reset
 953:../lwip-1.4.1/src/core/tcp_in.c ****        * count of consecutive duplicate acks */
 954:../lwip-1.4.1/src/core/tcp_in.c ****       if (!found_dupack) {
 2797              		.loc 1 954 0
 2798 019c BB69     		ldr	r3, [r7, #24]
 2799 019e 002B     		cmp	r3, #0
 2800 01a0 40F02481 		bne	.L168
 955:../lwip-1.4.1/src/core/tcp_in.c ****         pcb->dupacks = 0;
 2801              		.loc 1 955 0
 2802 01a4 7B68     		ldr	r3, [r7, #4]
 2803 01a6 0022     		movs	r2, #0
 2804 01a8 83F84720 		strb	r2, [r3, #71]
 2805 01ac 68E1     		b	.L181
 2806              	.L162:
 956:../lwip-1.4.1/src/core/tcp_in.c ****       }
 957:../lwip-1.4.1/src/core/tcp_in.c ****     } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack+1, pcb->snd_nxt)){
 2807              		.loc 1 957 0
 2808 01ae 3F4B     		ldr	r3, .L244+8
 2809 01b0 1A68     		ldr	r2, [r3]
 2810 01b2 7B68     		ldr	r3, [r7, #4]
 2811 01b4 9B6C     		ldr	r3, [r3, #72]
 2812 01b6 D31A     		subs	r3, r2, r3
 2813 01b8 013B     		subs	r3, r3, #1
 2814 01ba 002B     		cmp	r3, #0
 2815 01bc C0F21281 		blt	.L169
 2816              		.loc 1 957 0 is_stmt 0 discriminator 1
 2817 01c0 3A4B     		ldr	r3, .L244+8
 2818 01c2 1A68     		ldr	r2, [r3]
 2819 01c4 7B68     		ldr	r3, [r7, #4]
 2820 01c6 1B6D     		ldr	r3, [r3, #80]
 2821 01c8 D31A     		subs	r3, r2, r3
 2822 01ca 002B     		cmp	r3, #0
 2823 01cc 00F30A81 		bgt	.L169
 958:../lwip-1.4.1/src/core/tcp_in.c ****       /* We come here when the ACK acknowledges new data. */
 959:../lwip-1.4.1/src/core/tcp_in.c **** 
 960:../lwip-1.4.1/src/core/tcp_in.c ****       /* Reset the "IN Fast Retransmit" flag, since we are no longer
 961:../lwip-1.4.1/src/core/tcp_in.c ****          in fast retransmit. Also reset the congestion window to the
 962:../lwip-1.4.1/src/core/tcp_in.c ****          slow start threshold. */
 963:../lwip-1.4.1/src/core/tcp_in.c ****       if (pcb->flags & TF_INFR) {
 2824              		.loc 1 963 0 is_stmt 1
 2825 01d0 7B68     		ldr	r3, [r7, #4]
 2826 01d2 9B7F     		ldrb	r3, [r3, #30]	@ zero_extendqisi2
 2827 01d4 03F00403 		and	r3, r3, #4
 2828 01d8 002B     		cmp	r3, #0
 2829 01da 0CD0     		beq	.L170
 964:../lwip-1.4.1/src/core/tcp_in.c ****         pcb->flags &= ~TF_INFR;
 2830              		.loc 1 964 0
 2831 01dc 7B68     		ldr	r3, [r7, #4]
 2832 01de 9B7F     		ldrb	r3, [r3, #30]	@ zero_extendqisi2
 2833 01e0 23F00403 		bic	r3, r3, #4
 2834 01e4 DAB2     		uxtb	r2, r3
 2835 01e6 7B68     		ldr	r3, [r7, #4]
 2836 01e8 9A77     		strb	r2, [r3, #30]
 965:../lwip-1.4.1/src/core/tcp_in.c ****         pcb->cwnd = pcb->ssthresh;
 2837              		.loc 1 965 0
 2838 01ea 7B68     		ldr	r3, [r7, #4]
 2839 01ec B3F84E20 		ldrh	r2, [r3, #78]
 2840 01f0 7B68     		ldr	r3, [r7, #4]
 2841 01f2 A3F84C20 		strh	r2, [r3, #76]	@ movhi
 2842              	.L170:
 966:../lwip-1.4.1/src/core/tcp_in.c ****       }
 967:../lwip-1.4.1/src/core/tcp_in.c **** 
 968:../lwip-1.4.1/src/core/tcp_in.c ****       /* Reset the number of retransmissions. */
 969:../lwip-1.4.1/src/core/tcp_in.c ****       pcb->nrtx = 0;
 2843              		.loc 1 969 0
 2844 01f6 7B68     		ldr	r3, [r7, #4]
 2845 01f8 0022     		movs	r2, #0
 2846 01fa 83F84620 		strb	r2, [r3, #70]
 970:../lwip-1.4.1/src/core/tcp_in.c **** 
 971:../lwip-1.4.1/src/core/tcp_in.c ****       /* Reset the retransmission time-out. */
 972:../lwip-1.4.1/src/core/tcp_in.c ****       pcb->rto = (pcb->sa >> 3) + pcb->sv;
 2847              		.loc 1 972 0
 2848 01fe 7B68     		ldr	r3, [r7, #4]
 2849 0200 B3F84030 		ldrh	r3, [r3, #64]
 2850 0204 1BB2     		sxth	r3, r3
 2851 0206 DB10     		asrs	r3, r3, #3
 2852 0208 9BB2     		uxth	r3, r3
 2853 020a 9AB2     		uxth	r2, r3
 2854 020c 7B68     		ldr	r3, [r7, #4]
 2855 020e B3F84230 		ldrh	r3, [r3, #66]
 2856 0212 9BB2     		uxth	r3, r3
 2857 0214 1344     		add	r3, r3, r2
 2858 0216 9BB2     		uxth	r3, r3
 2859 0218 9AB2     		uxth	r2, r3
 2860 021a 7B68     		ldr	r3, [r7, #4]
 2861 021c A3F84420 		strh	r2, [r3, #68]	@ movhi
 973:../lwip-1.4.1/src/core/tcp_in.c **** 
 974:../lwip-1.4.1/src/core/tcp_in.c ****       /* Update the send buffer space. Diff between the two can never exceed 64K? */
 975:../lwip-1.4.1/src/core/tcp_in.c ****       pcb->acked = (u16_t)(ackno - pcb->lastack);
 2862              		.loc 1 975 0
 2863 0220 224B     		ldr	r3, .L244+8
 2864 0222 1B68     		ldr	r3, [r3]
 2865 0224 9AB2     		uxth	r2, r3
 2866 0226 7B68     		ldr	r3, [r7, #4]
 2867 0228 9B6C     		ldr	r3, [r3, #72]
 2868 022a 9BB2     		uxth	r3, r3
 2869 022c D31A     		subs	r3, r2, r3
 2870 022e 9AB2     		uxth	r2, r3
 2871 0230 7B68     		ldr	r3, [r7, #4]
 2872 0232 A3F86420 		strh	r2, [r3, #100]	@ movhi
 976:../lwip-1.4.1/src/core/tcp_in.c **** 
 977:../lwip-1.4.1/src/core/tcp_in.c ****       pcb->snd_buf += pcb->acked;
 2873              		.loc 1 977 0
 2874 0236 7B68     		ldr	r3, [r7, #4]
 2875 0238 B3F86620 		ldrh	r2, [r3, #102]
 2876 023c 7B68     		ldr	r3, [r7, #4]
 2877 023e B3F86430 		ldrh	r3, [r3, #100]
 2878 0242 1344     		add	r3, r3, r2
 2879 0244 9AB2     		uxth	r2, r3
 2880 0246 7B68     		ldr	r3, [r7, #4]
 2881 0248 A3F86620 		strh	r2, [r3, #102]	@ movhi
 978:../lwip-1.4.1/src/core/tcp_in.c **** 
 979:../lwip-1.4.1/src/core/tcp_in.c ****       /* Reset the fast retransmit variables. */
 980:../lwip-1.4.1/src/core/tcp_in.c ****       pcb->dupacks = 0;
 2882              		.loc 1 980 0
 2883 024c 7B68     		ldr	r3, [r7, #4]
 2884 024e 0022     		movs	r2, #0
 2885 0250 83F84720 		strb	r2, [r3, #71]
 981:../lwip-1.4.1/src/core/tcp_in.c ****       pcb->lastack = ackno;
 2886              		.loc 1 981 0
 2887 0254 154B     		ldr	r3, .L244+8
 2888 0256 1A68     		ldr	r2, [r3]
 2889 0258 7B68     		ldr	r3, [r7, #4]
 2890 025a 9A64     		str	r2, [r3, #72]
 982:../lwip-1.4.1/src/core/tcp_in.c **** 
 983:../lwip-1.4.1/src/core/tcp_in.c ****       /* Update the congestion control variables (cwnd and
 984:../lwip-1.4.1/src/core/tcp_in.c ****          ssthresh). */
 985:../lwip-1.4.1/src/core/tcp_in.c ****       if (pcb->state >= ESTABLISHED) {
 2891              		.loc 1 985 0
 2892 025c 7B68     		ldr	r3, [r7, #4]
 2893 025e 1B7E     		ldrb	r3, [r3, #24]	@ zero_extendqisi2
 2894 0260 032B     		cmp	r3, #3
 2895 0262 46D9     		bls	.L171
 986:../lwip-1.4.1/src/core/tcp_in.c ****         if (pcb->cwnd < pcb->ssthresh) {
 2896              		.loc 1 986 0
 2897 0264 7B68     		ldr	r3, [r7, #4]
 2898 0266 B3F84C20 		ldrh	r2, [r3, #76]
 2899 026a 7B68     		ldr	r3, [r7, #4]
 2900 026c B3F84E30 		ldrh	r3, [r3, #78]
 2901 0270 9A42     		cmp	r2, r3
 2902 0272 21D2     		bcs	.L172
 987:../lwip-1.4.1/src/core/tcp_in.c ****           if ((u16_t)(pcb->cwnd + pcb->mss) > pcb->cwnd) {
 2903              		.loc 1 987 0
 2904 0274 7B68     		ldr	r3, [r7, #4]
 2905 0276 B3F84C20 		ldrh	r2, [r3, #76]
 2906 027a 7B68     		ldr	r3, [r7, #4]
 2907 027c DB8E     		ldrh	r3, [r3, #54]
 2908 027e 1344     		add	r3, r3, r2
 2909 0280 9AB2     		uxth	r2, r3
 2910 0282 7B68     		ldr	r3, [r7, #4]
 2911 0284 B3F84C30 		ldrh	r3, [r3, #76]
 2912 0288 9A42     		cmp	r2, r3
 2913 028a 32D9     		bls	.L242
 988:../lwip-1.4.1/src/core/tcp_in.c ****             pcb->cwnd += pcb->mss;
 2914              		.loc 1 988 0
 2915 028c 7B68     		ldr	r3, [r7, #4]
 2916 028e B3F84C20 		ldrh	r2, [r3, #76]
 2917 0292 7B68     		ldr	r3, [r7, #4]
 2918 0294 DB8E     		ldrh	r3, [r3, #54]
 2919 0296 1344     		add	r3, r3, r2
 2920 0298 9AB2     		uxth	r2, r3
 2921 029a 7B68     		ldr	r3, [r7, #4]
 2922 029c A3F84C20 		strh	r2, [r3, #76]	@ movhi
 2923 02a0 27E0     		b	.L242
 2924              	.L245:
 2925 02a2 00BF     		.align	2
 2926              	.L244:
 2927 02a4 24000000 		.word	flags
 2928 02a8 1C000000 		.word	seqno
 2929 02ac 20000000 		.word	ackno
 2930 02b0 14000000 		.word	tcphdr
 2931 02b4 26000000 		.word	tcplen
 2932              	.L172:
 2933              	.LBB3:
 989:../lwip-1.4.1/src/core/tcp_in.c ****           }
 990:../lwip-1.4.1/src/core/tcp_in.c ****           LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"U16_F"\n", pcb->cwnd));
 991:../lwip-1.4.1/src/core/tcp_in.c ****         } else {
 992:../lwip-1.4.1/src/core/tcp_in.c ****           u16_t new_cwnd = (pcb->cwnd + pcb->mss * pcb->mss / pcb->cwnd);
 2934              		.loc 1 992 0
 2935 02b8 7B68     		ldr	r3, [r7, #4]
 2936 02ba B3F84C20 		ldrh	r2, [r3, #76]
 2937 02be 7B68     		ldr	r3, [r7, #4]
 2938 02c0 DB8E     		ldrh	r3, [r3, #54]
 2939 02c2 1946     		mov	r1, r3
 2940 02c4 7B68     		ldr	r3, [r7, #4]
 2941 02c6 DB8E     		ldrh	r3, [r3, #54]
 2942 02c8 03FB01F3 		mul	r3, r3, r1
 2943 02cc 7968     		ldr	r1, [r7, #4]
 2944 02ce B1F84C10 		ldrh	r1, [r1, #76]
 2945 02d2 93FBF1F3 		sdiv	r3, r3, r1
 2946 02d6 9BB2     		uxth	r3, r3
 2947 02d8 1344     		add	r3, r3, r2
 2948 02da 7B82     		strh	r3, [r7, #18]	@ movhi
 993:../lwip-1.4.1/src/core/tcp_in.c ****           if (new_cwnd > pcb->cwnd) {
 2949              		.loc 1 993 0
 2950 02dc 7B68     		ldr	r3, [r7, #4]
 2951 02de B3F84C30 		ldrh	r3, [r3, #76]
 2952 02e2 7A8A     		ldrh	r2, [r7, #18]
 2953 02e4 9A42     		cmp	r2, r3
 2954 02e6 04D9     		bls	.L171
 994:../lwip-1.4.1/src/core/tcp_in.c ****             pcb->cwnd = new_cwnd;
 2955              		.loc 1 994 0
 2956 02e8 7B68     		ldr	r3, [r7, #4]
 2957 02ea 7A8A     		ldrh	r2, [r7, #18]	@ movhi
 2958 02ec A3F84C20 		strh	r2, [r3, #76]	@ movhi
 2959              	.LBE3:
 2960 02f0 FFE7     		b	.L242
 2961              	.L171:
 2962              	.L242:
 995:../lwip-1.4.1/src/core/tcp_in.c ****           }
 996:../lwip-1.4.1/src/core/tcp_in.c ****           LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: congestion avoidance cwnd %"U16_F"\n", pcb->cw
 997:../lwip-1.4.1/src/core/tcp_in.c ****         }
 998:../lwip-1.4.1/src/core/tcp_in.c ****       }
 999:../lwip-1.4.1/src/core/tcp_in.c ****       LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: ACK for %"U32_F", unacked->seqno %"U32_F":%"U32_F
1000:../lwip-1.4.1/src/core/tcp_in.c ****                                     ackno,
1001:../lwip-1.4.1/src/core/tcp_in.c ****                                     pcb->unacked != NULL?
1002:../lwip-1.4.1/src/core/tcp_in.c ****                                     ntohl(pcb->unacked->tcphdr->seqno): 0,
1003:../lwip-1.4.1/src/core/tcp_in.c ****                                     pcb->unacked != NULL?
1004:../lwip-1.4.1/src/core/tcp_in.c ****                                     ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked): 
1005:../lwip-1.4.1/src/core/tcp_in.c **** 
1006:../lwip-1.4.1/src/core/tcp_in.c ****       /* Remove segment from the unacknowledged list if the incoming
1007:../lwip-1.4.1/src/core/tcp_in.c ****          ACK acknowlegdes them. */
1008:../lwip-1.4.1/src/core/tcp_in.c ****       while (pcb->unacked != NULL &&
 2963              		.loc 1 1008 0
 2964 02f2 40E0     		b	.L175
 2965              	.L178:
1009:../lwip-1.4.1/src/core/tcp_in.c ****              TCP_SEQ_LEQ(ntohl(pcb->unacked->tcphdr->seqno) +
1010:../lwip-1.4.1/src/core/tcp_in.c ****                          TCP_TCPLEN(pcb->unacked), ackno)) {
1011:../lwip-1.4.1/src/core/tcp_in.c ****         LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->unacked\n"
1012:../lwip-1.4.1/src/core/tcp_in.c ****                                       ntohl(pcb->unacked->tcphdr->seqno),
1013:../lwip-1.4.1/src/core/tcp_in.c ****                                       ntohl(pcb->unacked->tcphdr->seqno) +
1014:../lwip-1.4.1/src/core/tcp_in.c ****                                       TCP_TCPLEN(pcb->unacked)));
1015:../lwip-1.4.1/src/core/tcp_in.c **** 
1016:../lwip-1.4.1/src/core/tcp_in.c ****         next = pcb->unacked;
 2966              		.loc 1 1016 0
 2967 02f4 7B68     		ldr	r3, [r7, #4]
 2968 02f6 1B6F     		ldr	r3, [r3, #112]
 2969 02f8 FB62     		str	r3, [r7, #44]
1017:../lwip-1.4.1/src/core/tcp_in.c ****         pcb->unacked = pcb->unacked->next;
 2970              		.loc 1 1017 0
 2971 02fa 7B68     		ldr	r3, [r7, #4]
 2972 02fc 1B6F     		ldr	r3, [r3, #112]
 2973 02fe 1A68     		ldr	r2, [r3]
 2974 0300 7B68     		ldr	r3, [r7, #4]
 2975 0302 1A67     		str	r2, [r3, #112]
1018:../lwip-1.4.1/src/core/tcp_in.c **** 
1019:../lwip-1.4.1/src/core/tcp_in.c ****         LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"U16_F" ... ", (u16_t)pcb->snd_queuele
1020:../lwip-1.4.1/src/core/tcp_in.c ****         LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= pbuf_clen(next
 2976              		.loc 1 1020 0
 2977 0304 FB6A     		ldr	r3, [r7, #44]
 2978 0306 5B68     		ldr	r3, [r3, #4]
 2979 0308 1846     		mov	r0, r3
 2980 030a FFF7FEFF 		bl	pbuf_clen
1021:../lwip-1.4.1/src/core/tcp_in.c ****         /* Prevent ACK for FIN to generate a sent event */
1022:../lwip-1.4.1/src/core/tcp_in.c ****         if ((pcb->acked != 0) && ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0)) {
 2981              		.loc 1 1022 0
 2982 030e 7B68     		ldr	r3, [r7, #4]
 2983 0310 B3F86430 		ldrh	r3, [r3, #100]
 2984 0314 002B     		cmp	r3, #0
 2985 0316 13D0     		beq	.L176
 2986              		.loc 1 1022 0 is_stmt 0 discriminator 1
 2987 0318 FB6A     		ldr	r3, [r7, #44]
 2988 031a 1B69     		ldr	r3, [r3, #16]
 2989 031c 9B89     		ldrh	r3, [r3, #12]	@ unaligned
 2990 031e 9BB2     		uxth	r3, r3
 2991 0320 1846     		mov	r0, r3
 2992 0322 FFF7FEFF 		bl	lwip_ntohs
 2993 0326 0346     		mov	r3, r0
 2994 0328 03F00103 		and	r3, r3, #1
 2995 032c 002B     		cmp	r3, #0
 2996 032e 07D0     		beq	.L176
1023:../lwip-1.4.1/src/core/tcp_in.c ****           pcb->acked--;
 2997              		.loc 1 1023 0 is_stmt 1
 2998 0330 7B68     		ldr	r3, [r7, #4]
 2999 0332 B3F86430 		ldrh	r3, [r3, #100]
 3000 0336 013B     		subs	r3, r3, #1
 3001 0338 9AB2     		uxth	r2, r3
 3002 033a 7B68     		ldr	r3, [r7, #4]
 3003 033c A3F86420 		strh	r2, [r3, #100]	@ movhi
 3004              	.L176:
1024:../lwip-1.4.1/src/core/tcp_in.c ****         }
1025:../lwip-1.4.1/src/core/tcp_in.c **** 
1026:../lwip-1.4.1/src/core/tcp_in.c ****         pcb->snd_queuelen -= pbuf_clen(next->p);
 3005              		.loc 1 1026 0
 3006 0340 FB6A     		ldr	r3, [r7, #44]
 3007 0342 5B68     		ldr	r3, [r3, #4]
 3008 0344 1846     		mov	r0, r3
 3009 0346 FFF7FEFF 		bl	pbuf_clen
 3010 034a 0346     		mov	r3, r0
 3011 034c 1946     		mov	r1, r3
 3012 034e 7B68     		ldr	r3, [r7, #4]
 3013 0350 B3F86820 		ldrh	r2, [r3, #104]
 3014 0354 8BB2     		uxth	r3, r1
 3015 0356 D31A     		subs	r3, r2, r3
 3016 0358 9AB2     		uxth	r2, r3
 3017 035a 7B68     		ldr	r3, [r7, #4]
 3018 035c A3F86820 		strh	r2, [r3, #104]	@ movhi
1027:../lwip-1.4.1/src/core/tcp_in.c ****         tcp_seg_free(next);
 3019              		.loc 1 1027 0
 3020 0360 F86A     		ldr	r0, [r7, #44]
 3021 0362 FFF7FEFF 		bl	tcp_seg_free
1028:../lwip-1.4.1/src/core/tcp_in.c **** 
1029:../lwip-1.4.1/src/core/tcp_in.c ****         LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"U16_F" (after freeing unacked)\n", (u16_t)pcb->snd_queuelen
1030:../lwip-1.4.1/src/core/tcp_in.c ****         if (pcb->snd_queuelen != 0) {
 3022              		.loc 1 1030 0
 3023 0366 7B68     		ldr	r3, [r7, #4]
 3024 0368 B3F86830 		ldrh	r3, [r3, #104]
 3025 036c 002B     		cmp	r3, #0
 3026 036e 02D0     		beq	.L175
1031:../lwip-1.4.1/src/core/tcp_in.c ****           LWIP_ASSERT("tcp_receive: valid queue length", pcb->unacked != NULL ||
 3027              		.loc 1 1031 0
 3028 0370 7B68     		ldr	r3, [r7, #4]
 3029 0372 1B6F     		ldr	r3, [r3, #112]
 3030 0374 002B     		cmp	r3, #0
 3031              	.L175:
1008:../lwip-1.4.1/src/core/tcp_in.c ****              TCP_SEQ_LEQ(ntohl(pcb->unacked->tcphdr->seqno) +
 3032              		.loc 1 1008 0
 3033 0376 7B68     		ldr	r3, [r7, #4]
 3034 0378 1B6F     		ldr	r3, [r3, #112]
 3035 037a 002B     		cmp	r3, #0
 3036 037c 22D0     		beq	.L177
1009:../lwip-1.4.1/src/core/tcp_in.c ****                          TCP_TCPLEN(pcb->unacked), ackno)) {
 3037              		.loc 1 1009 0 discriminator 1
 3038 037e 7B68     		ldr	r3, [r7, #4]
 3039 0380 1B6F     		ldr	r3, [r3, #112]
 3040 0382 1B69     		ldr	r3, [r3, #16]
 3041 0384 5B68     		ldr	r3, [r3, #4]	@ unaligned
 3042 0386 1846     		mov	r0, r3
 3043 0388 FFF7FEFF 		bl	lwip_ntohl
 3044 038c 0446     		mov	r4, r0
 3045 038e 7B68     		ldr	r3, [r7, #4]
 3046 0390 1B6F     		ldr	r3, [r3, #112]
 3047 0392 1B89     		ldrh	r3, [r3, #8]
 3048 0394 1D46     		mov	r5, r3
 3049 0396 7B68     		ldr	r3, [r7, #4]
 3050 0398 1B6F     		ldr	r3, [r3, #112]
 3051 039a 1B69     		ldr	r3, [r3, #16]
 3052 039c 9B89     		ldrh	r3, [r3, #12]	@ unaligned
 3053 039e 9BB2     		uxth	r3, r3
 3054 03a0 1846     		mov	r0, r3
 3055 03a2 FFF7FEFF 		bl	lwip_ntohs
 3056 03a6 0346     		mov	r3, r0
 3057 03a8 03F00303 		and	r3, r3, #3
 3058 03ac 002B     		cmp	r3, #0
 3059 03ae 14BF     		ite	ne
 3060 03b0 0123     		movne	r3, #1
 3061 03b2 0023     		moveq	r3, #0
 3062 03b4 DBB2     		uxtb	r3, r3
 3063 03b6 2B44     		add	r3, r3, r5
 3064 03b8 E218     		adds	r2, r4, r3
 3065 03ba 914B     		ldr	r3, .L246
 3066 03bc 1B68     		ldr	r3, [r3]
 3067 03be D31A     		subs	r3, r2, r3
1008:../lwip-1.4.1/src/core/tcp_in.c ****              TCP_SEQ_LEQ(ntohl(pcb->unacked->tcphdr->seqno) +
 3068              		.loc 1 1008 0 discriminator 1
 3069 03c0 002B     		cmp	r3, #0
 3070 03c2 97DD     		ble	.L178
 3071              	.L177:
1032:../lwip-1.4.1/src/core/tcp_in.c ****                       pcb->unsent != NULL);
1033:../lwip-1.4.1/src/core/tcp_in.c ****         }
1034:../lwip-1.4.1/src/core/tcp_in.c ****       }
1035:../lwip-1.4.1/src/core/tcp_in.c **** 
1036:../lwip-1.4.1/src/core/tcp_in.c ****       /* If there's nothing left to acknowledge, stop the retransmit
1037:../lwip-1.4.1/src/core/tcp_in.c ****          timer, otherwise reset it to start again */
1038:../lwip-1.4.1/src/core/tcp_in.c ****       if(pcb->unacked == NULL)
 3072              		.loc 1 1038 0
 3073 03c4 7B68     		ldr	r3, [r7, #4]
 3074 03c6 1B6F     		ldr	r3, [r3, #112]
 3075 03c8 002B     		cmp	r3, #0
 3076 03ca 04D1     		bne	.L179
1039:../lwip-1.4.1/src/core/tcp_in.c ****         pcb->rtime = -1;
 3077              		.loc 1 1039 0
 3078 03cc 7B68     		ldr	r3, [r7, #4]
 3079 03ce 4FF6FF72 		movw	r2, #65535
 3080 03d2 9A86     		strh	r2, [r3, #52]	@ movhi
 3081 03d4 02E0     		b	.L180
 3082              	.L179:
1040:../lwip-1.4.1/src/core/tcp_in.c ****       else
1041:../lwip-1.4.1/src/core/tcp_in.c ****         pcb->rtime = 0;
 3083              		.loc 1 1041 0
 3084 03d6 7B68     		ldr	r3, [r7, #4]
 3085 03d8 0022     		movs	r2, #0
 3086 03da 9A86     		strh	r2, [r3, #52]	@ movhi
 3087              	.L180:
1042:../lwip-1.4.1/src/core/tcp_in.c **** 
1043:../lwip-1.4.1/src/core/tcp_in.c ****       pcb->polltmr = 0;
 3088              		.loc 1 1043 0
 3089 03dc 7B68     		ldr	r3, [r7, #4]
 3090 03de 0022     		movs	r2, #0
 3091 03e0 DA77     		strb	r2, [r3, #31]
 3092 03e2 03E0     		b	.L168
 3093              	.L169:
1044:../lwip-1.4.1/src/core/tcp_in.c ****     } else {
1045:../lwip-1.4.1/src/core/tcp_in.c ****       /* Fix bug bug #21582: out of sequence ACK, didn't really ack anything */
1046:../lwip-1.4.1/src/core/tcp_in.c ****       pcb->acked = 0;
 3094              		.loc 1 1046 0
 3095 03e4 7B68     		ldr	r3, [r7, #4]
 3096 03e6 0022     		movs	r2, #0
 3097 03e8 A3F86420 		strh	r2, [r3, #100]	@ movhi
 3098              	.L168:
1047:../lwip-1.4.1/src/core/tcp_in.c ****     }
1048:../lwip-1.4.1/src/core/tcp_in.c **** 
1049:../lwip-1.4.1/src/core/tcp_in.c ****     /* We go through the ->unsent list to see if any of the segments
1050:../lwip-1.4.1/src/core/tcp_in.c ****        on the list are acknowledged by the ACK. This may seem
1051:../lwip-1.4.1/src/core/tcp_in.c ****        strange since an "unsent" segment shouldn't be acked. The
1052:../lwip-1.4.1/src/core/tcp_in.c ****        rationale is that lwIP puts all outstanding segments on the
1053:../lwip-1.4.1/src/core/tcp_in.c ****        ->unsent list after a retransmission, so these segments may
1054:../lwip-1.4.1/src/core/tcp_in.c ****        in fact have been sent once. */
1055:../lwip-1.4.1/src/core/tcp_in.c ****     while (pcb->unsent != NULL &&
 3099              		.loc 1 1055 0 discriminator 2
 3100 03ec 48E0     		b	.L181
 3101              	.L185:
1056:../lwip-1.4.1/src/core/tcp_in.c ****            TCP_SEQ_BETWEEN(ackno, ntohl(pcb->unsent->tcphdr->seqno) + 
1057:../lwip-1.4.1/src/core/tcp_in.c ****                            TCP_TCPLEN(pcb->unsent), pcb->snd_nxt)) {
1058:../lwip-1.4.1/src/core/tcp_in.c ****       LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->unsent\n",
1059:../lwip-1.4.1/src/core/tcp_in.c ****                                     ntohl(pcb->unsent->tcphdr->seqno), ntohl(pcb->unsent->tcphdr->s
1060:../lwip-1.4.1/src/core/tcp_in.c ****                                     TCP_TCPLEN(pcb->unsent)));
1061:../lwip-1.4.1/src/core/tcp_in.c **** 
1062:../lwip-1.4.1/src/core/tcp_in.c ****       next = pcb->unsent;
 3102              		.loc 1 1062 0
 3103 03ee 7B68     		ldr	r3, [r7, #4]
 3104 03f0 DB6E     		ldr	r3, [r3, #108]
 3105 03f2 FB62     		str	r3, [r7, #44]
1063:../lwip-1.4.1/src/core/tcp_in.c ****       pcb->unsent = pcb->unsent->next;
 3106              		.loc 1 1063 0
 3107 03f4 7B68     		ldr	r3, [r7, #4]
 3108 03f6 DB6E     		ldr	r3, [r3, #108]
 3109 03f8 1A68     		ldr	r2, [r3]
 3110 03fa 7B68     		ldr	r3, [r7, #4]
 3111 03fc DA66     		str	r2, [r3, #108]
1064:../lwip-1.4.1/src/core/tcp_in.c **** #if TCP_OVERSIZE
1065:../lwip-1.4.1/src/core/tcp_in.c ****       if (pcb->unsent == NULL) {
 3112              		.loc 1 1065 0
 3113 03fe 7B68     		ldr	r3, [r7, #4]
 3114 0400 DB6E     		ldr	r3, [r3, #108]
 3115 0402 002B     		cmp	r3, #0
 3116 0404 03D1     		bne	.L243
1066:../lwip-1.4.1/src/core/tcp_in.c ****         pcb->unsent_oversize = 0;
 3117              		.loc 1 1066 0
 3118 0406 7B68     		ldr	r3, [r7, #4]
 3119 0408 0022     		movs	r2, #0
 3120 040a A3F86A20 		strh	r2, [r3, #106]	@ movhi
 3121              	.L243:
1067:../lwip-1.4.1/src/core/tcp_in.c ****       }
1068:../lwip-1.4.1/src/core/tcp_in.c **** #endif /* TCP_OVERSIZE */ 
1069:../lwip-1.4.1/src/core/tcp_in.c ****       LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"U16_F" ... ", (u16_t)pcb->snd_queuelen)
1070:../lwip-1.4.1/src/core/tcp_in.c ****       LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= pbuf_clen(next->
 3122              		.loc 1 1070 0
 3123 040e FB6A     		ldr	r3, [r7, #44]
 3124 0410 5B68     		ldr	r3, [r3, #4]
 3125 0412 1846     		mov	r0, r3
 3126 0414 FFF7FEFF 		bl	pbuf_clen
1071:../lwip-1.4.1/src/core/tcp_in.c ****       /* Prevent ACK for FIN to generate a sent event */
1072:../lwip-1.4.1/src/core/tcp_in.c ****       if ((pcb->acked != 0) && ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0)) {
 3127              		.loc 1 1072 0
 3128 0418 7B68     		ldr	r3, [r7, #4]
 3129 041a B3F86430 		ldrh	r3, [r3, #100]
 3130 041e 002B     		cmp	r3, #0
 3131 0420 13D0     		beq	.L183
 3132              		.loc 1 1072 0 is_stmt 0 discriminator 1
 3133 0422 FB6A     		ldr	r3, [r7, #44]
 3134 0424 1B69     		ldr	r3, [r3, #16]
 3135 0426 9B89     		ldrh	r3, [r3, #12]	@ unaligned
 3136 0428 9BB2     		uxth	r3, r3
 3137 042a 1846     		mov	r0, r3
 3138 042c FFF7FEFF 		bl	lwip_ntohs
 3139 0430 0346     		mov	r3, r0
 3140 0432 03F00103 		and	r3, r3, #1
 3141 0436 002B     		cmp	r3, #0
 3142 0438 07D0     		beq	.L183
1073:../lwip-1.4.1/src/core/tcp_in.c ****         pcb->acked--;
 3143              		.loc 1 1073 0 is_stmt 1
 3144 043a 7B68     		ldr	r3, [r7, #4]
 3145 043c B3F86430 		ldrh	r3, [r3, #100]
 3146 0440 013B     		subs	r3, r3, #1
 3147 0442 9AB2     		uxth	r2, r3
 3148 0444 7B68     		ldr	r3, [r7, #4]
 3149 0446 A3F86420 		strh	r2, [r3, #100]	@ movhi
 3150              	.L183:
1074:../lwip-1.4.1/src/core/tcp_in.c ****       }
1075:../lwip-1.4.1/src/core/tcp_in.c ****       pcb->snd_queuelen -= pbuf_clen(next->p);
 3151              		.loc 1 1075 0
 3152 044a FB6A     		ldr	r3, [r7, #44]
 3153 044c 5B68     		ldr	r3, [r3, #4]
 3154 044e 1846     		mov	r0, r3
 3155 0450 FFF7FEFF 		bl	pbuf_clen
 3156 0454 0346     		mov	r3, r0
 3157 0456 1946     		mov	r1, r3
 3158 0458 7B68     		ldr	r3, [r7, #4]
 3159 045a B3F86820 		ldrh	r2, [r3, #104]
 3160 045e 8BB2     		uxth	r3, r1
 3161 0460 D31A     		subs	r3, r2, r3
 3162 0462 9AB2     		uxth	r2, r3
 3163 0464 7B68     		ldr	r3, [r7, #4]
 3164 0466 A3F86820 		strh	r2, [r3, #104]	@ movhi
1076:../lwip-1.4.1/src/core/tcp_in.c ****       tcp_seg_free(next);
 3165              		.loc 1 1076 0
 3166 046a F86A     		ldr	r0, [r7, #44]
 3167 046c FFF7FEFF 		bl	tcp_seg_free
1077:../lwip-1.4.1/src/core/tcp_in.c ****       LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"U16_F" (after freeing unsent)\n", (u16_t)pcb->snd_queuelen));
1078:../lwip-1.4.1/src/core/tcp_in.c ****       if (pcb->snd_queuelen != 0) {
 3168              		.loc 1 1078 0
 3169 0470 7B68     		ldr	r3, [r7, #4]
 3170 0472 B3F86830 		ldrh	r3, [r3, #104]
 3171 0476 002B     		cmp	r3, #0
 3172 0478 02D0     		beq	.L181
1079:../lwip-1.4.1/src/core/tcp_in.c ****         LWIP_ASSERT("tcp_receive: valid queue length",
 3173              		.loc 1 1079 0
 3174 047a 7B68     		ldr	r3, [r7, #4]
 3175 047c 1B6F     		ldr	r3, [r3, #112]
 3176 047e 002B     		cmp	r3, #0
 3177              	.L181:
1055:../lwip-1.4.1/src/core/tcp_in.c ****            TCP_SEQ_BETWEEN(ackno, ntohl(pcb->unsent->tcphdr->seqno) + 
 3178              		.loc 1 1055 0
 3179 0480 7B68     		ldr	r3, [r7, #4]
 3180 0482 DB6E     		ldr	r3, [r3, #108]
 3181 0484 002B     		cmp	r3, #0
 3182 0486 29D0     		beq	.L184
1056:../lwip-1.4.1/src/core/tcp_in.c ****                            TCP_TCPLEN(pcb->unsent), pcb->snd_nxt)) {
 3183              		.loc 1 1056 0 discriminator 1
 3184 0488 5D4B     		ldr	r3, .L246
 3185 048a 1C68     		ldr	r4, [r3]
 3186 048c 7B68     		ldr	r3, [r7, #4]
 3187 048e DB6E     		ldr	r3, [r3, #108]
 3188 0490 1B69     		ldr	r3, [r3, #16]
 3189 0492 5B68     		ldr	r3, [r3, #4]	@ unaligned
 3190 0494 1846     		mov	r0, r3
 3191 0496 FFF7FEFF 		bl	lwip_ntohl
 3192 049a 0546     		mov	r5, r0
 3193 049c 7B68     		ldr	r3, [r7, #4]
 3194 049e DB6E     		ldr	r3, [r3, #108]
 3195 04a0 1B89     		ldrh	r3, [r3, #8]
 3196 04a2 1E46     		mov	r6, r3
 3197 04a4 7B68     		ldr	r3, [r7, #4]
 3198 04a6 DB6E     		ldr	r3, [r3, #108]
 3199 04a8 1B69     		ldr	r3, [r3, #16]
 3200 04aa 9B89     		ldrh	r3, [r3, #12]	@ unaligned
 3201 04ac 9BB2     		uxth	r3, r3
 3202 04ae 1846     		mov	r0, r3
 3203 04b0 FFF7FEFF 		bl	lwip_ntohs
 3204 04b4 0346     		mov	r3, r0
 3205 04b6 03F00303 		and	r3, r3, #3
 3206 04ba 002B     		cmp	r3, #0
 3207 04bc 14BF     		ite	ne
 3208 04be 0123     		movne	r3, #1
 3209 04c0 0023     		moveq	r3, #0
 3210 04c2 DBB2     		uxtb	r3, r3
 3211 04c4 3344     		add	r3, r3, r6
 3212 04c6 2B44     		add	r3, r3, r5
 3213 04c8 E31A     		subs	r3, r4, r3
1055:../lwip-1.4.1/src/core/tcp_in.c ****            TCP_SEQ_BETWEEN(ackno, ntohl(pcb->unsent->tcphdr->seqno) + 
 3214              		.loc 1 1055 0 discriminator 1
 3215 04ca 002B     		cmp	r3, #0
 3216 04cc 06DB     		blt	.L184
1056:../lwip-1.4.1/src/core/tcp_in.c ****                            TCP_TCPLEN(pcb->unsent), pcb->snd_nxt)) {
 3217              		.loc 1 1056 0
 3218 04ce 4C4B     		ldr	r3, .L246
 3219 04d0 1A68     		ldr	r2, [r3]
 3220 04d2 7B68     		ldr	r3, [r7, #4]
 3221 04d4 1B6D     		ldr	r3, [r3, #80]
 3222 04d6 D31A     		subs	r3, r2, r3
 3223 04d8 002B     		cmp	r3, #0
 3224 04da 88DD     		ble	.L185
 3225              	.L184:
1080:../lwip-1.4.1/src/core/tcp_in.c ****           pcb->unacked != NULL || pcb->unsent != NULL);
1081:../lwip-1.4.1/src/core/tcp_in.c ****       }
1082:../lwip-1.4.1/src/core/tcp_in.c ****     }
1083:../lwip-1.4.1/src/core/tcp_in.c ****     /* End of ACK for new data processing. */
1084:../lwip-1.4.1/src/core/tcp_in.c **** 
1085:../lwip-1.4.1/src/core/tcp_in.c ****     LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: pcb->rttest %"U32_F" rtseq %"U32_F" ackno %"U32_F"\n"
1086:../lwip-1.4.1/src/core/tcp_in.c ****                                 pcb->rttest, pcb->rtseq, ackno));
1087:../lwip-1.4.1/src/core/tcp_in.c **** 
1088:../lwip-1.4.1/src/core/tcp_in.c ****     /* RTT estimation calculations. This is done by checking if the
1089:../lwip-1.4.1/src/core/tcp_in.c ****        incoming segment acknowledges the segment we use to take a
1090:../lwip-1.4.1/src/core/tcp_in.c ****        round-trip time measurement. */
1091:../lwip-1.4.1/src/core/tcp_in.c ****     if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 3226              		.loc 1 1091 0
 3227 04dc 7B68     		ldr	r3, [r7, #4]
 3228 04de 9B6B     		ldr	r3, [r3, #56]
 3229 04e0 002B     		cmp	r3, #0
 3230 04e2 57D0     		beq	.L154
 3231              		.loc 1 1091 0 is_stmt 0 discriminator 1
 3232 04e4 7B68     		ldr	r3, [r7, #4]
 3233 04e6 DA6B     		ldr	r2, [r3, #60]
 3234 04e8 454B     		ldr	r3, .L246
 3235 04ea 1B68     		ldr	r3, [r3]
 3236 04ec D31A     		subs	r3, r2, r3
 3237 04ee 002B     		cmp	r3, #0
 3238 04f0 50DA     		bge	.L154
1092:../lwip-1.4.1/src/core/tcp_in.c ****       /* diff between this shouldn't exceed 32K since this are tcp timer ticks
1093:../lwip-1.4.1/src/core/tcp_in.c ****          and a round-trip shouldn't be that long... */
1094:../lwip-1.4.1/src/core/tcp_in.c ****       m = (s16_t)(tcp_ticks - pcb->rttest);
 3239              		.loc 1 1094 0 is_stmt 1
 3240 04f2 444B     		ldr	r3, .L246+4
 3241 04f4 1B68     		ldr	r3, [r3]
 3242 04f6 9AB2     		uxth	r2, r3
 3243 04f8 7B68     		ldr	r3, [r7, #4]
 3244 04fa 9B6B     		ldr	r3, [r3, #56]
 3245 04fc 9BB2     		uxth	r3, r3
 3246 04fe D31A     		subs	r3, r2, r3
 3247 0500 9BB2     		uxth	r3, r3
 3248 0502 FB83     		strh	r3, [r7, #30]	@ movhi
1095:../lwip-1.4.1/src/core/tcp_in.c **** 
1096:../lwip-1.4.1/src/core/tcp_in.c ****       LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
1097:../lwip-1.4.1/src/core/tcp_in.c ****                                   m, m * TCP_SLOW_INTERVAL));
1098:../lwip-1.4.1/src/core/tcp_in.c **** 
1099:../lwip-1.4.1/src/core/tcp_in.c ****       /* This is taken directly from VJs original code in his paper */
1100:../lwip-1.4.1/src/core/tcp_in.c ****       m = m - (pcb->sa >> 3);
 3249              		.loc 1 1100 0
 3250 0504 FA8B     		ldrh	r2, [r7, #30]
 3251 0506 7B68     		ldr	r3, [r7, #4]
 3252 0508 B3F84030 		ldrh	r3, [r3, #64]
 3253 050c 1BB2     		sxth	r3, r3
 3254 050e DB10     		asrs	r3, r3, #3
 3255 0510 9BB2     		uxth	r3, r3
 3256 0512 9BB2     		uxth	r3, r3
 3257 0514 D31A     		subs	r3, r2, r3
 3258 0516 9BB2     		uxth	r3, r3
 3259 0518 FB83     		strh	r3, [r7, #30]	@ movhi
1101:../lwip-1.4.1/src/core/tcp_in.c ****       pcb->sa += m;
 3260              		.loc 1 1101 0
 3261 051a 7B68     		ldr	r3, [r7, #4]
 3262 051c B3F84030 		ldrh	r3, [r3, #64]
 3263 0520 9AB2     		uxth	r2, r3
 3264 0522 FB8B     		ldrh	r3, [r7, #30]
 3265 0524 1344     		add	r3, r3, r2
 3266 0526 9BB2     		uxth	r3, r3
 3267 0528 9AB2     		uxth	r2, r3
 3268 052a 7B68     		ldr	r3, [r7, #4]
 3269 052c A3F84020 		strh	r2, [r3, #64]	@ movhi
1102:../lwip-1.4.1/src/core/tcp_in.c ****       if (m < 0) {
 3270              		.loc 1 1102 0
 3271 0530 B7F91E30 		ldrsh	r3, [r7, #30]
 3272 0534 002B     		cmp	r3, #0
 3273 0536 03DA     		bge	.L186
1103:../lwip-1.4.1/src/core/tcp_in.c ****         m = -m;
 3274              		.loc 1 1103 0
 3275 0538 FB8B     		ldrh	r3, [r7, #30]
 3276 053a 5B42     		negs	r3, r3
 3277 053c 9BB2     		uxth	r3, r3
 3278 053e FB83     		strh	r3, [r7, #30]	@ movhi
 3279              	.L186:
1104:../lwip-1.4.1/src/core/tcp_in.c ****       }
1105:../lwip-1.4.1/src/core/tcp_in.c ****       m = m - (pcb->sv >> 2);
 3280              		.loc 1 1105 0
 3281 0540 FA8B     		ldrh	r2, [r7, #30]
 3282 0542 7B68     		ldr	r3, [r7, #4]
 3283 0544 B3F84230 		ldrh	r3, [r3, #66]
 3284 0548 1BB2     		sxth	r3, r3
 3285 054a 9B10     		asrs	r3, r3, #2
 3286 054c 9BB2     		uxth	r3, r3
 3287 054e 9BB2     		uxth	r3, r3
 3288 0550 D31A     		subs	r3, r2, r3
 3289 0552 9BB2     		uxth	r3, r3
 3290 0554 FB83     		strh	r3, [r7, #30]	@ movhi
1106:../lwip-1.4.1/src/core/tcp_in.c ****       pcb->sv += m;
 3291              		.loc 1 1106 0
 3292 0556 7B68     		ldr	r3, [r7, #4]
 3293 0558 B3F84230 		ldrh	r3, [r3, #66]
 3294 055c 9AB2     		uxth	r2, r3
 3295 055e FB8B     		ldrh	r3, [r7, #30]
 3296 0560 1344     		add	r3, r3, r2
 3297 0562 9BB2     		uxth	r3, r3
 3298 0564 9AB2     		uxth	r2, r3
 3299 0566 7B68     		ldr	r3, [r7, #4]
 3300 0568 A3F84220 		strh	r2, [r3, #66]	@ movhi
1107:../lwip-1.4.1/src/core/tcp_in.c ****       pcb->rto = (pcb->sa >> 3) + pcb->sv;
 3301              		.loc 1 1107 0
 3302 056c 7B68     		ldr	r3, [r7, #4]
 3303 056e B3F84030 		ldrh	r3, [r3, #64]
 3304 0572 1BB2     		sxth	r3, r3
 3305 0574 DB10     		asrs	r3, r3, #3
 3306 0576 9BB2     		uxth	r3, r3
 3307 0578 9AB2     		uxth	r2, r3
 3308 057a 7B68     		ldr	r3, [r7, #4]
 3309 057c B3F84230 		ldrh	r3, [r3, #66]
 3310 0580 9BB2     		uxth	r3, r3
 3311 0582 1344     		add	r3, r3, r2
 3312 0584 9BB2     		uxth	r3, r3
 3313 0586 9AB2     		uxth	r2, r3
 3314 0588 7B68     		ldr	r3, [r7, #4]
 3315 058a A3F84420 		strh	r2, [r3, #68]	@ movhi
1108:../lwip-1.4.1/src/core/tcp_in.c **** 
1109:../lwip-1.4.1/src/core/tcp_in.c ****       LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
1110:../lwip-1.4.1/src/core/tcp_in.c ****                                   pcb->rto, pcb->rto * TCP_SLOW_INTERVAL));
1111:../lwip-1.4.1/src/core/tcp_in.c **** 
1112:../lwip-1.4.1/src/core/tcp_in.c ****       pcb->rttest = 0;
 3316              		.loc 1 1112 0
 3317 058e 7B68     		ldr	r3, [r7, #4]
 3318 0590 0022     		movs	r2, #0
 3319 0592 9A63     		str	r2, [r3, #56]
 3320              	.L154:
1113:../lwip-1.4.1/src/core/tcp_in.c ****     }
1114:../lwip-1.4.1/src/core/tcp_in.c ****   }
1115:../lwip-1.4.1/src/core/tcp_in.c **** 
1116:../lwip-1.4.1/src/core/tcp_in.c ****   /* If the incoming segment contains data, we must process it
1117:../lwip-1.4.1/src/core/tcp_in.c ****      further unless the pcb already received a FIN.
1118:../lwip-1.4.1/src/core/tcp_in.c ****      (RFC 793, chapeter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
1119:../lwip-1.4.1/src/core/tcp_in.c ****      LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
1120:../lwip-1.4.1/src/core/tcp_in.c ****   if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 3321              		.loc 1 1120 0
 3322 0594 1C4B     		ldr	r3, .L246+8
 3323 0596 1B88     		ldrh	r3, [r3]
 3324 0598 002B     		cmp	r3, #0
 3325 059a 00F03984 		beq	.L187
 3326              		.loc 1 1120 0 is_stmt 0 discriminator 1
 3327 059e 7B68     		ldr	r3, [r7, #4]
 3328 05a0 1B7E     		ldrb	r3, [r3, #24]	@ zero_extendqisi2
 3329 05a2 062B     		cmp	r3, #6
 3330 05a4 00F23484 		bhi	.L187
1121:../lwip-1.4.1/src/core/tcp_in.c ****     /* This code basically does three things:
1122:../lwip-1.4.1/src/core/tcp_in.c **** 
1123:../lwip-1.4.1/src/core/tcp_in.c ****     +) If the incoming segment contains data that is the next
1124:../lwip-1.4.1/src/core/tcp_in.c ****     in-sequence data, this data is passed to the application. This
1125:../lwip-1.4.1/src/core/tcp_in.c ****     might involve trimming the first edge of the data. The rcv_nxt
1126:../lwip-1.4.1/src/core/tcp_in.c ****     variable and the advertised window are adjusted.
1127:../lwip-1.4.1/src/core/tcp_in.c **** 
1128:../lwip-1.4.1/src/core/tcp_in.c ****     +) If the incoming segment has data that is above the next
1129:../lwip-1.4.1/src/core/tcp_in.c ****     sequence number expected (->rcv_nxt), the segment is placed on
1130:../lwip-1.4.1/src/core/tcp_in.c ****     the ->ooseq queue. This is done by finding the appropriate
1131:../lwip-1.4.1/src/core/tcp_in.c ****     place in the ->ooseq queue (which is ordered by sequence
1132:../lwip-1.4.1/src/core/tcp_in.c ****     number) and trim the segment in both ends if needed. An
1133:../lwip-1.4.1/src/core/tcp_in.c ****     immediate ACK is sent to indicate that we received an
1134:../lwip-1.4.1/src/core/tcp_in.c ****     out-of-sequence segment.
1135:../lwip-1.4.1/src/core/tcp_in.c **** 
1136:../lwip-1.4.1/src/core/tcp_in.c ****     +) Finally, we check if the first segment on the ->ooseq queue
1137:../lwip-1.4.1/src/core/tcp_in.c ****     now is in sequence (i.e., if rcv_nxt >= ooseq->seqno). If
1138:../lwip-1.4.1/src/core/tcp_in.c ****     rcv_nxt > ooseq->seqno, we must trim the first edge of the
1139:../lwip-1.4.1/src/core/tcp_in.c ****     segment on ->ooseq before we adjust rcv_nxt. The data in the
1140:../lwip-1.4.1/src/core/tcp_in.c ****     segments that are now on sequence are chained onto the
1141:../lwip-1.4.1/src/core/tcp_in.c ****     incoming segment so that we only need to call the application
1142:../lwip-1.4.1/src/core/tcp_in.c ****     once.
1143:../lwip-1.4.1/src/core/tcp_in.c ****     */
1144:../lwip-1.4.1/src/core/tcp_in.c **** 
1145:../lwip-1.4.1/src/core/tcp_in.c ****     /* First, we check if we must trim the first edge. We have to do
1146:../lwip-1.4.1/src/core/tcp_in.c ****        this if the sequence number of the incoming segment is less
1147:../lwip-1.4.1/src/core/tcp_in.c ****        than rcv_nxt, and the sequence number plus the length of the
1148:../lwip-1.4.1/src/core/tcp_in.c ****        segment is larger than rcv_nxt. */
1149:../lwip-1.4.1/src/core/tcp_in.c ****     /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)){
1150:../lwip-1.4.1/src/core/tcp_in.c ****           if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
1151:../lwip-1.4.1/src/core/tcp_in.c ****     if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)){
 3331              		.loc 1 1151 0 is_stmt 1
 3332 05a8 7B68     		ldr	r3, [r7, #4]
 3333 05aa 9A6A     		ldr	r2, [r3, #40]
 3334 05ac 174B     		ldr	r3, .L246+12
 3335 05ae 1B68     		ldr	r3, [r3]
 3336 05b0 D31A     		subs	r3, r2, r3
 3337 05b2 013B     		subs	r3, r3, #1
 3338 05b4 002B     		cmp	r3, #0
 3339 05b6 71DB     		blt	.L188
 3340              		.loc 1 1151 0 is_stmt 0 discriminator 1
 3341 05b8 7B68     		ldr	r3, [r7, #4]
 3342 05ba 9A6A     		ldr	r2, [r3, #40]
 3343 05bc 124B     		ldr	r3, .L246+8
 3344 05be 1B88     		ldrh	r3, [r3]
 3345 05c0 1946     		mov	r1, r3
 3346 05c2 124B     		ldr	r3, .L246+12
 3347 05c4 1B68     		ldr	r3, [r3]
 3348 05c6 0B44     		add	r3, r3, r1
 3349 05c8 D31A     		subs	r3, r2, r3
 3350 05ca 0133     		adds	r3, r3, #1
 3351 05cc 002B     		cmp	r3, #0
 3352 05ce 65DC     		bgt	.L188
1152:../lwip-1.4.1/src/core/tcp_in.c ****       /* Trimming the first edge is done by pushing the payload
1153:../lwip-1.4.1/src/core/tcp_in.c ****          pointer in the pbuf downwards. This is somewhat tricky since
1154:../lwip-1.4.1/src/core/tcp_in.c ****          we do not want to discard the full contents of the pbuf up to
1155:../lwip-1.4.1/src/core/tcp_in.c ****          the new starting point of the data since we have to keep the
1156:../lwip-1.4.1/src/core/tcp_in.c ****          TCP header which is present in the first pbuf in the chain.
1157:../lwip-1.4.1/src/core/tcp_in.c **** 
1158:../lwip-1.4.1/src/core/tcp_in.c ****          What is done is really quite a nasty hack: the first pbuf in
1159:../lwip-1.4.1/src/core/tcp_in.c ****          the pbuf chain is pointed to by inseg.p. Since we need to be
1160:../lwip-1.4.1/src/core/tcp_in.c ****          able to deallocate the whole pbuf, we cannot change this
1161:../lwip-1.4.1/src/core/tcp_in.c ****          inseg.p pointer to point to any of the later pbufs in the
1162:../lwip-1.4.1/src/core/tcp_in.c ****          chain. Instead, we point the ->payload pointer in the first
1163:../lwip-1.4.1/src/core/tcp_in.c ****          pbuf to data in one of the later pbufs. We also set the
1164:../lwip-1.4.1/src/core/tcp_in.c ****          inseg.data pointer to point to the right place. This way, the
1165:../lwip-1.4.1/src/core/tcp_in.c ****          ->p pointer will still point to the first pbuf, but the
1166:../lwip-1.4.1/src/core/tcp_in.c ****          ->p->payload pointer will point to data in another pbuf.
1167:../lwip-1.4.1/src/core/tcp_in.c **** 
1168:../lwip-1.4.1/src/core/tcp_in.c ****          After we are done with adjusting the pbuf pointers we must
1169:../lwip-1.4.1/src/core/tcp_in.c ****          adjust the ->data pointer in the seg and the segment
1170:../lwip-1.4.1/src/core/tcp_in.c ****          length.*/
1171:../lwip-1.4.1/src/core/tcp_in.c **** 
1172:../lwip-1.4.1/src/core/tcp_in.c ****       off = pcb->rcv_nxt - seqno;
 3353              		.loc 1 1172 0 is_stmt 1
 3354 05d0 7B68     		ldr	r3, [r7, #4]
 3355 05d2 9A6A     		ldr	r2, [r3, #40]
 3356 05d4 0D4B     		ldr	r3, .L246+12
 3357 05d6 1B68     		ldr	r3, [r3]
 3358 05d8 D31A     		subs	r3, r2, r3
 3359 05da 3B62     		str	r3, [r7, #32]
1173:../lwip-1.4.1/src/core/tcp_in.c ****       p = inseg.p;
 3360              		.loc 1 1173 0
 3361 05dc 0C4B     		ldr	r3, .L246+16
 3362 05de 5B68     		ldr	r3, [r3, #4]
 3363 05e0 7B62     		str	r3, [r7, #36]
1174:../lwip-1.4.1/src/core/tcp_in.c ****       LWIP_ASSERT("inseg.p != NULL", inseg.p);
1175:../lwip-1.4.1/src/core/tcp_in.c ****       LWIP_ASSERT("insane offset!", (off < 0x7fff));
1176:../lwip-1.4.1/src/core/tcp_in.c ****       if (inseg.p->len < off) {
 3364              		.loc 1 1176 0
 3365 05e2 0B4B     		ldr	r3, .L246+16
 3366 05e4 5B68     		ldr	r3, [r3, #4]
 3367 05e6 5B89     		ldrh	r3, [r3, #10]
 3368 05e8 1A46     		mov	r2, r3
 3369 05ea 3B6A     		ldr	r3, [r7, #32]
 3370 05ec 9A42     		cmp	r2, r3
 3371 05ee 31DA     		bge	.L189
1177:../lwip-1.4.1/src/core/tcp_in.c ****         LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
1178:../lwip-1.4.1/src/core/tcp_in.c ****         new_tot_len = (u16_t)(inseg.p->tot_len - off);
 3372              		.loc 1 1178 0
 3373 05f0 074B     		ldr	r3, .L246+16
 3374 05f2 5B68     		ldr	r3, [r3, #4]
 3375 05f4 1A89     		ldrh	r2, [r3, #8]
 3376 05f6 3B6A     		ldr	r3, [r7, #32]
 3377 05f8 9BB2     		uxth	r3, r3
 3378 05fa D31A     		subs	r3, r2, r3
 3379 05fc 3B82     		strh	r3, [r7, #16]	@ movhi
1179:../lwip-1.4.1/src/core/tcp_in.c ****         while (p->len < off) {
 3380              		.loc 1 1179 0
 3381 05fe 18E0     		b	.L190
 3382              	.L247:
 3383              		.align	2
 3384              	.L246:
 3385 0600 20000000 		.word	ackno
 3386 0604 00000000 		.word	tcp_ticks
 3387 0608 26000000 		.word	tcplen
 3388 060c 1C000000 		.word	seqno
 3389 0610 00000000 		.word	inseg
 3390              	.L191:
1180:../lwip-1.4.1/src/core/tcp_in.c ****           off -= p->len;
 3391              		.loc 1 1180 0
 3392 0614 7B6A     		ldr	r3, [r7, #36]
 3393 0616 5B89     		ldrh	r3, [r3, #10]
 3394 0618 1A46     		mov	r2, r3
 3395 061a 3B6A     		ldr	r3, [r7, #32]
 3396 061c 9B1A     		subs	r3, r3, r2
 3397 061e 3B62     		str	r3, [r7, #32]
1181:../lwip-1.4.1/src/core/tcp_in.c ****           /* KJM following line changed (with addition of new_tot_len var)
1182:../lwip-1.4.1/src/core/tcp_in.c ****              to fix bug #9076
1183:../lwip-1.4.1/src/core/tcp_in.c ****              inseg.p->tot_len -= p->len; */
1184:../lwip-1.4.1/src/core/tcp_in.c ****           p->tot_len = new_tot_len;
 3398              		.loc 1 1184 0
 3399 0620 7B6A     		ldr	r3, [r7, #36]
 3400 0622 3A8A     		ldrh	r2, [r7, #16]	@ movhi
 3401 0624 1A81     		strh	r2, [r3, #8]	@ movhi
1185:../lwip-1.4.1/src/core/tcp_in.c ****           p->len = 0;
 3402              		.loc 1 1185 0
 3403 0626 7B6A     		ldr	r3, [r7, #36]
 3404 0628 0022     		movs	r2, #0
 3405 062a 5A81     		strh	r2, [r3, #10]	@ movhi
1186:../lwip-1.4.1/src/core/tcp_in.c ****           p = p->next;
 3406              		.loc 1 1186 0
 3407 062c 7B6A     		ldr	r3, [r7, #36]
 3408 062e 1B68     		ldr	r3, [r3]
 3409 0630 7B62     		str	r3, [r7, #36]
 3410              	.L190:
1179:../lwip-1.4.1/src/core/tcp_in.c ****           off -= p->len;
 3411              		.loc 1 1179 0
 3412 0632 7B6A     		ldr	r3, [r7, #36]
 3413 0634 5B89     		ldrh	r3, [r3, #10]
 3414 0636 1A46     		mov	r2, r3
 3415 0638 3B6A     		ldr	r3, [r7, #32]
 3416 063a 9A42     		cmp	r2, r3
 3417 063c EADB     		blt	.L191
1187:../lwip-1.4.1/src/core/tcp_in.c ****         }
1188:../lwip-1.4.1/src/core/tcp_in.c ****         if(pbuf_header(p, (s16_t)-off)) {
 3418              		.loc 1 1188 0
 3419 063e 3B6A     		ldr	r3, [r7, #32]
 3420 0640 9BB2     		uxth	r3, r3
 3421 0642 5B42     		negs	r3, r3
 3422 0644 9BB2     		uxth	r3, r3
 3423 0646 9BB2     		uxth	r3, r3
 3424 0648 1BB2     		sxth	r3, r3
 3425 064a 786A     		ldr	r0, [r7, #36]
 3426 064c 1946     		mov	r1, r3
 3427 064e FFF7FEFF 		bl	pbuf_header
 3428 0652 0BE0     		b	.L192
 3429              	.L189:
1189:../lwip-1.4.1/src/core/tcp_in.c ****           /* Do we need to cope with this failing?  Assert for now */
1190:../lwip-1.4.1/src/core/tcp_in.c ****           LWIP_ASSERT("pbuf_header failed", 0);
1191:../lwip-1.4.1/src/core/tcp_in.c ****         }
1192:../lwip-1.4.1/src/core/tcp_in.c ****       } else {
1193:../lwip-1.4.1/src/core/tcp_in.c ****         if(pbuf_header(inseg.p, (s16_t)-off)) {
 3430              		.loc 1 1193 0
 3431 0654 764B     		ldr	r3, .L248
 3432 0656 5A68     		ldr	r2, [r3, #4]
 3433 0658 3B6A     		ldr	r3, [r7, #32]
 3434 065a 9BB2     		uxth	r3, r3
 3435 065c 5B42     		negs	r3, r3
 3436 065e 9BB2     		uxth	r3, r3
 3437 0660 9BB2     		uxth	r3, r3
 3438 0662 1BB2     		sxth	r3, r3
 3439 0664 1046     		mov	r0, r2
 3440 0666 1946     		mov	r1, r3
 3441 0668 FFF7FEFF 		bl	pbuf_header
 3442              	.L192:
1194:../lwip-1.4.1/src/core/tcp_in.c ****           /* Do we need to cope with this failing?  Assert for now */
1195:../lwip-1.4.1/src/core/tcp_in.c ****           LWIP_ASSERT("pbuf_header failed", 0);
1196:../lwip-1.4.1/src/core/tcp_in.c ****         }
1197:../lwip-1.4.1/src/core/tcp_in.c ****       }
1198:../lwip-1.4.1/src/core/tcp_in.c ****       inseg.len -= (u16_t)(pcb->rcv_nxt - seqno);
 3443              		.loc 1 1198 0
 3444 066c 704B     		ldr	r3, .L248
 3445 066e 1A89     		ldrh	r2, [r3, #8]
 3446 0670 704B     		ldr	r3, .L248+4
 3447 0672 1B68     		ldr	r3, [r3]
 3448 0674 99B2     		uxth	r1, r3
 3449 0676 7B68     		ldr	r3, [r7, #4]
 3450 0678 9B6A     		ldr	r3, [r3, #40]
 3451 067a 9BB2     		uxth	r3, r3
 3452 067c CB1A     		subs	r3, r1, r3
 3453 067e 9BB2     		uxth	r3, r3
 3454 0680 1344     		add	r3, r3, r2
 3455 0682 9AB2     		uxth	r2, r3
 3456 0684 6A4B     		ldr	r3, .L248
 3457 0686 1A81     		strh	r2, [r3, #8]	@ movhi
1199:../lwip-1.4.1/src/core/tcp_in.c ****       inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 3458              		.loc 1 1199 0
 3459 0688 694B     		ldr	r3, .L248
 3460 068a 1B69     		ldr	r3, [r3, #16]
 3461 068c 7A68     		ldr	r2, [r7, #4]
 3462 068e 926A     		ldr	r2, [r2, #40]
 3463 0690 6849     		ldr	r1, .L248+4
 3464 0692 0A60     		str	r2, [r1]
 3465 0694 674A     		ldr	r2, .L248+4
 3466 0696 1268     		ldr	r2, [r2]
 3467 0698 5A60     		str	r2, [r3, #4]	@ unaligned
 3468 069a 0DE0     		b	.L193
 3469              	.L188:
1200:../lwip-1.4.1/src/core/tcp_in.c ****     }
1201:../lwip-1.4.1/src/core/tcp_in.c ****     else {
1202:../lwip-1.4.1/src/core/tcp_in.c ****       if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)){
 3470              		.loc 1 1202 0
 3471 069c 654B     		ldr	r3, .L248+4
 3472 069e 1A68     		ldr	r2, [r3]
 3473 06a0 7B68     		ldr	r3, [r7, #4]
 3474 06a2 9B6A     		ldr	r3, [r3, #40]
 3475 06a4 D31A     		subs	r3, r2, r3
 3476 06a6 002B     		cmp	r3, #0
 3477 06a8 06DA     		bge	.L193
1203:../lwip-1.4.1/src/core/tcp_in.c ****         /* the whole segment is < rcv_nxt */
1204:../lwip-1.4.1/src/core/tcp_in.c ****         /* must be a duplicate of a packet that has already been correctly handled */
1205:../lwip-1.4.1/src/core/tcp_in.c **** 
1206:../lwip-1.4.1/src/core/tcp_in.c ****         LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
1207:../lwip-1.4.1/src/core/tcp_in.c ****         tcp_ack_now(pcb);
 3478              		.loc 1 1207 0
 3479 06aa 7B68     		ldr	r3, [r7, #4]
 3480 06ac 9B7F     		ldrb	r3, [r3, #30]	@ zero_extendqisi2
 3481 06ae 43F00203 		orr	r3, r3, #2
 3482 06b2 DAB2     		uxtb	r2, r3
 3483 06b4 7B68     		ldr	r3, [r7, #4]
 3484 06b6 9A77     		strb	r2, [r3, #30]
 3485              	.L193:
1208:../lwip-1.4.1/src/core/tcp_in.c ****       }
1209:../lwip-1.4.1/src/core/tcp_in.c ****     }
1210:../lwip-1.4.1/src/core/tcp_in.c **** 
1211:../lwip-1.4.1/src/core/tcp_in.c ****     /* The sequence number must be within the window (above rcv_nxt
1212:../lwip-1.4.1/src/core/tcp_in.c ****        and below rcv_nxt + rcv_wnd) in order to be further
1213:../lwip-1.4.1/src/core/tcp_in.c ****        processed. */
1214:../lwip-1.4.1/src/core/tcp_in.c ****     if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, 
 3486              		.loc 1 1214 0
 3487 06b8 5E4B     		ldr	r3, .L248+4
 3488 06ba 1A68     		ldr	r2, [r3]
 3489 06bc 7B68     		ldr	r3, [r7, #4]
 3490 06be 9B6A     		ldr	r3, [r3, #40]
 3491 06c0 D31A     		subs	r3, r2, r3
 3492 06c2 002B     		cmp	r3, #0
 3493 06c4 C0F29F83 		blt	.L194
 3494              		.loc 1 1214 0 is_stmt 0 discriminator 1
 3495 06c8 5A4B     		ldr	r3, .L248+4
 3496 06ca 1A68     		ldr	r2, [r3]
 3497 06cc 7B68     		ldr	r3, [r7, #4]
 3498 06ce 9B6A     		ldr	r3, [r3, #40]
 3499 06d0 7968     		ldr	r1, [r7, #4]
 3500 06d2 898D     		ldrh	r1, [r1, #44]
 3501 06d4 0B44     		add	r3, r3, r1
 3502 06d6 D31A     		subs	r3, r2, r3
 3503 06d8 0133     		adds	r3, r3, #1
 3504 06da 002B     		cmp	r3, #0
 3505 06dc 00F39383 		bgt	.L194
1215:../lwip-1.4.1/src/core/tcp_in.c ****                         pcb->rcv_nxt + pcb->rcv_wnd - 1)){
1216:../lwip-1.4.1/src/core/tcp_in.c ****       if (pcb->rcv_nxt == seqno) {
 3506              		.loc 1 1216 0 is_stmt 1
 3507 06e0 7B68     		ldr	r3, [r7, #4]
 3508 06e2 9A6A     		ldr	r2, [r3, #40]
 3509 06e4 534B     		ldr	r3, .L248+4
 3510 06e6 1B68     		ldr	r3, [r3]
 3511 06e8 9A42     		cmp	r2, r3
 3512 06ea 40F03382 		bne	.L195
1217:../lwip-1.4.1/src/core/tcp_in.c ****         /* The incoming segment is the next in sequence. We check if
1218:../lwip-1.4.1/src/core/tcp_in.c ****            we have to trim the end of the segment and update rcv_nxt
1219:../lwip-1.4.1/src/core/tcp_in.c ****            and pass the data to the application. */
1220:../lwip-1.4.1/src/core/tcp_in.c ****         tcplen = TCP_TCPLEN(&inseg);
 3513              		.loc 1 1220 0
 3514 06ee 504B     		ldr	r3, .L248
 3515 06f0 1C89     		ldrh	r4, [r3, #8]
 3516 06f2 4F4B     		ldr	r3, .L248
 3517 06f4 1B69     		ldr	r3, [r3, #16]
 3518 06f6 9B89     		ldrh	r3, [r3, #12]	@ unaligned
 3519 06f8 9BB2     		uxth	r3, r3
 3520 06fa 1846     		mov	r0, r3
 3521 06fc FFF7FEFF 		bl	lwip_ntohs
 3522 0700 0346     		mov	r3, r0
 3523 0702 03F00303 		and	r3, r3, #3
 3524 0706 002B     		cmp	r3, #0
 3525 0708 14BF     		ite	ne
 3526 070a 0123     		movne	r3, #1
 3527 070c 0023     		moveq	r3, #0
 3528 070e DBB2     		uxtb	r3, r3
 3529 0710 9BB2     		uxth	r3, r3
 3530 0712 2344     		add	r3, r3, r4
 3531 0714 9AB2     		uxth	r2, r3
 3532 0716 484B     		ldr	r3, .L248+8
 3533 0718 1A80     		strh	r2, [r3]	@ movhi
1221:../lwip-1.4.1/src/core/tcp_in.c **** 
1222:../lwip-1.4.1/src/core/tcp_in.c ****         if (tcplen > pcb->rcv_wnd) {
 3534              		.loc 1 1222 0
 3535 071a 7B68     		ldr	r3, [r7, #4]
 3536 071c 9A8D     		ldrh	r2, [r3, #44]
 3537 071e 464B     		ldr	r3, .L248+8
 3538 0720 1B88     		ldrh	r3, [r3]
 3539 0722 9A42     		cmp	r2, r3
 3540 0724 5ED2     		bcs	.L196
1223:../lwip-1.4.1/src/core/tcp_in.c ****           LWIP_DEBUGF(TCP_INPUT_DEBUG, 
1224:../lwip-1.4.1/src/core/tcp_in.c ****                       ("tcp_receive: other end overran receive window"
1225:../lwip-1.4.1/src/core/tcp_in.c ****                        "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
1226:../lwip-1.4.1/src/core/tcp_in.c ****                        seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
1227:../lwip-1.4.1/src/core/tcp_in.c ****           if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 3541              		.loc 1 1227 0
 3542 0726 424B     		ldr	r3, .L248
 3543 0728 1B69     		ldr	r3, [r3, #16]
 3544 072a 9B89     		ldrh	r3, [r3, #12]	@ unaligned
 3545 072c 9BB2     		uxth	r3, r3
 3546 072e 1846     		mov	r0, r3
 3547 0730 FFF7FEFF 		bl	lwip_ntohs
 3548 0734 0346     		mov	r3, r0
 3549 0736 03F00103 		and	r3, r3, #1
 3550 073a 002B     		cmp	r3, #0
 3551 073c 1ED0     		beq	.L197
1228:../lwip-1.4.1/src/core/tcp_in.c ****             /* Must remove the FIN from the header as we're trimming 
1229:../lwip-1.4.1/src/core/tcp_in.c ****              * that byte of sequence-space from the packet */
1230:../lwip-1.4.1/src/core/tcp_in.c ****             TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) &~ TCP_FIN);
 3552              		.loc 1 1230 0
 3553 073e 3C4B     		ldr	r3, .L248
 3554 0740 1C69     		ldr	r4, [r3, #16]
 3555 0742 3B4B     		ldr	r3, .L248
 3556 0744 1B69     		ldr	r3, [r3, #16]
 3557 0746 9B89     		ldrh	r3, [r3, #12]	@ unaligned
 3558 0748 9BB2     		uxth	r3, r3
 3559 074a 9BB2     		uxth	r3, r3
 3560 074c 23F47C53 		bic	r3, r3, #16128
 3561 0750 9DB2     		uxth	r5, r3
 3562 0752 374B     		ldr	r3, .L248
 3563 0754 1B69     		ldr	r3, [r3, #16]
 3564 0756 9B89     		ldrh	r3, [r3, #12]	@ unaligned
 3565 0758 9BB2     		uxth	r3, r3
 3566 075a 1846     		mov	r0, r3
 3567 075c FFF7FEFF 		bl	lwip_ntohs
 3568 0760 0346     		mov	r3, r0
 3569 0762 03F03E03 		and	r3, r3, #62
 3570 0766 9BB2     		uxth	r3, r3
 3571 0768 1846     		mov	r0, r3
 3572 076a FFF7FEFF 		bl	lwip_htons
 3573 076e 0346     		mov	r3, r0
 3574 0770 9BB2     		uxth	r3, r3
 3575 0772 2A46     		mov	r2, r5	@ movhi
 3576 0774 1343     		orrs	r3, r3, r2
 3577 0776 9BB2     		uxth	r3, r3
 3578 0778 9BB2     		uxth	r3, r3
 3579 077a A381     		strh	r3, [r4, #12]	@ unaligned
 3580              	.L197:
1231:../lwip-1.4.1/src/core/tcp_in.c ****           }
1232:../lwip-1.4.1/src/core/tcp_in.c ****           /* Adjust length of segment to fit in the window. */
1233:../lwip-1.4.1/src/core/tcp_in.c ****           inseg.len = pcb->rcv_wnd;
 3581              		.loc 1 1233 0
 3582 077c 7B68     		ldr	r3, [r7, #4]
 3583 077e 9A8D     		ldrh	r2, [r3, #44]
 3584 0780 2B4B     		ldr	r3, .L248
 3585 0782 1A81     		strh	r2, [r3, #8]	@ movhi
1234:../lwip-1.4.1/src/core/tcp_in.c ****           if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 3586              		.loc 1 1234 0
 3587 0784 2A4B     		ldr	r3, .L248
 3588 0786 1B69     		ldr	r3, [r3, #16]
 3589 0788 9B89     		ldrh	r3, [r3, #12]	@ unaligned
 3590 078a 9BB2     		uxth	r3, r3
 3591 078c 1846     		mov	r0, r3
 3592 078e FFF7FEFF 		bl	lwip_ntohs
 3593 0792 0346     		mov	r3, r0
 3594 0794 03F00203 		and	r3, r3, #2
 3595 0798 002B     		cmp	r3, #0
 3596 079a 05D0     		beq	.L198
1235:../lwip-1.4.1/src/core/tcp_in.c ****             inseg.len -= 1;
 3597              		.loc 1 1235 0
 3598 079c 244B     		ldr	r3, .L248
 3599 079e 1B89     		ldrh	r3, [r3, #8]
 3600 07a0 013B     		subs	r3, r3, #1
 3601 07a2 9AB2     		uxth	r2, r3
 3602 07a4 224B     		ldr	r3, .L248
 3603 07a6 1A81     		strh	r2, [r3, #8]	@ movhi
 3604              	.L198:
1236:../lwip-1.4.1/src/core/tcp_in.c ****           }
1237:../lwip-1.4.1/src/core/tcp_in.c ****           pbuf_realloc(inseg.p, inseg.len);
 3605              		.loc 1 1237 0
 3606 07a8 214B     		ldr	r3, .L248
 3607 07aa 5A68     		ldr	r2, [r3, #4]
 3608 07ac 204B     		ldr	r3, .L248
 3609 07ae 1B89     		ldrh	r3, [r3, #8]
 3610 07b0 1046     		mov	r0, r2
 3611 07b2 1946     		mov	r1, r3
 3612 07b4 FFF7FEFF 		bl	pbuf_realloc
1238:../lwip-1.4.1/src/core/tcp_in.c ****           tcplen = TCP_TCPLEN(&inseg);
 3613              		.loc 1 1238 0
 3614 07b8 1D4B     		ldr	r3, .L248
 3615 07ba 1C89     		ldrh	r4, [r3, #8]
 3616 07bc 1C4B     		ldr	r3, .L248
 3617 07be 1B69     		ldr	r3, [r3, #16]
 3618 07c0 9B89     		ldrh	r3, [r3, #12]	@ unaligned
 3619 07c2 9BB2     		uxth	r3, r3
 3620 07c4 1846     		mov	r0, r3
 3621 07c6 FFF7FEFF 		bl	lwip_ntohs
 3622 07ca 0346     		mov	r3, r0
 3623 07cc 03F00303 		and	r3, r3, #3
 3624 07d0 002B     		cmp	r3, #0
 3625 07d2 14BF     		ite	ne
 3626 07d4 0123     		movne	r3, #1
 3627 07d6 0023     		moveq	r3, #0
 3628 07d8 DBB2     		uxtb	r3, r3
 3629 07da 9BB2     		uxth	r3, r3
 3630 07dc 2344     		add	r3, r3, r4
 3631 07de 9AB2     		uxth	r2, r3
 3632 07e0 154B     		ldr	r3, .L248+8
 3633 07e2 1A80     		strh	r2, [r3]	@ movhi
 3634              	.L196:
1239:../lwip-1.4.1/src/core/tcp_in.c ****           LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
1240:../lwip-1.4.1/src/core/tcp_in.c ****                       (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
1241:../lwip-1.4.1/src/core/tcp_in.c ****         }
1242:../lwip-1.4.1/src/core/tcp_in.c **** #if TCP_QUEUE_OOSEQ
1243:../lwip-1.4.1/src/core/tcp_in.c ****         /* Received in-sequence data, adjust ooseq data if:
1244:../lwip-1.4.1/src/core/tcp_in.c ****            - FIN has been received or
1245:../lwip-1.4.1/src/core/tcp_in.c ****            - inseq overlaps with ooseq */
1246:../lwip-1.4.1/src/core/tcp_in.c ****         if (pcb->ooseq != NULL) {
 3635              		.loc 1 1246 0
 3636 07e4 7B68     		ldr	r3, [r7, #4]
 3637 07e6 5B6F     		ldr	r3, [r3, #116]
 3638 07e8 002B     		cmp	r3, #0
 3639 07ea 00F0C980 		beq	.L199
1247:../lwip-1.4.1/src/core/tcp_in.c ****           if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 3640              		.loc 1 1247 0
 3641 07ee 104B     		ldr	r3, .L248
 3642 07f0 1B69     		ldr	r3, [r3, #16]
 3643 07f2 9B89     		ldrh	r3, [r3, #12]	@ unaligned
 3644 07f4 9BB2     		uxth	r3, r3
 3645 07f6 1846     		mov	r0, r3
 3646 07f8 FFF7FEFF 		bl	lwip_ntohs
 3647 07fc 0346     		mov	r3, r0
 3648 07fe 03F00103 		and	r3, r3, #1
 3649 0802 002B     		cmp	r3, #0
 3650 0804 10D0     		beq	.L200
1248:../lwip-1.4.1/src/core/tcp_in.c ****             LWIP_DEBUGF(TCP_INPUT_DEBUG, 
1249:../lwip-1.4.1/src/core/tcp_in.c ****                         ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
1250:../lwip-1.4.1/src/core/tcp_in.c ****             /* Received in-order FIN means anything that was received
1251:../lwip-1.4.1/src/core/tcp_in.c ****              * out of order must now have been received in-order, so
1252:../lwip-1.4.1/src/core/tcp_in.c ****              * bin the ooseq queue */
1253:../lwip-1.4.1/src/core/tcp_in.c ****             while (pcb->ooseq != NULL) {
 3651              		.loc 1 1253 0
 3652 0806 0AE0     		b	.L201
 3653              	.L202:
 3654              	.LBB4:
1254:../lwip-1.4.1/src/core/tcp_in.c ****               struct tcp_seg *old_ooseq = pcb->ooseq;
 3655              		.loc 1 1254 0
 3656 0808 7B68     		ldr	r3, [r7, #4]
 3657 080a 5B6F     		ldr	r3, [r3, #116]
 3658 080c FB60     		str	r3, [r7, #12]
1255:../lwip-1.4.1/src/core/tcp_in.c ****               pcb->ooseq = pcb->ooseq->next;
 3659              		.loc 1 1255 0
 3660 080e 7B68     		ldr	r3, [r7, #4]
 3661 0810 5B6F     		ldr	r3, [r3, #116]
 3662 0812 1A68     		ldr	r2, [r3]
 3663 0814 7B68     		ldr	r3, [r7, #4]
 3664 0816 5A67     		str	r2, [r3, #116]
1256:../lwip-1.4.1/src/core/tcp_in.c ****               tcp_seg_free(old_ooseq);
 3665              		.loc 1 1256 0
 3666 0818 F868     		ldr	r0, [r7, #12]
 3667 081a FFF7FEFF 		bl	tcp_seg_free
 3668              	.L201:
 3669              	.LBE4:
1253:../lwip-1.4.1/src/core/tcp_in.c ****               struct tcp_seg *old_ooseq = pcb->ooseq;
 3670              		.loc 1 1253 0
 3671 081e 7B68     		ldr	r3, [r7, #4]
 3672 0820 5B6F     		ldr	r3, [r3, #116]
 3673 0822 002B     		cmp	r3, #0
 3674 0824 F0D1     		bne	.L202
 3675 0826 ABE0     		b	.L199
 3676              	.L200:
1257:../lwip-1.4.1/src/core/tcp_in.c ****             }
1258:../lwip-1.4.1/src/core/tcp_in.c ****           } else {
1259:../lwip-1.4.1/src/core/tcp_in.c ****             next = pcb->ooseq;
 3677              		.loc 1 1259 0
 3678 0828 7B68     		ldr	r3, [r7, #4]
 3679 082a 5B6F     		ldr	r3, [r3, #116]
 3680 082c FB62     		str	r3, [r7, #44]
1260:../lwip-1.4.1/src/core/tcp_in.c ****             /* Remove all segments on ooseq that are covered by inseg already.
1261:../lwip-1.4.1/src/core/tcp_in.c ****              * FIN is copied from ooseq to inseg if present. */
1262:../lwip-1.4.1/src/core/tcp_in.c ****             while (next &&
 3681              		.loc 1 1262 0
 3682 082e 48E0     		b	.L203
 3683              	.L249:
 3684              		.align	2
 3685              	.L248:
 3686 0830 00000000 		.word	inseg
 3687 0834 1C000000 		.word	seqno
 3688 0838 26000000 		.word	tcplen
 3689              	.L206:
1263:../lwip-1.4.1/src/core/tcp_in.c ****                    TCP_SEQ_GEQ(seqno + tcplen,
1264:../lwip-1.4.1/src/core/tcp_in.c ****                                next->tcphdr->seqno + next->len)) {
1265:../lwip-1.4.1/src/core/tcp_in.c ****               /* inseg cannot have FIN here (already processed above) */
1266:../lwip-1.4.1/src/core/tcp_in.c ****               if (TCPH_FLAGS(next->tcphdr) & TCP_FIN &&
 3690              		.loc 1 1266 0
 3691 083c FB6A     		ldr	r3, [r7, #44]
 3692 083e 1B69     		ldr	r3, [r3, #16]
 3693 0840 9B89     		ldrh	r3, [r3, #12]	@ unaligned
 3694 0842 9BB2     		uxth	r3, r3
 3695 0844 1846     		mov	r0, r3
 3696 0846 FFF7FEFF 		bl	lwip_ntohs
 3697 084a 0346     		mov	r3, r0
 3698 084c 03F00103 		and	r3, r3, #1
 3699 0850 002B     		cmp	r3, #0
 3700 0852 2ED0     		beq	.L204
1267:../lwip-1.4.1/src/core/tcp_in.c ****                   (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 3701              		.loc 1 1267 0 discriminator 1
 3702 0854 914B     		ldr	r3, .L250
 3703 0856 1B69     		ldr	r3, [r3, #16]
 3704 0858 9B89     		ldrh	r3, [r3, #12]	@ unaligned
 3705 085a 9BB2     		uxth	r3, r3
 3706 085c 1846     		mov	r0, r3
 3707 085e FFF7FEFF 		bl	lwip_ntohs
 3708 0862 0346     		mov	r3, r0
 3709 0864 03F00203 		and	r3, r3, #2
1266:../lwip-1.4.1/src/core/tcp_in.c ****                   (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 3710              		.loc 1 1266 0 discriminator 1
 3711 0868 002B     		cmp	r3, #0
 3712 086a 22D1     		bne	.L204
1268:../lwip-1.4.1/src/core/tcp_in.c ****                 TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 3713              		.loc 1 1268 0
 3714 086c 8B4B     		ldr	r3, .L250
 3715 086e 1C69     		ldr	r4, [r3, #16]
 3716 0870 8A4B     		ldr	r3, .L250
 3717 0872 1B69     		ldr	r3, [r3, #16]
 3718 0874 9B89     		ldrh	r3, [r3, #12]	@ unaligned
 3719 0876 9DB2     		uxth	r5, r3
 3720 0878 0120     		movs	r0, #1
 3721 087a FFF7FEFF 		bl	lwip_htons
 3722 087e 0346     		mov	r3, r0
 3723 0880 2B43     		orrs	r3, r3, r5
 3724 0882 9BB2     		uxth	r3, r3
 3725 0884 A381     		strh	r3, [r4, #12]	@ unaligned
1269:../lwip-1.4.1/src/core/tcp_in.c ****                 tcplen = TCP_TCPLEN(&inseg);
 3726              		.loc 1 1269 0
 3727 0886 854B     		ldr	r3, .L250
 3728 0888 1C89     		ldrh	r4, [r3, #8]
 3729 088a 844B     		ldr	r3, .L250
 3730 088c 1B69     		ldr	r3, [r3, #16]
 3731 088e 9B89     		ldrh	r3, [r3, #12]	@ unaligned
 3732 0890 9BB2     		uxth	r3, r3
 3733 0892 1846     		mov	r0, r3
 3734 0894 FFF7FEFF 		bl	lwip_ntohs
 3735 0898 0346     		mov	r3, r0
 3736 089a 03F00303 		and	r3, r3, #3
 3737 089e 002B     		cmp	r3, #0
 3738 08a0 14BF     		ite	ne
 3739 08a2 0123     		movne	r3, #1
 3740 08a4 0023     		moveq	r3, #0
 3741 08a6 DBB2     		uxtb	r3, r3
 3742 08a8 9BB2     		uxth	r3, r3
 3743 08aa 2344     		add	r3, r3, r4
 3744 08ac 9AB2     		uxth	r2, r3
 3745 08ae 7C4B     		ldr	r3, .L250+4
 3746 08b0 1A80     		strh	r2, [r3]	@ movhi
 3747              	.L204:
1270:../lwip-1.4.1/src/core/tcp_in.c ****               }
1271:../lwip-1.4.1/src/core/tcp_in.c ****               prev = next;
 3748              		.loc 1 1271 0
 3749 08b2 FB6A     		ldr	r3, [r7, #44]
 3750 08b4 BB62     		str	r3, [r7, #40]
1272:../lwip-1.4.1/src/core/tcp_in.c ****               next = next->next;
 3751              		.loc 1 1272 0
 3752 08b6 FB6A     		ldr	r3, [r7, #44]
 3753 08b8 1B68     		ldr	r3, [r3]
 3754 08ba FB62     		str	r3, [r7, #44]
1273:../lwip-1.4.1/src/core/tcp_in.c ****               tcp_seg_free(prev);
 3755              		.loc 1 1273 0
 3756 08bc B86A     		ldr	r0, [r7, #40]
 3757 08be FFF7FEFF 		bl	tcp_seg_free
 3758              	.L203:
1262:../lwip-1.4.1/src/core/tcp_in.c ****                    TCP_SEQ_GEQ(seqno + tcplen,
 3759              		.loc 1 1262 0
 3760 08c2 FB6A     		ldr	r3, [r7, #44]
 3761 08c4 002B     		cmp	r3, #0
 3762 08c6 0ED0     		beq	.L205
1263:../lwip-1.4.1/src/core/tcp_in.c ****                                next->tcphdr->seqno + next->len)) {
 3763              		.loc 1 1263 0 discriminator 1
 3764 08c8 754B     		ldr	r3, .L250+4
 3765 08ca 1B88     		ldrh	r3, [r3]
 3766 08cc 1A46     		mov	r2, r3
 3767 08ce 754B     		ldr	r3, .L250+8
 3768 08d0 1B68     		ldr	r3, [r3]
 3769 08d2 1A44     		add	r2, r2, r3
 3770 08d4 FB6A     		ldr	r3, [r7, #44]
 3771 08d6 1B69     		ldr	r3, [r3, #16]
 3772 08d8 5B68     		ldr	r3, [r3, #4]	@ unaligned
 3773 08da F96A     		ldr	r1, [r7, #44]
 3774 08dc 0989     		ldrh	r1, [r1, #8]
 3775 08de 0B44     		add	r3, r3, r1
 3776 08e0 D31A     		subs	r3, r2, r3
1262:../lwip-1.4.1/src/core/tcp_in.c ****                    TCP_SEQ_GEQ(seqno + tcplen,
 3777              		.loc 1 1262 0 discriminator 1
 3778 08e2 002B     		cmp	r3, #0
 3779 08e4 AADA     		bge	.L206
 3780              	.L205:
1274:../lwip-1.4.1/src/core/tcp_in.c ****             }
1275:../lwip-1.4.1/src/core/tcp_in.c ****             /* Now trim right side of inseg if it overlaps with the first
1276:../lwip-1.4.1/src/core/tcp_in.c ****              * segment on ooseq */
1277:../lwip-1.4.1/src/core/tcp_in.c ****             if (next &&
 3781              		.loc 1 1277 0
 3782 08e6 FB6A     		ldr	r3, [r7, #44]
 3783 08e8 002B     		cmp	r3, #0
 3784 08ea 46D0     		beq	.L207
1278:../lwip-1.4.1/src/core/tcp_in.c ****                 TCP_SEQ_GT(seqno + tcplen,
 3785              		.loc 1 1278 0 discriminator 1
 3786 08ec 6C4B     		ldr	r3, .L250+4
 3787 08ee 1B88     		ldrh	r3, [r3]
 3788 08f0 1A46     		mov	r2, r3
 3789 08f2 6C4B     		ldr	r3, .L250+8
 3790 08f4 1B68     		ldr	r3, [r3]
 3791 08f6 1A44     		add	r2, r2, r3
 3792 08f8 FB6A     		ldr	r3, [r7, #44]
 3793 08fa 1B69     		ldr	r3, [r3, #16]
 3794 08fc 5B68     		ldr	r3, [r3, #4]	@ unaligned
 3795 08fe D31A     		subs	r3, r2, r3
1277:../lwip-1.4.1/src/core/tcp_in.c ****                 TCP_SEQ_GT(seqno + tcplen,
 3796              		.loc 1 1277 0 discriminator 1
 3797 0900 002B     		cmp	r3, #0
 3798 0902 3ADD     		ble	.L207
1279:../lwip-1.4.1/src/core/tcp_in.c ****                            next->tcphdr->seqno)) {
1280:../lwip-1.4.1/src/core/tcp_in.c ****               /* inseg cannot have FIN here (already processed above) */
1281:../lwip-1.4.1/src/core/tcp_in.c ****               inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 3799              		.loc 1 1281 0
 3800 0904 FB6A     		ldr	r3, [r7, #44]
 3801 0906 1B69     		ldr	r3, [r3, #16]
 3802 0908 5B68     		ldr	r3, [r3, #4]	@ unaligned
 3803 090a 9AB2     		uxth	r2, r3
 3804 090c 654B     		ldr	r3, .L250+8
 3805 090e 1B68     		ldr	r3, [r3]
 3806 0910 9BB2     		uxth	r3, r3
 3807 0912 D31A     		subs	r3, r2, r3
 3808 0914 9AB2     		uxth	r2, r3
 3809 0916 614B     		ldr	r3, .L250
 3810 0918 1A81     		strh	r2, [r3, #8]	@ movhi
1282:../lwip-1.4.1/src/core/tcp_in.c ****               if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 3811              		.loc 1 1282 0
 3812 091a 604B     		ldr	r3, .L250
 3813 091c 1B69     		ldr	r3, [r3, #16]
 3814 091e 9B89     		ldrh	r3, [r3, #12]	@ unaligned
 3815 0920 9BB2     		uxth	r3, r3
 3816 0922 1846     		mov	r0, r3
 3817 0924 FFF7FEFF 		bl	lwip_ntohs
 3818 0928 0346     		mov	r3, r0
 3819 092a 03F00203 		and	r3, r3, #2
 3820 092e 002B     		cmp	r3, #0
 3821 0930 05D0     		beq	.L208
1283:../lwip-1.4.1/src/core/tcp_in.c ****                 inseg.len -= 1;
 3822              		.loc 1 1283 0
 3823 0932 5A4B     		ldr	r3, .L250
 3824 0934 1B89     		ldrh	r3, [r3, #8]
 3825 0936 013B     		subs	r3, r3, #1
 3826 0938 9AB2     		uxth	r2, r3
 3827 093a 584B     		ldr	r3, .L250
 3828 093c 1A81     		strh	r2, [r3, #8]	@ movhi
 3829              	.L208:
1284:../lwip-1.4.1/src/core/tcp_in.c ****               }
1285:../lwip-1.4.1/src/core/tcp_in.c ****               pbuf_realloc(inseg.p, inseg.len);
 3830              		.loc 1 1285 0
 3831 093e 574B     		ldr	r3, .L250
 3832 0940 5A68     		ldr	r2, [r3, #4]
 3833 0942 564B     		ldr	r3, .L250
 3834 0944 1B89     		ldrh	r3, [r3, #8]
 3835 0946 1046     		mov	r0, r2
 3836 0948 1946     		mov	r1, r3
 3837 094a FFF7FEFF 		bl	pbuf_realloc
1286:../lwip-1.4.1/src/core/tcp_in.c ****               tcplen = TCP_TCPLEN(&inseg);
 3838              		.loc 1 1286 0
 3839 094e 534B     		ldr	r3, .L250
 3840 0950 1C89     		ldrh	r4, [r3, #8]
 3841 0952 524B     		ldr	r3, .L250
 3842 0954 1B69     		ldr	r3, [r3, #16]
 3843 0956 9B89     		ldrh	r3, [r3, #12]	@ unaligned
 3844 0958 9BB2     		uxth	r3, r3
 3845 095a 1846     		mov	r0, r3
 3846 095c FFF7FEFF 		bl	lwip_ntohs
 3847 0960 0346     		mov	r3, r0
 3848 0962 03F00303 		and	r3, r3, #3
 3849 0966 002B     		cmp	r3, #0
 3850 0968 14BF     		ite	ne
 3851 096a 0123     		movne	r3, #1
 3852 096c 0023     		moveq	r3, #0
 3853 096e DBB2     		uxtb	r3, r3
 3854 0970 9BB2     		uxth	r3, r3
 3855 0972 2344     		add	r3, r3, r4
 3856 0974 9AB2     		uxth	r2, r3
 3857 0976 4A4B     		ldr	r3, .L250+4
 3858 0978 1A80     		strh	r2, [r3]	@ movhi
 3859              	.L207:
1287:../lwip-1.4.1/src/core/tcp_in.c ****               LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
1288:../lwip-1.4.1/src/core/tcp_in.c ****                           (seqno + tcplen) == next->tcphdr->seqno);
1289:../lwip-1.4.1/src/core/tcp_in.c ****             }
1290:../lwip-1.4.1/src/core/tcp_in.c ****             pcb->ooseq = next;
 3860              		.loc 1 1290 0
 3861 097a 7B68     		ldr	r3, [r7, #4]
 3862 097c FA6A     		ldr	r2, [r7, #44]
 3863 097e 5A67     		str	r2, [r3, #116]
 3864              	.L199:
1291:../lwip-1.4.1/src/core/tcp_in.c ****           }
1292:../lwip-1.4.1/src/core/tcp_in.c ****         }
1293:../lwip-1.4.1/src/core/tcp_in.c **** #endif /* TCP_QUEUE_OOSEQ */
1294:../lwip-1.4.1/src/core/tcp_in.c **** 
1295:../lwip-1.4.1/src/core/tcp_in.c ****         pcb->rcv_nxt = seqno + tcplen;
 3865              		.loc 1 1295 0
 3866 0980 474B     		ldr	r3, .L250+4
 3867 0982 1B88     		ldrh	r3, [r3]
 3868 0984 1A46     		mov	r2, r3
 3869 0986 474B     		ldr	r3, .L250+8
 3870 0988 1B68     		ldr	r3, [r3]
 3871 098a 1A44     		add	r2, r2, r3
 3872 098c 7B68     		ldr	r3, [r7, #4]
 3873 098e 9A62     		str	r2, [r3, #40]
1296:../lwip-1.4.1/src/core/tcp_in.c **** 
1297:../lwip-1.4.1/src/core/tcp_in.c ****         /* Update the receiver's (our) window. */
1298:../lwip-1.4.1/src/core/tcp_in.c ****         LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
1299:../lwip-1.4.1/src/core/tcp_in.c ****         pcb->rcv_wnd -= tcplen;
 3874              		.loc 1 1299 0
 3875 0990 7B68     		ldr	r3, [r7, #4]
 3876 0992 9A8D     		ldrh	r2, [r3, #44]
 3877 0994 424B     		ldr	r3, .L250+4
 3878 0996 1B88     		ldrh	r3, [r3]
 3879 0998 D31A     		subs	r3, r2, r3
 3880 099a 9AB2     		uxth	r2, r3
 3881 099c 7B68     		ldr	r3, [r7, #4]
 3882 099e 9A85     		strh	r2, [r3, #44]	@ movhi
1300:../lwip-1.4.1/src/core/tcp_in.c **** 
1301:../lwip-1.4.1/src/core/tcp_in.c ****         tcp_update_rcv_ann_wnd(pcb);
 3883              		.loc 1 1301 0
 3884 09a0 7868     		ldr	r0, [r7, #4]
 3885 09a2 FFF7FEFF 		bl	tcp_update_rcv_ann_wnd
1302:../lwip-1.4.1/src/core/tcp_in.c **** 
1303:../lwip-1.4.1/src/core/tcp_in.c ****         /* If there is data in the segment, we make preparations to
1304:../lwip-1.4.1/src/core/tcp_in.c ****            pass this up to the application. The ->recv_data variable
1305:../lwip-1.4.1/src/core/tcp_in.c ****            is used for holding the pbuf that goes to the
1306:../lwip-1.4.1/src/core/tcp_in.c ****            application. The code for reassembling out-of-sequence data
1307:../lwip-1.4.1/src/core/tcp_in.c ****            chains its data on this pbuf as well.
1308:../lwip-1.4.1/src/core/tcp_in.c **** 
1309:../lwip-1.4.1/src/core/tcp_in.c ****            If the segment was a FIN, we set the TF_GOT_FIN flag that will
1310:../lwip-1.4.1/src/core/tcp_in.c ****            be used to indicate to the application that the remote side has
1311:../lwip-1.4.1/src/core/tcp_in.c ****            closed its end of the connection. */
1312:../lwip-1.4.1/src/core/tcp_in.c ****         if (inseg.p->tot_len > 0) {
 3886              		.loc 1 1312 0
 3887 09a6 3D4B     		ldr	r3, .L250
 3888 09a8 5B68     		ldr	r3, [r3, #4]
 3889 09aa 1B89     		ldrh	r3, [r3, #8]
 3890 09ac 002B     		cmp	r3, #0
 3891 09ae 06D0     		beq	.L209
1313:../lwip-1.4.1/src/core/tcp_in.c ****           recv_data = inseg.p;
 3892              		.loc 1 1313 0
 3893 09b0 3A4B     		ldr	r3, .L250
 3894 09b2 5B68     		ldr	r3, [r3, #4]
 3895 09b4 3C4A     		ldr	r2, .L250+12
 3896 09b6 1360     		str	r3, [r2]
1314:../lwip-1.4.1/src/core/tcp_in.c ****           /* Since this pbuf now is the responsibility of the
1315:../lwip-1.4.1/src/core/tcp_in.c ****              application, we delete our reference to it so that we won't
1316:../lwip-1.4.1/src/core/tcp_in.c ****              (mistakingly) deallocate it. */
1317:../lwip-1.4.1/src/core/tcp_in.c ****           inseg.p = NULL;
 3897              		.loc 1 1317 0
 3898 09b8 384B     		ldr	r3, .L250
 3899 09ba 0022     		movs	r2, #0
 3900 09bc 5A60     		str	r2, [r3, #4]
 3901              	.L209:
1318:../lwip-1.4.1/src/core/tcp_in.c ****         }
1319:../lwip-1.4.1/src/core/tcp_in.c ****         if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 3902              		.loc 1 1319 0
 3903 09be 374B     		ldr	r3, .L250
 3904 09c0 1B69     		ldr	r3, [r3, #16]
 3905 09c2 9B89     		ldrh	r3, [r3, #12]	@ unaligned
 3906 09c4 9BB2     		uxth	r3, r3
 3907 09c6 1846     		mov	r0, r3
 3908 09c8 FFF7FEFF 		bl	lwip_ntohs
 3909 09cc 0346     		mov	r3, r0
 3910 09ce 03F00103 		and	r3, r3, #1
 3911 09d2 002B     		cmp	r3, #0
 3912 09d4 06D0     		beq	.L210
1320:../lwip-1.4.1/src/core/tcp_in.c ****           LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
1321:../lwip-1.4.1/src/core/tcp_in.c ****           recv_flags |= TF_GOT_FIN;
 3913              		.loc 1 1321 0
 3914 09d6 354B     		ldr	r3, .L250+16
 3915 09d8 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 3916 09da 43F02003 		orr	r3, r3, #32
 3917 09de DAB2     		uxtb	r2, r3
 3918 09e0 324B     		ldr	r3, .L250+16
 3919 09e2 1A70     		strb	r2, [r3]
 3920              	.L210:
1322:../lwip-1.4.1/src/core/tcp_in.c ****         }
1323:../lwip-1.4.1/src/core/tcp_in.c **** 
1324:../lwip-1.4.1/src/core/tcp_in.c **** #if TCP_QUEUE_OOSEQ
1325:../lwip-1.4.1/src/core/tcp_in.c ****         /* We now check if we have segments on the ->ooseq queue that
1326:../lwip-1.4.1/src/core/tcp_in.c ****            are now in sequence. */
1327:../lwip-1.4.1/src/core/tcp_in.c ****         while (pcb->ooseq != NULL &&
 3921              		.loc 1 1327 0
 3922 09e4 8CE0     		b	.L211
 3923              	.L217:
1328:../lwip-1.4.1/src/core/tcp_in.c ****                pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
1329:../lwip-1.4.1/src/core/tcp_in.c **** 
1330:../lwip-1.4.1/src/core/tcp_in.c ****           cseg = pcb->ooseq;
 3924              		.loc 1 1330 0
 3925 09e6 7B68     		ldr	r3, [r7, #4]
 3926 09e8 5B6F     		ldr	r3, [r3, #116]
 3927 09ea BB60     		str	r3, [r7, #8]
1331:../lwip-1.4.1/src/core/tcp_in.c ****           seqno = pcb->ooseq->tcphdr->seqno;
 3928              		.loc 1 1331 0
 3929 09ec 7B68     		ldr	r3, [r7, #4]
 3930 09ee 5B6F     		ldr	r3, [r3, #116]
 3931 09f0 1B69     		ldr	r3, [r3, #16]
 3932 09f2 5B68     		ldr	r3, [r3, #4]	@ unaligned
 3933 09f4 2B4A     		ldr	r2, .L250+8
 3934 09f6 1360     		str	r3, [r2]
1332:../lwip-1.4.1/src/core/tcp_in.c **** 
1333:../lwip-1.4.1/src/core/tcp_in.c ****           pcb->rcv_nxt += TCP_TCPLEN(cseg);
 3935              		.loc 1 1333 0
 3936 09f8 BB68     		ldr	r3, [r7, #8]
 3937 09fa 1B89     		ldrh	r3, [r3, #8]
 3938 09fc 1C46     		mov	r4, r3
 3939 09fe BB68     		ldr	r3, [r7, #8]
 3940 0a00 1B69     		ldr	r3, [r3, #16]
 3941 0a02 9B89     		ldrh	r3, [r3, #12]	@ unaligned
 3942 0a04 9BB2     		uxth	r3, r3
 3943 0a06 1846     		mov	r0, r3
 3944 0a08 FFF7FEFF 		bl	lwip_ntohs
 3945 0a0c 0346     		mov	r3, r0
 3946 0a0e 03F00303 		and	r3, r3, #3
 3947 0a12 002B     		cmp	r3, #0
 3948 0a14 14BF     		ite	ne
 3949 0a16 0123     		movne	r3, #1
 3950 0a18 0023     		moveq	r3, #0
 3951 0a1a DBB2     		uxtb	r3, r3
 3952 0a1c E218     		adds	r2, r4, r3
 3953 0a1e 7B68     		ldr	r3, [r7, #4]
 3954 0a20 9B6A     		ldr	r3, [r3, #40]
 3955 0a22 1A44     		add	r2, r2, r3
 3956 0a24 7B68     		ldr	r3, [r7, #4]
 3957 0a26 9A62     		str	r2, [r3, #40]
1334:../lwip-1.4.1/src/core/tcp_in.c ****           LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 3958              		.loc 1 1334 0
 3959 0a28 BB68     		ldr	r3, [r7, #8]
 3960 0a2a 1B69     		ldr	r3, [r3, #16]
 3961 0a2c 9B89     		ldrh	r3, [r3, #12]	@ unaligned
 3962 0a2e 9BB2     		uxth	r3, r3
 3963 0a30 1846     		mov	r0, r3
 3964 0a32 FFF7FEFF 		bl	lwip_ntohs
 3965 0a36 0346     		mov	r3, r0
 3966 0a38 03F00303 		and	r3, r3, #3
 3967 0a3c 002B     		cmp	r3, #0
1335:../lwip-1.4.1/src/core/tcp_in.c ****                       pcb->rcv_wnd >= TCP_TCPLEN(cseg));
1336:../lwip-1.4.1/src/core/tcp_in.c ****           pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 3968              		.loc 1 1336 0
 3969 0a3e BB68     		ldr	r3, [r7, #8]
 3970 0a40 1B89     		ldrh	r3, [r3, #8]
 3971 0a42 1C46     		mov	r4, r3
 3972 0a44 BB68     		ldr	r3, [r7, #8]
 3973 0a46 1B69     		ldr	r3, [r3, #16]
 3974 0a48 9B89     		ldrh	r3, [r3, #12]	@ unaligned
 3975 0a4a 9BB2     		uxth	r3, r3
 3976 0a4c 1846     		mov	r0, r3
 3977 0a4e FFF7FEFF 		bl	lwip_ntohs
 3978 0a52 0346     		mov	r3, r0
 3979 0a54 03F00303 		and	r3, r3, #3
 3980 0a58 002B     		cmp	r3, #0
 3981 0a5a 14BF     		ite	ne
 3982 0a5c 0123     		movne	r3, #1
 3983 0a5e 0023     		moveq	r3, #0
 3984 0a60 DBB2     		uxtb	r3, r3
 3985 0a62 E118     		adds	r1, r4, r3
 3986 0a64 7B68     		ldr	r3, [r7, #4]
 3987 0a66 9A8D     		ldrh	r2, [r3, #44]
 3988 0a68 8BB2     		uxth	r3, r1
 3989 0a6a D31A     		subs	r3, r2, r3
 3990 0a6c 9AB2     		uxth	r2, r3
 3991 0a6e 7B68     		ldr	r3, [r7, #4]
 3992 0a70 9A85     		strh	r2, [r3, #44]	@ movhi
1337:../lwip-1.4.1/src/core/tcp_in.c **** 
1338:../lwip-1.4.1/src/core/tcp_in.c ****           tcp_update_rcv_ann_wnd(pcb);
 3993              		.loc 1 1338 0
 3994 0a72 7868     		ldr	r0, [r7, #4]
 3995 0a74 FFF7FEFF 		bl	tcp_update_rcv_ann_wnd
1339:../lwip-1.4.1/src/core/tcp_in.c **** 
1340:../lwip-1.4.1/src/core/tcp_in.c ****           if (cseg->p->tot_len > 0) {
 3996              		.loc 1 1340 0
 3997 0a78 BB68     		ldr	r3, [r7, #8]
 3998 0a7a 5B68     		ldr	r3, [r3, #4]
 3999 0a7c 1B89     		ldrh	r3, [r3, #8]
 4000 0a7e 002B     		cmp	r3, #0
 4001 0a80 1DD0     		beq	.L212
1341:../lwip-1.4.1/src/core/tcp_in.c ****             /* Chain this pbuf onto the pbuf that we will pass to
1342:../lwip-1.4.1/src/core/tcp_in.c ****                the application. */
1343:../lwip-1.4.1/src/core/tcp_in.c ****             if (recv_data) {
 4002              		.loc 1 1343 0
 4003 0a82 094B     		ldr	r3, .L250+12
 4004 0a84 1B68     		ldr	r3, [r3]
 4005 0a86 002B     		cmp	r3, #0
 4006 0a88 12D0     		beq	.L213
1344:../lwip-1.4.1/src/core/tcp_in.c ****               pbuf_cat(recv_data, cseg->p);
 4007              		.loc 1 1344 0
 4008 0a8a 074B     		ldr	r3, .L250+12
 4009 0a8c 1A68     		ldr	r2, [r3]
 4010 0a8e BB68     		ldr	r3, [r7, #8]
 4011 0a90 5B68     		ldr	r3, [r3, #4]
 4012 0a92 1046     		mov	r0, r2
 4013 0a94 1946     		mov	r1, r3
 4014 0a96 FFF7FEFF 		bl	pbuf_cat
 4015 0a9a 0DE0     		b	.L214
 4016              	.L251:
 4017              		.align	2
 4018              	.L250:
 4019 0a9c 00000000 		.word	inseg
 4020 0aa0 26000000 		.word	tcplen
 4021 0aa4 1C000000 		.word	seqno
 4022 0aa8 2C000000 		.word	recv_data
 4023 0aac 28000000 		.word	recv_flags
 4024              	.L213:
1345:../lwip-1.4.1/src/core/tcp_in.c ****             } else {
1346:../lwip-1.4.1/src/core/tcp_in.c ****               recv_data = cseg->p;
 4025              		.loc 1 1346 0
 4026 0ab0 BB68     		ldr	r3, [r7, #8]
 4027 0ab2 5B68     		ldr	r3, [r3, #4]
 4028 0ab4 7F4A     		ldr	r2, .L252
 4029 0ab6 1360     		str	r3, [r2]
 4030              	.L214:
1347:../lwip-1.4.1/src/core/tcp_in.c ****             }
1348:../lwip-1.4.1/src/core/tcp_in.c ****             cseg->p = NULL;
 4031              		.loc 1 1348 0
 4032 0ab8 BB68     		ldr	r3, [r7, #8]
 4033 0aba 0022     		movs	r2, #0
 4034 0abc 5A60     		str	r2, [r3, #4]
 4035              	.L212:
1349:../lwip-1.4.1/src/core/tcp_in.c ****           }
1350:../lwip-1.4.1/src/core/tcp_in.c ****           if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 4036              		.loc 1 1350 0
 4037 0abe BB68     		ldr	r3, [r7, #8]
 4038 0ac0 1B69     		ldr	r3, [r3, #16]
 4039 0ac2 9B89     		ldrh	r3, [r3, #12]	@ unaligned
 4040 0ac4 9BB2     		uxth	r3, r3
 4041 0ac6 1846     		mov	r0, r3
 4042 0ac8 FFF7FEFF 		bl	lwip_ntohs
 4043 0acc 0346     		mov	r3, r0
 4044 0ace 03F00103 		and	r3, r3, #1
 4045 0ad2 002B     		cmp	r3, #0
 4046 0ad4 0DD0     		beq	.L215
1351:../lwip-1.4.1/src/core/tcp_in.c ****             LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
1352:../lwip-1.4.1/src/core/tcp_in.c ****             recv_flags |= TF_GOT_FIN;
 4047              		.loc 1 1352 0
 4048 0ad6 784B     		ldr	r3, .L252+4
 4049 0ad8 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 4050 0ada 43F02003 		orr	r3, r3, #32
 4051 0ade DAB2     		uxtb	r2, r3
 4052 0ae0 754B     		ldr	r3, .L252+4
 4053 0ae2 1A70     		strb	r2, [r3]
1353:../lwip-1.4.1/src/core/tcp_in.c ****             if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close 
 4054              		.loc 1 1353 0
 4055 0ae4 7B68     		ldr	r3, [r7, #4]
 4056 0ae6 1B7E     		ldrb	r3, [r3, #24]	@ zero_extendqisi2
 4057 0ae8 042B     		cmp	r3, #4
 4058 0aea 02D1     		bne	.L215
1354:../lwip-1.4.1/src/core/tcp_in.c ****               pcb->state = CLOSE_WAIT;
 4059              		.loc 1 1354 0
 4060 0aec 7B68     		ldr	r3, [r7, #4]
 4061 0aee 0722     		movs	r2, #7
 4062 0af0 1A76     		strb	r2, [r3, #24]
 4063              	.L215:
1355:../lwip-1.4.1/src/core/tcp_in.c ****             } 
1356:../lwip-1.4.1/src/core/tcp_in.c ****           }
1357:../lwip-1.4.1/src/core/tcp_in.c **** 
1358:../lwip-1.4.1/src/core/tcp_in.c ****           pcb->ooseq = cseg->next;
 4064              		.loc 1 1358 0
 4065 0af2 BB68     		ldr	r3, [r7, #8]
 4066 0af4 1A68     		ldr	r2, [r3]
 4067 0af6 7B68     		ldr	r3, [r7, #4]
 4068 0af8 5A67     		str	r2, [r3, #116]
1359:../lwip-1.4.1/src/core/tcp_in.c ****           tcp_seg_free(cseg);
 4069              		.loc 1 1359 0
 4070 0afa B868     		ldr	r0, [r7, #8]
 4071 0afc FFF7FEFF 		bl	tcp_seg_free
 4072              	.L211:
1327:../lwip-1.4.1/src/core/tcp_in.c ****                pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 4073              		.loc 1 1327 0
 4074 0b00 7B68     		ldr	r3, [r7, #4]
 4075 0b02 5B6F     		ldr	r3, [r3, #116]
 4076 0b04 002B     		cmp	r3, #0
 4077 0b06 08D0     		beq	.L216
1328:../lwip-1.4.1/src/core/tcp_in.c **** 
 4078              		.loc 1 1328 0 discriminator 1
 4079 0b08 7B68     		ldr	r3, [r7, #4]
 4080 0b0a 5B6F     		ldr	r3, [r3, #116]
 4081 0b0c 1B69     		ldr	r3, [r3, #16]
 4082 0b0e 5A68     		ldr	r2, [r3, #4]	@ unaligned
 4083 0b10 7B68     		ldr	r3, [r7, #4]
 4084 0b12 9B6A     		ldr	r3, [r3, #40]
1327:../lwip-1.4.1/src/core/tcp_in.c ****                pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 4085              		.loc 1 1327 0 discriminator 1
 4086 0b14 9A42     		cmp	r2, r3
 4087 0b16 3FF466AF 		beq	.L217
 4088              	.L216:
1360:../lwip-1.4.1/src/core/tcp_in.c ****         }
1361:../lwip-1.4.1/src/core/tcp_in.c **** #endif /* TCP_QUEUE_OOSEQ */
1362:../lwip-1.4.1/src/core/tcp_in.c **** 
1363:../lwip-1.4.1/src/core/tcp_in.c **** 
1364:../lwip-1.4.1/src/core/tcp_in.c ****         /* Acknowledge the segment(s). */
1365:../lwip-1.4.1/src/core/tcp_in.c ****         tcp_ack(pcb);
 4089              		.loc 1 1365 0
 4090 0b1a 7B68     		ldr	r3, [r7, #4]
 4091 0b1c 9B7F     		ldrb	r3, [r3, #30]	@ zero_extendqisi2
 4092 0b1e 03F00103 		and	r3, r3, #1
 4093 0b22 002B     		cmp	r3, #0
 4094 0b24 0ED0     		beq	.L218
 4095              		.loc 1 1365 0 is_stmt 0 discriminator 1
 4096 0b26 7B68     		ldr	r3, [r7, #4]
 4097 0b28 9B7F     		ldrb	r3, [r3, #30]	@ zero_extendqisi2
 4098 0b2a 23F00103 		bic	r3, r3, #1
 4099 0b2e DAB2     		uxtb	r2, r3
 4100 0b30 7B68     		ldr	r3, [r7, #4]
 4101 0b32 9A77     		strb	r2, [r3, #30]
 4102 0b34 7B68     		ldr	r3, [r7, #4]
 4103 0b36 9B7F     		ldrb	r3, [r3, #30]	@ zero_extendqisi2
 4104 0b38 43F00203 		orr	r3, r3, #2
 4105 0b3c DAB2     		uxtb	r2, r3
 4106 0b3e 7B68     		ldr	r3, [r7, #4]
 4107 0b40 9A77     		strb	r2, [r3, #30]
 4108 0b42 5FE1     		b	.L220
 4109              	.L218:
 4110              		.loc 1 1365 0 discriminator 2
 4111 0b44 7B68     		ldr	r3, [r7, #4]
 4112 0b46 9B7F     		ldrb	r3, [r3, #30]	@ zero_extendqisi2
 4113 0b48 43F00103 		orr	r3, r3, #1
 4114 0b4c DAB2     		uxtb	r2, r3
 4115 0b4e 7B68     		ldr	r3, [r7, #4]
 4116 0b50 9A77     		strb	r2, [r3, #30]
1216:../lwip-1.4.1/src/core/tcp_in.c ****         /* The incoming segment is the next in sequence. We check if
 4117              		.loc 1 1216 0 is_stmt 1 discriminator 2
 4118 0b52 5CE1     		b	.L239
 4119              	.L195:
1366:../lwip-1.4.1/src/core/tcp_in.c **** 
1367:../lwip-1.4.1/src/core/tcp_in.c ****       } else {
1368:../lwip-1.4.1/src/core/tcp_in.c ****         /* We get here if the incoming segment is out-of-sequence. */
1369:../lwip-1.4.1/src/core/tcp_in.c ****         tcp_send_empty_ack(pcb);
 4120              		.loc 1 1369 0
 4121 0b54 7868     		ldr	r0, [r7, #4]
 4122 0b56 FFF7FEFF 		bl	tcp_send_empty_ack
1370:../lwip-1.4.1/src/core/tcp_in.c **** #if TCP_QUEUE_OOSEQ
1371:../lwip-1.4.1/src/core/tcp_in.c ****         /* We queue the segment on the ->ooseq queue. */
1372:../lwip-1.4.1/src/core/tcp_in.c ****         if (pcb->ooseq == NULL) {
 4123              		.loc 1 1372 0
 4124 0b5a 7B68     		ldr	r3, [r7, #4]
 4125 0b5c 5B6F     		ldr	r3, [r3, #116]
 4126 0b5e 002B     		cmp	r3, #0
 4127 0b60 06D1     		bne	.L221
1373:../lwip-1.4.1/src/core/tcp_in.c ****           pcb->ooseq = tcp_seg_copy(&inseg);
 4128              		.loc 1 1373 0
 4129 0b62 5648     		ldr	r0, .L252+8
 4130 0b64 FFF7FEFF 		bl	tcp_seg_copy
 4131 0b68 0246     		mov	r2, r0
 4132 0b6a 7B68     		ldr	r3, [r7, #4]
 4133 0b6c 5A67     		str	r2, [r3, #116]
 4134 0b6e 49E1     		b	.L220
 4135              	.L221:
1374:../lwip-1.4.1/src/core/tcp_in.c ****         } else {
1375:../lwip-1.4.1/src/core/tcp_in.c ****           /* If the queue is not empty, we walk through the queue and
1376:../lwip-1.4.1/src/core/tcp_in.c ****              try to find a place where the sequence number of the
1377:../lwip-1.4.1/src/core/tcp_in.c ****              incoming segment is between the sequence numbers of the
1378:../lwip-1.4.1/src/core/tcp_in.c ****              previous and the next segment on the ->ooseq queue. That is
1379:../lwip-1.4.1/src/core/tcp_in.c ****              the place where we put the incoming segment. If needed, we
1380:../lwip-1.4.1/src/core/tcp_in.c ****              trim the second edges of the previous and the incoming
1381:../lwip-1.4.1/src/core/tcp_in.c ****              segment so that it will fit into the sequence.
1382:../lwip-1.4.1/src/core/tcp_in.c **** 
1383:../lwip-1.4.1/src/core/tcp_in.c ****              If the incoming segment has the same sequence number as a
1384:../lwip-1.4.1/src/core/tcp_in.c ****              segment on the ->ooseq queue, we discard the segment that
1385:../lwip-1.4.1/src/core/tcp_in.c ****              contains less data. */
1386:../lwip-1.4.1/src/core/tcp_in.c **** 
1387:../lwip-1.4.1/src/core/tcp_in.c ****           prev = NULL;
 4136              		.loc 1 1387 0
 4137 0b70 0023     		movs	r3, #0
 4138 0b72 BB62     		str	r3, [r7, #40]
1388:../lwip-1.4.1/src/core/tcp_in.c ****           for(next = pcb->ooseq; next != NULL; next = next->next) {
 4139              		.loc 1 1388 0
 4140 0b74 7B68     		ldr	r3, [r7, #4]
 4141 0b76 5B6F     		ldr	r3, [r3, #116]
 4142 0b78 FB62     		str	r3, [r7, #44]
 4143 0b7a 3FE1     		b	.L222
 4144              	.L238:
1389:../lwip-1.4.1/src/core/tcp_in.c ****             if (seqno == next->tcphdr->seqno) {
 4145              		.loc 1 1389 0
 4146 0b7c FB6A     		ldr	r3, [r7, #44]
 4147 0b7e 1B69     		ldr	r3, [r3, #16]
 4148 0b80 5A68     		ldr	r2, [r3, #4]	@ unaligned
 4149 0b82 4F4B     		ldr	r3, .L252+12
 4150 0b84 1B68     		ldr	r3, [r3]
 4151 0b86 9A42     		cmp	r2, r3
 4152 0b88 1DD1     		bne	.L223
1390:../lwip-1.4.1/src/core/tcp_in.c ****               /* The sequence number of the incoming segment is the
1391:../lwip-1.4.1/src/core/tcp_in.c ****                  same as the sequence number of the segment on
1392:../lwip-1.4.1/src/core/tcp_in.c ****                  ->ooseq. We check the lengths to see which one to
1393:../lwip-1.4.1/src/core/tcp_in.c ****                  discard. */
1394:../lwip-1.4.1/src/core/tcp_in.c ****               if (inseg.len > next->len) {
 4153              		.loc 1 1394 0
 4154 0b8a 4C4B     		ldr	r3, .L252+8
 4155 0b8c 1A89     		ldrh	r2, [r3, #8]
 4156 0b8e FB6A     		ldr	r3, [r7, #44]
 4157 0b90 1B89     		ldrh	r3, [r3, #8]
 4158 0b92 9A42     		cmp	r2, r3
 4159 0b94 16D9     		bls	.L224
1395:../lwip-1.4.1/src/core/tcp_in.c ****                 /* The incoming segment is larger than the old
1396:../lwip-1.4.1/src/core/tcp_in.c ****                    segment. We replace some segments with the new
1397:../lwip-1.4.1/src/core/tcp_in.c ****                    one. */
1398:../lwip-1.4.1/src/core/tcp_in.c ****                 cseg = tcp_seg_copy(&inseg);
 4160              		.loc 1 1398 0
 4161 0b96 4948     		ldr	r0, .L252+8
 4162 0b98 FFF7FEFF 		bl	tcp_seg_copy
 4163 0b9c B860     		str	r0, [r7, #8]
1399:../lwip-1.4.1/src/core/tcp_in.c ****                 if (cseg != NULL) {
 4164              		.loc 1 1399 0
 4165 0b9e BB68     		ldr	r3, [r7, #8]
 4166 0ba0 002B     		cmp	r3, #0
 4167 0ba2 0ED0     		beq	.L225
1400:../lwip-1.4.1/src/core/tcp_in.c ****                   if (prev != NULL) {
 4168              		.loc 1 1400 0
 4169 0ba4 BB6A     		ldr	r3, [r7, #40]
 4170 0ba6 002B     		cmp	r3, #0
 4171 0ba8 03D0     		beq	.L226
1401:../lwip-1.4.1/src/core/tcp_in.c ****                     prev->next = cseg;
 4172              		.loc 1 1401 0
 4173 0baa BB6A     		ldr	r3, [r7, #40]
 4174 0bac BA68     		ldr	r2, [r7, #8]
 4175 0bae 1A60     		str	r2, [r3]
 4176 0bb0 02E0     		b	.L227
 4177              	.L226:
1402:../lwip-1.4.1/src/core/tcp_in.c ****                   } else {
1403:../lwip-1.4.1/src/core/tcp_in.c ****                     pcb->ooseq = cseg;
 4178              		.loc 1 1403 0
 4179 0bb2 7B68     		ldr	r3, [r7, #4]
 4180 0bb4 BA68     		ldr	r2, [r7, #8]
 4181 0bb6 5A67     		str	r2, [r3, #116]
 4182              	.L227:
1404:../lwip-1.4.1/src/core/tcp_in.c ****                   }
1405:../lwip-1.4.1/src/core/tcp_in.c ****                   tcp_oos_insert_segment(cseg, next);
 4183              		.loc 1 1405 0
 4184 0bb8 B868     		ldr	r0, [r7, #8]
 4185 0bba F96A     		ldr	r1, [r7, #44]
 4186 0bbc FFF7FEFF 		bl	tcp_oos_insert_segment
1406:../lwip-1.4.1/src/core/tcp_in.c ****                 }
1407:../lwip-1.4.1/src/core/tcp_in.c ****                 break;
 4187              		.loc 1 1407 0
 4188 0bc0 20E1     		b	.L220
 4189              	.L225:
 4190              		.loc 1 1407 0 is_stmt 0 discriminator 21
 4191 0bc2 1FE1     		b	.L220
 4192              	.L224:
1408:../lwip-1.4.1/src/core/tcp_in.c ****               } else {
1409:../lwip-1.4.1/src/core/tcp_in.c ****                 /* Either the lenghts are the same or the incoming
1410:../lwip-1.4.1/src/core/tcp_in.c ****                    segment was smaller than the old one; in either
1411:../lwip-1.4.1/src/core/tcp_in.c ****                    case, we ditch the incoming segment. */
1412:../lwip-1.4.1/src/core/tcp_in.c ****                 break;
 4193              		.loc 1 1412 0 is_stmt 1 discriminator 22
 4194 0bc4 1EE1     		b	.L220
 4195              	.L223:
1413:../lwip-1.4.1/src/core/tcp_in.c ****               }
1414:../lwip-1.4.1/src/core/tcp_in.c ****             } else {
1415:../lwip-1.4.1/src/core/tcp_in.c ****               if (prev == NULL) {
 4196              		.loc 1 1415 0
 4197 0bc6 BB6A     		ldr	r3, [r7, #40]
 4198 0bc8 002B     		cmp	r3, #0
 4199 0bca 17D1     		bne	.L228
1416:../lwip-1.4.1/src/core/tcp_in.c ****                 if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 4200              		.loc 1 1416 0
 4201 0bcc 3C4B     		ldr	r3, .L252+12
 4202 0bce 1A68     		ldr	r2, [r3]
 4203 0bd0 FB6A     		ldr	r3, [r7, #44]
 4204 0bd2 1B69     		ldr	r3, [r3, #16]
 4205 0bd4 5B68     		ldr	r3, [r3, #4]	@ unaligned
 4206 0bd6 D31A     		subs	r3, r2, r3
 4207 0bd8 002B     		cmp	r3, #0
 4208 0bda 4FDA     		bge	.L229
1417:../lwip-1.4.1/src/core/tcp_in.c ****                   /* The sequence number of the incoming segment is lower
1418:../lwip-1.4.1/src/core/tcp_in.c ****                      than the sequence number of the first segment on the
1419:../lwip-1.4.1/src/core/tcp_in.c ****                      queue. We put the incoming segment first on the
1420:../lwip-1.4.1/src/core/tcp_in.c ****                      queue. */
1421:../lwip-1.4.1/src/core/tcp_in.c ****                   cseg = tcp_seg_copy(&inseg);
 4209              		.loc 1 1421 0
 4210 0bdc 3748     		ldr	r0, .L252+8
 4211 0bde FFF7FEFF 		bl	tcp_seg_copy
 4212 0be2 B860     		str	r0, [r7, #8]
1422:../lwip-1.4.1/src/core/tcp_in.c ****                   if (cseg != NULL) {
 4213              		.loc 1 1422 0
 4214 0be4 BB68     		ldr	r3, [r7, #8]
 4215 0be6 002B     		cmp	r3, #0
 4216 0be8 07D0     		beq	.L230
1423:../lwip-1.4.1/src/core/tcp_in.c ****                     pcb->ooseq = cseg;
 4217              		.loc 1 1423 0
 4218 0bea 7B68     		ldr	r3, [r7, #4]
 4219 0bec BA68     		ldr	r2, [r7, #8]
 4220 0bee 5A67     		str	r2, [r3, #116]
1424:../lwip-1.4.1/src/core/tcp_in.c ****                     tcp_oos_insert_segment(cseg, next);
 4221              		.loc 1 1424 0
 4222 0bf0 B868     		ldr	r0, [r7, #8]
 4223 0bf2 F96A     		ldr	r1, [r7, #44]
 4224 0bf4 FFF7FEFF 		bl	tcp_oos_insert_segment
1425:../lwip-1.4.1/src/core/tcp_in.c ****                   }
1426:../lwip-1.4.1/src/core/tcp_in.c ****                   break;
 4225              		.loc 1 1426 0
 4226 0bf8 04E1     		b	.L220
 4227              	.L230:
 4228              		.loc 1 1426 0 is_stmt 0 discriminator 23
 4229 0bfa 03E1     		b	.L220
 4230              	.L228:
1427:../lwip-1.4.1/src/core/tcp_in.c ****                 }
1428:../lwip-1.4.1/src/core/tcp_in.c ****               } else {
1429:../lwip-1.4.1/src/core/tcp_in.c ****                 /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
1430:../lwip-1.4.1/src/core/tcp_in.c ****                   TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
1431:../lwip-1.4.1/src/core/tcp_in.c ****                 if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno+1, next->tcphdr->seqno-1)) {
 4231              		.loc 1 1431 0 is_stmt 1
 4232 0bfc 304B     		ldr	r3, .L252+12
 4233 0bfe 1A68     		ldr	r2, [r3]
 4234 0c00 BB6A     		ldr	r3, [r7, #40]
 4235 0c02 1B69     		ldr	r3, [r3, #16]
 4236 0c04 5B68     		ldr	r3, [r3, #4]	@ unaligned
 4237 0c06 D31A     		subs	r3, r2, r3
 4238 0c08 013B     		subs	r3, r3, #1
 4239 0c0a 002B     		cmp	r3, #0
 4240 0c0c 36DB     		blt	.L229
 4241              		.loc 1 1431 0 is_stmt 0 discriminator 1
 4242 0c0e 2C4B     		ldr	r3, .L252+12
 4243 0c10 1A68     		ldr	r2, [r3]
 4244 0c12 FB6A     		ldr	r3, [r7, #44]
 4245 0c14 1B69     		ldr	r3, [r3, #16]
 4246 0c16 5B68     		ldr	r3, [r3, #4]	@ unaligned
 4247 0c18 D31A     		subs	r3, r2, r3
 4248 0c1a 0133     		adds	r3, r3, #1
 4249 0c1c 002B     		cmp	r3, #0
 4250 0c1e 2DDC     		bgt	.L229
1432:../lwip-1.4.1/src/core/tcp_in.c ****                   /* The sequence number of the incoming segment is in
1433:../lwip-1.4.1/src/core/tcp_in.c ****                      between the sequence numbers of the previous and
1434:../lwip-1.4.1/src/core/tcp_in.c ****                      the next segment on ->ooseq. We trim trim the previous
1435:../lwip-1.4.1/src/core/tcp_in.c ****                      segment, delete next segments that included in received segment
1436:../lwip-1.4.1/src/core/tcp_in.c ****                      and trim received, if needed. */
1437:../lwip-1.4.1/src/core/tcp_in.c ****                   cseg = tcp_seg_copy(&inseg);
 4251              		.loc 1 1437 0 is_stmt 1
 4252 0c20 2648     		ldr	r0, .L252+8
 4253 0c22 FFF7FEFF 		bl	tcp_seg_copy
 4254 0c26 B860     		str	r0, [r7, #8]
1438:../lwip-1.4.1/src/core/tcp_in.c ****                   if (cseg != NULL) {
 4255              		.loc 1 1438 0
 4256 0c28 BB68     		ldr	r3, [r7, #8]
 4257 0c2a 002B     		cmp	r3, #0
 4258 0c2c 25D0     		beq	.L231
1439:../lwip-1.4.1/src/core/tcp_in.c ****                     if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 4259              		.loc 1 1439 0
 4260 0c2e BB6A     		ldr	r3, [r7, #40]
 4261 0c30 1B69     		ldr	r3, [r3, #16]
 4262 0c32 5B68     		ldr	r3, [r3, #4]	@ unaligned
 4263 0c34 BA6A     		ldr	r2, [r7, #40]
 4264 0c36 1289     		ldrh	r2, [r2, #8]
 4265 0c38 1A44     		add	r2, r2, r3
 4266 0c3a 214B     		ldr	r3, .L252+12
 4267 0c3c 1B68     		ldr	r3, [r3]
 4268 0c3e D31A     		subs	r3, r2, r3
 4269 0c40 002B     		cmp	r3, #0
 4270 0c42 12DD     		ble	.L232
1440:../lwip-1.4.1/src/core/tcp_in.c ****                       /* We need to trim the prev segment. */
1441:../lwip-1.4.1/src/core/tcp_in.c ****                       prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 4271              		.loc 1 1441 0
 4272 0c44 1E4B     		ldr	r3, .L252+12
 4273 0c46 1B68     		ldr	r3, [r3]
 4274 0c48 9AB2     		uxth	r2, r3
 4275 0c4a BB6A     		ldr	r3, [r7, #40]
 4276 0c4c 1B69     		ldr	r3, [r3, #16]
 4277 0c4e 5B68     		ldr	r3, [r3, #4]	@ unaligned
 4278 0c50 9BB2     		uxth	r3, r3
 4279 0c52 D31A     		subs	r3, r2, r3
 4280 0c54 9AB2     		uxth	r2, r3
 4281 0c56 BB6A     		ldr	r3, [r7, #40]
 4282 0c58 1A81     		strh	r2, [r3, #8]	@ movhi
1442:../lwip-1.4.1/src/core/tcp_in.c ****                       pbuf_realloc(prev->p, prev->len);
 4283              		.loc 1 1442 0
 4284 0c5a BB6A     		ldr	r3, [r7, #40]
 4285 0c5c 5A68     		ldr	r2, [r3, #4]
 4286 0c5e BB6A     		ldr	r3, [r7, #40]
 4287 0c60 1B89     		ldrh	r3, [r3, #8]
 4288 0c62 1046     		mov	r0, r2
 4289 0c64 1946     		mov	r1, r3
 4290 0c66 FFF7FEFF 		bl	pbuf_realloc
 4291              	.L232:
1443:../lwip-1.4.1/src/core/tcp_in.c ****                     }
1444:../lwip-1.4.1/src/core/tcp_in.c ****                     prev->next = cseg;
 4292              		.loc 1 1444 0
 4293 0c6a BB6A     		ldr	r3, [r7, #40]
 4294 0c6c BA68     		ldr	r2, [r7, #8]
 4295 0c6e 1A60     		str	r2, [r3]
1445:../lwip-1.4.1/src/core/tcp_in.c ****                     tcp_oos_insert_segment(cseg, next);
 4296              		.loc 1 1445 0
 4297 0c70 B868     		ldr	r0, [r7, #8]
 4298 0c72 F96A     		ldr	r1, [r7, #44]
 4299 0c74 FFF7FEFF 		bl	tcp_oos_insert_segment
1446:../lwip-1.4.1/src/core/tcp_in.c ****                   }
1447:../lwip-1.4.1/src/core/tcp_in.c ****                   break;
 4300              		.loc 1 1447 0
 4301 0c78 C4E0     		b	.L220
 4302              	.L231:
 4303              		.loc 1 1447 0 is_stmt 0 discriminator 24
 4304 0c7a C3E0     		b	.L220
 4305              	.L229:
1448:../lwip-1.4.1/src/core/tcp_in.c ****                 }
1449:../lwip-1.4.1/src/core/tcp_in.c ****               }
1450:../lwip-1.4.1/src/core/tcp_in.c ****               /* If the "next" segment is the last segment on the
1451:../lwip-1.4.1/src/core/tcp_in.c ****                  ooseq queue, we add the incoming segment to the end
1452:../lwip-1.4.1/src/core/tcp_in.c ****                  of the list. */
1453:../lwip-1.4.1/src/core/tcp_in.c ****               if (next->next == NULL &&
 4306              		.loc 1 1453 0 is_stmt 1
 4307 0c7c FB6A     		ldr	r3, [r7, #44]
 4308 0c7e 1B68     		ldr	r3, [r3]
 4309 0c80 002B     		cmp	r3, #0
 4310 0c82 40F0B680 		bne	.L233
1454:../lwip-1.4.1/src/core/tcp_in.c ****                   TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 4311              		.loc 1 1454 0 discriminator 1
 4312 0c86 0E4B     		ldr	r3, .L252+12
 4313 0c88 1A68     		ldr	r2, [r3]
 4314 0c8a FB6A     		ldr	r3, [r7, #44]
 4315 0c8c 1B69     		ldr	r3, [r3, #16]
 4316 0c8e 5B68     		ldr	r3, [r3, #4]	@ unaligned
 4317 0c90 D31A     		subs	r3, r2, r3
1453:../lwip-1.4.1/src/core/tcp_in.c ****                   TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 4318              		.loc 1 1453 0 discriminator 1
 4319 0c92 002B     		cmp	r3, #0
 4320 0c94 40F3AD80 		ble	.L233
1455:../lwip-1.4.1/src/core/tcp_in.c ****                 if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 4321              		.loc 1 1455 0
 4322 0c98 FB6A     		ldr	r3, [r7, #44]
 4323 0c9a 1B69     		ldr	r3, [r3, #16]
 4324 0c9c 9B89     		ldrh	r3, [r3, #12]	@ unaligned
 4325 0c9e 9BB2     		uxth	r3, r3
 4326 0ca0 1846     		mov	r0, r3
 4327 0ca2 FFF7FEFF 		bl	lwip_ntohs
 4328 0ca6 0346     		mov	r3, r0
 4329 0ca8 03F00103 		and	r3, r3, #1
 4330 0cac 002B     		cmp	r3, #0
 4331 0cae 09D0     		beq	.L234
1456:../lwip-1.4.1/src/core/tcp_in.c ****                   /* segment "next" already contains all data */
1457:../lwip-1.4.1/src/core/tcp_in.c ****                   break;
 4332              		.loc 1 1457 0 discriminator 25
 4333 0cb0 A8E0     		b	.L220
 4334              	.L253:
 4335 0cb2 00BF     		.align	2
 4336              	.L252:
 4337 0cb4 2C000000 		.word	recv_data
 4338 0cb8 28000000 		.word	recv_flags
 4339 0cbc 00000000 		.word	inseg
 4340 0cc0 1C000000 		.word	seqno
 4341              	.L234:
1458:../lwip-1.4.1/src/core/tcp_in.c ****                 }
1459:../lwip-1.4.1/src/core/tcp_in.c ****                 next->next = tcp_seg_copy(&inseg);
 4342              		.loc 1 1459 0
 4343 0cc4 6048     		ldr	r0, .L254
 4344 0cc6 FFF7FEFF 		bl	tcp_seg_copy
 4345 0cca 0246     		mov	r2, r0
 4346 0ccc FB6A     		ldr	r3, [r7, #44]
 4347 0cce 1A60     		str	r2, [r3]
1460:../lwip-1.4.1/src/core/tcp_in.c ****                 if (next->next != NULL) {
 4348              		.loc 1 1460 0
 4349 0cd0 FB6A     		ldr	r3, [r7, #44]
 4350 0cd2 1B68     		ldr	r3, [r3]
 4351 0cd4 002B     		cmp	r3, #0
 4352 0cd6 00F08B80 		beq	.L235
1461:../lwip-1.4.1/src/core/tcp_in.c ****                   if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 4353              		.loc 1 1461 0
 4354 0cda FB6A     		ldr	r3, [r7, #44]
 4355 0cdc 1B69     		ldr	r3, [r3, #16]
 4356 0cde 5B68     		ldr	r3, [r3, #4]	@ unaligned
 4357 0ce0 FA6A     		ldr	r2, [r7, #44]
 4358 0ce2 1289     		ldrh	r2, [r2, #8]
 4359 0ce4 1A44     		add	r2, r2, r3
 4360 0ce6 594B     		ldr	r3, .L254+4
 4361 0ce8 1B68     		ldr	r3, [r3]
 4362 0cea D31A     		subs	r3, r2, r3
 4363 0cec 002B     		cmp	r3, #0
 4364 0cee 12DD     		ble	.L236
1462:../lwip-1.4.1/src/core/tcp_in.c ****                     /* We need to trim the last segment. */
1463:../lwip-1.4.1/src/core/tcp_in.c ****                     next->len = (u16_t)(seqno - next->tcphdr->seqno);
 4365              		.loc 1 1463 0
 4366 0cf0 564B     		ldr	r3, .L254+4
 4367 0cf2 1B68     		ldr	r3, [r3]
 4368 0cf4 9AB2     		uxth	r2, r3
 4369 0cf6 FB6A     		ldr	r3, [r7, #44]
 4370 0cf8 1B69     		ldr	r3, [r3, #16]
 4371 0cfa 5B68     		ldr	r3, [r3, #4]	@ unaligned
 4372 0cfc 9BB2     		uxth	r3, r3
 4373 0cfe D31A     		subs	r3, r2, r3
 4374 0d00 9AB2     		uxth	r2, r3
 4375 0d02 FB6A     		ldr	r3, [r7, #44]
 4376 0d04 1A81     		strh	r2, [r3, #8]	@ movhi
1464:../lwip-1.4.1/src/core/tcp_in.c ****                     pbuf_realloc(next->p, next->len);
 4377              		.loc 1 1464 0
 4378 0d06 FB6A     		ldr	r3, [r7, #44]
 4379 0d08 5A68     		ldr	r2, [r3, #4]
 4380 0d0a FB6A     		ldr	r3, [r7, #44]
 4381 0d0c 1B89     		ldrh	r3, [r3, #8]
 4382 0d0e 1046     		mov	r0, r2
 4383 0d10 1946     		mov	r1, r3
 4384 0d12 FFF7FEFF 		bl	pbuf_realloc
 4385              	.L236:
1465:../lwip-1.4.1/src/core/tcp_in.c ****                   }
1466:../lwip-1.4.1/src/core/tcp_in.c ****                   /* check if the remote side overruns our receive window */
1467:../lwip-1.4.1/src/core/tcp_in.c ****                   if ((u32_t)tcplen + seqno > pcb->rcv_nxt + (u32_t)pcb->rcv_wnd) {
 4386              		.loc 1 1467 0
 4387 0d16 4E4B     		ldr	r3, .L254+8
 4388 0d18 1B88     		ldrh	r3, [r3]
 4389 0d1a 1A46     		mov	r2, r3
 4390 0d1c 4B4B     		ldr	r3, .L254+4
 4391 0d1e 1B68     		ldr	r3, [r3]
 4392 0d20 1A44     		add	r2, r2, r3
 4393 0d22 7B68     		ldr	r3, [r7, #4]
 4394 0d24 9B6A     		ldr	r3, [r3, #40]
 4395 0d26 7968     		ldr	r1, [r7, #4]
 4396 0d28 898D     		ldrh	r1, [r1, #44]
 4397 0d2a 0B44     		add	r3, r3, r1
 4398 0d2c 9A42     		cmp	r2, r3
 4399 0d2e 5FD9     		bls	.L235
1468:../lwip-1.4.1/src/core/tcp_in.c ****                     LWIP_DEBUGF(TCP_INPUT_DEBUG, 
1469:../lwip-1.4.1/src/core/tcp_in.c ****                                 ("tcp_receive: other end overran receive window"
1470:../lwip-1.4.1/src/core/tcp_in.c ****                                  "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
1471:../lwip-1.4.1/src/core/tcp_in.c ****                                  seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
1472:../lwip-1.4.1/src/core/tcp_in.c ****                     if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 4400              		.loc 1 1472 0
 4401 0d30 FB6A     		ldr	r3, [r7, #44]
 4402 0d32 1B68     		ldr	r3, [r3]
 4403 0d34 1B69     		ldr	r3, [r3, #16]
 4404 0d36 9B89     		ldrh	r3, [r3, #12]	@ unaligned
 4405 0d38 9BB2     		uxth	r3, r3
 4406 0d3a 1846     		mov	r0, r3
 4407 0d3c FFF7FEFF 		bl	lwip_ntohs
 4408 0d40 0346     		mov	r3, r0
 4409 0d42 03F00103 		and	r3, r3, #1
 4410 0d46 002B     		cmp	r3, #0
 4411 0d48 21D0     		beq	.L237
1473:../lwip-1.4.1/src/core/tcp_in.c ****                       /* Must remove the FIN from the header as we're trimming 
1474:../lwip-1.4.1/src/core/tcp_in.c ****                        * that byte of sequence-space from the packet */
1475:../lwip-1.4.1/src/core/tcp_in.c ****                       TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) &~ TCP_FIN)
 4412              		.loc 1 1475 0
 4413 0d4a FB6A     		ldr	r3, [r7, #44]
 4414 0d4c 1B68     		ldr	r3, [r3]
 4415 0d4e 1C69     		ldr	r4, [r3, #16]
 4416 0d50 FB6A     		ldr	r3, [r7, #44]
 4417 0d52 1B68     		ldr	r3, [r3]
 4418 0d54 1B69     		ldr	r3, [r3, #16]
 4419 0d56 9B89     		ldrh	r3, [r3, #12]	@ unaligned
 4420 0d58 9BB2     		uxth	r3, r3
 4421 0d5a 9BB2     		uxth	r3, r3
 4422 0d5c 23F47C53 		bic	r3, r3, #16128
 4423 0d60 9DB2     		uxth	r5, r3
 4424 0d62 FB6A     		ldr	r3, [r7, #44]
 4425 0d64 1B68     		ldr	r3, [r3]
 4426 0d66 1B69     		ldr	r3, [r3, #16]
 4427 0d68 9B89     		ldrh	r3, [r3, #12]	@ unaligned
 4428 0d6a 9BB2     		uxth	r3, r3
 4429 0d6c 1846     		mov	r0, r3
 4430 0d6e FFF7FEFF 		bl	lwip_ntohs
 4431 0d72 0346     		mov	r3, r0
 4432 0d74 03F03E03 		and	r3, r3, #62
 4433 0d78 9BB2     		uxth	r3, r3
 4434 0d7a 1846     		mov	r0, r3
 4435 0d7c FFF7FEFF 		bl	lwip_htons
 4436 0d80 0346     		mov	r3, r0
 4437 0d82 9BB2     		uxth	r3, r3
 4438 0d84 2A46     		mov	r2, r5	@ movhi
 4439 0d86 1343     		orrs	r3, r3, r2
 4440 0d88 9BB2     		uxth	r3, r3
 4441 0d8a 9BB2     		uxth	r3, r3
 4442 0d8c A381     		strh	r3, [r4, #12]	@ unaligned
 4443              	.L237:
1476:../lwip-1.4.1/src/core/tcp_in.c ****                     }
1477:../lwip-1.4.1/src/core/tcp_in.c ****                     /* Adjust length of segment to fit in the window. */
1478:../lwip-1.4.1/src/core/tcp_in.c ****                     next->next->len = pcb->rcv_nxt + pcb->rcv_wnd - seqno;
 4444              		.loc 1 1478 0
 4445 0d8e FB6A     		ldr	r3, [r7, #44]
 4446 0d90 1B68     		ldr	r3, [r3]
 4447 0d92 7A68     		ldr	r2, [r7, #4]
 4448 0d94 926A     		ldr	r2, [r2, #40]
 4449 0d96 91B2     		uxth	r1, r2
 4450 0d98 7A68     		ldr	r2, [r7, #4]
 4451 0d9a 928D     		ldrh	r2, [r2, #44]
 4452 0d9c 0A44     		add	r2, r2, r1
 4453 0d9e 91B2     		uxth	r1, r2
 4454 0da0 2A4A     		ldr	r2, .L254+4
 4455 0da2 1268     		ldr	r2, [r2]
 4456 0da4 92B2     		uxth	r2, r2
 4457 0da6 8A1A     		subs	r2, r1, r2
 4458 0da8 92B2     		uxth	r2, r2
 4459 0daa 1A81     		strh	r2, [r3, #8]	@ movhi
1479:../lwip-1.4.1/src/core/tcp_in.c ****                     pbuf_realloc(next->next->p, next->next->len);
 4460              		.loc 1 1479 0
 4461 0dac FB6A     		ldr	r3, [r7, #44]
 4462 0dae 1B68     		ldr	r3, [r3]
 4463 0db0 5A68     		ldr	r2, [r3, #4]
 4464 0db2 FB6A     		ldr	r3, [r7, #44]
 4465 0db4 1B68     		ldr	r3, [r3]
 4466 0db6 1B89     		ldrh	r3, [r3, #8]
 4467 0db8 1046     		mov	r0, r2
 4468 0dba 1946     		mov	r1, r3
 4469 0dbc FFF7FEFF 		bl	pbuf_realloc
1480:../lwip-1.4.1/src/core/tcp_in.c ****                     tcplen = TCP_TCPLEN(next->next);
 4470              		.loc 1 1480 0
 4471 0dc0 FB6A     		ldr	r3, [r7, #44]
 4472 0dc2 1B68     		ldr	r3, [r3]
 4473 0dc4 1C89     		ldrh	r4, [r3, #8]
 4474 0dc6 FB6A     		ldr	r3, [r7, #44]
 4475 0dc8 1B68     		ldr	r3, [r3]
 4476 0dca 1B69     		ldr	r3, [r3, #16]
 4477 0dcc 9B89     		ldrh	r3, [r3, #12]	@ unaligned
 4478 0dce 9BB2     		uxth	r3, r3
 4479 0dd0 1846     		mov	r0, r3
 4480 0dd2 FFF7FEFF 		bl	lwip_ntohs
 4481 0dd6 0346     		mov	r3, r0
 4482 0dd8 03F00303 		and	r3, r3, #3
 4483 0ddc 002B     		cmp	r3, #0
 4484 0dde 14BF     		ite	ne
 4485 0de0 0123     		movne	r3, #1
 4486 0de2 0023     		moveq	r3, #0
 4487 0de4 DBB2     		uxtb	r3, r3
 4488 0de6 9BB2     		uxth	r3, r3
 4489 0de8 2344     		add	r3, r3, r4
 4490 0dea 9AB2     		uxth	r2, r3
 4491 0dec 184B     		ldr	r3, .L254+8
 4492 0dee 1A80     		strh	r2, [r3]	@ movhi
 4493              	.L235:
1481:../lwip-1.4.1/src/core/tcp_in.c ****                     LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
1482:../lwip-1.4.1/src/core/tcp_in.c ****                                 (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
1483:../lwip-1.4.1/src/core/tcp_in.c ****                   }
1484:../lwip-1.4.1/src/core/tcp_in.c ****                 }
1485:../lwip-1.4.1/src/core/tcp_in.c ****                 break;
 4494              		.loc 1 1485 0 discriminator 27
 4495 0df0 08E0     		b	.L220
 4496              	.L233:
1486:../lwip-1.4.1/src/core/tcp_in.c ****               }
1487:../lwip-1.4.1/src/core/tcp_in.c ****             }
1488:../lwip-1.4.1/src/core/tcp_in.c ****             prev = next;
 4497              		.loc 1 1488 0 discriminator 2
 4498 0df2 FB6A     		ldr	r3, [r7, #44]
 4499 0df4 BB62     		str	r3, [r7, #40]
1388:../lwip-1.4.1/src/core/tcp_in.c ****             if (seqno == next->tcphdr->seqno) {
 4500              		.loc 1 1388 0 discriminator 2
 4501 0df6 FB6A     		ldr	r3, [r7, #44]
 4502 0df8 1B68     		ldr	r3, [r3]
 4503 0dfa FB62     		str	r3, [r7, #44]
 4504              	.L222:
1388:../lwip-1.4.1/src/core/tcp_in.c ****             if (seqno == next->tcphdr->seqno) {
 4505              		.loc 1 1388 0 is_stmt 0 discriminator 1
 4506 0dfc FB6A     		ldr	r3, [r7, #44]
 4507 0dfe 002B     		cmp	r3, #0
 4508 0e00 7FF4BCAE 		bne	.L238
 4509              	.L220:
1216:../lwip-1.4.1/src/core/tcp_in.c ****         /* The incoming segment is the next in sequence. We check if
 4510              		.loc 1 1216 0 is_stmt 1 discriminator 20
 4511 0e04 03E0     		b	.L239
 4512              	.L194:
1489:../lwip-1.4.1/src/core/tcp_in.c ****           }
1490:../lwip-1.4.1/src/core/tcp_in.c ****         }
1491:../lwip-1.4.1/src/core/tcp_in.c **** #if TCP_OOSEQ_MAX_BYTES || TCP_OOSEQ_MAX_PBUFS
1492:../lwip-1.4.1/src/core/tcp_in.c ****         /* Check that the data on ooseq doesn't exceed one of the limits
1493:../lwip-1.4.1/src/core/tcp_in.c ****            and throw away everything above that limit. */
1494:../lwip-1.4.1/src/core/tcp_in.c ****         ooseq_blen = 0;
1495:../lwip-1.4.1/src/core/tcp_in.c ****         ooseq_qlen = 0;
1496:../lwip-1.4.1/src/core/tcp_in.c ****         prev = NULL;
1497:../lwip-1.4.1/src/core/tcp_in.c ****         for(next = pcb->ooseq; next != NULL; prev = next, next = next->next) {
1498:../lwip-1.4.1/src/core/tcp_in.c ****           struct pbuf *p = next->p;
1499:../lwip-1.4.1/src/core/tcp_in.c ****           ooseq_blen += p->tot_len;
1500:../lwip-1.4.1/src/core/tcp_in.c ****           ooseq_qlen += pbuf_clen(p);
1501:../lwip-1.4.1/src/core/tcp_in.c ****           if ((ooseq_blen > TCP_OOSEQ_MAX_BYTES) ||
1502:../lwip-1.4.1/src/core/tcp_in.c ****               (ooseq_qlen > TCP_OOSEQ_MAX_PBUFS)) {
1503:../lwip-1.4.1/src/core/tcp_in.c ****              /* too much ooseq data, dump this and everything after it */
1504:../lwip-1.4.1/src/core/tcp_in.c ****              tcp_segs_free(next);
1505:../lwip-1.4.1/src/core/tcp_in.c ****              if (prev == NULL) {
1506:../lwip-1.4.1/src/core/tcp_in.c ****                /* first ooseq segment is too much, dump the whole queue */
1507:../lwip-1.4.1/src/core/tcp_in.c ****                pcb->ooseq = NULL;
1508:../lwip-1.4.1/src/core/tcp_in.c ****              } else {
1509:../lwip-1.4.1/src/core/tcp_in.c ****                /* just dump 'next' and everything after it */
1510:../lwip-1.4.1/src/core/tcp_in.c ****                prev->next = NULL;
1511:../lwip-1.4.1/src/core/tcp_in.c ****              }
1512:../lwip-1.4.1/src/core/tcp_in.c ****              break;
1513:../lwip-1.4.1/src/core/tcp_in.c ****           }
1514:../lwip-1.4.1/src/core/tcp_in.c ****         }
1515:../lwip-1.4.1/src/core/tcp_in.c **** #endif /* TCP_OOSEQ_MAX_BYTES || TCP_OOSEQ_MAX_PBUFS */
1516:../lwip-1.4.1/src/core/tcp_in.c **** #endif /* TCP_QUEUE_OOSEQ */
1517:../lwip-1.4.1/src/core/tcp_in.c ****       }
1518:../lwip-1.4.1/src/core/tcp_in.c ****     } else {
1519:../lwip-1.4.1/src/core/tcp_in.c ****       /* The incoming segment is not withing the window. */
1520:../lwip-1.4.1/src/core/tcp_in.c ****       tcp_send_empty_ack(pcb);
 4513              		.loc 1 1520 0
 4514 0e06 7868     		ldr	r0, [r7, #4]
 4515 0e08 FFF7FEFF 		bl	tcp_send_empty_ack
1214:../lwip-1.4.1/src/core/tcp_in.c ****                         pcb->rcv_nxt + pcb->rcv_wnd - 1)){
 4516              		.loc 1 1214 0
 4517 0e0c 19E0     		b	.L153
 4518              	.L239:
1214:../lwip-1.4.1/src/core/tcp_in.c ****                         pcb->rcv_nxt + pcb->rcv_wnd - 1)){
 4519              		.loc 1 1214 0 is_stmt 0 discriminator 28
 4520 0e0e 18E0     		b	.L153
 4521              	.L187:
1521:../lwip-1.4.1/src/core/tcp_in.c ****     }
1522:../lwip-1.4.1/src/core/tcp_in.c ****   } else {
1523:../lwip-1.4.1/src/core/tcp_in.c ****     /* Segments with length 0 is taken care of here. Segments that
1524:../lwip-1.4.1/src/core/tcp_in.c ****        fall out of the window are ACKed. */
1525:../lwip-1.4.1/src/core/tcp_in.c ****     /*if (TCP_SEQ_GT(pcb->rcv_nxt, seqno) ||
1526:../lwip-1.4.1/src/core/tcp_in.c ****       TCP_SEQ_GEQ(seqno, pcb->rcv_nxt + pcb->rcv_wnd)) {*/
1527:../lwip-1.4.1/src/core/tcp_in.c ****     if(!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd-1)){
 4522              		.loc 1 1527 0 is_stmt 1
 4523 0e10 0E4B     		ldr	r3, .L254+4
 4524 0e12 1A68     		ldr	r2, [r3]
 4525 0e14 7B68     		ldr	r3, [r7, #4]
 4526 0e16 9B6A     		ldr	r3, [r3, #40]
 4527 0e18 D31A     		subs	r3, r2, r3
 4528 0e1a 002B     		cmp	r3, #0
 4529 0e1c 0ADB     		blt	.L241
 4530              		.loc 1 1527 0 is_stmt 0 discriminator 1
 4531 0e1e 0B4B     		ldr	r3, .L254+4
 4532 0e20 1A68     		ldr	r2, [r3]
 4533 0e22 7B68     		ldr	r3, [r7, #4]
 4534 0e24 9B6A     		ldr	r3, [r3, #40]
 4535 0e26 7968     		ldr	r1, [r7, #4]
 4536 0e28 898D     		ldrh	r1, [r1, #44]
 4537 0e2a 0B44     		add	r3, r3, r1
 4538 0e2c D31A     		subs	r3, r2, r3
 4539 0e2e 0133     		adds	r3, r3, #1
 4540 0e30 002B     		cmp	r3, #0
 4541 0e32 06DD     		ble	.L153
 4542              	.L241:
1528:../lwip-1.4.1/src/core/tcp_in.c ****       tcp_ack_now(pcb);
 4543              		.loc 1 1528 0 is_stmt 1
 4544 0e34 7B68     		ldr	r3, [r7, #4]
 4545 0e36 9B7F     		ldrb	r3, [r3, #30]	@ zero_extendqisi2
 4546 0e38 43F00203 		orr	r3, r3, #2
 4547 0e3c DAB2     		uxtb	r2, r3
 4548 0e3e 7B68     		ldr	r3, [r7, #4]
 4549 0e40 9A77     		strb	r2, [r3, #30]
 4550              	.L153:
1529:../lwip-1.4.1/src/core/tcp_in.c ****     }
1530:../lwip-1.4.1/src/core/tcp_in.c ****   }
1531:../lwip-1.4.1/src/core/tcp_in.c **** }
 4551              		.loc 1 1531 0
 4552 0e42 3437     		adds	r7, r7, #52
 4553              		.cfi_def_cfa_offset 20
 4554 0e44 BD46     		mov	sp, r7
 4555              		.cfi_def_cfa_register 13
 4556              		@ sp needed
 4557 0e46 F0BD     		pop	{r4, r5, r6, r7, pc}
 4558              	.L255:
 4559              		.align	2
 4560              	.L254:
 4561 0e48 00000000 		.word	inseg
 4562 0e4c 1C000000 		.word	seqno
 4563 0e50 26000000 		.word	tcplen
 4564              		.cfi_endproc
 4565              	.LFE5:
 4567              		.section	.text.tcp_parseopt,"ax",%progbits
 4568              		.align	2
 4569              		.thumb
 4570              		.thumb_func
 4572              	tcp_parseopt:
 4573              	.LFB6:
1532:../lwip-1.4.1/src/core/tcp_in.c **** 
1533:../lwip-1.4.1/src/core/tcp_in.c **** /**
1534:../lwip-1.4.1/src/core/tcp_in.c ****  * Parses the options contained in the incoming segment. 
1535:../lwip-1.4.1/src/core/tcp_in.c ****  *
1536:../lwip-1.4.1/src/core/tcp_in.c ****  * Called from tcp_listen_input() and tcp_process().
1537:../lwip-1.4.1/src/core/tcp_in.c ****  * Currently, only the MSS option is supported!
1538:../lwip-1.4.1/src/core/tcp_in.c ****  *
1539:../lwip-1.4.1/src/core/tcp_in.c ****  * @param pcb the tcp_pcb for which a segment arrived
1540:../lwip-1.4.1/src/core/tcp_in.c ****  */
1541:../lwip-1.4.1/src/core/tcp_in.c **** static void
1542:../lwip-1.4.1/src/core/tcp_in.c **** tcp_parseopt(struct tcp_pcb *pcb)
1543:../lwip-1.4.1/src/core/tcp_in.c **** {
 4574              		.loc 1 1543 0
 4575              		.cfi_startproc
 4576              		@ args = 0, pretend = 0, frame = 24
 4577              		@ frame_needed = 1, uses_anonymous_args = 0
 4578 0000 80B5     		push	{r7, lr}
 4579              		.cfi_def_cfa_offset 8
 4580              		.cfi_offset 7, -8
 4581              		.cfi_offset 14, -4
 4582 0002 86B0     		sub	sp, sp, #24
 4583              		.cfi_def_cfa_offset 32
 4584 0004 00AF     		add	r7, sp, #0
 4585              		.cfi_def_cfa_register 7
 4586 0006 7860     		str	r0, [r7, #4]
1544:../lwip-1.4.1/src/core/tcp_in.c ****   u16_t c, max_c;
1545:../lwip-1.4.1/src/core/tcp_in.c ****   u16_t mss;
1546:../lwip-1.4.1/src/core/tcp_in.c ****   u8_t *opts, opt;
1547:../lwip-1.4.1/src/core/tcp_in.c **** #if LWIP_TCP_TIMESTAMPS
1548:../lwip-1.4.1/src/core/tcp_in.c ****   u32_t tsval;
1549:../lwip-1.4.1/src/core/tcp_in.c **** #endif
1550:../lwip-1.4.1/src/core/tcp_in.c **** 
1551:../lwip-1.4.1/src/core/tcp_in.c ****   opts = (u8_t *)tcphdr + TCP_HLEN;
 4587              		.loc 1 1551 0
 4588 0008 3D4B     		ldr	r3, .L271
 4589 000a 1B68     		ldr	r3, [r3]
 4590 000c 1433     		adds	r3, r3, #20
 4591 000e 3B61     		str	r3, [r7, #16]
1552:../lwip-1.4.1/src/core/tcp_in.c **** 
1553:../lwip-1.4.1/src/core/tcp_in.c ****   /* Parse the TCP MSS option, if present. */
1554:../lwip-1.4.1/src/core/tcp_in.c ****   if(TCPH_HDRLEN(tcphdr) > 0x5) {
 4592              		.loc 1 1554 0
 4593 0010 3B4B     		ldr	r3, .L271
 4594 0012 1B68     		ldr	r3, [r3]
 4595 0014 9B89     		ldrh	r3, [r3, #12]	@ unaligned
 4596 0016 9BB2     		uxth	r3, r3
 4597 0018 1846     		mov	r0, r3
 4598 001a FFF7FEFF 		bl	lwip_ntohs
 4599 001e 0346     		mov	r3, r0
 4600 0020 1B0B     		lsrs	r3, r3, #12
 4601 0022 9BB2     		uxth	r3, r3
 4602 0024 052B     		cmp	r3, #5
 4603 0026 68D9     		bls	.L256
1555:../lwip-1.4.1/src/core/tcp_in.c ****     max_c = (TCPH_HDRLEN(tcphdr) - 5) << 2;
 4604              		.loc 1 1555 0
 4605 0028 354B     		ldr	r3, .L271
 4606 002a 1B68     		ldr	r3, [r3]
 4607 002c 9B89     		ldrh	r3, [r3, #12]	@ unaligned
 4608 002e 9BB2     		uxth	r3, r3
 4609 0030 1846     		mov	r0, r3
 4610 0032 FFF7FEFF 		bl	lwip_ntohs
 4611 0036 0346     		mov	r3, r0
 4612 0038 1B0B     		lsrs	r3, r3, #12
 4613 003a 9BB2     		uxth	r3, r3
 4614 003c 053B     		subs	r3, r3, #5
 4615 003e 9BB2     		uxth	r3, r3
 4616 0040 9B00     		lsls	r3, r3, #2
 4617 0042 FB81     		strh	r3, [r7, #14]	@ movhi
1556:../lwip-1.4.1/src/core/tcp_in.c ****     for (c = 0; c < max_c; ) {
 4618              		.loc 1 1556 0
 4619 0044 0023     		movs	r3, #0
 4620 0046 FB82     		strh	r3, [r7, #22]	@ movhi
 4621 0048 51E0     		b	.L258
 4622              	.L268:
1557:../lwip-1.4.1/src/core/tcp_in.c ****       opt = opts[c];
 4623              		.loc 1 1557 0
 4624 004a FB8A     		ldrh	r3, [r7, #22]
 4625 004c 3A69     		ldr	r2, [r7, #16]
 4626 004e 1344     		add	r3, r3, r2
 4627 0050 1B78     		ldrb	r3, [r3]
 4628 0052 7B73     		strb	r3, [r7, #13]
1558:../lwip-1.4.1/src/core/tcp_in.c ****       switch (opt) {
 4629              		.loc 1 1558 0
 4630 0054 7B7B     		ldrb	r3, [r7, #13]	@ zero_extendqisi2
 4631 0056 012B     		cmp	r3, #1
 4632 0058 04D0     		beq	.L260
 4633 005a 022B     		cmp	r3, #2
 4634 005c 06D0     		beq	.L261
 4635 005e 002B     		cmp	r3, #0
 4636 0060 4AD0     		beq	.L270
 4637 0062 33E0     		b	.L269
 4638              	.L260:
1559:../lwip-1.4.1/src/core/tcp_in.c ****       case 0x00:
1560:../lwip-1.4.1/src/core/tcp_in.c ****         /* End of options. */
1561:../lwip-1.4.1/src/core/tcp_in.c ****         LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: EOL\n"));
1562:../lwip-1.4.1/src/core/tcp_in.c ****         return;
1563:../lwip-1.4.1/src/core/tcp_in.c ****       case 0x01:
1564:../lwip-1.4.1/src/core/tcp_in.c ****         /* NOP option. */
1565:../lwip-1.4.1/src/core/tcp_in.c ****         ++c;
 4639              		.loc 1 1565 0
 4640 0064 FB8A     		ldrh	r3, [r7, #22]	@ movhi
 4641 0066 0133     		adds	r3, r3, #1
 4642 0068 FB82     		strh	r3, [r7, #22]	@ movhi
1566:../lwip-1.4.1/src/core/tcp_in.c ****         LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
1567:../lwip-1.4.1/src/core/tcp_in.c ****         break;
 4643              		.loc 1 1567 0
 4644 006a 40E0     		b	.L258
 4645              	.L261:
1568:../lwip-1.4.1/src/core/tcp_in.c ****       case 0x02:
1569:../lwip-1.4.1/src/core/tcp_in.c ****         LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
1570:../lwip-1.4.1/src/core/tcp_in.c ****         if (opts[c + 1] != 0x04 || c + 0x04 > max_c) {
 4646              		.loc 1 1570 0
 4647 006c FB8A     		ldrh	r3, [r7, #22]
 4648 006e 0133     		adds	r3, r3, #1
 4649 0070 3A69     		ldr	r2, [r7, #16]
 4650 0072 1344     		add	r3, r3, r2
 4651 0074 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 4652 0076 042B     		cmp	r3, #4
 4653 0078 04D1     		bne	.L263
 4654              		.loc 1 1570 0 is_stmt 0 discriminator 1
 4655 007a FB8A     		ldrh	r3, [r7, #22]
 4656 007c 1A1D     		adds	r2, r3, #4
 4657 007e FB89     		ldrh	r3, [r7, #14]
 4658 0080 9A42     		cmp	r2, r3
 4659 0082 00DD     		ble	.L264
 4660              	.L263:
1571:../lwip-1.4.1/src/core/tcp_in.c ****           /* Bad length */
1572:../lwip-1.4.1/src/core/tcp_in.c ****           LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
1573:../lwip-1.4.1/src/core/tcp_in.c ****           return;
 4661              		.loc 1 1573 0 is_stmt 1 discriminator 6
 4662 0084 39E0     		b	.L256
 4663              	.L264:
1574:../lwip-1.4.1/src/core/tcp_in.c ****         }
1575:../lwip-1.4.1/src/core/tcp_in.c ****         /* An MSS option with the right option length. */
1576:../lwip-1.4.1/src/core/tcp_in.c ****         mss = (opts[c + 2] << 8) | opts[c + 3];
 4664              		.loc 1 1576 0
 4665 0086 FB8A     		ldrh	r3, [r7, #22]
 4666 0088 0233     		adds	r3, r3, #2
 4667 008a 3A69     		ldr	r2, [r7, #16]
 4668 008c 1344     		add	r3, r3, r2
 4669 008e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 4670 0090 1B02     		lsls	r3, r3, #8
 4671 0092 99B2     		uxth	r1, r3
 4672 0094 FB8A     		ldrh	r3, [r7, #22]
 4673 0096 0333     		adds	r3, r3, #3
 4674 0098 3A69     		ldr	r2, [r7, #16]
 4675 009a 1344     		add	r3, r3, r2
 4676 009c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 4677 009e 9BB2     		uxth	r3, r3
 4678 00a0 0A46     		mov	r2, r1	@ movhi
 4679 00a2 1343     		orrs	r3, r3, r2
 4680 00a4 9BB2     		uxth	r3, r3
 4681 00a6 7B81     		strh	r3, [r7, #10]	@ movhi
1577:../lwip-1.4.1/src/core/tcp_in.c ****         /* Limit the mss to the configured TCP_MSS and prevent division by zero */
1578:../lwip-1.4.1/src/core/tcp_in.c ****         pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 4682              		.loc 1 1578 0
 4683 00a8 7B89     		ldrh	r3, [r7, #10]
 4684 00aa 40F2B452 		movw	r2, #1460
 4685 00ae 9342     		cmp	r3, r2
 4686 00b0 04D8     		bhi	.L265
 4687              		.loc 1 1578 0 is_stmt 0 discriminator 1
 4688 00b2 7B89     		ldrh	r3, [r7, #10]
 4689 00b4 002B     		cmp	r3, #0
 4690 00b6 01D0     		beq	.L265
 4691              		.loc 1 1578 0 discriminator 3
 4692 00b8 7A89     		ldrh	r2, [r7, #10]
 4693 00ba 01E0     		b	.L266
 4694              	.L265:
 4695              		.loc 1 1578 0 discriminator 4
 4696 00bc 40F2B452 		movw	r2, #1460
 4697              	.L266:
 4698              		.loc 1 1578 0 discriminator 6
 4699 00c0 7B68     		ldr	r3, [r7, #4]
 4700 00c2 DA86     		strh	r2, [r3, #54]	@ movhi
1579:../lwip-1.4.1/src/core/tcp_in.c ****         /* Advance to next option */
1580:../lwip-1.4.1/src/core/tcp_in.c ****         c += 0x04;
 4701              		.loc 1 1580 0 is_stmt 1 discriminator 6
 4702 00c4 FB8A     		ldrh	r3, [r7, #22]	@ movhi
 4703 00c6 0433     		adds	r3, r3, #4
 4704 00c8 FB82     		strh	r3, [r7, #22]	@ movhi
1581:../lwip-1.4.1/src/core/tcp_in.c ****         break;
 4705              		.loc 1 1581 0 discriminator 6
 4706 00ca 10E0     		b	.L258
 4707              	.L269:
1582:../lwip-1.4.1/src/core/tcp_in.c **** #if LWIP_TCP_TIMESTAMPS
1583:../lwip-1.4.1/src/core/tcp_in.c ****       case 0x08:
1584:../lwip-1.4.1/src/core/tcp_in.c ****         LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: TS\n"));
1585:../lwip-1.4.1/src/core/tcp_in.c ****         if (opts[c + 1] != 0x0A || c + 0x0A > max_c) {
1586:../lwip-1.4.1/src/core/tcp_in.c ****           /* Bad length */
1587:../lwip-1.4.1/src/core/tcp_in.c ****           LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
1588:../lwip-1.4.1/src/core/tcp_in.c ****           return;
1589:../lwip-1.4.1/src/core/tcp_in.c ****         }
1590:../lwip-1.4.1/src/core/tcp_in.c ****         /* TCP timestamp option with valid length */
1591:../lwip-1.4.1/src/core/tcp_in.c ****         tsval = (opts[c+2]) | (opts[c+3] << 8) | 
1592:../lwip-1.4.1/src/core/tcp_in.c ****           (opts[c+4] << 16) | (opts[c+5] << 24);
1593:../lwip-1.4.1/src/core/tcp_in.c ****         if (flags & TCP_SYN) {
1594:../lwip-1.4.1/src/core/tcp_in.c ****           pcb->ts_recent = ntohl(tsval);
1595:../lwip-1.4.1/src/core/tcp_in.c ****           pcb->flags |= TF_TIMESTAMP;
1596:../lwip-1.4.1/src/core/tcp_in.c ****         } else if (TCP_SEQ_BETWEEN(pcb->ts_lastacksent, seqno, seqno+tcplen)) {
1597:../lwip-1.4.1/src/core/tcp_in.c ****           pcb->ts_recent = ntohl(tsval);
1598:../lwip-1.4.1/src/core/tcp_in.c ****         }
1599:../lwip-1.4.1/src/core/tcp_in.c ****         /* Advance to next option */
1600:../lwip-1.4.1/src/core/tcp_in.c ****         c += 0x0A;
1601:../lwip-1.4.1/src/core/tcp_in.c ****         break;
1602:../lwip-1.4.1/src/core/tcp_in.c **** #endif
1603:../lwip-1.4.1/src/core/tcp_in.c ****       default:
1604:../lwip-1.4.1/src/core/tcp_in.c ****         LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
1605:../lwip-1.4.1/src/core/tcp_in.c ****         if (opts[c + 1] == 0) {
 4708              		.loc 1 1605 0
 4709 00cc FB8A     		ldrh	r3, [r7, #22]
 4710 00ce 0133     		adds	r3, r3, #1
 4711 00d0 3A69     		ldr	r2, [r7, #16]
 4712 00d2 1344     		add	r3, r3, r2
 4713 00d4 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 4714 00d6 002B     		cmp	r3, #0
 4715 00d8 00D1     		bne	.L267
1606:../lwip-1.4.1/src/core/tcp_in.c ****           LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
1607:../lwip-1.4.1/src/core/tcp_in.c ****           /* If the length field is zero, the options are malformed
1608:../lwip-1.4.1/src/core/tcp_in.c ****              and we don't process them further. */
1609:../lwip-1.4.1/src/core/tcp_in.c ****           return;
 4716              		.loc 1 1609 0 discriminator 9
 4717 00da 0EE0     		b	.L256
 4718              	.L267:
1610:../lwip-1.4.1/src/core/tcp_in.c ****         }
1611:../lwip-1.4.1/src/core/tcp_in.c ****         /* All other options have a length field, so that we easily
1612:../lwip-1.4.1/src/core/tcp_in.c ****            can skip past them. */
1613:../lwip-1.4.1/src/core/tcp_in.c ****         c += opts[c + 1];
 4719              		.loc 1 1613 0
 4720 00dc FB8A     		ldrh	r3, [r7, #22]
 4721 00de 0133     		adds	r3, r3, #1
 4722 00e0 3A69     		ldr	r2, [r7, #16]
 4723 00e2 1344     		add	r3, r3, r2
 4724 00e4 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 4725 00e6 9AB2     		uxth	r2, r3
 4726 00e8 FB8A     		ldrh	r3, [r7, #22]	@ movhi
 4727 00ea 1344     		add	r3, r3, r2
 4728 00ec FB82     		strh	r3, [r7, #22]	@ movhi
 4729              	.L258:
1556:../lwip-1.4.1/src/core/tcp_in.c ****       opt = opts[c];
 4730              		.loc 1 1556 0 discriminator 1
 4731 00ee FA8A     		ldrh	r2, [r7, #22]
 4732 00f0 FB89     		ldrh	r3, [r7, #14]
 4733 00f2 9A42     		cmp	r2, r3
 4734 00f4 A9D3     		bcc	.L268
 4735 00f6 00E0     		b	.L256
 4736              	.L270:
1562:../lwip-1.4.1/src/core/tcp_in.c ****       case 0x01:
 4737              		.loc 1 1562 0
 4738 00f8 00BF     		nop
 4739              	.L256:
1614:../lwip-1.4.1/src/core/tcp_in.c ****       }
1615:../lwip-1.4.1/src/core/tcp_in.c ****     }
1616:../lwip-1.4.1/src/core/tcp_in.c ****   }
1617:../lwip-1.4.1/src/core/tcp_in.c **** }
 4740              		.loc 1 1617 0
 4741 00fa 1837     		adds	r7, r7, #24
 4742              		.cfi_def_cfa_offset 8
 4743 00fc BD46     		mov	sp, r7
 4744              		.cfi_def_cfa_register 13
 4745              		@ sp needed
 4746 00fe 80BD     		pop	{r7, pc}
 4747              	.L272:
 4748              		.align	2
 4749              	.L271:
 4750 0100 14000000 		.word	tcphdr
 4751              		.cfi_endproc
 4752              	.LFE6:
 4754              		.text
 4755              	.Letext0:
 4756              		.file 2 "F:\\ARM\\STM32 Eclipse Firmware\\STM32F107_Template\\lwip-1.4.1\\port/arch/cc.h"
 4757              		.file 3 "F:\\ARM\\STM32 Eclipse Firmware\\STM32F107_Template\\lwip-1.4.1\\src\\include/lwip/mem.h"
 4758              		.file 4 "F:\\ARM\\STM32 Eclipse Firmware\\STM32F107_Template\\lwip-1.4.1\\src\\include/lwip/err.h"
 4759              		.file 5 "F:\\ARM\\STM32 Eclipse Firmware\\STM32F107_Template\\lwip-1.4.1\\src\\include/lwip/pbuf.h
 4760              		.file 6 "F:\\ARM\\STM32 Eclipse Firmware\\STM32F107_Template\\lwip-1.4.1\\src\\include\\ipv4/lwip/
 4761              		.file 7 "F:\\ARM\\STM32 Eclipse Firmware\\STM32F107_Template\\lwip-1.4.1\\src\\include/lwip/netif.
 4762              		.file 8 "F:\\ARM\\STM32 Eclipse Firmware\\STM32F107_Template\\lwip-1.4.1\\src\\include\\ipv4/lwip/
 4763              		.file 9 "F:\\ARM\\STM32 Eclipse Firmware\\STM32F107_Template\\lwip-1.4.1\\src\\include/lwip/tcp.h"
 4764              		.file 10 "F:\\ARM\\STM32 Eclipse Firmware\\STM32F107_Template\\lwip-1.4.1\\src\\include/lwip/tcp_i
 4765              		.file 11 "F:\\ARM\\STM32 Eclipse Firmware\\STM32F107_Template\\lwip-1.4.1\\src\\include/lwip/stats
 4766              		.file 12 "F:\\ARM\\STM32 Eclipse Firmware\\STM32F107_Template\\lwip-1.4.1\\src\\include/lwip/memp.
DEFINED SYMBOLS
                            *ABS*:00000000 tcp_in.c
C:\Users\MISAKA~1.MIS\AppData\Local\Temp\cc8tq5gF.s:19     .bss:00000000 $d
C:\Users\MISAKA~1.MIS\AppData\Local\Temp\cc8tq5gF.s:20     .bss:00000000 inseg
C:\Users\MISAKA~1.MIS\AppData\Local\Temp\cc8tq5gF.s:23     .bss:00000014 tcphdr
C:\Users\MISAKA~1.MIS\AppData\Local\Temp\cc8tq5gF.s:26     .bss:00000018 iphdr
C:\Users\MISAKA~1.MIS\AppData\Local\Temp\cc8tq5gF.s:29     .bss:0000001c seqno
C:\Users\MISAKA~1.MIS\AppData\Local\Temp\cc8tq5gF.s:32     .bss:00000020 ackno
C:\Users\MISAKA~1.MIS\AppData\Local\Temp\cc8tq5gF.s:34     .bss:00000024 flags
C:\Users\MISAKA~1.MIS\AppData\Local\Temp\cc8tq5gF.s:37     .bss:00000026 tcplen
C:\Users\MISAKA~1.MIS\AppData\Local\Temp\cc8tq5gF.s:39     .bss:00000028 recv_flags
C:\Users\MISAKA~1.MIS\AppData\Local\Temp\cc8tq5gF.s:42     .bss:0000002c recv_data
                            *COM*:00000004 tcp_input_pcb
C:\Users\MISAKA~1.MIS\AppData\Local\Temp\cc8tq5gF.s:46     .text.tcp_input:00000000 $t
C:\Users\MISAKA~1.MIS\AppData\Local\Temp\cc8tq5gF.s:51     .text.tcp_input:00000000 tcp_input
C:\Users\MISAKA~1.MIS\AppData\Local\Temp\cc8tq5gF.s:1252   .text.tcp_timewait_input:00000000 tcp_timewait_input
C:\Users\MISAKA~1.MIS\AppData\Local\Temp\cc8tq5gF.s:429    .text.tcp_input:0000027c $d
C:\Users\MISAKA~1.MIS\AppData\Local\Temp\cc8tq5gF.s:443    .text.tcp_input:000002ac $t
C:\Users\MISAKA~1.MIS\AppData\Local\Temp\cc8tq5gF.s:986    .text.tcp_listen_input:00000000 tcp_listen_input
C:\Users\MISAKA~1.MIS\AppData\Local\Temp\cc8tq5gF.s:1393   .text.tcp_process:00000000 tcp_process
C:\Users\MISAKA~1.MIS\AppData\Local\Temp\cc8tq5gF.s:802    .text.tcp_input:00000518 $d
C:\Users\MISAKA~1.MIS\AppData\Local\Temp\cc8tq5gF.s:815    .text.tcp_input:00000544 $t
C:\Users\MISAKA~1.MIS\AppData\Local\Temp\cc8tq5gF.s:968    .text.tcp_input:00000648 $d
C:\Users\MISAKA~1.MIS\AppData\Local\Temp\cc8tq5gF.s:982    .text.tcp_listen_input:00000000 $t
C:\Users\MISAKA~1.MIS\AppData\Local\Temp\cc8tq5gF.s:4572   .text.tcp_parseopt:00000000 tcp_parseopt
C:\Users\MISAKA~1.MIS\AppData\Local\Temp\cc8tq5gF.s:1234   .text.tcp_listen_input:00000198 $d
C:\Users\MISAKA~1.MIS\AppData\Local\Temp\cc8tq5gF.s:1248   .text.tcp_timewait_input:00000000 $t
C:\Users\MISAKA~1.MIS\AppData\Local\Temp\cc8tq5gF.s:1377   .text.tcp_timewait_input:000000b8 $d
C:\Users\MISAKA~1.MIS\AppData\Local\Temp\cc8tq5gF.s:1389   .text.tcp_process:00000000 $t
C:\Users\MISAKA~1.MIS\AppData\Local\Temp\cc8tq5gF.s:1542   .text.tcp_process:000000e8 $d
C:\Users\MISAKA~1.MIS\AppData\Local\Temp\cc8tq5gF.s:1550   .text.tcp_process:00000108 $t
C:\Users\MISAKA~1.MIS\AppData\Local\Temp\cc8tq5gF.s:1782   .text.tcp_process:000002a4 $d
C:\Users\MISAKA~1.MIS\AppData\Local\Temp\cc8tq5gF.s:1793   .text.tcp_process:000002c8 $t
C:\Users\MISAKA~1.MIS\AppData\Local\Temp\cc8tq5gF.s:2560   .text.tcp_receive:00000000 tcp_receive
C:\Users\MISAKA~1.MIS\AppData\Local\Temp\cc8tq5gF.s:2171   .text.tcp_process:0000053c $d
C:\Users\MISAKA~1.MIS\AppData\Local\Temp\cc8tq5gF.s:2185   .text.tcp_process:0000056c $t
C:\Users\MISAKA~1.MIS\AppData\Local\Temp\cc8tq5gF.s:2385   .text.tcp_process:0000069c $d
C:\Users\MISAKA~1.MIS\AppData\Local\Temp\cc8tq5gF.s:2396   .text.tcp_oos_insert_segment:00000000 $t
C:\Users\MISAKA~1.MIS\AppData\Local\Temp\cc8tq5gF.s:2400   .text.tcp_oos_insert_segment:00000000 tcp_oos_insert_segment
C:\Users\MISAKA~1.MIS\AppData\Local\Temp\cc8tq5gF.s:2551   .text.tcp_oos_insert_segment:000000e8 $d
C:\Users\MISAKA~1.MIS\AppData\Local\Temp\cc8tq5gF.s:2556   .text.tcp_receive:00000000 $t
C:\Users\MISAKA~1.MIS\AppData\Local\Temp\cc8tq5gF.s:2927   .text.tcp_receive:000002a4 $d
C:\Users\MISAKA~1.MIS\AppData\Local\Temp\cc8tq5gF.s:2935   .text.tcp_receive:000002b8 $t
C:\Users\MISAKA~1.MIS\AppData\Local\Temp\cc8tq5gF.s:3385   .text.tcp_receive:00000600 $d
C:\Users\MISAKA~1.MIS\AppData\Local\Temp\cc8tq5gF.s:3392   .text.tcp_receive:00000614 $t
C:\Users\MISAKA~1.MIS\AppData\Local\Temp\cc8tq5gF.s:3686   .text.tcp_receive:00000830 $d
C:\Users\MISAKA~1.MIS\AppData\Local\Temp\cc8tq5gF.s:3691   .text.tcp_receive:0000083c $t
C:\Users\MISAKA~1.MIS\AppData\Local\Temp\cc8tq5gF.s:4019   .text.tcp_receive:00000a9c $d
C:\Users\MISAKA~1.MIS\AppData\Local\Temp\cc8tq5gF.s:4026   .text.tcp_receive:00000ab0 $t
C:\Users\MISAKA~1.MIS\AppData\Local\Temp\cc8tq5gF.s:4337   .text.tcp_receive:00000cb4 $d
C:\Users\MISAKA~1.MIS\AppData\Local\Temp\cc8tq5gF.s:4343   .text.tcp_receive:00000cc4 $t
C:\Users\MISAKA~1.MIS\AppData\Local\Temp\cc8tq5gF.s:4561   .text.tcp_receive:00000e48 $d
C:\Users\MISAKA~1.MIS\AppData\Local\Temp\cc8tq5gF.s:4568   .text.tcp_parseopt:00000000 $t
C:\Users\MISAKA~1.MIS\AppData\Local\Temp\cc8tq5gF.s:4750   .text.tcp_parseopt:00000100 $d
                     .debug_frame:00000010 $d
                           .group:00000000 wm4.0.2d80f1b5ce3c69d13e258577ddf29668
                           .group:00000000 wm4.lwipopts.h.25.76e03deb318fbe54d896a83c1b611e55
                           .group:00000000 wm4.arch.h.33.6fa4aa86d33d1490ae882caef7316405
                           .group:00000000 wm4.cpu.h.33.0ec64ad8cd52614da6479c7936fa3efa
                           .group:00000000 wm4.cc.h.49.217a0c46a6dd8448cb36cccbf00f897f
                           .group:00000000 wm4.arch.h.52.2e97dbd839a1aa815d8c47878a7f8e2b
                           .group:00000000 wm4.newlib.h.8.2702bca278809460f0af6fba1d84eb68
                           .group:00000000 wm4.features.h.22.2e382148a0560adabf236cddd4e880f4
                           .group:00000000 wm4.config.h.220.a09b0b0de3c25be3f39d71990e617bff
                           .group:00000000 wm4._ansi.h.23.9f8fcfa20193763fcf364fb91705c94b
                           .group:00000000 wm4.stdio.h.31.7c0e28c411445f3f9c5b11accf882760
                           .group:00000000 wm4._default_types.h.6.35ee9e747940367bf2a634907d1c2382
                           .group:00000000 wm4.stddef.h.184.159df79b4ca79c76561572a55985524c
                           .group:00000000 wm4.cdefs.h.47.3052445825803de6c3a3b68ec8193866
                           .group:00000000 wm4.stddef.h.39.7e3d906ac58942e0b374c527445f5de5
                           .group:00000000 wm4.stdarg.h.34.3a23a216c0c293b3d2ea2e89281481e6
                           .group:00000000 wm4.lock.h.2.9bc98482741e5e2a9450b12934a684ea
                           .group:00000000 wm4._types.h.54.d3d34a3b7f3cc230cd159baf022b4b08
                           .group:00000000 wm4.stddef.h.158.61317cdbfb4026324507d123a50b0fd6
                           .group:00000000 wm4.reent.h.17.8bd9e4098e0428508c282cad794fae43
                           .group:00000000 wm4.types.h.24.b2be5f53932a9c9d07787288b29b6d75
                           .group:00000000 wm4._stdint.h.10.f76354baea1c7088202064e6f3d4f5e3
                           .group:00000000 wm4.types.h.2.e9cec8c90ab35f77d9f499e06ae02400
                           .group:00000000 wm4.types.h.82.82b71f3f44c70e3a459d0f66642b05eb
                           .group:00000000 wm4.stdio.h.2.4aa87247282eca6c8f36f9de33d8df1a
                           .group:00000000 wm4.stdio.h.68.ff6d7571d3ad75c55f15e26dbaa81e35
                           .group:00000000 wm4.debug.h.45.223028a5c052c9f879ffd43dd519f3f1
                           .group:00000000 wm4.string.h.8.c4b8571ce60dff2817f43fec8b86aecd
                           .group:00000000 wm4.stddef.h.158.a7efb00f6cbc6f43213b50e183c9830c
                           .group:00000000 wm4.opt.h.76.0e16bb9c23144e1f631b5b5afa9a69f6
                           .group:00000000 wm4.mem.h.33.ae21028c0b1f3dc3305003fc71edaf5a
                           .group:00000000 wm4.err.h.33.909ff4b35439192d64931f0a04fc8fdb
                           .group:00000000 wm4.pbuf.h.45.444f43edbf93d1b2ead9ba1554355b0e
                           .group:00000000 wm4.def.h.33.d4208c3cd3e0fc64e20a8b9f95a681f3
                           .group:00000000 wm4.ip_addr.h.33.906726af218ee6749c0aa25e08c3a1fe
                           .group:00000000 wm4.netif.h.33.f0b62f0135b4c001826f0908df525042
                           .group:00000000 wm4.ip.h.48.c2e3a3e3a9e009c03a30eff6a88b0a33
                           .group:00000000 wm4.icmp.h.33.9c8da59f6edf08fae1a2f37336a6e965
                           .group:00000000 wm4.tcp.h.148.20c69d62fcb119a5d6bfd32bc982e4fb
                           .group:00000000 wm4.tcp_impl.h.84.6e9c66479f429d69332d497d793a73a6
                           .group:00000000 wm4.memp.h.34.a409f52ec6d44b5681de26eb10b0c08b
                           .group:00000000 wm4.memp_std.h.15.637bb4287b70e9d70dbd8dd3c6f62f3b
                           .group:00000000 wm4.inet_chksum.h.33.8f33e706cb8ab6b406ce83637c67c459
                           .group:00000000 wm4.stats.h.33.e4d36fe09c96bf9e2f10f7a27b9fa99f
                           .group:00000000 wm4.snmp.h.34.65cd272594ba53b669353bfbd8cfaef5
                           .group:00000000 wm4.perf.h.33.85c55671e1b7570634f49777a207ad9f

UNDEFINED SYMBOLS
pbuf_header
ip4_addr_isbroadcast
lwip_ntohs
lwip_ntohl
pbuf_free
lwip_stats
current_iphdr_dest
tcp_active_pcbs
current_iphdr_src
tcp_tw_pcbs
tcp_listen_pcbs
tcp_process_refused_data
tcp_pcb_remove
memp_free
tcp_abort
tcp_recv_null
tcp_output
tcp_rst
tcp_alloc
tcp_timer_needed
tcp_eff_send_mss
tcp_enqueue_flags
tcp_abandon
tcp_active_pcbs_changed
tcp_ticks
tcp_seg_free
tcp_rexmit
tcp_pcb_purge
tcp_tmp_pcb
tcp_segs_free
lwip_htons
pbuf_realloc
tcp_rexmit_fast
pbuf_clen
tcp_update_rcv_ann_wnd
pbuf_cat
tcp_send_empty_ack
tcp_seg_copy
