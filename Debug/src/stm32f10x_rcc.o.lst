   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 6
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.file	"stm32f10x_rcc.c"
  15              		.text
  16              	.Ltext0:
  17              		.cfi_sections	.debug_frame
  18              		.data
  19              		.align	2
  22              	APBAHBPrescTable:
  23 0000 00       		.byte	0
  24 0001 00       		.byte	0
  25 0002 00       		.byte	0
  26 0003 00       		.byte	0
  27 0004 01       		.byte	1
  28 0005 02       		.byte	2
  29 0006 03       		.byte	3
  30 0007 04       		.byte	4
  31 0008 01       		.byte	1
  32 0009 02       		.byte	2
  33 000a 03       		.byte	3
  34 000b 04       		.byte	4
  35 000c 06       		.byte	6
  36 000d 07       		.byte	7
  37 000e 08       		.byte	8
  38 000f 09       		.byte	9
  39              		.align	2
  42              	ADCPrescTable:
  43 0010 02       		.byte	2
  44 0011 04       		.byte	4
  45 0012 06       		.byte	6
  46 0013 08       		.byte	8
  47              		.section	.text.RCC_DeInit,"ax",%progbits
  48              		.align	2
  49              		.global	RCC_DeInit
  50              		.thumb
  51              		.thumb_func
  53              	RCC_DeInit:
  54              	.LFB29:
  55              		.file 1 "../src/stm32f10x_rcc.c"
   1:../src/stm32f10x_rcc.c **** /**
   2:../src/stm32f10x_rcc.c ****   ******************************************************************************
   3:../src/stm32f10x_rcc.c ****   * @file    stm32f10x_rcc.c
   4:../src/stm32f10x_rcc.c ****   * @author  MCD Application Team
   5:../src/stm32f10x_rcc.c ****   * @version V3.5.0
   6:../src/stm32f10x_rcc.c ****   * @date    11-March-2011
   7:../src/stm32f10x_rcc.c ****   * @brief   This file provides all the RCC firmware functions.
   8:../src/stm32f10x_rcc.c ****   ******************************************************************************
   9:../src/stm32f10x_rcc.c ****   * @attention
  10:../src/stm32f10x_rcc.c ****   *
  11:../src/stm32f10x_rcc.c ****   * THE PRESENT FIRMWARE WHICH IS FOR GUIDANCE ONLY AIMS AT PROVIDING CUSTOMERS
  12:../src/stm32f10x_rcc.c ****   * WITH CODING INFORMATION REGARDING THEIR PRODUCTS IN ORDER FOR THEM TO SAVE
  13:../src/stm32f10x_rcc.c ****   * TIME. AS A RESULT, STMICROELECTRONICS SHALL NOT BE HELD LIABLE FOR ANY
  14:../src/stm32f10x_rcc.c ****   * DIRECT, INDIRECT OR CONSEQUENTIAL DAMAGES WITH RESPECT TO ANY CLAIMS ARISING
  15:../src/stm32f10x_rcc.c ****   * FROM THE CONTENT OF SUCH FIRMWARE AND/OR THE USE MADE BY CUSTOMERS OF THE
  16:../src/stm32f10x_rcc.c ****   * CODING INFORMATION CONTAINED HEREIN IN CONNECTION WITH THEIR PRODUCTS.
  17:../src/stm32f10x_rcc.c ****   *
  18:../src/stm32f10x_rcc.c ****   * <h2><center>&copy; COPYRIGHT 2011 STMicroelectronics</center></h2>
  19:../src/stm32f10x_rcc.c ****   ******************************************************************************
  20:../src/stm32f10x_rcc.c ****   */
  21:../src/stm32f10x_rcc.c **** 
  22:../src/stm32f10x_rcc.c **** /* Includes ------------------------------------------------------------------*/
  23:../src/stm32f10x_rcc.c **** #include "stm32f10x_rcc.h"
  24:../src/stm32f10x_rcc.c **** 
  25:../src/stm32f10x_rcc.c **** /** @addtogroup STM32F10x_StdPeriph_Driver
  26:../src/stm32f10x_rcc.c ****   * @{
  27:../src/stm32f10x_rcc.c ****   */
  28:../src/stm32f10x_rcc.c **** 
  29:../src/stm32f10x_rcc.c **** /** @defgroup RCC 
  30:../src/stm32f10x_rcc.c ****   * @brief RCC driver modules
  31:../src/stm32f10x_rcc.c ****   * @{
  32:../src/stm32f10x_rcc.c ****   */ 
  33:../src/stm32f10x_rcc.c **** 
  34:../src/stm32f10x_rcc.c **** /** @defgroup RCC_Private_TypesDefinitions
  35:../src/stm32f10x_rcc.c ****   * @{
  36:../src/stm32f10x_rcc.c ****   */
  37:../src/stm32f10x_rcc.c **** 
  38:../src/stm32f10x_rcc.c **** /**
  39:../src/stm32f10x_rcc.c ****   * @}
  40:../src/stm32f10x_rcc.c ****   */
  41:../src/stm32f10x_rcc.c **** 
  42:../src/stm32f10x_rcc.c **** /** @defgroup RCC_Private_Defines
  43:../src/stm32f10x_rcc.c ****   * @{
  44:../src/stm32f10x_rcc.c ****   */
  45:../src/stm32f10x_rcc.c **** 
  46:../src/stm32f10x_rcc.c **** /* ------------ RCC registers bit address in the alias region ----------- */
  47:../src/stm32f10x_rcc.c **** #define RCC_OFFSET                (RCC_BASE - PERIPH_BASE)
  48:../src/stm32f10x_rcc.c **** 
  49:../src/stm32f10x_rcc.c **** /* --- CR Register ---*/
  50:../src/stm32f10x_rcc.c **** 
  51:../src/stm32f10x_rcc.c **** /* Alias word address of HSION bit */
  52:../src/stm32f10x_rcc.c **** #define CR_OFFSET                 (RCC_OFFSET + 0x00)
  53:../src/stm32f10x_rcc.c **** #define HSION_BitNumber           0x00
  54:../src/stm32f10x_rcc.c **** #define CR_HSION_BB               (PERIPH_BB_BASE + (CR_OFFSET * 32) + (HSION_BitNumber * 4))
  55:../src/stm32f10x_rcc.c **** 
  56:../src/stm32f10x_rcc.c **** /* Alias word address of PLLON bit */
  57:../src/stm32f10x_rcc.c **** #define PLLON_BitNumber           0x18
  58:../src/stm32f10x_rcc.c **** #define CR_PLLON_BB               (PERIPH_BB_BASE + (CR_OFFSET * 32) + (PLLON_BitNumber * 4))
  59:../src/stm32f10x_rcc.c **** 
  60:../src/stm32f10x_rcc.c **** #ifdef STM32F10X_CL
  61:../src/stm32f10x_rcc.c ****  /* Alias word address of PLL2ON bit */
  62:../src/stm32f10x_rcc.c ****  #define PLL2ON_BitNumber          0x1A
  63:../src/stm32f10x_rcc.c ****  #define CR_PLL2ON_BB              (PERIPH_BB_BASE + (CR_OFFSET * 32) + (PLL2ON_BitNumber * 4))
  64:../src/stm32f10x_rcc.c **** 
  65:../src/stm32f10x_rcc.c ****  /* Alias word address of PLL3ON bit */
  66:../src/stm32f10x_rcc.c ****  #define PLL3ON_BitNumber          0x1C
  67:../src/stm32f10x_rcc.c ****  #define CR_PLL3ON_BB              (PERIPH_BB_BASE + (CR_OFFSET * 32) + (PLL3ON_BitNumber * 4))
  68:../src/stm32f10x_rcc.c **** #endif /* STM32F10X_CL */ 
  69:../src/stm32f10x_rcc.c **** 
  70:../src/stm32f10x_rcc.c **** /* Alias word address of CSSON bit */
  71:../src/stm32f10x_rcc.c **** #define CSSON_BitNumber           0x13
  72:../src/stm32f10x_rcc.c **** #define CR_CSSON_BB               (PERIPH_BB_BASE + (CR_OFFSET * 32) + (CSSON_BitNumber * 4))
  73:../src/stm32f10x_rcc.c **** 
  74:../src/stm32f10x_rcc.c **** /* --- CFGR Register ---*/
  75:../src/stm32f10x_rcc.c **** 
  76:../src/stm32f10x_rcc.c **** /* Alias word address of USBPRE bit */
  77:../src/stm32f10x_rcc.c **** #define CFGR_OFFSET               (RCC_OFFSET + 0x04)
  78:../src/stm32f10x_rcc.c **** 
  79:../src/stm32f10x_rcc.c **** #ifndef STM32F10X_CL
  80:../src/stm32f10x_rcc.c ****  #define USBPRE_BitNumber          0x16
  81:../src/stm32f10x_rcc.c ****  #define CFGR_USBPRE_BB            (PERIPH_BB_BASE + (CFGR_OFFSET * 32) + (USBPRE_BitNumber * 4))
  82:../src/stm32f10x_rcc.c **** #else
  83:../src/stm32f10x_rcc.c ****  #define OTGFSPRE_BitNumber        0x16
  84:../src/stm32f10x_rcc.c ****  #define CFGR_OTGFSPRE_BB          (PERIPH_BB_BASE + (CFGR_OFFSET * 32) + (OTGFSPRE_BitNumber * 4))
  85:../src/stm32f10x_rcc.c **** #endif /* STM32F10X_CL */ 
  86:../src/stm32f10x_rcc.c **** 
  87:../src/stm32f10x_rcc.c **** /* --- BDCR Register ---*/
  88:../src/stm32f10x_rcc.c **** 
  89:../src/stm32f10x_rcc.c **** /* Alias word address of RTCEN bit */
  90:../src/stm32f10x_rcc.c **** #define BDCR_OFFSET               (RCC_OFFSET + 0x20)
  91:../src/stm32f10x_rcc.c **** #define RTCEN_BitNumber           0x0F
  92:../src/stm32f10x_rcc.c **** #define BDCR_RTCEN_BB             (PERIPH_BB_BASE + (BDCR_OFFSET * 32) + (RTCEN_BitNumber * 4))
  93:../src/stm32f10x_rcc.c **** 
  94:../src/stm32f10x_rcc.c **** /* Alias word address of BDRST bit */
  95:../src/stm32f10x_rcc.c **** #define BDRST_BitNumber           0x10
  96:../src/stm32f10x_rcc.c **** #define BDCR_BDRST_BB             (PERIPH_BB_BASE + (BDCR_OFFSET * 32) + (BDRST_BitNumber * 4))
  97:../src/stm32f10x_rcc.c **** 
  98:../src/stm32f10x_rcc.c **** /* --- CSR Register ---*/
  99:../src/stm32f10x_rcc.c **** 
 100:../src/stm32f10x_rcc.c **** /* Alias word address of LSION bit */
 101:../src/stm32f10x_rcc.c **** #define CSR_OFFSET                (RCC_OFFSET + 0x24)
 102:../src/stm32f10x_rcc.c **** #define LSION_BitNumber           0x00
 103:../src/stm32f10x_rcc.c **** #define CSR_LSION_BB              (PERIPH_BB_BASE + (CSR_OFFSET * 32) + (LSION_BitNumber * 4))
 104:../src/stm32f10x_rcc.c **** 
 105:../src/stm32f10x_rcc.c **** #ifdef STM32F10X_CL
 106:../src/stm32f10x_rcc.c **** /* --- CFGR2 Register ---*/
 107:../src/stm32f10x_rcc.c **** 
 108:../src/stm32f10x_rcc.c ****  /* Alias word address of I2S2SRC bit */
 109:../src/stm32f10x_rcc.c ****  #define CFGR2_OFFSET              (RCC_OFFSET + 0x2C)
 110:../src/stm32f10x_rcc.c ****  #define I2S2SRC_BitNumber         0x11
 111:../src/stm32f10x_rcc.c ****  #define CFGR2_I2S2SRC_BB          (PERIPH_BB_BASE + (CFGR2_OFFSET * 32) + (I2S2SRC_BitNumber * 4))
 112:../src/stm32f10x_rcc.c **** 
 113:../src/stm32f10x_rcc.c ****  /* Alias word address of I2S3SRC bit */
 114:../src/stm32f10x_rcc.c ****  #define I2S3SRC_BitNumber         0x12
 115:../src/stm32f10x_rcc.c ****  #define CFGR2_I2S3SRC_BB          (PERIPH_BB_BASE + (CFGR2_OFFSET * 32) + (I2S3SRC_BitNumber * 4))
 116:../src/stm32f10x_rcc.c **** #endif /* STM32F10X_CL */
 117:../src/stm32f10x_rcc.c **** 
 118:../src/stm32f10x_rcc.c **** /* ---------------------- RCC registers bit mask ------------------------ */
 119:../src/stm32f10x_rcc.c **** 
 120:../src/stm32f10x_rcc.c **** /* CR register bit mask */
 121:../src/stm32f10x_rcc.c **** #define CR_HSEBYP_Reset           ((uint32_t)0xFFFBFFFF)
 122:../src/stm32f10x_rcc.c **** #define CR_HSEBYP_Set             ((uint32_t)0x00040000)
 123:../src/stm32f10x_rcc.c **** #define CR_HSEON_Reset            ((uint32_t)0xFFFEFFFF)
 124:../src/stm32f10x_rcc.c **** #define CR_HSEON_Set              ((uint32_t)0x00010000)
 125:../src/stm32f10x_rcc.c **** #define CR_HSITRIM_Mask           ((uint32_t)0xFFFFFF07)
 126:../src/stm32f10x_rcc.c **** 
 127:../src/stm32f10x_rcc.c **** /* CFGR register bit mask */
 128:../src/stm32f10x_rcc.c **** #if defined (STM32F10X_LD_VL) || defined (STM32F10X_MD_VL) || defined (STM32F10X_HD_VL) || defined 
 129:../src/stm32f10x_rcc.c ****  #define CFGR_PLL_Mask            ((uint32_t)0xFFC2FFFF)
 130:../src/stm32f10x_rcc.c **** #else
 131:../src/stm32f10x_rcc.c ****  #define CFGR_PLL_Mask            ((uint32_t)0xFFC0FFFF)
 132:../src/stm32f10x_rcc.c **** #endif /* STM32F10X_CL */ 
 133:../src/stm32f10x_rcc.c **** 
 134:../src/stm32f10x_rcc.c **** #define CFGR_PLLMull_Mask         ((uint32_t)0x003C0000)
 135:../src/stm32f10x_rcc.c **** #define CFGR_PLLSRC_Mask          ((uint32_t)0x00010000)
 136:../src/stm32f10x_rcc.c **** #define CFGR_PLLXTPRE_Mask        ((uint32_t)0x00020000)
 137:../src/stm32f10x_rcc.c **** #define CFGR_SWS_Mask             ((uint32_t)0x0000000C)
 138:../src/stm32f10x_rcc.c **** #define CFGR_SW_Mask              ((uint32_t)0xFFFFFFFC)
 139:../src/stm32f10x_rcc.c **** #define CFGR_HPRE_Reset_Mask      ((uint32_t)0xFFFFFF0F)
 140:../src/stm32f10x_rcc.c **** #define CFGR_HPRE_Set_Mask        ((uint32_t)0x000000F0)
 141:../src/stm32f10x_rcc.c **** #define CFGR_PPRE1_Reset_Mask     ((uint32_t)0xFFFFF8FF)
 142:../src/stm32f10x_rcc.c **** #define CFGR_PPRE1_Set_Mask       ((uint32_t)0x00000700)
 143:../src/stm32f10x_rcc.c **** #define CFGR_PPRE2_Reset_Mask     ((uint32_t)0xFFFFC7FF)
 144:../src/stm32f10x_rcc.c **** #define CFGR_PPRE2_Set_Mask       ((uint32_t)0x00003800)
 145:../src/stm32f10x_rcc.c **** #define CFGR_ADCPRE_Reset_Mask    ((uint32_t)0xFFFF3FFF)
 146:../src/stm32f10x_rcc.c **** #define CFGR_ADCPRE_Set_Mask      ((uint32_t)0x0000C000)
 147:../src/stm32f10x_rcc.c **** 
 148:../src/stm32f10x_rcc.c **** /* CSR register bit mask */
 149:../src/stm32f10x_rcc.c **** #define CSR_RMVF_Set              ((uint32_t)0x01000000)
 150:../src/stm32f10x_rcc.c **** 
 151:../src/stm32f10x_rcc.c **** #if defined (STM32F10X_LD_VL) || defined (STM32F10X_MD_VL) || defined (STM32F10X_HD_VL) || defined 
 152:../src/stm32f10x_rcc.c **** /* CFGR2 register bit mask */
 153:../src/stm32f10x_rcc.c ****  #define CFGR2_PREDIV1SRC         ((uint32_t)0x00010000)
 154:../src/stm32f10x_rcc.c ****  #define CFGR2_PREDIV1            ((uint32_t)0x0000000F)
 155:../src/stm32f10x_rcc.c **** #endif
 156:../src/stm32f10x_rcc.c **** #ifdef STM32F10X_CL
 157:../src/stm32f10x_rcc.c ****  #define CFGR2_PREDIV2            ((uint32_t)0x000000F0)
 158:../src/stm32f10x_rcc.c ****  #define CFGR2_PLL2MUL            ((uint32_t)0x00000F00)
 159:../src/stm32f10x_rcc.c ****  #define CFGR2_PLL3MUL            ((uint32_t)0x0000F000)
 160:../src/stm32f10x_rcc.c **** #endif /* STM32F10X_CL */ 
 161:../src/stm32f10x_rcc.c **** 
 162:../src/stm32f10x_rcc.c **** /* RCC Flag Mask */
 163:../src/stm32f10x_rcc.c **** #define FLAG_Mask                 ((uint8_t)0x1F)
 164:../src/stm32f10x_rcc.c **** 
 165:../src/stm32f10x_rcc.c **** /* CIR register byte 2 (Bits[15:8]) base address */
 166:../src/stm32f10x_rcc.c **** #define CIR_BYTE2_ADDRESS         ((uint32_t)0x40021009)
 167:../src/stm32f10x_rcc.c **** 
 168:../src/stm32f10x_rcc.c **** /* CIR register byte 3 (Bits[23:16]) base address */
 169:../src/stm32f10x_rcc.c **** #define CIR_BYTE3_ADDRESS         ((uint32_t)0x4002100A)
 170:../src/stm32f10x_rcc.c **** 
 171:../src/stm32f10x_rcc.c **** /* CFGR register byte 4 (Bits[31:24]) base address */
 172:../src/stm32f10x_rcc.c **** #define CFGR_BYTE4_ADDRESS        ((uint32_t)0x40021007)
 173:../src/stm32f10x_rcc.c **** 
 174:../src/stm32f10x_rcc.c **** /* BDCR register base address */
 175:../src/stm32f10x_rcc.c **** #define BDCR_ADDRESS              (PERIPH_BASE + BDCR_OFFSET)
 176:../src/stm32f10x_rcc.c **** 
 177:../src/stm32f10x_rcc.c **** /**
 178:../src/stm32f10x_rcc.c ****   * @}
 179:../src/stm32f10x_rcc.c ****   */ 
 180:../src/stm32f10x_rcc.c **** 
 181:../src/stm32f10x_rcc.c **** /** @defgroup RCC_Private_Macros
 182:../src/stm32f10x_rcc.c ****   * @{
 183:../src/stm32f10x_rcc.c ****   */ 
 184:../src/stm32f10x_rcc.c **** 
 185:../src/stm32f10x_rcc.c **** /**
 186:../src/stm32f10x_rcc.c ****   * @}
 187:../src/stm32f10x_rcc.c ****   */ 
 188:../src/stm32f10x_rcc.c **** 
 189:../src/stm32f10x_rcc.c **** /** @defgroup RCC_Private_Variables
 190:../src/stm32f10x_rcc.c ****   * @{
 191:../src/stm32f10x_rcc.c ****   */ 
 192:../src/stm32f10x_rcc.c **** 
 193:../src/stm32f10x_rcc.c **** static __I uint8_t APBAHBPrescTable[16] = {0, 0, 0, 0, 1, 2, 3, 4, 1, 2, 3, 4, 6, 7, 8, 9};
 194:../src/stm32f10x_rcc.c **** static __I uint8_t ADCPrescTable[4] = {2, 4, 6, 8};
 195:../src/stm32f10x_rcc.c **** 
 196:../src/stm32f10x_rcc.c **** /**
 197:../src/stm32f10x_rcc.c ****   * @}
 198:../src/stm32f10x_rcc.c ****   */
 199:../src/stm32f10x_rcc.c **** 
 200:../src/stm32f10x_rcc.c **** /** @defgroup RCC_Private_FunctionPrototypes
 201:../src/stm32f10x_rcc.c ****   * @{
 202:../src/stm32f10x_rcc.c ****   */
 203:../src/stm32f10x_rcc.c **** 
 204:../src/stm32f10x_rcc.c **** /**
 205:../src/stm32f10x_rcc.c ****   * @}
 206:../src/stm32f10x_rcc.c ****   */
 207:../src/stm32f10x_rcc.c **** 
 208:../src/stm32f10x_rcc.c **** /** @defgroup RCC_Private_Functions
 209:../src/stm32f10x_rcc.c ****   * @{
 210:../src/stm32f10x_rcc.c ****   */
 211:../src/stm32f10x_rcc.c **** 
 212:../src/stm32f10x_rcc.c **** /**
 213:../src/stm32f10x_rcc.c ****   * @brief  Resets the RCC clock configuration to the default reset state.
 214:../src/stm32f10x_rcc.c ****   * @param  None
 215:../src/stm32f10x_rcc.c ****   * @retval None
 216:../src/stm32f10x_rcc.c ****   */
 217:../src/stm32f10x_rcc.c **** void RCC_DeInit(void)
 218:../src/stm32f10x_rcc.c **** {
  56              		.loc 1 218 0
  57              		.cfi_startproc
  58              		@ args = 0, pretend = 0, frame = 0
  59              		@ frame_needed = 1, uses_anonymous_args = 0
  60              		@ link register save eliminated.
  61 0000 80B4     		push	{r7}
  62              		.cfi_def_cfa_offset 4
  63              		.cfi_offset 7, -4
  64 0002 00AF     		add	r7, sp, #0
  65              		.cfi_def_cfa_register 7
 219:../src/stm32f10x_rcc.c ****   /* Set HSION bit */
 220:../src/stm32f10x_rcc.c ****   RCC->CR |= (uint32_t)0x00000001;
  66              		.loc 1 220 0
  67 0004 184A     		ldr	r2, .L2
  68 0006 184B     		ldr	r3, .L2
  69 0008 1B68     		ldr	r3, [r3]
  70 000a 43F00103 		orr	r3, r3, #1
  71 000e 1360     		str	r3, [r2]
 221:../src/stm32f10x_rcc.c **** 
 222:../src/stm32f10x_rcc.c ****   /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
 223:../src/stm32f10x_rcc.c **** #ifndef STM32F10X_CL
 224:../src/stm32f10x_rcc.c ****   RCC->CFGR &= (uint32_t)0xF8FF0000;
 225:../src/stm32f10x_rcc.c **** #else
 226:../src/stm32f10x_rcc.c ****   RCC->CFGR &= (uint32_t)0xF0FF0000;
  72              		.loc 1 226 0
  73 0010 1549     		ldr	r1, .L2
  74 0012 154B     		ldr	r3, .L2
  75 0014 5A68     		ldr	r2, [r3, #4]
  76 0016 154B     		ldr	r3, .L2+4
  77 0018 1340     		ands	r3, r3, r2
  78 001a 4B60     		str	r3, [r1, #4]
 227:../src/stm32f10x_rcc.c **** #endif /* STM32F10X_CL */   
 228:../src/stm32f10x_rcc.c ****   
 229:../src/stm32f10x_rcc.c ****   /* Reset HSEON, CSSON and PLLON bits */
 230:../src/stm32f10x_rcc.c ****   RCC->CR &= (uint32_t)0xFEF6FFFF;
  79              		.loc 1 230 0
  80 001c 124A     		ldr	r2, .L2
  81 001e 124B     		ldr	r3, .L2
  82 0020 1B68     		ldr	r3, [r3]
  83 0022 23F08473 		bic	r3, r3, #17301504
  84 0026 23F48033 		bic	r3, r3, #65536
  85 002a 1360     		str	r3, [r2]
 231:../src/stm32f10x_rcc.c **** 
 232:../src/stm32f10x_rcc.c ****   /* Reset HSEBYP bit */
 233:../src/stm32f10x_rcc.c ****   RCC->CR &= (uint32_t)0xFFFBFFFF;
  86              		.loc 1 233 0
  87 002c 0E4A     		ldr	r2, .L2
  88 002e 0E4B     		ldr	r3, .L2
  89 0030 1B68     		ldr	r3, [r3]
  90 0032 23F48023 		bic	r3, r3, #262144
  91 0036 1360     		str	r3, [r2]
 234:../src/stm32f10x_rcc.c **** 
 235:../src/stm32f10x_rcc.c ****   /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
 236:../src/stm32f10x_rcc.c ****   RCC->CFGR &= (uint32_t)0xFF80FFFF;
  92              		.loc 1 236 0
  93 0038 0B4A     		ldr	r2, .L2
  94 003a 0B4B     		ldr	r3, .L2
  95 003c 5B68     		ldr	r3, [r3, #4]
  96 003e 23F4FE03 		bic	r3, r3, #8323072
  97 0042 5360     		str	r3, [r2, #4]
 237:../src/stm32f10x_rcc.c **** 
 238:../src/stm32f10x_rcc.c **** #ifdef STM32F10X_CL
 239:../src/stm32f10x_rcc.c ****   /* Reset PLL2ON and PLL3ON bits */
 240:../src/stm32f10x_rcc.c ****   RCC->CR &= (uint32_t)0xEBFFFFFF;
  98              		.loc 1 240 0
  99 0044 084A     		ldr	r2, .L2
 100 0046 084B     		ldr	r3, .L2
 101 0048 1B68     		ldr	r3, [r3]
 102 004a 23F0A053 		bic	r3, r3, #335544320
 103 004e 1360     		str	r3, [r2]
 241:../src/stm32f10x_rcc.c **** 
 242:../src/stm32f10x_rcc.c ****   /* Disable all interrupts and clear pending bits  */
 243:../src/stm32f10x_rcc.c ****   RCC->CIR = 0x00FF0000;
 104              		.loc 1 243 0
 105 0050 054B     		ldr	r3, .L2
 106 0052 4FF47F02 		mov	r2, #16711680
 107 0056 9A60     		str	r2, [r3, #8]
 244:../src/stm32f10x_rcc.c **** 
 245:../src/stm32f10x_rcc.c ****   /* Reset CFGR2 register */
 246:../src/stm32f10x_rcc.c ****   RCC->CFGR2 = 0x00000000;
 108              		.loc 1 246 0
 109 0058 034B     		ldr	r3, .L2
 110 005a 0022     		movs	r2, #0
 111 005c DA62     		str	r2, [r3, #44]
 247:../src/stm32f10x_rcc.c **** #elif defined (STM32F10X_LD_VL) || defined (STM32F10X_MD_VL) || defined (STM32F10X_HD_VL)
 248:../src/stm32f10x_rcc.c ****   /* Disable all interrupts and clear pending bits  */
 249:../src/stm32f10x_rcc.c ****   RCC->CIR = 0x009F0000;
 250:../src/stm32f10x_rcc.c **** 
 251:../src/stm32f10x_rcc.c ****   /* Reset CFGR2 register */
 252:../src/stm32f10x_rcc.c ****   RCC->CFGR2 = 0x00000000;      
 253:../src/stm32f10x_rcc.c **** #else
 254:../src/stm32f10x_rcc.c ****   /* Disable all interrupts and clear pending bits  */
 255:../src/stm32f10x_rcc.c ****   RCC->CIR = 0x009F0000;
 256:../src/stm32f10x_rcc.c **** #endif /* STM32F10X_CL */
 257:../src/stm32f10x_rcc.c **** 
 258:../src/stm32f10x_rcc.c **** }
 112              		.loc 1 258 0
 113 005e BD46     		mov	sp, r7
 114              		.cfi_def_cfa_register 13
 115              		@ sp needed
 116 0060 5DF8047B 		ldr	r7, [sp], #4
 117              		.cfi_restore 7
 118              		.cfi_def_cfa_offset 0
 119 0064 7047     		bx	lr
 120              	.L3:
 121 0066 00BF     		.align	2
 122              	.L2:
 123 0068 00100240 		.word	1073876992
 124 006c 0000FFF0 		.word	-251723776
 125              		.cfi_endproc
 126              	.LFE29:
 128              		.section	.text.RCC_HSEConfig,"ax",%progbits
 129              		.align	2
 130              		.global	RCC_HSEConfig
 131              		.thumb
 132              		.thumb_func
 134              	RCC_HSEConfig:
 135              	.LFB30:
 259:../src/stm32f10x_rcc.c **** 
 260:../src/stm32f10x_rcc.c **** /**
 261:../src/stm32f10x_rcc.c ****   * @brief  Configures the External High Speed oscillator (HSE).
 262:../src/stm32f10x_rcc.c ****   * @note   HSE can not be stopped if it is used directly or through the PLL as system clock.
 263:../src/stm32f10x_rcc.c ****   * @param  RCC_HSE: specifies the new state of the HSE.
 264:../src/stm32f10x_rcc.c ****   *   This parameter can be one of the following values:
 265:../src/stm32f10x_rcc.c ****   *     @arg RCC_HSE_OFF: HSE oscillator OFF
 266:../src/stm32f10x_rcc.c ****   *     @arg RCC_HSE_ON: HSE oscillator ON
 267:../src/stm32f10x_rcc.c ****   *     @arg RCC_HSE_Bypass: HSE oscillator bypassed with external clock
 268:../src/stm32f10x_rcc.c ****   * @retval None
 269:../src/stm32f10x_rcc.c ****   */
 270:../src/stm32f10x_rcc.c **** void RCC_HSEConfig(uint32_t RCC_HSE)
 271:../src/stm32f10x_rcc.c **** {
 136              		.loc 1 271 0
 137              		.cfi_startproc
 138              		@ args = 0, pretend = 0, frame = 8
 139              		@ frame_needed = 1, uses_anonymous_args = 0
 140              		@ link register save eliminated.
 141 0000 80B4     		push	{r7}
 142              		.cfi_def_cfa_offset 4
 143              		.cfi_offset 7, -4
 144 0002 83B0     		sub	sp, sp, #12
 145              		.cfi_def_cfa_offset 16
 146 0004 00AF     		add	r7, sp, #0
 147              		.cfi_def_cfa_register 7
 148 0006 7860     		str	r0, [r7, #4]
 272:../src/stm32f10x_rcc.c ****   /* Check the parameters */
 273:../src/stm32f10x_rcc.c ****   assert_param(IS_RCC_HSE(RCC_HSE));
 274:../src/stm32f10x_rcc.c ****   /* Reset HSEON and HSEBYP bits before configuring the HSE ------------------*/
 275:../src/stm32f10x_rcc.c ****   /* Reset HSEON bit */
 276:../src/stm32f10x_rcc.c ****   RCC->CR &= CR_HSEON_Reset;
 149              		.loc 1 276 0
 150 0008 134A     		ldr	r2, .L9
 151 000a 134B     		ldr	r3, .L9
 152 000c 1B68     		ldr	r3, [r3]
 153 000e 23F48033 		bic	r3, r3, #65536
 154 0012 1360     		str	r3, [r2]
 277:../src/stm32f10x_rcc.c ****   /* Reset HSEBYP bit */
 278:../src/stm32f10x_rcc.c ****   RCC->CR &= CR_HSEBYP_Reset;
 155              		.loc 1 278 0
 156 0014 104A     		ldr	r2, .L9
 157 0016 104B     		ldr	r3, .L9
 158 0018 1B68     		ldr	r3, [r3]
 159 001a 23F48023 		bic	r3, r3, #262144
 160 001e 1360     		str	r3, [r2]
 279:../src/stm32f10x_rcc.c ****   /* Configure HSE (RCC_HSE_OFF is already covered by the code section above) */
 280:../src/stm32f10x_rcc.c ****   switch(RCC_HSE)
 161              		.loc 1 280 0
 162 0020 7B68     		ldr	r3, [r7, #4]
 163 0022 B3F5803F 		cmp	r3, #65536
 164 0026 03D0     		beq	.L6
 165 0028 B3F5802F 		cmp	r3, #262144
 166 002c 07D0     		beq	.L7
 281:../src/stm32f10x_rcc.c ****   {
 282:../src/stm32f10x_rcc.c ****     case RCC_HSE_ON:
 283:../src/stm32f10x_rcc.c ****       /* Set HSEON bit */
 284:../src/stm32f10x_rcc.c ****       RCC->CR |= CR_HSEON_Set;
 285:../src/stm32f10x_rcc.c ****       break;
 286:../src/stm32f10x_rcc.c ****       
 287:../src/stm32f10x_rcc.c ****     case RCC_HSE_Bypass:
 288:../src/stm32f10x_rcc.c ****       /* Set HSEBYP and HSEON bits */
 289:../src/stm32f10x_rcc.c ****       RCC->CR |= CR_HSEBYP_Set | CR_HSEON_Set;
 290:../src/stm32f10x_rcc.c ****       break;
 291:../src/stm32f10x_rcc.c ****       
 292:../src/stm32f10x_rcc.c ****     default:
 293:../src/stm32f10x_rcc.c ****       break;
 167              		.loc 1 293 0
 168 002e 0DE0     		b	.L4
 169              	.L6:
 284:../src/stm32f10x_rcc.c ****       break;
 170              		.loc 1 284 0
 171 0030 094A     		ldr	r2, .L9
 172 0032 094B     		ldr	r3, .L9
 173 0034 1B68     		ldr	r3, [r3]
 174 0036 43F48033 		orr	r3, r3, #65536
 175 003a 1360     		str	r3, [r2]
 285:../src/stm32f10x_rcc.c ****       
 176              		.loc 1 285 0
 177 003c 06E0     		b	.L4
 178              	.L7:
 289:../src/stm32f10x_rcc.c ****       break;
 179              		.loc 1 289 0
 180 003e 064A     		ldr	r2, .L9
 181 0040 054B     		ldr	r3, .L9
 182 0042 1B68     		ldr	r3, [r3]
 183 0044 43F4A023 		orr	r3, r3, #327680
 184 0048 1360     		str	r3, [r2]
 290:../src/stm32f10x_rcc.c ****       
 185              		.loc 1 290 0
 186 004a 00BF     		nop
 187              	.L4:
 294:../src/stm32f10x_rcc.c ****   }
 295:../src/stm32f10x_rcc.c **** }
 188              		.loc 1 295 0
 189 004c 0C37     		adds	r7, r7, #12
 190              		.cfi_def_cfa_offset 4
 191 004e BD46     		mov	sp, r7
 192              		.cfi_def_cfa_register 13
 193              		@ sp needed
 194 0050 5DF8047B 		ldr	r7, [sp], #4
 195              		.cfi_restore 7
 196              		.cfi_def_cfa_offset 0
 197 0054 7047     		bx	lr
 198              	.L10:
 199 0056 00BF     		.align	2
 200              	.L9:
 201 0058 00100240 		.word	1073876992
 202              		.cfi_endproc
 203              	.LFE30:
 205              		.section	.text.RCC_WaitForHSEStartUp,"ax",%progbits
 206              		.align	2
 207              		.global	RCC_WaitForHSEStartUp
 208              		.thumb
 209              		.thumb_func
 211              	RCC_WaitForHSEStartUp:
 212              	.LFB31:
 296:../src/stm32f10x_rcc.c **** 
 297:../src/stm32f10x_rcc.c **** /**
 298:../src/stm32f10x_rcc.c ****   * @brief  Waits for HSE start-up.
 299:../src/stm32f10x_rcc.c ****   * @param  None
 300:../src/stm32f10x_rcc.c ****   * @retval An ErrorStatus enumuration value:
 301:../src/stm32f10x_rcc.c ****   * - SUCCESS: HSE oscillator is stable and ready to use
 302:../src/stm32f10x_rcc.c ****   * - ERROR: HSE oscillator not yet ready
 303:../src/stm32f10x_rcc.c ****   */
 304:../src/stm32f10x_rcc.c **** ErrorStatus RCC_WaitForHSEStartUp(void)
 305:../src/stm32f10x_rcc.c **** {
 213              		.loc 1 305 0
 214              		.cfi_startproc
 215              		@ args = 0, pretend = 0, frame = 8
 216              		@ frame_needed = 1, uses_anonymous_args = 0
 217 0000 80B5     		push	{r7, lr}
 218              		.cfi_def_cfa_offset 8
 219              		.cfi_offset 7, -8
 220              		.cfi_offset 14, -4
 221 0002 82B0     		sub	sp, sp, #8
 222              		.cfi_def_cfa_offset 16
 223 0004 00AF     		add	r7, sp, #0
 224              		.cfi_def_cfa_register 7
 306:../src/stm32f10x_rcc.c ****   __IO uint32_t StartUpCounter = 0;
 225              		.loc 1 306 0
 226 0006 0023     		movs	r3, #0
 227 0008 3B60     		str	r3, [r7]
 307:../src/stm32f10x_rcc.c ****   ErrorStatus status = ERROR;
 228              		.loc 1 307 0
 229 000a 0023     		movs	r3, #0
 230 000c FB71     		strb	r3, [r7, #7]
 308:../src/stm32f10x_rcc.c ****   FlagStatus HSEStatus = RESET;
 231              		.loc 1 308 0
 232 000e 0023     		movs	r3, #0
 233 0010 BB71     		strb	r3, [r7, #6]
 234              	.L13:
 309:../src/stm32f10x_rcc.c ****   
 310:../src/stm32f10x_rcc.c ****   /* Wait till HSE is ready and if Time out is reached exit */
 311:../src/stm32f10x_rcc.c ****   do
 312:../src/stm32f10x_rcc.c ****   {
 313:../src/stm32f10x_rcc.c ****     HSEStatus = RCC_GetFlagStatus(RCC_FLAG_HSERDY);
 235              		.loc 1 313 0 discriminator 2
 236 0012 3120     		movs	r0, #49
 237 0014 FFF7FEFF 		bl	RCC_GetFlagStatus
 238 0018 0346     		mov	r3, r0
 239 001a BB71     		strb	r3, [r7, #6]
 314:../src/stm32f10x_rcc.c ****     StartUpCounter++;  
 240              		.loc 1 314 0 discriminator 2
 241 001c 3B68     		ldr	r3, [r7]
 242 001e 0133     		adds	r3, r3, #1
 243 0020 3B60     		str	r3, [r7]
 315:../src/stm32f10x_rcc.c ****   } while((StartUpCounter != HSE_STARTUP_TIMEOUT) && (HSEStatus == RESET));
 244              		.loc 1 315 0 discriminator 2
 245 0022 3B68     		ldr	r3, [r7]
 246 0024 B3F5A06F 		cmp	r3, #1280
 247 0028 02D0     		beq	.L12
 248              		.loc 1 315 0 is_stmt 0 discriminator 1
 249 002a BB79     		ldrb	r3, [r7, #6]	@ zero_extendqisi2
 250 002c 002B     		cmp	r3, #0
 251 002e F0D0     		beq	.L13
 252              	.L12:
 316:../src/stm32f10x_rcc.c ****   
 317:../src/stm32f10x_rcc.c ****   if (RCC_GetFlagStatus(RCC_FLAG_HSERDY) != RESET)
 253              		.loc 1 317 0 is_stmt 1
 254 0030 3120     		movs	r0, #49
 255 0032 FFF7FEFF 		bl	RCC_GetFlagStatus
 256 0036 0346     		mov	r3, r0
 257 0038 002B     		cmp	r3, #0
 258 003a 02D0     		beq	.L14
 318:../src/stm32f10x_rcc.c ****   {
 319:../src/stm32f10x_rcc.c ****     status = SUCCESS;
 259              		.loc 1 319 0
 260 003c 0123     		movs	r3, #1
 261 003e FB71     		strb	r3, [r7, #7]
 262 0040 01E0     		b	.L15
 263              	.L14:
 320:../src/stm32f10x_rcc.c ****   }
 321:../src/stm32f10x_rcc.c ****   else
 322:../src/stm32f10x_rcc.c ****   {
 323:../src/stm32f10x_rcc.c ****     status = ERROR;
 264              		.loc 1 323 0
 265 0042 0023     		movs	r3, #0
 266 0044 FB71     		strb	r3, [r7, #7]
 267              	.L15:
 324:../src/stm32f10x_rcc.c ****   }  
 325:../src/stm32f10x_rcc.c ****   return (status);
 268              		.loc 1 325 0
 269 0046 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 326:../src/stm32f10x_rcc.c **** }
 270              		.loc 1 326 0
 271 0048 1846     		mov	r0, r3
 272 004a 0837     		adds	r7, r7, #8
 273              		.cfi_def_cfa_offset 8
 274 004c BD46     		mov	sp, r7
 275              		.cfi_def_cfa_register 13
 276              		@ sp needed
 277 004e 80BD     		pop	{r7, pc}
 278              		.cfi_endproc
 279              	.LFE31:
 281              		.section	.text.RCC_AdjustHSICalibrationValue,"ax",%progbits
 282              		.align	2
 283              		.global	RCC_AdjustHSICalibrationValue
 284              		.thumb
 285              		.thumb_func
 287              	RCC_AdjustHSICalibrationValue:
 288              	.LFB32:
 327:../src/stm32f10x_rcc.c **** 
 328:../src/stm32f10x_rcc.c **** /**
 329:../src/stm32f10x_rcc.c ****   * @brief  Adjusts the Internal High Speed oscillator (HSI) calibration value.
 330:../src/stm32f10x_rcc.c ****   * @param  HSICalibrationValue: specifies the calibration trimming value.
 331:../src/stm32f10x_rcc.c ****   *   This parameter must be a number between 0 and 0x1F.
 332:../src/stm32f10x_rcc.c ****   * @retval None
 333:../src/stm32f10x_rcc.c ****   */
 334:../src/stm32f10x_rcc.c **** void RCC_AdjustHSICalibrationValue(uint8_t HSICalibrationValue)
 335:../src/stm32f10x_rcc.c **** {
 289              		.loc 1 335 0
 290              		.cfi_startproc
 291              		@ args = 0, pretend = 0, frame = 16
 292              		@ frame_needed = 1, uses_anonymous_args = 0
 293              		@ link register save eliminated.
 294 0000 80B4     		push	{r7}
 295              		.cfi_def_cfa_offset 4
 296              		.cfi_offset 7, -4
 297 0002 85B0     		sub	sp, sp, #20
 298              		.cfi_def_cfa_offset 24
 299 0004 00AF     		add	r7, sp, #0
 300              		.cfi_def_cfa_register 7
 301 0006 0346     		mov	r3, r0
 302 0008 FB71     		strb	r3, [r7, #7]
 336:../src/stm32f10x_rcc.c ****   uint32_t tmpreg = 0;
 303              		.loc 1 336 0
 304 000a 0023     		movs	r3, #0
 305 000c FB60     		str	r3, [r7, #12]
 337:../src/stm32f10x_rcc.c ****   /* Check the parameters */
 338:../src/stm32f10x_rcc.c ****   assert_param(IS_RCC_CALIBRATION_VALUE(HSICalibrationValue));
 339:../src/stm32f10x_rcc.c ****   tmpreg = RCC->CR;
 306              		.loc 1 339 0
 307 000e 0A4B     		ldr	r3, .L18
 308 0010 1B68     		ldr	r3, [r3]
 309 0012 FB60     		str	r3, [r7, #12]
 340:../src/stm32f10x_rcc.c ****   /* Clear HSITRIM[4:0] bits */
 341:../src/stm32f10x_rcc.c ****   tmpreg &= CR_HSITRIM_Mask;
 310              		.loc 1 341 0
 311 0014 FB68     		ldr	r3, [r7, #12]
 312 0016 23F0F803 		bic	r3, r3, #248
 313 001a FB60     		str	r3, [r7, #12]
 342:../src/stm32f10x_rcc.c ****   /* Set the HSITRIM[4:0] bits according to HSICalibrationValue value */
 343:../src/stm32f10x_rcc.c ****   tmpreg |= (uint32_t)HSICalibrationValue << 3;
 314              		.loc 1 343 0
 315 001c FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 316 001e DB00     		lsls	r3, r3, #3
 317 0020 FA68     		ldr	r2, [r7, #12]
 318 0022 1343     		orrs	r3, r3, r2
 319 0024 FB60     		str	r3, [r7, #12]
 344:../src/stm32f10x_rcc.c ****   /* Store the new value */
 345:../src/stm32f10x_rcc.c ****   RCC->CR = tmpreg;
 320              		.loc 1 345 0
 321 0026 044A     		ldr	r2, .L18
 322 0028 FB68     		ldr	r3, [r7, #12]
 323 002a 1360     		str	r3, [r2]
 346:../src/stm32f10x_rcc.c **** }
 324              		.loc 1 346 0
 325 002c 1437     		adds	r7, r7, #20
 326              		.cfi_def_cfa_offset 4
 327 002e BD46     		mov	sp, r7
 328              		.cfi_def_cfa_register 13
 329              		@ sp needed
 330 0030 5DF8047B 		ldr	r7, [sp], #4
 331              		.cfi_restore 7
 332              		.cfi_def_cfa_offset 0
 333 0034 7047     		bx	lr
 334              	.L19:
 335 0036 00BF     		.align	2
 336              	.L18:
 337 0038 00100240 		.word	1073876992
 338              		.cfi_endproc
 339              	.LFE32:
 341              		.section	.text.RCC_HSICmd,"ax",%progbits
 342              		.align	2
 343              		.global	RCC_HSICmd
 344              		.thumb
 345              		.thumb_func
 347              	RCC_HSICmd:
 348              	.LFB33:
 347:../src/stm32f10x_rcc.c **** 
 348:../src/stm32f10x_rcc.c **** /**
 349:../src/stm32f10x_rcc.c ****   * @brief  Enables or disables the Internal High Speed oscillator (HSI).
 350:../src/stm32f10x_rcc.c ****   * @note   HSI can not be stopped if it is used directly or through the PLL as system clock.
 351:../src/stm32f10x_rcc.c ****   * @param  NewState: new state of the HSI. This parameter can be: ENABLE or DISABLE.
 352:../src/stm32f10x_rcc.c ****   * @retval None
 353:../src/stm32f10x_rcc.c ****   */
 354:../src/stm32f10x_rcc.c **** void RCC_HSICmd(FunctionalState NewState)
 355:../src/stm32f10x_rcc.c **** {
 349              		.loc 1 355 0
 350              		.cfi_startproc
 351              		@ args = 0, pretend = 0, frame = 8
 352              		@ frame_needed = 1, uses_anonymous_args = 0
 353              		@ link register save eliminated.
 354 0000 80B4     		push	{r7}
 355              		.cfi_def_cfa_offset 4
 356              		.cfi_offset 7, -4
 357 0002 83B0     		sub	sp, sp, #12
 358              		.cfi_def_cfa_offset 16
 359 0004 00AF     		add	r7, sp, #0
 360              		.cfi_def_cfa_register 7
 361 0006 0346     		mov	r3, r0
 362 0008 FB71     		strb	r3, [r7, #7]
 356:../src/stm32f10x_rcc.c ****   /* Check the parameters */
 357:../src/stm32f10x_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 358:../src/stm32f10x_rcc.c ****   *(__IO uint32_t *) CR_HSION_BB = (uint32_t)NewState;
 363              		.loc 1 358 0
 364 000a 044A     		ldr	r2, .L21
 365 000c FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 366 000e 1360     		str	r3, [r2]
 359:../src/stm32f10x_rcc.c **** }
 367              		.loc 1 359 0
 368 0010 0C37     		adds	r7, r7, #12
 369              		.cfi_def_cfa_offset 4
 370 0012 BD46     		mov	sp, r7
 371              		.cfi_def_cfa_register 13
 372              		@ sp needed
 373 0014 5DF8047B 		ldr	r7, [sp], #4
 374              		.cfi_restore 7
 375              		.cfi_def_cfa_offset 0
 376 0018 7047     		bx	lr
 377              	.L22:
 378 001a 00BF     		.align	2
 379              	.L21:
 380 001c 00004242 		.word	1111621632
 381              		.cfi_endproc
 382              	.LFE33:
 384              		.section	.text.RCC_PLLConfig,"ax",%progbits
 385              		.align	2
 386              		.global	RCC_PLLConfig
 387              		.thumb
 388              		.thumb_func
 390              	RCC_PLLConfig:
 391              	.LFB34:
 360:../src/stm32f10x_rcc.c **** 
 361:../src/stm32f10x_rcc.c **** /**
 362:../src/stm32f10x_rcc.c ****   * @brief  Configures the PLL clock source and multiplication factor.
 363:../src/stm32f10x_rcc.c ****   * @note   This function must be used only when the PLL is disabled.
 364:../src/stm32f10x_rcc.c ****   * @param  RCC_PLLSource: specifies the PLL entry clock source.
 365:../src/stm32f10x_rcc.c ****   *   For @b STM32_Connectivity_line_devices or @b STM32_Value_line_devices, 
 366:../src/stm32f10x_rcc.c ****   *   this parameter can be one of the following values:
 367:../src/stm32f10x_rcc.c ****   *     @arg RCC_PLLSource_HSI_Div2: HSI oscillator clock divided by 2 selected as PLL clock entry
 368:../src/stm32f10x_rcc.c ****   *     @arg RCC_PLLSource_PREDIV1: PREDIV1 clock selected as PLL clock entry
 369:../src/stm32f10x_rcc.c ****   *   For @b other_STM32_devices, this parameter can be one of the following values:
 370:../src/stm32f10x_rcc.c ****   *     @arg RCC_PLLSource_HSI_Div2: HSI oscillator clock divided by 2 selected as PLL clock entry
 371:../src/stm32f10x_rcc.c ****   *     @arg RCC_PLLSource_HSE_Div1: HSE oscillator clock selected as PLL clock entry
 372:../src/stm32f10x_rcc.c ****   *     @arg RCC_PLLSource_HSE_Div2: HSE oscillator clock divided by 2 selected as PLL clock entry 
 373:../src/stm32f10x_rcc.c ****   * @param  RCC_PLLMul: specifies the PLL multiplication factor.
 374:../src/stm32f10x_rcc.c ****   *   For @b STM32_Connectivity_line_devices, this parameter can be RCC_PLLMul_x where x:{[4,9], 6_
 375:../src/stm32f10x_rcc.c ****   *   For @b other_STM32_devices, this parameter can be RCC_PLLMul_x where x:[2,16]  
 376:../src/stm32f10x_rcc.c ****   * @retval None
 377:../src/stm32f10x_rcc.c ****   */
 378:../src/stm32f10x_rcc.c **** void RCC_PLLConfig(uint32_t RCC_PLLSource, uint32_t RCC_PLLMul)
 379:../src/stm32f10x_rcc.c **** {
 392              		.loc 1 379 0
 393              		.cfi_startproc
 394              		@ args = 0, pretend = 0, frame = 16
 395              		@ frame_needed = 1, uses_anonymous_args = 0
 396              		@ link register save eliminated.
 397 0000 80B4     		push	{r7}
 398              		.cfi_def_cfa_offset 4
 399              		.cfi_offset 7, -4
 400 0002 85B0     		sub	sp, sp, #20
 401              		.cfi_def_cfa_offset 24
 402 0004 00AF     		add	r7, sp, #0
 403              		.cfi_def_cfa_register 7
 404 0006 7860     		str	r0, [r7, #4]
 405 0008 3960     		str	r1, [r7]
 380:../src/stm32f10x_rcc.c ****   uint32_t tmpreg = 0;
 406              		.loc 1 380 0
 407 000a 0023     		movs	r3, #0
 408 000c FB60     		str	r3, [r7, #12]
 381:../src/stm32f10x_rcc.c **** 
 382:../src/stm32f10x_rcc.c ****   /* Check the parameters */
 383:../src/stm32f10x_rcc.c ****   assert_param(IS_RCC_PLL_SOURCE(RCC_PLLSource));
 384:../src/stm32f10x_rcc.c ****   assert_param(IS_RCC_PLL_MUL(RCC_PLLMul));
 385:../src/stm32f10x_rcc.c **** 
 386:../src/stm32f10x_rcc.c ****   tmpreg = RCC->CFGR;
 409              		.loc 1 386 0
 410 000e 0A4B     		ldr	r3, .L24
 411 0010 5B68     		ldr	r3, [r3, #4]
 412 0012 FB60     		str	r3, [r7, #12]
 387:../src/stm32f10x_rcc.c ****   /* Clear PLLSRC, PLLXTPRE and PLLMUL[3:0] bits */
 388:../src/stm32f10x_rcc.c ****   tmpreg &= CFGR_PLL_Mask;
 413              		.loc 1 388 0
 414 0014 FB68     		ldr	r3, [r7, #12]
 415 0016 23F47413 		bic	r3, r3, #3997696
 416 001a FB60     		str	r3, [r7, #12]
 389:../src/stm32f10x_rcc.c ****   /* Set the PLL configuration bits */
 390:../src/stm32f10x_rcc.c ****   tmpreg |= RCC_PLLSource | RCC_PLLMul;
 417              		.loc 1 390 0
 418 001c 7A68     		ldr	r2, [r7, #4]
 419 001e 3B68     		ldr	r3, [r7]
 420 0020 1343     		orrs	r3, r3, r2
 421 0022 FA68     		ldr	r2, [r7, #12]
 422 0024 1343     		orrs	r3, r3, r2
 423 0026 FB60     		str	r3, [r7, #12]
 391:../src/stm32f10x_rcc.c ****   /* Store the new value */
 392:../src/stm32f10x_rcc.c ****   RCC->CFGR = tmpreg;
 424              		.loc 1 392 0
 425 0028 034A     		ldr	r2, .L24
 426 002a FB68     		ldr	r3, [r7, #12]
 427 002c 5360     		str	r3, [r2, #4]
 393:../src/stm32f10x_rcc.c **** }
 428              		.loc 1 393 0
 429 002e 1437     		adds	r7, r7, #20
 430              		.cfi_def_cfa_offset 4
 431 0030 BD46     		mov	sp, r7
 432              		.cfi_def_cfa_register 13
 433              		@ sp needed
 434 0032 5DF8047B 		ldr	r7, [sp], #4
 435              		.cfi_restore 7
 436              		.cfi_def_cfa_offset 0
 437 0036 7047     		bx	lr
 438              	.L25:
 439              		.align	2
 440              	.L24:
 441 0038 00100240 		.word	1073876992
 442              		.cfi_endproc
 443              	.LFE34:
 445              		.section	.text.RCC_PLLCmd,"ax",%progbits
 446              		.align	2
 447              		.global	RCC_PLLCmd
 448              		.thumb
 449              		.thumb_func
 451              	RCC_PLLCmd:
 452              	.LFB35:
 394:../src/stm32f10x_rcc.c **** 
 395:../src/stm32f10x_rcc.c **** /**
 396:../src/stm32f10x_rcc.c ****   * @brief  Enables or disables the PLL.
 397:../src/stm32f10x_rcc.c ****   * @note   The PLL can not be disabled if it is used as system clock.
 398:../src/stm32f10x_rcc.c ****   * @param  NewState: new state of the PLL. This parameter can be: ENABLE or DISABLE.
 399:../src/stm32f10x_rcc.c ****   * @retval None
 400:../src/stm32f10x_rcc.c ****   */
 401:../src/stm32f10x_rcc.c **** void RCC_PLLCmd(FunctionalState NewState)
 402:../src/stm32f10x_rcc.c **** {
 453              		.loc 1 402 0
 454              		.cfi_startproc
 455              		@ args = 0, pretend = 0, frame = 8
 456              		@ frame_needed = 1, uses_anonymous_args = 0
 457              		@ link register save eliminated.
 458 0000 80B4     		push	{r7}
 459              		.cfi_def_cfa_offset 4
 460              		.cfi_offset 7, -4
 461 0002 83B0     		sub	sp, sp, #12
 462              		.cfi_def_cfa_offset 16
 463 0004 00AF     		add	r7, sp, #0
 464              		.cfi_def_cfa_register 7
 465 0006 0346     		mov	r3, r0
 466 0008 FB71     		strb	r3, [r7, #7]
 403:../src/stm32f10x_rcc.c ****   /* Check the parameters */
 404:../src/stm32f10x_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 405:../src/stm32f10x_rcc.c **** 
 406:../src/stm32f10x_rcc.c ****   *(__IO uint32_t *) CR_PLLON_BB = (uint32_t)NewState;
 467              		.loc 1 406 0
 468 000a 044A     		ldr	r2, .L27
 469 000c FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 470 000e 1360     		str	r3, [r2]
 407:../src/stm32f10x_rcc.c **** }
 471              		.loc 1 407 0
 472 0010 0C37     		adds	r7, r7, #12
 473              		.cfi_def_cfa_offset 4
 474 0012 BD46     		mov	sp, r7
 475              		.cfi_def_cfa_register 13
 476              		@ sp needed
 477 0014 5DF8047B 		ldr	r7, [sp], #4
 478              		.cfi_restore 7
 479              		.cfi_def_cfa_offset 0
 480 0018 7047     		bx	lr
 481              	.L28:
 482 001a 00BF     		.align	2
 483              	.L27:
 484 001c 60004242 		.word	1111621728
 485              		.cfi_endproc
 486              	.LFE35:
 488              		.section	.text.RCC_PREDIV1Config,"ax",%progbits
 489              		.align	2
 490              		.global	RCC_PREDIV1Config
 491              		.thumb
 492              		.thumb_func
 494              	RCC_PREDIV1Config:
 495              	.LFB36:
 408:../src/stm32f10x_rcc.c **** 
 409:../src/stm32f10x_rcc.c **** #if defined (STM32F10X_LD_VL) || defined (STM32F10X_MD_VL) || defined (STM32F10X_HD_VL) || defined 
 410:../src/stm32f10x_rcc.c **** /**
 411:../src/stm32f10x_rcc.c ****   * @brief  Configures the PREDIV1 division factor.
 412:../src/stm32f10x_rcc.c ****   * @note 
 413:../src/stm32f10x_rcc.c ****   *   - This function must be used only when the PLL is disabled.
 414:../src/stm32f10x_rcc.c ****   *   - This function applies only to STM32 Connectivity line and Value line 
 415:../src/stm32f10x_rcc.c ****   *     devices.
 416:../src/stm32f10x_rcc.c ****   * @param  RCC_PREDIV1_Source: specifies the PREDIV1 clock source.
 417:../src/stm32f10x_rcc.c ****   *   This parameter can be one of the following values:
 418:../src/stm32f10x_rcc.c ****   *     @arg RCC_PREDIV1_Source_HSE: HSE selected as PREDIV1 clock
 419:../src/stm32f10x_rcc.c ****   *     @arg RCC_PREDIV1_Source_PLL2: PLL2 selected as PREDIV1 clock
 420:../src/stm32f10x_rcc.c ****   * @note 
 421:../src/stm32f10x_rcc.c ****   *   For @b STM32_Value_line_devices this parameter is always RCC_PREDIV1_Source_HSE  
 422:../src/stm32f10x_rcc.c ****   * @param  RCC_PREDIV1_Div: specifies the PREDIV1 clock division factor.
 423:../src/stm32f10x_rcc.c ****   *   This parameter can be RCC_PREDIV1_Divx where x:[1,16]
 424:../src/stm32f10x_rcc.c ****   * @retval None
 425:../src/stm32f10x_rcc.c ****   */
 426:../src/stm32f10x_rcc.c **** void RCC_PREDIV1Config(uint32_t RCC_PREDIV1_Source, uint32_t RCC_PREDIV1_Div)
 427:../src/stm32f10x_rcc.c **** {
 496              		.loc 1 427 0
 497              		.cfi_startproc
 498              		@ args = 0, pretend = 0, frame = 16
 499              		@ frame_needed = 1, uses_anonymous_args = 0
 500              		@ link register save eliminated.
 501 0000 80B4     		push	{r7}
 502              		.cfi_def_cfa_offset 4
 503              		.cfi_offset 7, -4
 504 0002 85B0     		sub	sp, sp, #20
 505              		.cfi_def_cfa_offset 24
 506 0004 00AF     		add	r7, sp, #0
 507              		.cfi_def_cfa_register 7
 508 0006 7860     		str	r0, [r7, #4]
 509 0008 3960     		str	r1, [r7]
 428:../src/stm32f10x_rcc.c ****   uint32_t tmpreg = 0;
 510              		.loc 1 428 0
 511 000a 0023     		movs	r3, #0
 512 000c FB60     		str	r3, [r7, #12]
 429:../src/stm32f10x_rcc.c ****   
 430:../src/stm32f10x_rcc.c ****   /* Check the parameters */
 431:../src/stm32f10x_rcc.c ****   assert_param(IS_RCC_PREDIV1_SOURCE(RCC_PREDIV1_Source));
 432:../src/stm32f10x_rcc.c ****   assert_param(IS_RCC_PREDIV1(RCC_PREDIV1_Div));
 433:../src/stm32f10x_rcc.c **** 
 434:../src/stm32f10x_rcc.c ****   tmpreg = RCC->CFGR2;
 513              		.loc 1 434 0
 514 000e 0B4B     		ldr	r3, .L30
 515 0010 DB6A     		ldr	r3, [r3, #44]
 516 0012 FB60     		str	r3, [r7, #12]
 435:../src/stm32f10x_rcc.c ****   /* Clear PREDIV1[3:0] and PREDIV1SRC bits */
 436:../src/stm32f10x_rcc.c ****   tmpreg &= ~(CFGR2_PREDIV1 | CFGR2_PREDIV1SRC);
 517              		.loc 1 436 0
 518 0014 FB68     		ldr	r3, [r7, #12]
 519 0016 23F48033 		bic	r3, r3, #65536
 520 001a 23F00F03 		bic	r3, r3, #15
 521 001e FB60     		str	r3, [r7, #12]
 437:../src/stm32f10x_rcc.c ****   /* Set the PREDIV1 clock source and division factor */
 438:../src/stm32f10x_rcc.c ****   tmpreg |= RCC_PREDIV1_Source | RCC_PREDIV1_Div ;
 522              		.loc 1 438 0
 523 0020 7A68     		ldr	r2, [r7, #4]
 524 0022 3B68     		ldr	r3, [r7]
 525 0024 1343     		orrs	r3, r3, r2
 526 0026 FA68     		ldr	r2, [r7, #12]
 527 0028 1343     		orrs	r3, r3, r2
 528 002a FB60     		str	r3, [r7, #12]
 439:../src/stm32f10x_rcc.c ****   /* Store the new value */
 440:../src/stm32f10x_rcc.c ****   RCC->CFGR2 = tmpreg;
 529              		.loc 1 440 0
 530 002c 034A     		ldr	r2, .L30
 531 002e FB68     		ldr	r3, [r7, #12]
 532 0030 D362     		str	r3, [r2, #44]
 441:../src/stm32f10x_rcc.c **** }
 533              		.loc 1 441 0
 534 0032 1437     		adds	r7, r7, #20
 535              		.cfi_def_cfa_offset 4
 536 0034 BD46     		mov	sp, r7
 537              		.cfi_def_cfa_register 13
 538              		@ sp needed
 539 0036 5DF8047B 		ldr	r7, [sp], #4
 540              		.cfi_restore 7
 541              		.cfi_def_cfa_offset 0
 542 003a 7047     		bx	lr
 543              	.L31:
 544              		.align	2
 545              	.L30:
 546 003c 00100240 		.word	1073876992
 547              		.cfi_endproc
 548              	.LFE36:
 550              		.section	.text.RCC_PREDIV2Config,"ax",%progbits
 551              		.align	2
 552              		.global	RCC_PREDIV2Config
 553              		.thumb
 554              		.thumb_func
 556              	RCC_PREDIV2Config:
 557              	.LFB37:
 442:../src/stm32f10x_rcc.c **** #endif
 443:../src/stm32f10x_rcc.c **** 
 444:../src/stm32f10x_rcc.c **** #ifdef STM32F10X_CL
 445:../src/stm32f10x_rcc.c **** /**
 446:../src/stm32f10x_rcc.c ****   * @brief  Configures the PREDIV2 division factor.
 447:../src/stm32f10x_rcc.c ****   * @note 
 448:../src/stm32f10x_rcc.c ****   *   - This function must be used only when both PLL2 and PLL3 are disabled.
 449:../src/stm32f10x_rcc.c ****   *   - This function applies only to STM32 Connectivity line devices.
 450:../src/stm32f10x_rcc.c ****   * @param  RCC_PREDIV2_Div: specifies the PREDIV2 clock division factor.
 451:../src/stm32f10x_rcc.c ****   *   This parameter can be RCC_PREDIV2_Divx where x:[1,16]
 452:../src/stm32f10x_rcc.c ****   * @retval None
 453:../src/stm32f10x_rcc.c ****   */
 454:../src/stm32f10x_rcc.c **** void RCC_PREDIV2Config(uint32_t RCC_PREDIV2_Div)
 455:../src/stm32f10x_rcc.c **** {
 558              		.loc 1 455 0
 559              		.cfi_startproc
 560              		@ args = 0, pretend = 0, frame = 16
 561              		@ frame_needed = 1, uses_anonymous_args = 0
 562              		@ link register save eliminated.
 563 0000 80B4     		push	{r7}
 564              		.cfi_def_cfa_offset 4
 565              		.cfi_offset 7, -4
 566 0002 85B0     		sub	sp, sp, #20
 567              		.cfi_def_cfa_offset 24
 568 0004 00AF     		add	r7, sp, #0
 569              		.cfi_def_cfa_register 7
 570 0006 7860     		str	r0, [r7, #4]
 456:../src/stm32f10x_rcc.c ****   uint32_t tmpreg = 0;
 571              		.loc 1 456 0
 572 0008 0023     		movs	r3, #0
 573 000a FB60     		str	r3, [r7, #12]
 457:../src/stm32f10x_rcc.c **** 
 458:../src/stm32f10x_rcc.c ****   /* Check the parameters */
 459:../src/stm32f10x_rcc.c ****   assert_param(IS_RCC_PREDIV2(RCC_PREDIV2_Div));
 460:../src/stm32f10x_rcc.c **** 
 461:../src/stm32f10x_rcc.c ****   tmpreg = RCC->CFGR2;
 574              		.loc 1 461 0
 575 000c 094B     		ldr	r3, .L33
 576 000e DB6A     		ldr	r3, [r3, #44]
 577 0010 FB60     		str	r3, [r7, #12]
 462:../src/stm32f10x_rcc.c ****   /* Clear PREDIV2[3:0] bits */
 463:../src/stm32f10x_rcc.c ****   tmpreg &= ~CFGR2_PREDIV2;
 578              		.loc 1 463 0
 579 0012 FB68     		ldr	r3, [r7, #12]
 580 0014 23F0F003 		bic	r3, r3, #240
 581 0018 FB60     		str	r3, [r7, #12]
 464:../src/stm32f10x_rcc.c ****   /* Set the PREDIV2 division factor */
 465:../src/stm32f10x_rcc.c ****   tmpreg |= RCC_PREDIV2_Div;
 582              		.loc 1 465 0
 583 001a FA68     		ldr	r2, [r7, #12]
 584 001c 7B68     		ldr	r3, [r7, #4]
 585 001e 1343     		orrs	r3, r3, r2
 586 0020 FB60     		str	r3, [r7, #12]
 466:../src/stm32f10x_rcc.c ****   /* Store the new value */
 467:../src/stm32f10x_rcc.c ****   RCC->CFGR2 = tmpreg;
 587              		.loc 1 467 0
 588 0022 044A     		ldr	r2, .L33
 589 0024 FB68     		ldr	r3, [r7, #12]
 590 0026 D362     		str	r3, [r2, #44]
 468:../src/stm32f10x_rcc.c **** }
 591              		.loc 1 468 0
 592 0028 1437     		adds	r7, r7, #20
 593              		.cfi_def_cfa_offset 4
 594 002a BD46     		mov	sp, r7
 595              		.cfi_def_cfa_register 13
 596              		@ sp needed
 597 002c 5DF8047B 		ldr	r7, [sp], #4
 598              		.cfi_restore 7
 599              		.cfi_def_cfa_offset 0
 600 0030 7047     		bx	lr
 601              	.L34:
 602 0032 00BF     		.align	2
 603              	.L33:
 604 0034 00100240 		.word	1073876992
 605              		.cfi_endproc
 606              	.LFE37:
 608              		.section	.text.RCC_PLL2Config,"ax",%progbits
 609              		.align	2
 610              		.global	RCC_PLL2Config
 611              		.thumb
 612              		.thumb_func
 614              	RCC_PLL2Config:
 615              	.LFB38:
 469:../src/stm32f10x_rcc.c **** 
 470:../src/stm32f10x_rcc.c **** /**
 471:../src/stm32f10x_rcc.c ****   * @brief  Configures the PLL2 multiplication factor.
 472:../src/stm32f10x_rcc.c ****   * @note
 473:../src/stm32f10x_rcc.c ****   *   - This function must be used only when the PLL2 is disabled.
 474:../src/stm32f10x_rcc.c ****   *   - This function applies only to STM32 Connectivity line devices.
 475:../src/stm32f10x_rcc.c ****   * @param  RCC_PLL2Mul: specifies the PLL2 multiplication factor.
 476:../src/stm32f10x_rcc.c ****   *   This parameter can be RCC_PLL2Mul_x where x:{[8,14], 16, 20}
 477:../src/stm32f10x_rcc.c ****   * @retval None
 478:../src/stm32f10x_rcc.c ****   */
 479:../src/stm32f10x_rcc.c **** void RCC_PLL2Config(uint32_t RCC_PLL2Mul)
 480:../src/stm32f10x_rcc.c **** {
 616              		.loc 1 480 0
 617              		.cfi_startproc
 618              		@ args = 0, pretend = 0, frame = 16
 619              		@ frame_needed = 1, uses_anonymous_args = 0
 620              		@ link register save eliminated.
 621 0000 80B4     		push	{r7}
 622              		.cfi_def_cfa_offset 4
 623              		.cfi_offset 7, -4
 624 0002 85B0     		sub	sp, sp, #20
 625              		.cfi_def_cfa_offset 24
 626 0004 00AF     		add	r7, sp, #0
 627              		.cfi_def_cfa_register 7
 628 0006 7860     		str	r0, [r7, #4]
 481:../src/stm32f10x_rcc.c ****   uint32_t tmpreg = 0;
 629              		.loc 1 481 0
 630 0008 0023     		movs	r3, #0
 631 000a FB60     		str	r3, [r7, #12]
 482:../src/stm32f10x_rcc.c **** 
 483:../src/stm32f10x_rcc.c ****   /* Check the parameters */
 484:../src/stm32f10x_rcc.c ****   assert_param(IS_RCC_PLL2_MUL(RCC_PLL2Mul));
 485:../src/stm32f10x_rcc.c **** 
 486:../src/stm32f10x_rcc.c ****   tmpreg = RCC->CFGR2;
 632              		.loc 1 486 0
 633 000c 094B     		ldr	r3, .L36
 634 000e DB6A     		ldr	r3, [r3, #44]
 635 0010 FB60     		str	r3, [r7, #12]
 487:../src/stm32f10x_rcc.c ****   /* Clear PLL2Mul[3:0] bits */
 488:../src/stm32f10x_rcc.c ****   tmpreg &= ~CFGR2_PLL2MUL;
 636              		.loc 1 488 0
 637 0012 FB68     		ldr	r3, [r7, #12]
 638 0014 23F47063 		bic	r3, r3, #3840
 639 0018 FB60     		str	r3, [r7, #12]
 489:../src/stm32f10x_rcc.c ****   /* Set the PLL2 configuration bits */
 490:../src/stm32f10x_rcc.c ****   tmpreg |= RCC_PLL2Mul;
 640              		.loc 1 490 0
 641 001a FA68     		ldr	r2, [r7, #12]
 642 001c 7B68     		ldr	r3, [r7, #4]
 643 001e 1343     		orrs	r3, r3, r2
 644 0020 FB60     		str	r3, [r7, #12]
 491:../src/stm32f10x_rcc.c ****   /* Store the new value */
 492:../src/stm32f10x_rcc.c ****   RCC->CFGR2 = tmpreg;
 645              		.loc 1 492 0
 646 0022 044A     		ldr	r2, .L36
 647 0024 FB68     		ldr	r3, [r7, #12]
 648 0026 D362     		str	r3, [r2, #44]
 493:../src/stm32f10x_rcc.c **** }
 649              		.loc 1 493 0
 650 0028 1437     		adds	r7, r7, #20
 651              		.cfi_def_cfa_offset 4
 652 002a BD46     		mov	sp, r7
 653              		.cfi_def_cfa_register 13
 654              		@ sp needed
 655 002c 5DF8047B 		ldr	r7, [sp], #4
 656              		.cfi_restore 7
 657              		.cfi_def_cfa_offset 0
 658 0030 7047     		bx	lr
 659              	.L37:
 660 0032 00BF     		.align	2
 661              	.L36:
 662 0034 00100240 		.word	1073876992
 663              		.cfi_endproc
 664              	.LFE38:
 666              		.section	.text.RCC_PLL2Cmd,"ax",%progbits
 667              		.align	2
 668              		.global	RCC_PLL2Cmd
 669              		.thumb
 670              		.thumb_func
 672              	RCC_PLL2Cmd:
 673              	.LFB39:
 494:../src/stm32f10x_rcc.c **** 
 495:../src/stm32f10x_rcc.c **** 
 496:../src/stm32f10x_rcc.c **** /**
 497:../src/stm32f10x_rcc.c ****   * @brief  Enables or disables the PLL2.
 498:../src/stm32f10x_rcc.c ****   * @note 
 499:../src/stm32f10x_rcc.c ****   *   - The PLL2 can not be disabled if it is used indirectly as system clock
 500:../src/stm32f10x_rcc.c ****   *     (i.e. it is used as PLL clock entry that is used as System clock).
 501:../src/stm32f10x_rcc.c ****   *   - This function applies only to STM32 Connectivity line devices.
 502:../src/stm32f10x_rcc.c ****   * @param  NewState: new state of the PLL2. This parameter can be: ENABLE or DISABLE.
 503:../src/stm32f10x_rcc.c ****   * @retval None
 504:../src/stm32f10x_rcc.c ****   */
 505:../src/stm32f10x_rcc.c **** void RCC_PLL2Cmd(FunctionalState NewState)
 506:../src/stm32f10x_rcc.c **** {
 674              		.loc 1 506 0
 675              		.cfi_startproc
 676              		@ args = 0, pretend = 0, frame = 8
 677              		@ frame_needed = 1, uses_anonymous_args = 0
 678              		@ link register save eliminated.
 679 0000 80B4     		push	{r7}
 680              		.cfi_def_cfa_offset 4
 681              		.cfi_offset 7, -4
 682 0002 83B0     		sub	sp, sp, #12
 683              		.cfi_def_cfa_offset 16
 684 0004 00AF     		add	r7, sp, #0
 685              		.cfi_def_cfa_register 7
 686 0006 0346     		mov	r3, r0
 687 0008 FB71     		strb	r3, [r7, #7]
 507:../src/stm32f10x_rcc.c ****   /* Check the parameters */
 508:../src/stm32f10x_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 509:../src/stm32f10x_rcc.c **** 
 510:../src/stm32f10x_rcc.c ****   *(__IO uint32_t *) CR_PLL2ON_BB = (uint32_t)NewState;
 688              		.loc 1 510 0
 689 000a 044A     		ldr	r2, .L39
 690 000c FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 691 000e 1360     		str	r3, [r2]
 511:../src/stm32f10x_rcc.c **** }
 692              		.loc 1 511 0
 693 0010 0C37     		adds	r7, r7, #12
 694              		.cfi_def_cfa_offset 4
 695 0012 BD46     		mov	sp, r7
 696              		.cfi_def_cfa_register 13
 697              		@ sp needed
 698 0014 5DF8047B 		ldr	r7, [sp], #4
 699              		.cfi_restore 7
 700              		.cfi_def_cfa_offset 0
 701 0018 7047     		bx	lr
 702              	.L40:
 703 001a 00BF     		.align	2
 704              	.L39:
 705 001c 68004242 		.word	1111621736
 706              		.cfi_endproc
 707              	.LFE39:
 709              		.section	.text.RCC_PLL3Config,"ax",%progbits
 710              		.align	2
 711              		.global	RCC_PLL3Config
 712              		.thumb
 713              		.thumb_func
 715              	RCC_PLL3Config:
 716              	.LFB40:
 512:../src/stm32f10x_rcc.c **** 
 513:../src/stm32f10x_rcc.c **** 
 514:../src/stm32f10x_rcc.c **** /**
 515:../src/stm32f10x_rcc.c ****   * @brief  Configures the PLL3 multiplication factor.
 516:../src/stm32f10x_rcc.c ****   * @note 
 517:../src/stm32f10x_rcc.c ****   *   - This function must be used only when the PLL3 is disabled.
 518:../src/stm32f10x_rcc.c ****   *   - This function applies only to STM32 Connectivity line devices.
 519:../src/stm32f10x_rcc.c ****   * @param  RCC_PLL3Mul: specifies the PLL3 multiplication factor.
 520:../src/stm32f10x_rcc.c ****   *   This parameter can be RCC_PLL3Mul_x where x:{[8,14], 16, 20}
 521:../src/stm32f10x_rcc.c ****   * @retval None
 522:../src/stm32f10x_rcc.c ****   */
 523:../src/stm32f10x_rcc.c **** void RCC_PLL3Config(uint32_t RCC_PLL3Mul)
 524:../src/stm32f10x_rcc.c **** {
 717              		.loc 1 524 0
 718              		.cfi_startproc
 719              		@ args = 0, pretend = 0, frame = 16
 720              		@ frame_needed = 1, uses_anonymous_args = 0
 721              		@ link register save eliminated.
 722 0000 80B4     		push	{r7}
 723              		.cfi_def_cfa_offset 4
 724              		.cfi_offset 7, -4
 725 0002 85B0     		sub	sp, sp, #20
 726              		.cfi_def_cfa_offset 24
 727 0004 00AF     		add	r7, sp, #0
 728              		.cfi_def_cfa_register 7
 729 0006 7860     		str	r0, [r7, #4]
 525:../src/stm32f10x_rcc.c ****   uint32_t tmpreg = 0;
 730              		.loc 1 525 0
 731 0008 0023     		movs	r3, #0
 732 000a FB60     		str	r3, [r7, #12]
 526:../src/stm32f10x_rcc.c **** 
 527:../src/stm32f10x_rcc.c ****   /* Check the parameters */
 528:../src/stm32f10x_rcc.c ****   assert_param(IS_RCC_PLL3_MUL(RCC_PLL3Mul));
 529:../src/stm32f10x_rcc.c **** 
 530:../src/stm32f10x_rcc.c ****   tmpreg = RCC->CFGR2;
 733              		.loc 1 530 0
 734 000c 094B     		ldr	r3, .L42
 735 000e DB6A     		ldr	r3, [r3, #44]
 736 0010 FB60     		str	r3, [r7, #12]
 531:../src/stm32f10x_rcc.c ****   /* Clear PLL3Mul[3:0] bits */
 532:../src/stm32f10x_rcc.c ****   tmpreg &= ~CFGR2_PLL3MUL;
 737              		.loc 1 532 0
 738 0012 FB68     		ldr	r3, [r7, #12]
 739 0014 23F47043 		bic	r3, r3, #61440
 740 0018 FB60     		str	r3, [r7, #12]
 533:../src/stm32f10x_rcc.c ****   /* Set the PLL3 configuration bits */
 534:../src/stm32f10x_rcc.c ****   tmpreg |= RCC_PLL3Mul;
 741              		.loc 1 534 0
 742 001a FA68     		ldr	r2, [r7, #12]
 743 001c 7B68     		ldr	r3, [r7, #4]
 744 001e 1343     		orrs	r3, r3, r2
 745 0020 FB60     		str	r3, [r7, #12]
 535:../src/stm32f10x_rcc.c ****   /* Store the new value */
 536:../src/stm32f10x_rcc.c ****   RCC->CFGR2 = tmpreg;
 746              		.loc 1 536 0
 747 0022 044A     		ldr	r2, .L42
 748 0024 FB68     		ldr	r3, [r7, #12]
 749 0026 D362     		str	r3, [r2, #44]
 537:../src/stm32f10x_rcc.c **** }
 750              		.loc 1 537 0
 751 0028 1437     		adds	r7, r7, #20
 752              		.cfi_def_cfa_offset 4
 753 002a BD46     		mov	sp, r7
 754              		.cfi_def_cfa_register 13
 755              		@ sp needed
 756 002c 5DF8047B 		ldr	r7, [sp], #4
 757              		.cfi_restore 7
 758              		.cfi_def_cfa_offset 0
 759 0030 7047     		bx	lr
 760              	.L43:
 761 0032 00BF     		.align	2
 762              	.L42:
 763 0034 00100240 		.word	1073876992
 764              		.cfi_endproc
 765              	.LFE40:
 767              		.section	.text.RCC_PLL3Cmd,"ax",%progbits
 768              		.align	2
 769              		.global	RCC_PLL3Cmd
 770              		.thumb
 771              		.thumb_func
 773              	RCC_PLL3Cmd:
 774              	.LFB41:
 538:../src/stm32f10x_rcc.c **** 
 539:../src/stm32f10x_rcc.c **** 
 540:../src/stm32f10x_rcc.c **** /**
 541:../src/stm32f10x_rcc.c ****   * @brief  Enables or disables the PLL3.
 542:../src/stm32f10x_rcc.c ****   * @note   This function applies only to STM32 Connectivity line devices.
 543:../src/stm32f10x_rcc.c ****   * @param  NewState: new state of the PLL3. This parameter can be: ENABLE or DISABLE.
 544:../src/stm32f10x_rcc.c ****   * @retval None
 545:../src/stm32f10x_rcc.c ****   */
 546:../src/stm32f10x_rcc.c **** void RCC_PLL3Cmd(FunctionalState NewState)
 547:../src/stm32f10x_rcc.c **** {
 775              		.loc 1 547 0
 776              		.cfi_startproc
 777              		@ args = 0, pretend = 0, frame = 8
 778              		@ frame_needed = 1, uses_anonymous_args = 0
 779              		@ link register save eliminated.
 780 0000 80B4     		push	{r7}
 781              		.cfi_def_cfa_offset 4
 782              		.cfi_offset 7, -4
 783 0002 83B0     		sub	sp, sp, #12
 784              		.cfi_def_cfa_offset 16
 785 0004 00AF     		add	r7, sp, #0
 786              		.cfi_def_cfa_register 7
 787 0006 0346     		mov	r3, r0
 788 0008 FB71     		strb	r3, [r7, #7]
 548:../src/stm32f10x_rcc.c ****   /* Check the parameters */
 549:../src/stm32f10x_rcc.c **** 
 550:../src/stm32f10x_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 551:../src/stm32f10x_rcc.c ****   *(__IO uint32_t *) CR_PLL3ON_BB = (uint32_t)NewState;
 789              		.loc 1 551 0
 790 000a 044A     		ldr	r2, .L45
 791 000c FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 792 000e 1360     		str	r3, [r2]
 552:../src/stm32f10x_rcc.c **** }
 793              		.loc 1 552 0
 794 0010 0C37     		adds	r7, r7, #12
 795              		.cfi_def_cfa_offset 4
 796 0012 BD46     		mov	sp, r7
 797              		.cfi_def_cfa_register 13
 798              		@ sp needed
 799 0014 5DF8047B 		ldr	r7, [sp], #4
 800              		.cfi_restore 7
 801              		.cfi_def_cfa_offset 0
 802 0018 7047     		bx	lr
 803              	.L46:
 804 001a 00BF     		.align	2
 805              	.L45:
 806 001c 70004242 		.word	1111621744
 807              		.cfi_endproc
 808              	.LFE41:
 810              		.section	.text.RCC_SYSCLKConfig,"ax",%progbits
 811              		.align	2
 812              		.global	RCC_SYSCLKConfig
 813              		.thumb
 814              		.thumb_func
 816              	RCC_SYSCLKConfig:
 817              	.LFB42:
 553:../src/stm32f10x_rcc.c **** #endif /* STM32F10X_CL */
 554:../src/stm32f10x_rcc.c **** 
 555:../src/stm32f10x_rcc.c **** /**
 556:../src/stm32f10x_rcc.c ****   * @brief  Configures the system clock (SYSCLK).
 557:../src/stm32f10x_rcc.c ****   * @param  RCC_SYSCLKSource: specifies the clock source used as system clock.
 558:../src/stm32f10x_rcc.c ****   *   This parameter can be one of the following values:
 559:../src/stm32f10x_rcc.c ****   *     @arg RCC_SYSCLKSource_HSI: HSI selected as system clock
 560:../src/stm32f10x_rcc.c ****   *     @arg RCC_SYSCLKSource_HSE: HSE selected as system clock
 561:../src/stm32f10x_rcc.c ****   *     @arg RCC_SYSCLKSource_PLLCLK: PLL selected as system clock
 562:../src/stm32f10x_rcc.c ****   * @retval None
 563:../src/stm32f10x_rcc.c ****   */
 564:../src/stm32f10x_rcc.c **** void RCC_SYSCLKConfig(uint32_t RCC_SYSCLKSource)
 565:../src/stm32f10x_rcc.c **** {
 818              		.loc 1 565 0
 819              		.cfi_startproc
 820              		@ args = 0, pretend = 0, frame = 16
 821              		@ frame_needed = 1, uses_anonymous_args = 0
 822              		@ link register save eliminated.
 823 0000 80B4     		push	{r7}
 824              		.cfi_def_cfa_offset 4
 825              		.cfi_offset 7, -4
 826 0002 85B0     		sub	sp, sp, #20
 827              		.cfi_def_cfa_offset 24
 828 0004 00AF     		add	r7, sp, #0
 829              		.cfi_def_cfa_register 7
 830 0006 7860     		str	r0, [r7, #4]
 566:../src/stm32f10x_rcc.c ****   uint32_t tmpreg = 0;
 831              		.loc 1 566 0
 832 0008 0023     		movs	r3, #0
 833 000a FB60     		str	r3, [r7, #12]
 567:../src/stm32f10x_rcc.c ****   /* Check the parameters */
 568:../src/stm32f10x_rcc.c ****   assert_param(IS_RCC_SYSCLK_SOURCE(RCC_SYSCLKSource));
 569:../src/stm32f10x_rcc.c ****   tmpreg = RCC->CFGR;
 834              		.loc 1 569 0
 835 000c 094B     		ldr	r3, .L48
 836 000e 5B68     		ldr	r3, [r3, #4]
 837 0010 FB60     		str	r3, [r7, #12]
 570:../src/stm32f10x_rcc.c ****   /* Clear SW[1:0] bits */
 571:../src/stm32f10x_rcc.c ****   tmpreg &= CFGR_SW_Mask;
 838              		.loc 1 571 0
 839 0012 FB68     		ldr	r3, [r7, #12]
 840 0014 23F00303 		bic	r3, r3, #3
 841 0018 FB60     		str	r3, [r7, #12]
 572:../src/stm32f10x_rcc.c ****   /* Set SW[1:0] bits according to RCC_SYSCLKSource value */
 573:../src/stm32f10x_rcc.c ****   tmpreg |= RCC_SYSCLKSource;
 842              		.loc 1 573 0
 843 001a FA68     		ldr	r2, [r7, #12]
 844 001c 7B68     		ldr	r3, [r7, #4]
 845 001e 1343     		orrs	r3, r3, r2
 846 0020 FB60     		str	r3, [r7, #12]
 574:../src/stm32f10x_rcc.c ****   /* Store the new value */
 575:../src/stm32f10x_rcc.c ****   RCC->CFGR = tmpreg;
 847              		.loc 1 575 0
 848 0022 044A     		ldr	r2, .L48
 849 0024 FB68     		ldr	r3, [r7, #12]
 850 0026 5360     		str	r3, [r2, #4]
 576:../src/stm32f10x_rcc.c **** }
 851              		.loc 1 576 0
 852 0028 1437     		adds	r7, r7, #20
 853              		.cfi_def_cfa_offset 4
 854 002a BD46     		mov	sp, r7
 855              		.cfi_def_cfa_register 13
 856              		@ sp needed
 857 002c 5DF8047B 		ldr	r7, [sp], #4
 858              		.cfi_restore 7
 859              		.cfi_def_cfa_offset 0
 860 0030 7047     		bx	lr
 861              	.L49:
 862 0032 00BF     		.align	2
 863              	.L48:
 864 0034 00100240 		.word	1073876992
 865              		.cfi_endproc
 866              	.LFE42:
 868              		.section	.text.RCC_GetSYSCLKSource,"ax",%progbits
 869              		.align	2
 870              		.global	RCC_GetSYSCLKSource
 871              		.thumb
 872              		.thumb_func
 874              	RCC_GetSYSCLKSource:
 875              	.LFB43:
 577:../src/stm32f10x_rcc.c **** 
 578:../src/stm32f10x_rcc.c **** /**
 579:../src/stm32f10x_rcc.c ****   * @brief  Returns the clock source used as system clock.
 580:../src/stm32f10x_rcc.c ****   * @param  None
 581:../src/stm32f10x_rcc.c ****   * @retval The clock source used as system clock. The returned value can
 582:../src/stm32f10x_rcc.c ****   *   be one of the following:
 583:../src/stm32f10x_rcc.c ****   *     - 0x00: HSI used as system clock
 584:../src/stm32f10x_rcc.c ****   *     - 0x04: HSE used as system clock
 585:../src/stm32f10x_rcc.c ****   *     - 0x08: PLL used as system clock
 586:../src/stm32f10x_rcc.c ****   */
 587:../src/stm32f10x_rcc.c **** uint8_t RCC_GetSYSCLKSource(void)
 588:../src/stm32f10x_rcc.c **** {
 876              		.loc 1 588 0
 877              		.cfi_startproc
 878              		@ args = 0, pretend = 0, frame = 0
 879              		@ frame_needed = 1, uses_anonymous_args = 0
 880              		@ link register save eliminated.
 881 0000 80B4     		push	{r7}
 882              		.cfi_def_cfa_offset 4
 883              		.cfi_offset 7, -4
 884 0002 00AF     		add	r7, sp, #0
 885              		.cfi_def_cfa_register 7
 589:../src/stm32f10x_rcc.c ****   return ((uint8_t)(RCC->CFGR & CFGR_SWS_Mask));
 886              		.loc 1 589 0
 887 0004 054B     		ldr	r3, .L52
 888 0006 5B68     		ldr	r3, [r3, #4]
 889 0008 DBB2     		uxtb	r3, r3
 890 000a 03F00C03 		and	r3, r3, #12
 891 000e DBB2     		uxtb	r3, r3
 590:../src/stm32f10x_rcc.c **** }
 892              		.loc 1 590 0
 893 0010 1846     		mov	r0, r3
 894 0012 BD46     		mov	sp, r7
 895              		.cfi_def_cfa_register 13
 896              		@ sp needed
 897 0014 5DF8047B 		ldr	r7, [sp], #4
 898              		.cfi_restore 7
 899              		.cfi_def_cfa_offset 0
 900 0018 7047     		bx	lr
 901              	.L53:
 902 001a 00BF     		.align	2
 903              	.L52:
 904 001c 00100240 		.word	1073876992
 905              		.cfi_endproc
 906              	.LFE43:
 908              		.section	.text.RCC_HCLKConfig,"ax",%progbits
 909              		.align	2
 910              		.global	RCC_HCLKConfig
 911              		.thumb
 912              		.thumb_func
 914              	RCC_HCLKConfig:
 915              	.LFB44:
 591:../src/stm32f10x_rcc.c **** 
 592:../src/stm32f10x_rcc.c **** /**
 593:../src/stm32f10x_rcc.c ****   * @brief  Configures the AHB clock (HCLK).
 594:../src/stm32f10x_rcc.c ****   * @param  RCC_SYSCLK: defines the AHB clock divider. This clock is derived from 
 595:../src/stm32f10x_rcc.c ****   *   the system clock (SYSCLK).
 596:../src/stm32f10x_rcc.c ****   *   This parameter can be one of the following values:
 597:../src/stm32f10x_rcc.c ****   *     @arg RCC_SYSCLK_Div1: AHB clock = SYSCLK
 598:../src/stm32f10x_rcc.c ****   *     @arg RCC_SYSCLK_Div2: AHB clock = SYSCLK/2
 599:../src/stm32f10x_rcc.c ****   *     @arg RCC_SYSCLK_Div4: AHB clock = SYSCLK/4
 600:../src/stm32f10x_rcc.c ****   *     @arg RCC_SYSCLK_Div8: AHB clock = SYSCLK/8
 601:../src/stm32f10x_rcc.c ****   *     @arg RCC_SYSCLK_Div16: AHB clock = SYSCLK/16
 602:../src/stm32f10x_rcc.c ****   *     @arg RCC_SYSCLK_Div64: AHB clock = SYSCLK/64
 603:../src/stm32f10x_rcc.c ****   *     @arg RCC_SYSCLK_Div128: AHB clock = SYSCLK/128
 604:../src/stm32f10x_rcc.c ****   *     @arg RCC_SYSCLK_Div256: AHB clock = SYSCLK/256
 605:../src/stm32f10x_rcc.c ****   *     @arg RCC_SYSCLK_Div512: AHB clock = SYSCLK/512
 606:../src/stm32f10x_rcc.c ****   * @retval None
 607:../src/stm32f10x_rcc.c ****   */
 608:../src/stm32f10x_rcc.c **** void RCC_HCLKConfig(uint32_t RCC_SYSCLK)
 609:../src/stm32f10x_rcc.c **** {
 916              		.loc 1 609 0
 917              		.cfi_startproc
 918              		@ args = 0, pretend = 0, frame = 16
 919              		@ frame_needed = 1, uses_anonymous_args = 0
 920              		@ link register save eliminated.
 921 0000 80B4     		push	{r7}
 922              		.cfi_def_cfa_offset 4
 923              		.cfi_offset 7, -4
 924 0002 85B0     		sub	sp, sp, #20
 925              		.cfi_def_cfa_offset 24
 926 0004 00AF     		add	r7, sp, #0
 927              		.cfi_def_cfa_register 7
 928 0006 7860     		str	r0, [r7, #4]
 610:../src/stm32f10x_rcc.c ****   uint32_t tmpreg = 0;
 929              		.loc 1 610 0
 930 0008 0023     		movs	r3, #0
 931 000a FB60     		str	r3, [r7, #12]
 611:../src/stm32f10x_rcc.c ****   /* Check the parameters */
 612:../src/stm32f10x_rcc.c ****   assert_param(IS_RCC_HCLK(RCC_SYSCLK));
 613:../src/stm32f10x_rcc.c ****   tmpreg = RCC->CFGR;
 932              		.loc 1 613 0
 933 000c 094B     		ldr	r3, .L55
 934 000e 5B68     		ldr	r3, [r3, #4]
 935 0010 FB60     		str	r3, [r7, #12]
 614:../src/stm32f10x_rcc.c ****   /* Clear HPRE[3:0] bits */
 615:../src/stm32f10x_rcc.c ****   tmpreg &= CFGR_HPRE_Reset_Mask;
 936              		.loc 1 615 0
 937 0012 FB68     		ldr	r3, [r7, #12]
 938 0014 23F0F003 		bic	r3, r3, #240
 939 0018 FB60     		str	r3, [r7, #12]
 616:../src/stm32f10x_rcc.c ****   /* Set HPRE[3:0] bits according to RCC_SYSCLK value */
 617:../src/stm32f10x_rcc.c ****   tmpreg |= RCC_SYSCLK;
 940              		.loc 1 617 0
 941 001a FA68     		ldr	r2, [r7, #12]
 942 001c 7B68     		ldr	r3, [r7, #4]
 943 001e 1343     		orrs	r3, r3, r2
 944 0020 FB60     		str	r3, [r7, #12]
 618:../src/stm32f10x_rcc.c ****   /* Store the new value */
 619:../src/stm32f10x_rcc.c ****   RCC->CFGR = tmpreg;
 945              		.loc 1 619 0
 946 0022 044A     		ldr	r2, .L55
 947 0024 FB68     		ldr	r3, [r7, #12]
 948 0026 5360     		str	r3, [r2, #4]
 620:../src/stm32f10x_rcc.c **** }
 949              		.loc 1 620 0
 950 0028 1437     		adds	r7, r7, #20
 951              		.cfi_def_cfa_offset 4
 952 002a BD46     		mov	sp, r7
 953              		.cfi_def_cfa_register 13
 954              		@ sp needed
 955 002c 5DF8047B 		ldr	r7, [sp], #4
 956              		.cfi_restore 7
 957              		.cfi_def_cfa_offset 0
 958 0030 7047     		bx	lr
 959              	.L56:
 960 0032 00BF     		.align	2
 961              	.L55:
 962 0034 00100240 		.word	1073876992
 963              		.cfi_endproc
 964              	.LFE44:
 966              		.section	.text.RCC_PCLK1Config,"ax",%progbits
 967              		.align	2
 968              		.global	RCC_PCLK1Config
 969              		.thumb
 970              		.thumb_func
 972              	RCC_PCLK1Config:
 973              	.LFB45:
 621:../src/stm32f10x_rcc.c **** 
 622:../src/stm32f10x_rcc.c **** /**
 623:../src/stm32f10x_rcc.c ****   * @brief  Configures the Low Speed APB clock (PCLK1).
 624:../src/stm32f10x_rcc.c ****   * @param  RCC_HCLK: defines the APB1 clock divider. This clock is derived from 
 625:../src/stm32f10x_rcc.c ****   *   the AHB clock (HCLK).
 626:../src/stm32f10x_rcc.c ****   *   This parameter can be one of the following values:
 627:../src/stm32f10x_rcc.c ****   *     @arg RCC_HCLK_Div1: APB1 clock = HCLK
 628:../src/stm32f10x_rcc.c ****   *     @arg RCC_HCLK_Div2: APB1 clock = HCLK/2
 629:../src/stm32f10x_rcc.c ****   *     @arg RCC_HCLK_Div4: APB1 clock = HCLK/4
 630:../src/stm32f10x_rcc.c ****   *     @arg RCC_HCLK_Div8: APB1 clock = HCLK/8
 631:../src/stm32f10x_rcc.c ****   *     @arg RCC_HCLK_Div16: APB1 clock = HCLK/16
 632:../src/stm32f10x_rcc.c ****   * @retval None
 633:../src/stm32f10x_rcc.c ****   */
 634:../src/stm32f10x_rcc.c **** void RCC_PCLK1Config(uint32_t RCC_HCLK)
 635:../src/stm32f10x_rcc.c **** {
 974              		.loc 1 635 0
 975              		.cfi_startproc
 976              		@ args = 0, pretend = 0, frame = 16
 977              		@ frame_needed = 1, uses_anonymous_args = 0
 978              		@ link register save eliminated.
 979 0000 80B4     		push	{r7}
 980              		.cfi_def_cfa_offset 4
 981              		.cfi_offset 7, -4
 982 0002 85B0     		sub	sp, sp, #20
 983              		.cfi_def_cfa_offset 24
 984 0004 00AF     		add	r7, sp, #0
 985              		.cfi_def_cfa_register 7
 986 0006 7860     		str	r0, [r7, #4]
 636:../src/stm32f10x_rcc.c ****   uint32_t tmpreg = 0;
 987              		.loc 1 636 0
 988 0008 0023     		movs	r3, #0
 989 000a FB60     		str	r3, [r7, #12]
 637:../src/stm32f10x_rcc.c ****   /* Check the parameters */
 638:../src/stm32f10x_rcc.c ****   assert_param(IS_RCC_PCLK(RCC_HCLK));
 639:../src/stm32f10x_rcc.c ****   tmpreg = RCC->CFGR;
 990              		.loc 1 639 0
 991 000c 094B     		ldr	r3, .L58
 992 000e 5B68     		ldr	r3, [r3, #4]
 993 0010 FB60     		str	r3, [r7, #12]
 640:../src/stm32f10x_rcc.c ****   /* Clear PPRE1[2:0] bits */
 641:../src/stm32f10x_rcc.c ****   tmpreg &= CFGR_PPRE1_Reset_Mask;
 994              		.loc 1 641 0
 995 0012 FB68     		ldr	r3, [r7, #12]
 996 0014 23F4E063 		bic	r3, r3, #1792
 997 0018 FB60     		str	r3, [r7, #12]
 642:../src/stm32f10x_rcc.c ****   /* Set PPRE1[2:0] bits according to RCC_HCLK value */
 643:../src/stm32f10x_rcc.c ****   tmpreg |= RCC_HCLK;
 998              		.loc 1 643 0
 999 001a FA68     		ldr	r2, [r7, #12]
 1000 001c 7B68     		ldr	r3, [r7, #4]
 1001 001e 1343     		orrs	r3, r3, r2
 1002 0020 FB60     		str	r3, [r7, #12]
 644:../src/stm32f10x_rcc.c ****   /* Store the new value */
 645:../src/stm32f10x_rcc.c ****   RCC->CFGR = tmpreg;
 1003              		.loc 1 645 0
 1004 0022 044A     		ldr	r2, .L58
 1005 0024 FB68     		ldr	r3, [r7, #12]
 1006 0026 5360     		str	r3, [r2, #4]
 646:../src/stm32f10x_rcc.c **** }
 1007              		.loc 1 646 0
 1008 0028 1437     		adds	r7, r7, #20
 1009              		.cfi_def_cfa_offset 4
 1010 002a BD46     		mov	sp, r7
 1011              		.cfi_def_cfa_register 13
 1012              		@ sp needed
 1013 002c 5DF8047B 		ldr	r7, [sp], #4
 1014              		.cfi_restore 7
 1015              		.cfi_def_cfa_offset 0
 1016 0030 7047     		bx	lr
 1017              	.L59:
 1018 0032 00BF     		.align	2
 1019              	.L58:
 1020 0034 00100240 		.word	1073876992
 1021              		.cfi_endproc
 1022              	.LFE45:
 1024              		.section	.text.RCC_PCLK2Config,"ax",%progbits
 1025              		.align	2
 1026              		.global	RCC_PCLK2Config
 1027              		.thumb
 1028              		.thumb_func
 1030              	RCC_PCLK2Config:
 1031              	.LFB46:
 647:../src/stm32f10x_rcc.c **** 
 648:../src/stm32f10x_rcc.c **** /**
 649:../src/stm32f10x_rcc.c ****   * @brief  Configures the High Speed APB clock (PCLK2).
 650:../src/stm32f10x_rcc.c ****   * @param  RCC_HCLK: defines the APB2 clock divider. This clock is derived from 
 651:../src/stm32f10x_rcc.c ****   *   the AHB clock (HCLK).
 652:../src/stm32f10x_rcc.c ****   *   This parameter can be one of the following values:
 653:../src/stm32f10x_rcc.c ****   *     @arg RCC_HCLK_Div1: APB2 clock = HCLK
 654:../src/stm32f10x_rcc.c ****   *     @arg RCC_HCLK_Div2: APB2 clock = HCLK/2
 655:../src/stm32f10x_rcc.c ****   *     @arg RCC_HCLK_Div4: APB2 clock = HCLK/4
 656:../src/stm32f10x_rcc.c ****   *     @arg RCC_HCLK_Div8: APB2 clock = HCLK/8
 657:../src/stm32f10x_rcc.c ****   *     @arg RCC_HCLK_Div16: APB2 clock = HCLK/16
 658:../src/stm32f10x_rcc.c ****   * @retval None
 659:../src/stm32f10x_rcc.c ****   */
 660:../src/stm32f10x_rcc.c **** void RCC_PCLK2Config(uint32_t RCC_HCLK)
 661:../src/stm32f10x_rcc.c **** {
 1032              		.loc 1 661 0
 1033              		.cfi_startproc
 1034              		@ args = 0, pretend = 0, frame = 16
 1035              		@ frame_needed = 1, uses_anonymous_args = 0
 1036              		@ link register save eliminated.
 1037 0000 80B4     		push	{r7}
 1038              		.cfi_def_cfa_offset 4
 1039              		.cfi_offset 7, -4
 1040 0002 85B0     		sub	sp, sp, #20
 1041              		.cfi_def_cfa_offset 24
 1042 0004 00AF     		add	r7, sp, #0
 1043              		.cfi_def_cfa_register 7
 1044 0006 7860     		str	r0, [r7, #4]
 662:../src/stm32f10x_rcc.c ****   uint32_t tmpreg = 0;
 1045              		.loc 1 662 0
 1046 0008 0023     		movs	r3, #0
 1047 000a FB60     		str	r3, [r7, #12]
 663:../src/stm32f10x_rcc.c ****   /* Check the parameters */
 664:../src/stm32f10x_rcc.c ****   assert_param(IS_RCC_PCLK(RCC_HCLK));
 665:../src/stm32f10x_rcc.c ****   tmpreg = RCC->CFGR;
 1048              		.loc 1 665 0
 1049 000c 094B     		ldr	r3, .L61
 1050 000e 5B68     		ldr	r3, [r3, #4]
 1051 0010 FB60     		str	r3, [r7, #12]
 666:../src/stm32f10x_rcc.c ****   /* Clear PPRE2[2:0] bits */
 667:../src/stm32f10x_rcc.c ****   tmpreg &= CFGR_PPRE2_Reset_Mask;
 1052              		.loc 1 667 0
 1053 0012 FB68     		ldr	r3, [r7, #12]
 1054 0014 23F46053 		bic	r3, r3, #14336
 1055 0018 FB60     		str	r3, [r7, #12]
 668:../src/stm32f10x_rcc.c ****   /* Set PPRE2[2:0] bits according to RCC_HCLK value */
 669:../src/stm32f10x_rcc.c ****   tmpreg |= RCC_HCLK << 3;
 1056              		.loc 1 669 0
 1057 001a 7B68     		ldr	r3, [r7, #4]
 1058 001c DB00     		lsls	r3, r3, #3
 1059 001e FA68     		ldr	r2, [r7, #12]
 1060 0020 1343     		orrs	r3, r3, r2
 1061 0022 FB60     		str	r3, [r7, #12]
 670:../src/stm32f10x_rcc.c ****   /* Store the new value */
 671:../src/stm32f10x_rcc.c ****   RCC->CFGR = tmpreg;
 1062              		.loc 1 671 0
 1063 0024 034A     		ldr	r2, .L61
 1064 0026 FB68     		ldr	r3, [r7, #12]
 1065 0028 5360     		str	r3, [r2, #4]
 672:../src/stm32f10x_rcc.c **** }
 1066              		.loc 1 672 0
 1067 002a 1437     		adds	r7, r7, #20
 1068              		.cfi_def_cfa_offset 4
 1069 002c BD46     		mov	sp, r7
 1070              		.cfi_def_cfa_register 13
 1071              		@ sp needed
 1072 002e 5DF8047B 		ldr	r7, [sp], #4
 1073              		.cfi_restore 7
 1074              		.cfi_def_cfa_offset 0
 1075 0032 7047     		bx	lr
 1076              	.L62:
 1077              		.align	2
 1078              	.L61:
 1079 0034 00100240 		.word	1073876992
 1080              		.cfi_endproc
 1081              	.LFE46:
 1083              		.section	.text.RCC_ITConfig,"ax",%progbits
 1084              		.align	2
 1085              		.global	RCC_ITConfig
 1086              		.thumb
 1087              		.thumb_func
 1089              	RCC_ITConfig:
 1090              	.LFB47:
 673:../src/stm32f10x_rcc.c **** 
 674:../src/stm32f10x_rcc.c **** /**
 675:../src/stm32f10x_rcc.c ****   * @brief  Enables or disables the specified RCC interrupts.
 676:../src/stm32f10x_rcc.c ****   * @param  RCC_IT: specifies the RCC interrupt sources to be enabled or disabled.
 677:../src/stm32f10x_rcc.c ****   * 
 678:../src/stm32f10x_rcc.c ****   *   For @b STM32_Connectivity_line_devices, this parameter can be any combination
 679:../src/stm32f10x_rcc.c ****   *   of the following values        
 680:../src/stm32f10x_rcc.c ****   *     @arg RCC_IT_LSIRDY: LSI ready interrupt
 681:../src/stm32f10x_rcc.c ****   *     @arg RCC_IT_LSERDY: LSE ready interrupt
 682:../src/stm32f10x_rcc.c ****   *     @arg RCC_IT_HSIRDY: HSI ready interrupt
 683:../src/stm32f10x_rcc.c ****   *     @arg RCC_IT_HSERDY: HSE ready interrupt
 684:../src/stm32f10x_rcc.c ****   *     @arg RCC_IT_PLLRDY: PLL ready interrupt
 685:../src/stm32f10x_rcc.c ****   *     @arg RCC_IT_PLL2RDY: PLL2 ready interrupt
 686:../src/stm32f10x_rcc.c ****   *     @arg RCC_IT_PLL3RDY: PLL3 ready interrupt
 687:../src/stm32f10x_rcc.c ****   * 
 688:../src/stm32f10x_rcc.c ****   *   For @b other_STM32_devices, this parameter can be any combination of the 
 689:../src/stm32f10x_rcc.c ****   *   following values        
 690:../src/stm32f10x_rcc.c ****   *     @arg RCC_IT_LSIRDY: LSI ready interrupt
 691:../src/stm32f10x_rcc.c ****   *     @arg RCC_IT_LSERDY: LSE ready interrupt
 692:../src/stm32f10x_rcc.c ****   *     @arg RCC_IT_HSIRDY: HSI ready interrupt
 693:../src/stm32f10x_rcc.c ****   *     @arg RCC_IT_HSERDY: HSE ready interrupt
 694:../src/stm32f10x_rcc.c ****   *     @arg RCC_IT_PLLRDY: PLL ready interrupt
 695:../src/stm32f10x_rcc.c ****   *       
 696:../src/stm32f10x_rcc.c ****   * @param  NewState: new state of the specified RCC interrupts.
 697:../src/stm32f10x_rcc.c ****   *   This parameter can be: ENABLE or DISABLE.
 698:../src/stm32f10x_rcc.c ****   * @retval None
 699:../src/stm32f10x_rcc.c ****   */
 700:../src/stm32f10x_rcc.c **** void RCC_ITConfig(uint8_t RCC_IT, FunctionalState NewState)
 701:../src/stm32f10x_rcc.c **** {
 1091              		.loc 1 701 0
 1092              		.cfi_startproc
 1093              		@ args = 0, pretend = 0, frame = 8
 1094              		@ frame_needed = 1, uses_anonymous_args = 0
 1095              		@ link register save eliminated.
 1096 0000 80B4     		push	{r7}
 1097              		.cfi_def_cfa_offset 4
 1098              		.cfi_offset 7, -4
 1099 0002 83B0     		sub	sp, sp, #12
 1100              		.cfi_def_cfa_offset 16
 1101 0004 00AF     		add	r7, sp, #0
 1102              		.cfi_def_cfa_register 7
 1103 0006 0346     		mov	r3, r0
 1104 0008 0A46     		mov	r2, r1
 1105 000a FB71     		strb	r3, [r7, #7]
 1106 000c 1346     		mov	r3, r2
 1107 000e BB71     		strb	r3, [r7, #6]
 702:../src/stm32f10x_rcc.c ****   /* Check the parameters */
 703:../src/stm32f10x_rcc.c ****   assert_param(IS_RCC_IT(RCC_IT));
 704:../src/stm32f10x_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 705:../src/stm32f10x_rcc.c ****   if (NewState != DISABLE)
 1108              		.loc 1 705 0
 1109 0010 BB79     		ldrb	r3, [r7, #6]	@ zero_extendqisi2
 1110 0012 002B     		cmp	r3, #0
 1111 0014 08D0     		beq	.L64
 706:../src/stm32f10x_rcc.c ****   {
 707:../src/stm32f10x_rcc.c ****     /* Perform Byte access to RCC_CIR bits to enable the selected interrupts */
 708:../src/stm32f10x_rcc.c ****     *(__IO uint8_t *) CIR_BYTE2_ADDRESS |= RCC_IT;
 1112              		.loc 1 708 0
 1113 0016 0C49     		ldr	r1, .L66
 1114 0018 0B4B     		ldr	r3, .L66
 1115 001a 1B78     		ldrb	r3, [r3]
 1116 001c DAB2     		uxtb	r2, r3
 1117 001e FB79     		ldrb	r3, [r7, #7]
 1118 0020 1343     		orrs	r3, r3, r2
 1119 0022 DBB2     		uxtb	r3, r3
 1120 0024 0B70     		strb	r3, [r1]
 1121 0026 09E0     		b	.L63
 1122              	.L64:
 709:../src/stm32f10x_rcc.c ****   }
 710:../src/stm32f10x_rcc.c ****   else
 711:../src/stm32f10x_rcc.c ****   {
 712:../src/stm32f10x_rcc.c ****     /* Perform Byte access to RCC_CIR bits to disable the selected interrupts */
 713:../src/stm32f10x_rcc.c ****     *(__IO uint8_t *) CIR_BYTE2_ADDRESS &= (uint8_t)~RCC_IT;
 1123              		.loc 1 713 0
 1124 0028 0749     		ldr	r1, .L66
 1125 002a 074B     		ldr	r3, .L66
 1126 002c 1B78     		ldrb	r3, [r3]
 1127 002e DAB2     		uxtb	r2, r3
 1128 0030 FB79     		ldrb	r3, [r7, #7]
 1129 0032 DB43     		mvns	r3, r3
 1130 0034 DBB2     		uxtb	r3, r3
 1131 0036 1340     		ands	r3, r3, r2
 1132 0038 DBB2     		uxtb	r3, r3
 1133 003a 0B70     		strb	r3, [r1]
 1134              	.L63:
 714:../src/stm32f10x_rcc.c ****   }
 715:../src/stm32f10x_rcc.c **** }
 1135              		.loc 1 715 0
 1136 003c 0C37     		adds	r7, r7, #12
 1137              		.cfi_def_cfa_offset 4
 1138 003e BD46     		mov	sp, r7
 1139              		.cfi_def_cfa_register 13
 1140              		@ sp needed
 1141 0040 5DF8047B 		ldr	r7, [sp], #4
 1142              		.cfi_restore 7
 1143              		.cfi_def_cfa_offset 0
 1144 0044 7047     		bx	lr
 1145              	.L67:
 1146 0046 00BF     		.align	2
 1147              	.L66:
 1148 0048 09100240 		.word	1073877001
 1149              		.cfi_endproc
 1150              	.LFE47:
 1152              		.section	.text.RCC_OTGFSCLKConfig,"ax",%progbits
 1153              		.align	2
 1154              		.global	RCC_OTGFSCLKConfig
 1155              		.thumb
 1156              		.thumb_func
 1158              	RCC_OTGFSCLKConfig:
 1159              	.LFB48:
 716:../src/stm32f10x_rcc.c **** 
 717:../src/stm32f10x_rcc.c **** #ifndef STM32F10X_CL
 718:../src/stm32f10x_rcc.c **** /**
 719:../src/stm32f10x_rcc.c ****   * @brief  Configures the USB clock (USBCLK).
 720:../src/stm32f10x_rcc.c ****   * @param  RCC_USBCLKSource: specifies the USB clock source. This clock is 
 721:../src/stm32f10x_rcc.c ****   *   derived from the PLL output.
 722:../src/stm32f10x_rcc.c ****   *   This parameter can be one of the following values:
 723:../src/stm32f10x_rcc.c ****   *     @arg RCC_USBCLKSource_PLLCLK_1Div5: PLL clock divided by 1,5 selected as USB 
 724:../src/stm32f10x_rcc.c ****   *                                     clock source
 725:../src/stm32f10x_rcc.c ****   *     @arg RCC_USBCLKSource_PLLCLK_Div1: PLL clock selected as USB clock source
 726:../src/stm32f10x_rcc.c ****   * @retval None
 727:../src/stm32f10x_rcc.c ****   */
 728:../src/stm32f10x_rcc.c **** void RCC_USBCLKConfig(uint32_t RCC_USBCLKSource)
 729:../src/stm32f10x_rcc.c **** {
 730:../src/stm32f10x_rcc.c ****   /* Check the parameters */
 731:../src/stm32f10x_rcc.c ****   assert_param(IS_RCC_USBCLK_SOURCE(RCC_USBCLKSource));
 732:../src/stm32f10x_rcc.c **** 
 733:../src/stm32f10x_rcc.c ****   *(__IO uint32_t *) CFGR_USBPRE_BB = RCC_USBCLKSource;
 734:../src/stm32f10x_rcc.c **** }
 735:../src/stm32f10x_rcc.c **** #else
 736:../src/stm32f10x_rcc.c **** /**
 737:../src/stm32f10x_rcc.c ****   * @brief  Configures the USB OTG FS clock (OTGFSCLK).
 738:../src/stm32f10x_rcc.c ****   *   This function applies only to STM32 Connectivity line devices.
 739:../src/stm32f10x_rcc.c ****   * @param  RCC_OTGFSCLKSource: specifies the USB OTG FS clock source.
 740:../src/stm32f10x_rcc.c ****   *   This clock is derived from the PLL output.
 741:../src/stm32f10x_rcc.c ****   *   This parameter can be one of the following values:
 742:../src/stm32f10x_rcc.c ****   *     @arg  RCC_OTGFSCLKSource_PLLVCO_Div3: PLL VCO clock divided by 2 selected as USB OTG FS clo
 743:../src/stm32f10x_rcc.c ****   *     @arg  RCC_OTGFSCLKSource_PLLVCO_Div2: PLL VCO clock divided by 2 selected as USB OTG FS clo
 744:../src/stm32f10x_rcc.c ****   * @retval None
 745:../src/stm32f10x_rcc.c ****   */
 746:../src/stm32f10x_rcc.c **** void RCC_OTGFSCLKConfig(uint32_t RCC_OTGFSCLKSource)
 747:../src/stm32f10x_rcc.c **** {
 1160              		.loc 1 747 0
 1161              		.cfi_startproc
 1162              		@ args = 0, pretend = 0, frame = 8
 1163              		@ frame_needed = 1, uses_anonymous_args = 0
 1164              		@ link register save eliminated.
 1165 0000 80B4     		push	{r7}
 1166              		.cfi_def_cfa_offset 4
 1167              		.cfi_offset 7, -4
 1168 0002 83B0     		sub	sp, sp, #12
 1169              		.cfi_def_cfa_offset 16
 1170 0004 00AF     		add	r7, sp, #0
 1171              		.cfi_def_cfa_register 7
 1172 0006 7860     		str	r0, [r7, #4]
 748:../src/stm32f10x_rcc.c ****   /* Check the parameters */
 749:../src/stm32f10x_rcc.c ****   assert_param(IS_RCC_OTGFSCLK_SOURCE(RCC_OTGFSCLKSource));
 750:../src/stm32f10x_rcc.c **** 
 751:../src/stm32f10x_rcc.c ****   *(__IO uint32_t *) CFGR_OTGFSPRE_BB = RCC_OTGFSCLKSource;
 1173              		.loc 1 751 0
 1174 0008 034A     		ldr	r2, .L69
 1175 000a 7B68     		ldr	r3, [r7, #4]
 1176 000c 1360     		str	r3, [r2]
 752:../src/stm32f10x_rcc.c **** }
 1177              		.loc 1 752 0
 1178 000e 0C37     		adds	r7, r7, #12
 1179              		.cfi_def_cfa_offset 4
 1180 0010 BD46     		mov	sp, r7
 1181              		.cfi_def_cfa_register 13
 1182              		@ sp needed
 1183 0012 5DF8047B 		ldr	r7, [sp], #4
 1184              		.cfi_restore 7
 1185              		.cfi_def_cfa_offset 0
 1186 0016 7047     		bx	lr
 1187              	.L70:
 1188              		.align	2
 1189              	.L69:
 1190 0018 D8004242 		.word	1111621848
 1191              		.cfi_endproc
 1192              	.LFE48:
 1194              		.section	.text.RCC_ADCCLKConfig,"ax",%progbits
 1195              		.align	2
 1196              		.global	RCC_ADCCLKConfig
 1197              		.thumb
 1198              		.thumb_func
 1200              	RCC_ADCCLKConfig:
 1201              	.LFB49:
 753:../src/stm32f10x_rcc.c **** #endif /* STM32F10X_CL */ 
 754:../src/stm32f10x_rcc.c **** 
 755:../src/stm32f10x_rcc.c **** /**
 756:../src/stm32f10x_rcc.c ****   * @brief  Configures the ADC clock (ADCCLK).
 757:../src/stm32f10x_rcc.c ****   * @param  RCC_PCLK2: defines the ADC clock divider. This clock is derived from 
 758:../src/stm32f10x_rcc.c ****   *   the APB2 clock (PCLK2).
 759:../src/stm32f10x_rcc.c ****   *   This parameter can be one of the following values:
 760:../src/stm32f10x_rcc.c ****   *     @arg RCC_PCLK2_Div2: ADC clock = PCLK2/2
 761:../src/stm32f10x_rcc.c ****   *     @arg RCC_PCLK2_Div4: ADC clock = PCLK2/4
 762:../src/stm32f10x_rcc.c ****   *     @arg RCC_PCLK2_Div6: ADC clock = PCLK2/6
 763:../src/stm32f10x_rcc.c ****   *     @arg RCC_PCLK2_Div8: ADC clock = PCLK2/8
 764:../src/stm32f10x_rcc.c ****   * @retval None
 765:../src/stm32f10x_rcc.c ****   */
 766:../src/stm32f10x_rcc.c **** void RCC_ADCCLKConfig(uint32_t RCC_PCLK2)
 767:../src/stm32f10x_rcc.c **** {
 1202              		.loc 1 767 0
 1203              		.cfi_startproc
 1204              		@ args = 0, pretend = 0, frame = 16
 1205              		@ frame_needed = 1, uses_anonymous_args = 0
 1206              		@ link register save eliminated.
 1207 0000 80B4     		push	{r7}
 1208              		.cfi_def_cfa_offset 4
 1209              		.cfi_offset 7, -4
 1210 0002 85B0     		sub	sp, sp, #20
 1211              		.cfi_def_cfa_offset 24
 1212 0004 00AF     		add	r7, sp, #0
 1213              		.cfi_def_cfa_register 7
 1214 0006 7860     		str	r0, [r7, #4]
 768:../src/stm32f10x_rcc.c ****   uint32_t tmpreg = 0;
 1215              		.loc 1 768 0
 1216 0008 0023     		movs	r3, #0
 1217 000a FB60     		str	r3, [r7, #12]
 769:../src/stm32f10x_rcc.c ****   /* Check the parameters */
 770:../src/stm32f10x_rcc.c ****   assert_param(IS_RCC_ADCCLK(RCC_PCLK2));
 771:../src/stm32f10x_rcc.c ****   tmpreg = RCC->CFGR;
 1218              		.loc 1 771 0
 1219 000c 094B     		ldr	r3, .L72
 1220 000e 5B68     		ldr	r3, [r3, #4]
 1221 0010 FB60     		str	r3, [r7, #12]
 772:../src/stm32f10x_rcc.c ****   /* Clear ADCPRE[1:0] bits */
 773:../src/stm32f10x_rcc.c ****   tmpreg &= CFGR_ADCPRE_Reset_Mask;
 1222              		.loc 1 773 0
 1223 0012 FB68     		ldr	r3, [r7, #12]
 1224 0014 23F44043 		bic	r3, r3, #49152
 1225 0018 FB60     		str	r3, [r7, #12]
 774:../src/stm32f10x_rcc.c ****   /* Set ADCPRE[1:0] bits according to RCC_PCLK2 value */
 775:../src/stm32f10x_rcc.c ****   tmpreg |= RCC_PCLK2;
 1226              		.loc 1 775 0
 1227 001a FA68     		ldr	r2, [r7, #12]
 1228 001c 7B68     		ldr	r3, [r7, #4]
 1229 001e 1343     		orrs	r3, r3, r2
 1230 0020 FB60     		str	r3, [r7, #12]
 776:../src/stm32f10x_rcc.c ****   /* Store the new value */
 777:../src/stm32f10x_rcc.c ****   RCC->CFGR = tmpreg;
 1231              		.loc 1 777 0
 1232 0022 044A     		ldr	r2, .L72
 1233 0024 FB68     		ldr	r3, [r7, #12]
 1234 0026 5360     		str	r3, [r2, #4]
 778:../src/stm32f10x_rcc.c **** }
 1235              		.loc 1 778 0
 1236 0028 1437     		adds	r7, r7, #20
 1237              		.cfi_def_cfa_offset 4
 1238 002a BD46     		mov	sp, r7
 1239              		.cfi_def_cfa_register 13
 1240              		@ sp needed
 1241 002c 5DF8047B 		ldr	r7, [sp], #4
 1242              		.cfi_restore 7
 1243              		.cfi_def_cfa_offset 0
 1244 0030 7047     		bx	lr
 1245              	.L73:
 1246 0032 00BF     		.align	2
 1247              	.L72:
 1248 0034 00100240 		.word	1073876992
 1249              		.cfi_endproc
 1250              	.LFE49:
 1252              		.section	.text.RCC_I2S2CLKConfig,"ax",%progbits
 1253              		.align	2
 1254              		.global	RCC_I2S2CLKConfig
 1255              		.thumb
 1256              		.thumb_func
 1258              	RCC_I2S2CLKConfig:
 1259              	.LFB50:
 779:../src/stm32f10x_rcc.c **** 
 780:../src/stm32f10x_rcc.c **** #ifdef STM32F10X_CL
 781:../src/stm32f10x_rcc.c **** /**
 782:../src/stm32f10x_rcc.c ****   * @brief  Configures the I2S2 clock source(I2S2CLK).
 783:../src/stm32f10x_rcc.c ****   * @note
 784:../src/stm32f10x_rcc.c ****   *   - This function must be called before enabling I2S2 APB clock.
 785:../src/stm32f10x_rcc.c ****   *   - This function applies only to STM32 Connectivity line devices.
 786:../src/stm32f10x_rcc.c ****   * @param  RCC_I2S2CLKSource: specifies the I2S2 clock source.
 787:../src/stm32f10x_rcc.c ****   *   This parameter can be one of the following values:
 788:../src/stm32f10x_rcc.c ****   *     @arg RCC_I2S2CLKSource_SYSCLK: system clock selected as I2S2 clock entry
 789:../src/stm32f10x_rcc.c ****   *     @arg RCC_I2S2CLKSource_PLL3_VCO: PLL3 VCO clock selected as I2S2 clock entry
 790:../src/stm32f10x_rcc.c ****   * @retval None
 791:../src/stm32f10x_rcc.c ****   */
 792:../src/stm32f10x_rcc.c **** void RCC_I2S2CLKConfig(uint32_t RCC_I2S2CLKSource)
 793:../src/stm32f10x_rcc.c **** {
 1260              		.loc 1 793 0
 1261              		.cfi_startproc
 1262              		@ args = 0, pretend = 0, frame = 8
 1263              		@ frame_needed = 1, uses_anonymous_args = 0
 1264              		@ link register save eliminated.
 1265 0000 80B4     		push	{r7}
 1266              		.cfi_def_cfa_offset 4
 1267              		.cfi_offset 7, -4
 1268 0002 83B0     		sub	sp, sp, #12
 1269              		.cfi_def_cfa_offset 16
 1270 0004 00AF     		add	r7, sp, #0
 1271              		.cfi_def_cfa_register 7
 1272 0006 7860     		str	r0, [r7, #4]
 794:../src/stm32f10x_rcc.c ****   /* Check the parameters */
 795:../src/stm32f10x_rcc.c ****   assert_param(IS_RCC_I2S2CLK_SOURCE(RCC_I2S2CLKSource));
 796:../src/stm32f10x_rcc.c **** 
 797:../src/stm32f10x_rcc.c ****   *(__IO uint32_t *) CFGR2_I2S2SRC_BB = RCC_I2S2CLKSource;
 1273              		.loc 1 797 0
 1274 0008 034A     		ldr	r2, .L75
 1275 000a 7B68     		ldr	r3, [r7, #4]
 1276 000c 1360     		str	r3, [r2]
 798:../src/stm32f10x_rcc.c **** }
 1277              		.loc 1 798 0
 1278 000e 0C37     		adds	r7, r7, #12
 1279              		.cfi_def_cfa_offset 4
 1280 0010 BD46     		mov	sp, r7
 1281              		.cfi_def_cfa_register 13
 1282              		@ sp needed
 1283 0012 5DF8047B 		ldr	r7, [sp], #4
 1284              		.cfi_restore 7
 1285              		.cfi_def_cfa_offset 0
 1286 0016 7047     		bx	lr
 1287              	.L76:
 1288              		.align	2
 1289              	.L75:
 1290 0018 C4054242 		.word	1111623108
 1291              		.cfi_endproc
 1292              	.LFE50:
 1294              		.section	.text.RCC_I2S3CLKConfig,"ax",%progbits
 1295              		.align	2
 1296              		.global	RCC_I2S3CLKConfig
 1297              		.thumb
 1298              		.thumb_func
 1300              	RCC_I2S3CLKConfig:
 1301              	.LFB51:
 799:../src/stm32f10x_rcc.c **** 
 800:../src/stm32f10x_rcc.c **** /**
 801:../src/stm32f10x_rcc.c ****   * @brief  Configures the I2S3 clock source(I2S2CLK).
 802:../src/stm32f10x_rcc.c ****   * @note
 803:../src/stm32f10x_rcc.c ****   *   - This function must be called before enabling I2S3 APB clock.
 804:../src/stm32f10x_rcc.c ****   *   - This function applies only to STM32 Connectivity line devices.
 805:../src/stm32f10x_rcc.c ****   * @param  RCC_I2S3CLKSource: specifies the I2S3 clock source.
 806:../src/stm32f10x_rcc.c ****   *   This parameter can be one of the following values:
 807:../src/stm32f10x_rcc.c ****   *     @arg RCC_I2S3CLKSource_SYSCLK: system clock selected as I2S3 clock entry
 808:../src/stm32f10x_rcc.c ****   *     @arg RCC_I2S3CLKSource_PLL3_VCO: PLL3 VCO clock selected as I2S3 clock entry
 809:../src/stm32f10x_rcc.c ****   * @retval None
 810:../src/stm32f10x_rcc.c ****   */
 811:../src/stm32f10x_rcc.c **** void RCC_I2S3CLKConfig(uint32_t RCC_I2S3CLKSource)
 812:../src/stm32f10x_rcc.c **** {
 1302              		.loc 1 812 0
 1303              		.cfi_startproc
 1304              		@ args = 0, pretend = 0, frame = 8
 1305              		@ frame_needed = 1, uses_anonymous_args = 0
 1306              		@ link register save eliminated.
 1307 0000 80B4     		push	{r7}
 1308              		.cfi_def_cfa_offset 4
 1309              		.cfi_offset 7, -4
 1310 0002 83B0     		sub	sp, sp, #12
 1311              		.cfi_def_cfa_offset 16
 1312 0004 00AF     		add	r7, sp, #0
 1313              		.cfi_def_cfa_register 7
 1314 0006 7860     		str	r0, [r7, #4]
 813:../src/stm32f10x_rcc.c ****   /* Check the parameters */
 814:../src/stm32f10x_rcc.c ****   assert_param(IS_RCC_I2S3CLK_SOURCE(RCC_I2S3CLKSource));
 815:../src/stm32f10x_rcc.c **** 
 816:../src/stm32f10x_rcc.c ****   *(__IO uint32_t *) CFGR2_I2S3SRC_BB = RCC_I2S3CLKSource;
 1315              		.loc 1 816 0
 1316 0008 034A     		ldr	r2, .L78
 1317 000a 7B68     		ldr	r3, [r7, #4]
 1318 000c 1360     		str	r3, [r2]
 817:../src/stm32f10x_rcc.c **** }
 1319              		.loc 1 817 0
 1320 000e 0C37     		adds	r7, r7, #12
 1321              		.cfi_def_cfa_offset 4
 1322 0010 BD46     		mov	sp, r7
 1323              		.cfi_def_cfa_register 13
 1324              		@ sp needed
 1325 0012 5DF8047B 		ldr	r7, [sp], #4
 1326              		.cfi_restore 7
 1327              		.cfi_def_cfa_offset 0
 1328 0016 7047     		bx	lr
 1329              	.L79:
 1330              		.align	2
 1331              	.L78:
 1332 0018 C8054242 		.word	1111623112
 1333              		.cfi_endproc
 1334              	.LFE51:
 1336              		.section	.text.RCC_LSEConfig,"ax",%progbits
 1337              		.align	2
 1338              		.global	RCC_LSEConfig
 1339              		.thumb
 1340              		.thumb_func
 1342              	RCC_LSEConfig:
 1343              	.LFB52:
 818:../src/stm32f10x_rcc.c **** #endif /* STM32F10X_CL */
 819:../src/stm32f10x_rcc.c **** 
 820:../src/stm32f10x_rcc.c **** /**
 821:../src/stm32f10x_rcc.c ****   * @brief  Configures the External Low Speed oscillator (LSE).
 822:../src/stm32f10x_rcc.c ****   * @param  RCC_LSE: specifies the new state of the LSE.
 823:../src/stm32f10x_rcc.c ****   *   This parameter can be one of the following values:
 824:../src/stm32f10x_rcc.c ****   *     @arg RCC_LSE_OFF: LSE oscillator OFF
 825:../src/stm32f10x_rcc.c ****   *     @arg RCC_LSE_ON: LSE oscillator ON
 826:../src/stm32f10x_rcc.c ****   *     @arg RCC_LSE_Bypass: LSE oscillator bypassed with external clock
 827:../src/stm32f10x_rcc.c ****   * @retval None
 828:../src/stm32f10x_rcc.c ****   */
 829:../src/stm32f10x_rcc.c **** void RCC_LSEConfig(uint8_t RCC_LSE)
 830:../src/stm32f10x_rcc.c **** {
 1344              		.loc 1 830 0
 1345              		.cfi_startproc
 1346              		@ args = 0, pretend = 0, frame = 8
 1347              		@ frame_needed = 1, uses_anonymous_args = 0
 1348              		@ link register save eliminated.
 1349 0000 80B4     		push	{r7}
 1350              		.cfi_def_cfa_offset 4
 1351              		.cfi_offset 7, -4
 1352 0002 83B0     		sub	sp, sp, #12
 1353              		.cfi_def_cfa_offset 16
 1354 0004 00AF     		add	r7, sp, #0
 1355              		.cfi_def_cfa_register 7
 1356 0006 0346     		mov	r3, r0
 1357 0008 FB71     		strb	r3, [r7, #7]
 831:../src/stm32f10x_rcc.c ****   /* Check the parameters */
 832:../src/stm32f10x_rcc.c ****   assert_param(IS_RCC_LSE(RCC_LSE));
 833:../src/stm32f10x_rcc.c ****   /* Reset LSEON and LSEBYP bits before configuring the LSE ------------------*/
 834:../src/stm32f10x_rcc.c ****   /* Reset LSEON bit */
 835:../src/stm32f10x_rcc.c ****   *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_OFF;
 1358              		.loc 1 835 0
 1359 000a 0C4B     		ldr	r3, .L85
 1360 000c 0022     		movs	r2, #0
 1361 000e 1A70     		strb	r2, [r3]
 836:../src/stm32f10x_rcc.c ****   /* Reset LSEBYP bit */
 837:../src/stm32f10x_rcc.c ****   *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_OFF;
 1362              		.loc 1 837 0
 1363 0010 0A4B     		ldr	r3, .L85
 1364 0012 0022     		movs	r2, #0
 1365 0014 1A70     		strb	r2, [r3]
 838:../src/stm32f10x_rcc.c ****   /* Configure LSE (RCC_LSE_OFF is already covered by the code section above) */
 839:../src/stm32f10x_rcc.c ****   switch(RCC_LSE)
 1366              		.loc 1 839 0
 1367 0016 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 1368 0018 012B     		cmp	r3, #1
 1369 001a 02D0     		beq	.L82
 1370 001c 042B     		cmp	r3, #4
 1371 001e 04D0     		beq	.L83
 840:../src/stm32f10x_rcc.c ****   {
 841:../src/stm32f10x_rcc.c ****     case RCC_LSE_ON:
 842:../src/stm32f10x_rcc.c ****       /* Set LSEON bit */
 843:../src/stm32f10x_rcc.c ****       *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_ON;
 844:../src/stm32f10x_rcc.c ****       break;
 845:../src/stm32f10x_rcc.c ****       
 846:../src/stm32f10x_rcc.c ****     case RCC_LSE_Bypass:
 847:../src/stm32f10x_rcc.c ****       /* Set LSEBYP and LSEON bits */
 848:../src/stm32f10x_rcc.c ****       *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_Bypass | RCC_LSE_ON;
 849:../src/stm32f10x_rcc.c ****       break;            
 850:../src/stm32f10x_rcc.c ****       
 851:../src/stm32f10x_rcc.c ****     default:
 852:../src/stm32f10x_rcc.c ****       break;      
 1372              		.loc 1 852 0
 1373 0020 07E0     		b	.L80
 1374              	.L82:
 843:../src/stm32f10x_rcc.c ****       break;
 1375              		.loc 1 843 0
 1376 0022 064B     		ldr	r3, .L85
 1377 0024 0122     		movs	r2, #1
 1378 0026 1A70     		strb	r2, [r3]
 844:../src/stm32f10x_rcc.c ****       
 1379              		.loc 1 844 0
 1380 0028 03E0     		b	.L80
 1381              	.L83:
 848:../src/stm32f10x_rcc.c ****       break;            
 1382              		.loc 1 848 0
 1383 002a 044B     		ldr	r3, .L85
 1384 002c 0522     		movs	r2, #5
 1385 002e 1A70     		strb	r2, [r3]
 849:../src/stm32f10x_rcc.c ****       
 1386              		.loc 1 849 0
 1387 0030 00BF     		nop
 1388              	.L80:
 853:../src/stm32f10x_rcc.c ****   }
 854:../src/stm32f10x_rcc.c **** }
 1389              		.loc 1 854 0
 1390 0032 0C37     		adds	r7, r7, #12
 1391              		.cfi_def_cfa_offset 4
 1392 0034 BD46     		mov	sp, r7
 1393              		.cfi_def_cfa_register 13
 1394              		@ sp needed
 1395 0036 5DF8047B 		ldr	r7, [sp], #4
 1396              		.cfi_restore 7
 1397              		.cfi_def_cfa_offset 0
 1398 003a 7047     		bx	lr
 1399              	.L86:
 1400              		.align	2
 1401              	.L85:
 1402 003c 20100240 		.word	1073877024
 1403              		.cfi_endproc
 1404              	.LFE52:
 1406              		.section	.text.RCC_LSICmd,"ax",%progbits
 1407              		.align	2
 1408              		.global	RCC_LSICmd
 1409              		.thumb
 1410              		.thumb_func
 1412              	RCC_LSICmd:
 1413              	.LFB53:
 855:../src/stm32f10x_rcc.c **** 
 856:../src/stm32f10x_rcc.c **** /**
 857:../src/stm32f10x_rcc.c ****   * @brief  Enables or disables the Internal Low Speed oscillator (LSI).
 858:../src/stm32f10x_rcc.c ****   * @note   LSI can not be disabled if the IWDG is running.
 859:../src/stm32f10x_rcc.c ****   * @param  NewState: new state of the LSI. This parameter can be: ENABLE or DISABLE.
 860:../src/stm32f10x_rcc.c ****   * @retval None
 861:../src/stm32f10x_rcc.c ****   */
 862:../src/stm32f10x_rcc.c **** void RCC_LSICmd(FunctionalState NewState)
 863:../src/stm32f10x_rcc.c **** {
 1414              		.loc 1 863 0
 1415              		.cfi_startproc
 1416              		@ args = 0, pretend = 0, frame = 8
 1417              		@ frame_needed = 1, uses_anonymous_args = 0
 1418              		@ link register save eliminated.
 1419 0000 80B4     		push	{r7}
 1420              		.cfi_def_cfa_offset 4
 1421              		.cfi_offset 7, -4
 1422 0002 83B0     		sub	sp, sp, #12
 1423              		.cfi_def_cfa_offset 16
 1424 0004 00AF     		add	r7, sp, #0
 1425              		.cfi_def_cfa_register 7
 1426 0006 0346     		mov	r3, r0
 1427 0008 FB71     		strb	r3, [r7, #7]
 864:../src/stm32f10x_rcc.c ****   /* Check the parameters */
 865:../src/stm32f10x_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 866:../src/stm32f10x_rcc.c ****   *(__IO uint32_t *) CSR_LSION_BB = (uint32_t)NewState;
 1428              		.loc 1 866 0
 1429 000a 044A     		ldr	r2, .L88
 1430 000c FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 1431 000e 1360     		str	r3, [r2]
 867:../src/stm32f10x_rcc.c **** }
 1432              		.loc 1 867 0
 1433 0010 0C37     		adds	r7, r7, #12
 1434              		.cfi_def_cfa_offset 4
 1435 0012 BD46     		mov	sp, r7
 1436              		.cfi_def_cfa_register 13
 1437              		@ sp needed
 1438 0014 5DF8047B 		ldr	r7, [sp], #4
 1439              		.cfi_restore 7
 1440              		.cfi_def_cfa_offset 0
 1441 0018 7047     		bx	lr
 1442              	.L89:
 1443 001a 00BF     		.align	2
 1444              	.L88:
 1445 001c 80044242 		.word	1111622784
 1446              		.cfi_endproc
 1447              	.LFE53:
 1449              		.section	.text.RCC_RTCCLKConfig,"ax",%progbits
 1450              		.align	2
 1451              		.global	RCC_RTCCLKConfig
 1452              		.thumb
 1453              		.thumb_func
 1455              	RCC_RTCCLKConfig:
 1456              	.LFB54:
 868:../src/stm32f10x_rcc.c **** 
 869:../src/stm32f10x_rcc.c **** /**
 870:../src/stm32f10x_rcc.c ****   * @brief  Configures the RTC clock (RTCCLK).
 871:../src/stm32f10x_rcc.c ****   * @note   Once the RTC clock is selected it can't be changed unless the Backup domain is reset.
 872:../src/stm32f10x_rcc.c ****   * @param  RCC_RTCCLKSource: specifies the RTC clock source.
 873:../src/stm32f10x_rcc.c ****   *   This parameter can be one of the following values:
 874:../src/stm32f10x_rcc.c ****   *     @arg RCC_RTCCLKSource_LSE: LSE selected as RTC clock
 875:../src/stm32f10x_rcc.c ****   *     @arg RCC_RTCCLKSource_LSI: LSI selected as RTC clock
 876:../src/stm32f10x_rcc.c ****   *     @arg RCC_RTCCLKSource_HSE_Div128: HSE clock divided by 128 selected as RTC clock
 877:../src/stm32f10x_rcc.c ****   * @retval None
 878:../src/stm32f10x_rcc.c ****   */
 879:../src/stm32f10x_rcc.c **** void RCC_RTCCLKConfig(uint32_t RCC_RTCCLKSource)
 880:../src/stm32f10x_rcc.c **** {
 1457              		.loc 1 880 0
 1458              		.cfi_startproc
 1459              		@ args = 0, pretend = 0, frame = 8
 1460              		@ frame_needed = 1, uses_anonymous_args = 0
 1461              		@ link register save eliminated.
 1462 0000 80B4     		push	{r7}
 1463              		.cfi_def_cfa_offset 4
 1464              		.cfi_offset 7, -4
 1465 0002 83B0     		sub	sp, sp, #12
 1466              		.cfi_def_cfa_offset 16
 1467 0004 00AF     		add	r7, sp, #0
 1468              		.cfi_def_cfa_register 7
 1469 0006 7860     		str	r0, [r7, #4]
 881:../src/stm32f10x_rcc.c ****   /* Check the parameters */
 882:../src/stm32f10x_rcc.c ****   assert_param(IS_RCC_RTCCLK_SOURCE(RCC_RTCCLKSource));
 883:../src/stm32f10x_rcc.c ****   /* Select the RTC clock source */
 884:../src/stm32f10x_rcc.c ****   RCC->BDCR |= RCC_RTCCLKSource;
 1470              		.loc 1 884 0
 1471 0008 0549     		ldr	r1, .L91
 1472 000a 054B     		ldr	r3, .L91
 1473 000c 1A6A     		ldr	r2, [r3, #32]
 1474 000e 7B68     		ldr	r3, [r7, #4]
 1475 0010 1343     		orrs	r3, r3, r2
 1476 0012 0B62     		str	r3, [r1, #32]
 885:../src/stm32f10x_rcc.c **** }
 1477              		.loc 1 885 0
 1478 0014 0C37     		adds	r7, r7, #12
 1479              		.cfi_def_cfa_offset 4
 1480 0016 BD46     		mov	sp, r7
 1481              		.cfi_def_cfa_register 13
 1482              		@ sp needed
 1483 0018 5DF8047B 		ldr	r7, [sp], #4
 1484              		.cfi_restore 7
 1485              		.cfi_def_cfa_offset 0
 1486 001c 7047     		bx	lr
 1487              	.L92:
 1488 001e 00BF     		.align	2
 1489              	.L91:
 1490 0020 00100240 		.word	1073876992
 1491              		.cfi_endproc
 1492              	.LFE54:
 1494              		.section	.text.RCC_RTCCLKCmd,"ax",%progbits
 1495              		.align	2
 1496              		.global	RCC_RTCCLKCmd
 1497              		.thumb
 1498              		.thumb_func
 1500              	RCC_RTCCLKCmd:
 1501              	.LFB55:
 886:../src/stm32f10x_rcc.c **** 
 887:../src/stm32f10x_rcc.c **** /**
 888:../src/stm32f10x_rcc.c ****   * @brief  Enables or disables the RTC clock.
 889:../src/stm32f10x_rcc.c ****   * @note   This function must be used only after the RTC clock was selected using the RCC_RTCCLKCo
 890:../src/stm32f10x_rcc.c ****   * @param  NewState: new state of the RTC clock. This parameter can be: ENABLE or DISABLE.
 891:../src/stm32f10x_rcc.c ****   * @retval None
 892:../src/stm32f10x_rcc.c ****   */
 893:../src/stm32f10x_rcc.c **** void RCC_RTCCLKCmd(FunctionalState NewState)
 894:../src/stm32f10x_rcc.c **** {
 1502              		.loc 1 894 0
 1503              		.cfi_startproc
 1504              		@ args = 0, pretend = 0, frame = 8
 1505              		@ frame_needed = 1, uses_anonymous_args = 0
 1506              		@ link register save eliminated.
 1507 0000 80B4     		push	{r7}
 1508              		.cfi_def_cfa_offset 4
 1509              		.cfi_offset 7, -4
 1510 0002 83B0     		sub	sp, sp, #12
 1511              		.cfi_def_cfa_offset 16
 1512 0004 00AF     		add	r7, sp, #0
 1513              		.cfi_def_cfa_register 7
 1514 0006 0346     		mov	r3, r0
 1515 0008 FB71     		strb	r3, [r7, #7]
 895:../src/stm32f10x_rcc.c ****   /* Check the parameters */
 896:../src/stm32f10x_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 897:../src/stm32f10x_rcc.c ****   *(__IO uint32_t *) BDCR_RTCEN_BB = (uint32_t)NewState;
 1516              		.loc 1 897 0
 1517 000a 044A     		ldr	r2, .L94
 1518 000c FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 1519 000e 1360     		str	r3, [r2]
 898:../src/stm32f10x_rcc.c **** }
 1520              		.loc 1 898 0
 1521 0010 0C37     		adds	r7, r7, #12
 1522              		.cfi_def_cfa_offset 4
 1523 0012 BD46     		mov	sp, r7
 1524              		.cfi_def_cfa_register 13
 1525              		@ sp needed
 1526 0014 5DF8047B 		ldr	r7, [sp], #4
 1527              		.cfi_restore 7
 1528              		.cfi_def_cfa_offset 0
 1529 0018 7047     		bx	lr
 1530              	.L95:
 1531 001a 00BF     		.align	2
 1532              	.L94:
 1533 001c 3C044242 		.word	1111622716
 1534              		.cfi_endproc
 1535              	.LFE55:
 1537              		.section	.text.RCC_GetClocksFreq,"ax",%progbits
 1538              		.align	2
 1539              		.global	RCC_GetClocksFreq
 1540              		.thumb
 1541              		.thumb_func
 1543              	RCC_GetClocksFreq:
 1544              	.LFB56:
 899:../src/stm32f10x_rcc.c **** 
 900:../src/stm32f10x_rcc.c **** /**
 901:../src/stm32f10x_rcc.c ****   * @brief  Returns the frequencies of different on chip clocks.
 902:../src/stm32f10x_rcc.c ****   * @param  RCC_Clocks: pointer to a RCC_ClocksTypeDef structure which will hold
 903:../src/stm32f10x_rcc.c ****   *         the clocks frequencies.
 904:../src/stm32f10x_rcc.c ****   * @note   The result of this function could be not correct when using 
 905:../src/stm32f10x_rcc.c ****   *         fractional value for HSE crystal.  
 906:../src/stm32f10x_rcc.c ****   * @retval None
 907:../src/stm32f10x_rcc.c ****   */
 908:../src/stm32f10x_rcc.c **** void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
 909:../src/stm32f10x_rcc.c **** {
 1545              		.loc 1 909 0
 1546              		.cfi_startproc
 1547              		@ args = 0, pretend = 0, frame = 40
 1548              		@ frame_needed = 1, uses_anonymous_args = 0
 1549              		@ link register save eliminated.
 1550 0000 80B4     		push	{r7}
 1551              		.cfi_def_cfa_offset 4
 1552              		.cfi_offset 7, -4
 1553 0002 8BB0     		sub	sp, sp, #44
 1554              		.cfi_def_cfa_offset 48
 1555 0004 00AF     		add	r7, sp, #0
 1556              		.cfi_def_cfa_register 7
 1557 0006 7860     		str	r0, [r7, #4]
 910:../src/stm32f10x_rcc.c ****   uint32_t tmp = 0, pllmull = 0, pllsource = 0, presc = 0;
 1558              		.loc 1 910 0
 1559 0008 0023     		movs	r3, #0
 1560 000a 3B62     		str	r3, [r7, #32]
 1561 000c 0023     		movs	r3, #0
 1562 000e 7B62     		str	r3, [r7, #36]
 1563 0010 0023     		movs	r3, #0
 1564 0012 FB61     		str	r3, [r7, #28]
 1565 0014 0023     		movs	r3, #0
 1566 0016 BB61     		str	r3, [r7, #24]
 911:../src/stm32f10x_rcc.c **** 
 912:../src/stm32f10x_rcc.c **** #ifdef  STM32F10X_CL
 913:../src/stm32f10x_rcc.c ****   uint32_t prediv1source = 0, prediv1factor = 0, prediv2factor = 0, pll2mull = 0;
 1567              		.loc 1 913 0
 1568 0018 0023     		movs	r3, #0
 1569 001a 7B61     		str	r3, [r7, #20]
 1570 001c 0023     		movs	r3, #0
 1571 001e 3B61     		str	r3, [r7, #16]
 1572 0020 0023     		movs	r3, #0
 1573 0022 FB60     		str	r3, [r7, #12]
 1574 0024 0023     		movs	r3, #0
 1575 0026 BB60     		str	r3, [r7, #8]
 914:../src/stm32f10x_rcc.c **** #endif /* STM32F10X_CL */
 915:../src/stm32f10x_rcc.c **** 
 916:../src/stm32f10x_rcc.c **** #if defined (STM32F10X_LD_VL) || defined (STM32F10X_MD_VL) || defined (STM32F10X_HD_VL)
 917:../src/stm32f10x_rcc.c ****   uint32_t prediv1factor = 0;
 918:../src/stm32f10x_rcc.c **** #endif
 919:../src/stm32f10x_rcc.c ****     
 920:../src/stm32f10x_rcc.c ****   /* Get SYSCLK source -------------------------------------------------------*/
 921:../src/stm32f10x_rcc.c ****   tmp = RCC->CFGR & CFGR_SWS_Mask;
 1576              		.loc 1 921 0
 1577 0028 624B     		ldr	r3, .L108
 1578 002a 5B68     		ldr	r3, [r3, #4]
 1579 002c 03F00C03 		and	r3, r3, #12
 1580 0030 3B62     		str	r3, [r7, #32]
 922:../src/stm32f10x_rcc.c ****   
 923:../src/stm32f10x_rcc.c ****   switch (tmp)
 1581              		.loc 1 923 0
 1582 0032 3B6A     		ldr	r3, [r7, #32]
 1583 0034 042B     		cmp	r3, #4
 1584 0036 07D0     		beq	.L98
 1585 0038 082B     		cmp	r3, #8
 1586 003a 09D0     		beq	.L99
 1587 003c 002B     		cmp	r3, #0
 1588 003e 5ED1     		bne	.L107
 924:../src/stm32f10x_rcc.c ****   {
 925:../src/stm32f10x_rcc.c ****     case 0x00:  /* HSI used as system clock */
 926:../src/stm32f10x_rcc.c ****       RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 1589              		.loc 1 926 0
 1590 0040 7B68     		ldr	r3, [r7, #4]
 1591 0042 5D4A     		ldr	r2, .L108+4
 1592 0044 1A60     		str	r2, [r3]
 927:../src/stm32f10x_rcc.c ****       break;
 1593              		.loc 1 927 0
 1594 0046 5EE0     		b	.L101
 1595              	.L98:
 928:../src/stm32f10x_rcc.c ****     case 0x04:  /* HSE used as system clock */
 929:../src/stm32f10x_rcc.c ****       RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
 1596              		.loc 1 929 0
 1597 0048 7B68     		ldr	r3, [r7, #4]
 1598 004a 5C4A     		ldr	r2, .L108+8
 1599 004c 1A60     		str	r2, [r3]
 930:../src/stm32f10x_rcc.c ****       break;
 1600              		.loc 1 930 0
 1601 004e 5AE0     		b	.L101
 1602              	.L99:
 931:../src/stm32f10x_rcc.c ****     case 0x08:  /* PLL used as system clock */
 932:../src/stm32f10x_rcc.c **** 
 933:../src/stm32f10x_rcc.c ****       /* Get PLL clock source and multiplication factor ----------------------*/
 934:../src/stm32f10x_rcc.c ****       pllmull = RCC->CFGR & CFGR_PLLMull_Mask;
 1603              		.loc 1 934 0
 1604 0050 584B     		ldr	r3, .L108
 1605 0052 5B68     		ldr	r3, [r3, #4]
 1606 0054 03F47013 		and	r3, r3, #3932160
 1607 0058 7B62     		str	r3, [r7, #36]
 935:../src/stm32f10x_rcc.c ****       pllsource = RCC->CFGR & CFGR_PLLSRC_Mask;
 1608              		.loc 1 935 0
 1609 005a 564B     		ldr	r3, .L108
 1610 005c 5B68     		ldr	r3, [r3, #4]
 1611 005e 03F48033 		and	r3, r3, #65536
 1612 0062 FB61     		str	r3, [r7, #28]
 936:../src/stm32f10x_rcc.c ****       
 937:../src/stm32f10x_rcc.c **** #ifndef STM32F10X_CL      
 938:../src/stm32f10x_rcc.c ****       pllmull = ( pllmull >> 18) + 2;
 939:../src/stm32f10x_rcc.c ****       
 940:../src/stm32f10x_rcc.c ****       if (pllsource == 0x00)
 941:../src/stm32f10x_rcc.c ****       {/* HSI oscillator clock divided by 2 selected as PLL clock entry */
 942:../src/stm32f10x_rcc.c ****         RCC_Clocks->SYSCLK_Frequency = (HSI_VALUE >> 1) * pllmull;
 943:../src/stm32f10x_rcc.c ****       }
 944:../src/stm32f10x_rcc.c ****       else
 945:../src/stm32f10x_rcc.c ****       {
 946:../src/stm32f10x_rcc.c ****  #if defined (STM32F10X_LD_VL) || defined (STM32F10X_MD_VL) || defined (STM32F10X_HD_VL)
 947:../src/stm32f10x_rcc.c ****        prediv1factor = (RCC->CFGR2 & CFGR2_PREDIV1) + 1;
 948:../src/stm32f10x_rcc.c ****        /* HSE oscillator clock selected as PREDIV1 clock entry */
 949:../src/stm32f10x_rcc.c ****        RCC_Clocks->SYSCLK_Frequency = (HSE_VALUE / prediv1factor) * pllmull; 
 950:../src/stm32f10x_rcc.c ****  #else
 951:../src/stm32f10x_rcc.c ****         /* HSE selected as PLL clock entry */
 952:../src/stm32f10x_rcc.c ****         if ((RCC->CFGR & CFGR_PLLXTPRE_Mask) != (uint32_t)RESET)
 953:../src/stm32f10x_rcc.c ****         {/* HSE oscillator clock divided by 2 */
 954:../src/stm32f10x_rcc.c ****           RCC_Clocks->SYSCLK_Frequency = (HSE_VALUE >> 1) * pllmull;
 955:../src/stm32f10x_rcc.c ****         }
 956:../src/stm32f10x_rcc.c ****         else
 957:../src/stm32f10x_rcc.c ****         {
 958:../src/stm32f10x_rcc.c ****           RCC_Clocks->SYSCLK_Frequency = HSE_VALUE * pllmull;
 959:../src/stm32f10x_rcc.c ****         }
 960:../src/stm32f10x_rcc.c ****  #endif
 961:../src/stm32f10x_rcc.c ****       }
 962:../src/stm32f10x_rcc.c **** #else
 963:../src/stm32f10x_rcc.c ****       pllmull = pllmull >> 18;
 1613              		.loc 1 963 0
 1614 0064 7B6A     		ldr	r3, [r7, #36]
 1615 0066 9B0C     		lsrs	r3, r3, #18
 1616 0068 7B62     		str	r3, [r7, #36]
 964:../src/stm32f10x_rcc.c ****       
 965:../src/stm32f10x_rcc.c ****       if (pllmull != 0x0D)
 1617              		.loc 1 965 0
 1618 006a 7B6A     		ldr	r3, [r7, #36]
 1619 006c 0D2B     		cmp	r3, #13
 1620 006e 03D0     		beq	.L102
 966:../src/stm32f10x_rcc.c ****       {
 967:../src/stm32f10x_rcc.c ****          pllmull += 2;
 1621              		.loc 1 967 0
 1622 0070 7B6A     		ldr	r3, [r7, #36]
 1623 0072 0233     		adds	r3, r3, #2
 1624 0074 7B62     		str	r3, [r7, #36]
 1625 0076 01E0     		b	.L103
 1626              	.L102:
 968:../src/stm32f10x_rcc.c ****       }
 969:../src/stm32f10x_rcc.c ****       else
 970:../src/stm32f10x_rcc.c ****       { /* PLL multiplication factor = PLL input clock * 6.5 */
 971:../src/stm32f10x_rcc.c ****         pllmull = 13 / 2; 
 1627              		.loc 1 971 0
 1628 0078 0623     		movs	r3, #6
 1629 007a 7B62     		str	r3, [r7, #36]
 1630              	.L103:
 972:../src/stm32f10x_rcc.c ****       }
 973:../src/stm32f10x_rcc.c ****             
 974:../src/stm32f10x_rcc.c ****       if (pllsource == 0x00)
 1631              		.loc 1 974 0
 1632 007c FB69     		ldr	r3, [r7, #28]
 1633 007e 002B     		cmp	r3, #0
 1634 0080 06D1     		bne	.L104
 975:../src/stm32f10x_rcc.c ****       {/* HSI oscillator clock divided by 2 selected as PLL clock entry */
 976:../src/stm32f10x_rcc.c ****         RCC_Clocks->SYSCLK_Frequency = (HSI_VALUE >> 1) * pllmull;
 1635              		.loc 1 976 0
 1636 0082 7B6A     		ldr	r3, [r7, #36]
 1637 0084 4E4A     		ldr	r2, .L108+12
 1638 0086 02FB03F2 		mul	r2, r2, r3
 1639 008a 7B68     		ldr	r3, [r7, #4]
 1640 008c 1A60     		str	r2, [r3]
 1641 008e 35E0     		b	.L105
 1642              	.L104:
 977:../src/stm32f10x_rcc.c ****       }
 978:../src/stm32f10x_rcc.c ****       else
 979:../src/stm32f10x_rcc.c ****       {/* PREDIV1 selected as PLL clock entry */
 980:../src/stm32f10x_rcc.c ****         
 981:../src/stm32f10x_rcc.c ****         /* Get PREDIV1 clock source and division factor */
 982:../src/stm32f10x_rcc.c ****         prediv1source = RCC->CFGR2 & CFGR2_PREDIV1SRC;
 1643              		.loc 1 982 0
 1644 0090 484B     		ldr	r3, .L108
 1645 0092 DB6A     		ldr	r3, [r3, #44]
 1646 0094 03F48033 		and	r3, r3, #65536
 1647 0098 7B61     		str	r3, [r7, #20]
 983:../src/stm32f10x_rcc.c ****         prediv1factor = (RCC->CFGR2 & CFGR2_PREDIV1) + 1;
 1648              		.loc 1 983 0
 1649 009a 464B     		ldr	r3, .L108
 1650 009c DB6A     		ldr	r3, [r3, #44]
 1651 009e 03F00F03 		and	r3, r3, #15
 1652 00a2 0133     		adds	r3, r3, #1
 1653 00a4 3B61     		str	r3, [r7, #16]
 984:../src/stm32f10x_rcc.c ****         
 985:../src/stm32f10x_rcc.c ****         if (prediv1source == 0)
 1654              		.loc 1 985 0
 1655 00a6 7B69     		ldr	r3, [r7, #20]
 1656 00a8 002B     		cmp	r3, #0
 1657 00aa 09D1     		bne	.L106
 986:../src/stm32f10x_rcc.c ****         { /* HSE oscillator clock selected as PREDIV1 clock entry */
 987:../src/stm32f10x_rcc.c ****           RCC_Clocks->SYSCLK_Frequency = (HSE_VALUE / prediv1factor) * pllmull;          
 1658              		.loc 1 987 0
 1659 00ac 434A     		ldr	r2, .L108+8
 1660 00ae 3B69     		ldr	r3, [r7, #16]
 1661 00b0 B2FBF3F3 		udiv	r3, r2, r3
 1662 00b4 7A6A     		ldr	r2, [r7, #36]
 1663 00b6 02FB03F2 		mul	r2, r2, r3
 1664 00ba 7B68     		ldr	r3, [r7, #4]
 1665 00bc 1A60     		str	r2, [r3]
 1666 00be 1DE0     		b	.L105
 1667              	.L106:
 988:../src/stm32f10x_rcc.c ****         }
 989:../src/stm32f10x_rcc.c ****         else
 990:../src/stm32f10x_rcc.c ****         {/* PLL2 clock selected as PREDIV1 clock entry */
 991:../src/stm32f10x_rcc.c ****           
 992:../src/stm32f10x_rcc.c ****           /* Get PREDIV2 division factor and PLL2 multiplication factor */
 993:../src/stm32f10x_rcc.c ****           prediv2factor = ((RCC->CFGR2 & CFGR2_PREDIV2) >> 4) + 1;
 1668              		.loc 1 993 0
 1669 00c0 3C4B     		ldr	r3, .L108
 1670 00c2 DB6A     		ldr	r3, [r3, #44]
 1671 00c4 03F0F003 		and	r3, r3, #240
 1672 00c8 1B09     		lsrs	r3, r3, #4
 1673 00ca 0133     		adds	r3, r3, #1
 1674 00cc FB60     		str	r3, [r7, #12]
 994:../src/stm32f10x_rcc.c ****           pll2mull = ((RCC->CFGR2 & CFGR2_PLL2MUL) >> 8 ) + 2; 
 1675              		.loc 1 994 0
 1676 00ce 394B     		ldr	r3, .L108
 1677 00d0 DB6A     		ldr	r3, [r3, #44]
 1678 00d2 03F47063 		and	r3, r3, #3840
 1679 00d6 1B0A     		lsrs	r3, r3, #8
 1680 00d8 0233     		adds	r3, r3, #2
 1681 00da BB60     		str	r3, [r7, #8]
 995:../src/stm32f10x_rcc.c ****           RCC_Clocks->SYSCLK_Frequency = (((HSE_VALUE / prediv2factor) * pll2mull) / prediv1factor)
 1682              		.loc 1 995 0
 1683 00dc 374A     		ldr	r2, .L108+8
 1684 00de FB68     		ldr	r3, [r7, #12]
 1685 00e0 B2FBF3F3 		udiv	r3, r2, r3
 1686 00e4 BA68     		ldr	r2, [r7, #8]
 1687 00e6 02FB03F2 		mul	r2, r2, r3
 1688 00ea 3B69     		ldr	r3, [r7, #16]
 1689 00ec B2FBF3F3 		udiv	r3, r2, r3
 1690 00f0 7A6A     		ldr	r2, [r7, #36]
 1691 00f2 02FB03F2 		mul	r2, r2, r3
 1692 00f6 7B68     		ldr	r3, [r7, #4]
 1693 00f8 1A60     		str	r2, [r3]
 996:../src/stm32f10x_rcc.c ****         }
 997:../src/stm32f10x_rcc.c ****       }
 998:../src/stm32f10x_rcc.c **** #endif /* STM32F10X_CL */ 
 999:../src/stm32f10x_rcc.c ****       break;
 1694              		.loc 1 999 0
 1695 00fa 04E0     		b	.L101
 1696              	.L105:
 1697 00fc 03E0     		b	.L101
 1698              	.L107:
1000:../src/stm32f10x_rcc.c **** 
1001:../src/stm32f10x_rcc.c ****     default:
1002:../src/stm32f10x_rcc.c ****       RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 1699              		.loc 1 1002 0
 1700 00fe 7B68     		ldr	r3, [r7, #4]
 1701 0100 2D4A     		ldr	r2, .L108+4
 1702 0102 1A60     		str	r2, [r3]
1003:../src/stm32f10x_rcc.c ****       break;
 1703              		.loc 1 1003 0
 1704 0104 00BF     		nop
 1705              	.L101:
1004:../src/stm32f10x_rcc.c ****   }
1005:../src/stm32f10x_rcc.c **** 
1006:../src/stm32f10x_rcc.c ****   /* Compute HCLK, PCLK1, PCLK2 and ADCCLK clocks frequencies ----------------*/
1007:../src/stm32f10x_rcc.c ****   /* Get HCLK prescaler */
1008:../src/stm32f10x_rcc.c ****   tmp = RCC->CFGR & CFGR_HPRE_Set_Mask;
 1706              		.loc 1 1008 0
 1707 0106 2B4B     		ldr	r3, .L108
 1708 0108 5B68     		ldr	r3, [r3, #4]
 1709 010a 03F0F003 		and	r3, r3, #240
 1710 010e 3B62     		str	r3, [r7, #32]
1009:../src/stm32f10x_rcc.c ****   tmp = tmp >> 4;
 1711              		.loc 1 1009 0
 1712 0110 3B6A     		ldr	r3, [r7, #32]
 1713 0112 1B09     		lsrs	r3, r3, #4
 1714 0114 3B62     		str	r3, [r7, #32]
1010:../src/stm32f10x_rcc.c ****   presc = APBAHBPrescTable[tmp];
 1715              		.loc 1 1010 0
 1716 0116 2B4A     		ldr	r2, .L108+16
 1717 0118 3B6A     		ldr	r3, [r7, #32]
 1718 011a 1344     		add	r3, r3, r2
 1719 011c 1B78     		ldrb	r3, [r3]
 1720 011e DBB2     		uxtb	r3, r3
 1721 0120 BB61     		str	r3, [r7, #24]
1011:../src/stm32f10x_rcc.c ****   /* HCLK clock frequency */
1012:../src/stm32f10x_rcc.c ****   RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
 1722              		.loc 1 1012 0
 1723 0122 7B68     		ldr	r3, [r7, #4]
 1724 0124 1A68     		ldr	r2, [r3]
 1725 0126 BB69     		ldr	r3, [r7, #24]
 1726 0128 DA40     		lsrs	r2, r2, r3
 1727 012a 7B68     		ldr	r3, [r7, #4]
 1728 012c 5A60     		str	r2, [r3, #4]
1013:../src/stm32f10x_rcc.c ****   /* Get PCLK1 prescaler */
1014:../src/stm32f10x_rcc.c ****   tmp = RCC->CFGR & CFGR_PPRE1_Set_Mask;
 1729              		.loc 1 1014 0
 1730 012e 214B     		ldr	r3, .L108
 1731 0130 5B68     		ldr	r3, [r3, #4]
 1732 0132 03F4E063 		and	r3, r3, #1792
 1733 0136 3B62     		str	r3, [r7, #32]
1015:../src/stm32f10x_rcc.c ****   tmp = tmp >> 8;
 1734              		.loc 1 1015 0
 1735 0138 3B6A     		ldr	r3, [r7, #32]
 1736 013a 1B0A     		lsrs	r3, r3, #8
 1737 013c 3B62     		str	r3, [r7, #32]
1016:../src/stm32f10x_rcc.c ****   presc = APBAHBPrescTable[tmp];
 1738              		.loc 1 1016 0
 1739 013e 214A     		ldr	r2, .L108+16
 1740 0140 3B6A     		ldr	r3, [r7, #32]
 1741 0142 1344     		add	r3, r3, r2
 1742 0144 1B78     		ldrb	r3, [r3]
 1743 0146 DBB2     		uxtb	r3, r3
 1744 0148 BB61     		str	r3, [r7, #24]
1017:../src/stm32f10x_rcc.c ****   /* PCLK1 clock frequency */
1018:../src/stm32f10x_rcc.c ****   RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 1745              		.loc 1 1018 0
 1746 014a 7B68     		ldr	r3, [r7, #4]
 1747 014c 5A68     		ldr	r2, [r3, #4]
 1748 014e BB69     		ldr	r3, [r7, #24]
 1749 0150 DA40     		lsrs	r2, r2, r3
 1750 0152 7B68     		ldr	r3, [r7, #4]
 1751 0154 9A60     		str	r2, [r3, #8]
1019:../src/stm32f10x_rcc.c ****   /* Get PCLK2 prescaler */
1020:../src/stm32f10x_rcc.c ****   tmp = RCC->CFGR & CFGR_PPRE2_Set_Mask;
 1752              		.loc 1 1020 0
 1753 0156 174B     		ldr	r3, .L108
 1754 0158 5B68     		ldr	r3, [r3, #4]
 1755 015a 03F46053 		and	r3, r3, #14336
 1756 015e 3B62     		str	r3, [r7, #32]
1021:../src/stm32f10x_rcc.c ****   tmp = tmp >> 11;
 1757              		.loc 1 1021 0
 1758 0160 3B6A     		ldr	r3, [r7, #32]
 1759 0162 DB0A     		lsrs	r3, r3, #11
 1760 0164 3B62     		str	r3, [r7, #32]
1022:../src/stm32f10x_rcc.c ****   presc = APBAHBPrescTable[tmp];
 1761              		.loc 1 1022 0
 1762 0166 174A     		ldr	r2, .L108+16
 1763 0168 3B6A     		ldr	r3, [r7, #32]
 1764 016a 1344     		add	r3, r3, r2
 1765 016c 1B78     		ldrb	r3, [r3]
 1766 016e DBB2     		uxtb	r3, r3
 1767 0170 BB61     		str	r3, [r7, #24]
1023:../src/stm32f10x_rcc.c ****   /* PCLK2 clock frequency */
1024:../src/stm32f10x_rcc.c ****   RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 1768              		.loc 1 1024 0
 1769 0172 7B68     		ldr	r3, [r7, #4]
 1770 0174 5A68     		ldr	r2, [r3, #4]
 1771 0176 BB69     		ldr	r3, [r7, #24]
 1772 0178 DA40     		lsrs	r2, r2, r3
 1773 017a 7B68     		ldr	r3, [r7, #4]
 1774 017c DA60     		str	r2, [r3, #12]
1025:../src/stm32f10x_rcc.c ****   /* Get ADCCLK prescaler */
1026:../src/stm32f10x_rcc.c ****   tmp = RCC->CFGR & CFGR_ADCPRE_Set_Mask;
 1775              		.loc 1 1026 0
 1776 017e 0D4B     		ldr	r3, .L108
 1777 0180 5B68     		ldr	r3, [r3, #4]
 1778 0182 03F44043 		and	r3, r3, #49152
 1779 0186 3B62     		str	r3, [r7, #32]
1027:../src/stm32f10x_rcc.c ****   tmp = tmp >> 14;
 1780              		.loc 1 1027 0
 1781 0188 3B6A     		ldr	r3, [r7, #32]
 1782 018a 9B0B     		lsrs	r3, r3, #14
 1783 018c 3B62     		str	r3, [r7, #32]
1028:../src/stm32f10x_rcc.c ****   presc = ADCPrescTable[tmp];
 1784              		.loc 1 1028 0
 1785 018e 0E4A     		ldr	r2, .L108+20
 1786 0190 3B6A     		ldr	r3, [r7, #32]
 1787 0192 1344     		add	r3, r3, r2
 1788 0194 1B78     		ldrb	r3, [r3]
 1789 0196 DBB2     		uxtb	r3, r3
 1790 0198 BB61     		str	r3, [r7, #24]
1029:../src/stm32f10x_rcc.c ****   /* ADCCLK clock frequency */
1030:../src/stm32f10x_rcc.c ****   RCC_Clocks->ADCCLK_Frequency = RCC_Clocks->PCLK2_Frequency / presc;
 1791              		.loc 1 1030 0
 1792 019a 7B68     		ldr	r3, [r7, #4]
 1793 019c DA68     		ldr	r2, [r3, #12]
 1794 019e BB69     		ldr	r3, [r7, #24]
 1795 01a0 B2FBF3F2 		udiv	r2, r2, r3
 1796 01a4 7B68     		ldr	r3, [r7, #4]
 1797 01a6 1A61     		str	r2, [r3, #16]
1031:../src/stm32f10x_rcc.c **** }
 1798              		.loc 1 1031 0
 1799 01a8 2C37     		adds	r7, r7, #44
 1800              		.cfi_def_cfa_offset 4
 1801 01aa BD46     		mov	sp, r7
 1802              		.cfi_def_cfa_register 13
 1803              		@ sp needed
 1804 01ac 5DF8047B 		ldr	r7, [sp], #4
 1805              		.cfi_restore 7
 1806              		.cfi_def_cfa_offset 0
 1807 01b0 7047     		bx	lr
 1808              	.L109:
 1809 01b2 00BF     		.align	2
 1810              	.L108:
 1811 01b4 00100240 		.word	1073876992
 1812 01b8 00127A00 		.word	8000000
 1813 01bc 40787D01 		.word	25000000
 1814 01c0 00093D00 		.word	4000000
 1815 01c4 00000000 		.word	APBAHBPrescTable
 1816 01c8 10000000 		.word	ADCPrescTable
 1817              		.cfi_endproc
 1818              	.LFE56:
 1820              		.section	.text.RCC_AHBPeriphClockCmd,"ax",%progbits
 1821              		.align	2
 1822              		.global	RCC_AHBPeriphClockCmd
 1823              		.thumb
 1824              		.thumb_func
 1826              	RCC_AHBPeriphClockCmd:
 1827              	.LFB57:
1032:../src/stm32f10x_rcc.c **** 
1033:../src/stm32f10x_rcc.c **** /**
1034:../src/stm32f10x_rcc.c ****   * @brief  Enables or disables the AHB peripheral clock.
1035:../src/stm32f10x_rcc.c ****   * @param  RCC_AHBPeriph: specifies the AHB peripheral to gates its clock.
1036:../src/stm32f10x_rcc.c ****   *   
1037:../src/stm32f10x_rcc.c ****   *   For @b STM32_Connectivity_line_devices, this parameter can be any combination
1038:../src/stm32f10x_rcc.c ****   *   of the following values:        
1039:../src/stm32f10x_rcc.c ****   *     @arg RCC_AHBPeriph_DMA1
1040:../src/stm32f10x_rcc.c ****   *     @arg RCC_AHBPeriph_DMA2
1041:../src/stm32f10x_rcc.c ****   *     @arg RCC_AHBPeriph_SRAM
1042:../src/stm32f10x_rcc.c ****   *     @arg RCC_AHBPeriph_FLITF
1043:../src/stm32f10x_rcc.c ****   *     @arg RCC_AHBPeriph_CRC
1044:../src/stm32f10x_rcc.c ****   *     @arg RCC_AHBPeriph_OTG_FS    
1045:../src/stm32f10x_rcc.c ****   *     @arg RCC_AHBPeriph_ETH_MAC   
1046:../src/stm32f10x_rcc.c ****   *     @arg RCC_AHBPeriph_ETH_MAC_Tx
1047:../src/stm32f10x_rcc.c ****   *     @arg RCC_AHBPeriph_ETH_MAC_Rx
1048:../src/stm32f10x_rcc.c ****   * 
1049:../src/stm32f10x_rcc.c ****   *   For @b other_STM32_devices, this parameter can be any combination of the 
1050:../src/stm32f10x_rcc.c ****   *   following values:        
1051:../src/stm32f10x_rcc.c ****   *     @arg RCC_AHBPeriph_DMA1
1052:../src/stm32f10x_rcc.c ****   *     @arg RCC_AHBPeriph_DMA2
1053:../src/stm32f10x_rcc.c ****   *     @arg RCC_AHBPeriph_SRAM
1054:../src/stm32f10x_rcc.c ****   *     @arg RCC_AHBPeriph_FLITF
1055:../src/stm32f10x_rcc.c ****   *     @arg RCC_AHBPeriph_CRC
1056:../src/stm32f10x_rcc.c ****   *     @arg RCC_AHBPeriph_FSMC
1057:../src/stm32f10x_rcc.c ****   *     @arg RCC_AHBPeriph_SDIO
1058:../src/stm32f10x_rcc.c ****   *   
1059:../src/stm32f10x_rcc.c ****   * @note SRAM and FLITF clock can be disabled only during sleep mode.
1060:../src/stm32f10x_rcc.c ****   * @param  NewState: new state of the specified peripheral clock.
1061:../src/stm32f10x_rcc.c ****   *   This parameter can be: ENABLE or DISABLE.
1062:../src/stm32f10x_rcc.c ****   * @retval None
1063:../src/stm32f10x_rcc.c ****   */
1064:../src/stm32f10x_rcc.c **** void RCC_AHBPeriphClockCmd(uint32_t RCC_AHBPeriph, FunctionalState NewState)
1065:../src/stm32f10x_rcc.c **** {
 1828              		.loc 1 1065 0
 1829              		.cfi_startproc
 1830              		@ args = 0, pretend = 0, frame = 8
 1831              		@ frame_needed = 1, uses_anonymous_args = 0
 1832              		@ link register save eliminated.
 1833 0000 80B4     		push	{r7}
 1834              		.cfi_def_cfa_offset 4
 1835              		.cfi_offset 7, -4
 1836 0002 83B0     		sub	sp, sp, #12
 1837              		.cfi_def_cfa_offset 16
 1838 0004 00AF     		add	r7, sp, #0
 1839              		.cfi_def_cfa_register 7
 1840 0006 7860     		str	r0, [r7, #4]
 1841 0008 0B46     		mov	r3, r1
 1842 000a FB70     		strb	r3, [r7, #3]
1066:../src/stm32f10x_rcc.c ****   /* Check the parameters */
1067:../src/stm32f10x_rcc.c ****   assert_param(IS_RCC_AHB_PERIPH(RCC_AHBPeriph));
1068:../src/stm32f10x_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1069:../src/stm32f10x_rcc.c **** 
1070:../src/stm32f10x_rcc.c ****   if (NewState != DISABLE)
 1843              		.loc 1 1070 0
 1844 000c FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1845 000e 002B     		cmp	r3, #0
 1846 0010 06D0     		beq	.L111
1071:../src/stm32f10x_rcc.c ****   {
1072:../src/stm32f10x_rcc.c ****     RCC->AHBENR |= RCC_AHBPeriph;
 1847              		.loc 1 1072 0
 1848 0012 0949     		ldr	r1, .L113
 1849 0014 084B     		ldr	r3, .L113
 1850 0016 5A69     		ldr	r2, [r3, #20]
 1851 0018 7B68     		ldr	r3, [r7, #4]
 1852 001a 1343     		orrs	r3, r3, r2
 1853 001c 4B61     		str	r3, [r1, #20]
 1854 001e 06E0     		b	.L110
 1855              	.L111:
1073:../src/stm32f10x_rcc.c ****   }
1074:../src/stm32f10x_rcc.c ****   else
1075:../src/stm32f10x_rcc.c ****   {
1076:../src/stm32f10x_rcc.c ****     RCC->AHBENR &= ~RCC_AHBPeriph;
 1856              		.loc 1 1076 0
 1857 0020 0549     		ldr	r1, .L113
 1858 0022 054B     		ldr	r3, .L113
 1859 0024 5A69     		ldr	r2, [r3, #20]
 1860 0026 7B68     		ldr	r3, [r7, #4]
 1861 0028 DB43     		mvns	r3, r3
 1862 002a 1340     		ands	r3, r3, r2
 1863 002c 4B61     		str	r3, [r1, #20]
 1864              	.L110:
1077:../src/stm32f10x_rcc.c ****   }
1078:../src/stm32f10x_rcc.c **** }
 1865              		.loc 1 1078 0
 1866 002e 0C37     		adds	r7, r7, #12
 1867              		.cfi_def_cfa_offset 4
 1868 0030 BD46     		mov	sp, r7
 1869              		.cfi_def_cfa_register 13
 1870              		@ sp needed
 1871 0032 5DF8047B 		ldr	r7, [sp], #4
 1872              		.cfi_restore 7
 1873              		.cfi_def_cfa_offset 0
 1874 0036 7047     		bx	lr
 1875              	.L114:
 1876              		.align	2
 1877              	.L113:
 1878 0038 00100240 		.word	1073876992
 1879              		.cfi_endproc
 1880              	.LFE57:
 1882              		.section	.text.RCC_APB2PeriphClockCmd,"ax",%progbits
 1883              		.align	2
 1884              		.global	RCC_APB2PeriphClockCmd
 1885              		.thumb
 1886              		.thumb_func
 1888              	RCC_APB2PeriphClockCmd:
 1889              	.LFB58:
1079:../src/stm32f10x_rcc.c **** 
1080:../src/stm32f10x_rcc.c **** /**
1081:../src/stm32f10x_rcc.c ****   * @brief  Enables or disables the High Speed APB (APB2) peripheral clock.
1082:../src/stm32f10x_rcc.c ****   * @param  RCC_APB2Periph: specifies the APB2 peripheral to gates its clock.
1083:../src/stm32f10x_rcc.c ****   *   This parameter can be any combination of the following values:
1084:../src/stm32f10x_rcc.c ****   *     @arg RCC_APB2Periph_AFIO, RCC_APB2Periph_GPIOA, RCC_APB2Periph_GPIOB,
1085:../src/stm32f10x_rcc.c ****   *          RCC_APB2Periph_GPIOC, RCC_APB2Periph_GPIOD, RCC_APB2Periph_GPIOE,
1086:../src/stm32f10x_rcc.c ****   *          RCC_APB2Periph_GPIOF, RCC_APB2Periph_GPIOG, RCC_APB2Periph_ADC1,
1087:../src/stm32f10x_rcc.c ****   *          RCC_APB2Periph_ADC2, RCC_APB2Periph_TIM1, RCC_APB2Periph_SPI1,
1088:../src/stm32f10x_rcc.c ****   *          RCC_APB2Periph_TIM8, RCC_APB2Periph_USART1, RCC_APB2Periph_ADC3,
1089:../src/stm32f10x_rcc.c ****   *          RCC_APB2Periph_TIM15, RCC_APB2Periph_TIM16, RCC_APB2Periph_TIM17,
1090:../src/stm32f10x_rcc.c ****   *          RCC_APB2Periph_TIM9, RCC_APB2Periph_TIM10, RCC_APB2Periph_TIM11     
1091:../src/stm32f10x_rcc.c ****   * @param  NewState: new state of the specified peripheral clock.
1092:../src/stm32f10x_rcc.c ****   *   This parameter can be: ENABLE or DISABLE.
1093:../src/stm32f10x_rcc.c ****   * @retval None
1094:../src/stm32f10x_rcc.c ****   */
1095:../src/stm32f10x_rcc.c **** void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
1096:../src/stm32f10x_rcc.c **** {
 1890              		.loc 1 1096 0
 1891              		.cfi_startproc
 1892              		@ args = 0, pretend = 0, frame = 8
 1893              		@ frame_needed = 1, uses_anonymous_args = 0
 1894              		@ link register save eliminated.
 1895 0000 80B4     		push	{r7}
 1896              		.cfi_def_cfa_offset 4
 1897              		.cfi_offset 7, -4
 1898 0002 83B0     		sub	sp, sp, #12
 1899              		.cfi_def_cfa_offset 16
 1900 0004 00AF     		add	r7, sp, #0
 1901              		.cfi_def_cfa_register 7
 1902 0006 7860     		str	r0, [r7, #4]
 1903 0008 0B46     		mov	r3, r1
 1904 000a FB70     		strb	r3, [r7, #3]
1097:../src/stm32f10x_rcc.c ****   /* Check the parameters */
1098:../src/stm32f10x_rcc.c ****   assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
1099:../src/stm32f10x_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1100:../src/stm32f10x_rcc.c ****   if (NewState != DISABLE)
 1905              		.loc 1 1100 0
 1906 000c FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1907 000e 002B     		cmp	r3, #0
 1908 0010 06D0     		beq	.L116
1101:../src/stm32f10x_rcc.c ****   {
1102:../src/stm32f10x_rcc.c ****     RCC->APB2ENR |= RCC_APB2Periph;
 1909              		.loc 1 1102 0
 1910 0012 0949     		ldr	r1, .L118
 1911 0014 084B     		ldr	r3, .L118
 1912 0016 9A69     		ldr	r2, [r3, #24]
 1913 0018 7B68     		ldr	r3, [r7, #4]
 1914 001a 1343     		orrs	r3, r3, r2
 1915 001c 8B61     		str	r3, [r1, #24]
 1916 001e 06E0     		b	.L115
 1917              	.L116:
1103:../src/stm32f10x_rcc.c ****   }
1104:../src/stm32f10x_rcc.c ****   else
1105:../src/stm32f10x_rcc.c ****   {
1106:../src/stm32f10x_rcc.c ****     RCC->APB2ENR &= ~RCC_APB2Periph;
 1918              		.loc 1 1106 0
 1919 0020 0549     		ldr	r1, .L118
 1920 0022 054B     		ldr	r3, .L118
 1921 0024 9A69     		ldr	r2, [r3, #24]
 1922 0026 7B68     		ldr	r3, [r7, #4]
 1923 0028 DB43     		mvns	r3, r3
 1924 002a 1340     		ands	r3, r3, r2
 1925 002c 8B61     		str	r3, [r1, #24]
 1926              	.L115:
1107:../src/stm32f10x_rcc.c ****   }
1108:../src/stm32f10x_rcc.c **** }
 1927              		.loc 1 1108 0
 1928 002e 0C37     		adds	r7, r7, #12
 1929              		.cfi_def_cfa_offset 4
 1930 0030 BD46     		mov	sp, r7
 1931              		.cfi_def_cfa_register 13
 1932              		@ sp needed
 1933 0032 5DF8047B 		ldr	r7, [sp], #4
 1934              		.cfi_restore 7
 1935              		.cfi_def_cfa_offset 0
 1936 0036 7047     		bx	lr
 1937              	.L119:
 1938              		.align	2
 1939              	.L118:
 1940 0038 00100240 		.word	1073876992
 1941              		.cfi_endproc
 1942              	.LFE58:
 1944              		.section	.text.RCC_APB1PeriphClockCmd,"ax",%progbits
 1945              		.align	2
 1946              		.global	RCC_APB1PeriphClockCmd
 1947              		.thumb
 1948              		.thumb_func
 1950              	RCC_APB1PeriphClockCmd:
 1951              	.LFB59:
1109:../src/stm32f10x_rcc.c **** 
1110:../src/stm32f10x_rcc.c **** /**
1111:../src/stm32f10x_rcc.c ****   * @brief  Enables or disables the Low Speed APB (APB1) peripheral clock.
1112:../src/stm32f10x_rcc.c ****   * @param  RCC_APB1Periph: specifies the APB1 peripheral to gates its clock.
1113:../src/stm32f10x_rcc.c ****   *   This parameter can be any combination of the following values:
1114:../src/stm32f10x_rcc.c ****   *     @arg RCC_APB1Periph_TIM2, RCC_APB1Periph_TIM3, RCC_APB1Periph_TIM4,
1115:../src/stm32f10x_rcc.c ****   *          RCC_APB1Periph_TIM5, RCC_APB1Periph_TIM6, RCC_APB1Periph_TIM7,
1116:../src/stm32f10x_rcc.c ****   *          RCC_APB1Periph_WWDG, RCC_APB1Periph_SPI2, RCC_APB1Periph_SPI3,
1117:../src/stm32f10x_rcc.c ****   *          RCC_APB1Periph_USART2, RCC_APB1Periph_USART3, RCC_APB1Periph_USART4, 
1118:../src/stm32f10x_rcc.c ****   *          RCC_APB1Periph_USART5, RCC_APB1Periph_I2C1, RCC_APB1Periph_I2C2,
1119:../src/stm32f10x_rcc.c ****   *          RCC_APB1Periph_USB, RCC_APB1Periph_CAN1, RCC_APB1Periph_BKP,
1120:../src/stm32f10x_rcc.c ****   *          RCC_APB1Periph_PWR, RCC_APB1Periph_DAC, RCC_APB1Periph_CEC,
1121:../src/stm32f10x_rcc.c ****   *          RCC_APB1Periph_TIM12, RCC_APB1Periph_TIM13, RCC_APB1Periph_TIM14
1122:../src/stm32f10x_rcc.c ****   * @param  NewState: new state of the specified peripheral clock.
1123:../src/stm32f10x_rcc.c ****   *   This parameter can be: ENABLE or DISABLE.
1124:../src/stm32f10x_rcc.c ****   * @retval None
1125:../src/stm32f10x_rcc.c ****   */
1126:../src/stm32f10x_rcc.c **** void RCC_APB1PeriphClockCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
1127:../src/stm32f10x_rcc.c **** {
 1952              		.loc 1 1127 0
 1953              		.cfi_startproc
 1954              		@ args = 0, pretend = 0, frame = 8
 1955              		@ frame_needed = 1, uses_anonymous_args = 0
 1956              		@ link register save eliminated.
 1957 0000 80B4     		push	{r7}
 1958              		.cfi_def_cfa_offset 4
 1959              		.cfi_offset 7, -4
 1960 0002 83B0     		sub	sp, sp, #12
 1961              		.cfi_def_cfa_offset 16
 1962 0004 00AF     		add	r7, sp, #0
 1963              		.cfi_def_cfa_register 7
 1964 0006 7860     		str	r0, [r7, #4]
 1965 0008 0B46     		mov	r3, r1
 1966 000a FB70     		strb	r3, [r7, #3]
1128:../src/stm32f10x_rcc.c ****   /* Check the parameters */
1129:../src/stm32f10x_rcc.c ****   assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
1130:../src/stm32f10x_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1131:../src/stm32f10x_rcc.c ****   if (NewState != DISABLE)
 1967              		.loc 1 1131 0
 1968 000c FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1969 000e 002B     		cmp	r3, #0
 1970 0010 06D0     		beq	.L121
1132:../src/stm32f10x_rcc.c ****   {
1133:../src/stm32f10x_rcc.c ****     RCC->APB1ENR |= RCC_APB1Periph;
 1971              		.loc 1 1133 0
 1972 0012 0949     		ldr	r1, .L123
 1973 0014 084B     		ldr	r3, .L123
 1974 0016 DA69     		ldr	r2, [r3, #28]
 1975 0018 7B68     		ldr	r3, [r7, #4]
 1976 001a 1343     		orrs	r3, r3, r2
 1977 001c CB61     		str	r3, [r1, #28]
 1978 001e 06E0     		b	.L120
 1979              	.L121:
1134:../src/stm32f10x_rcc.c ****   }
1135:../src/stm32f10x_rcc.c ****   else
1136:../src/stm32f10x_rcc.c ****   {
1137:../src/stm32f10x_rcc.c ****     RCC->APB1ENR &= ~RCC_APB1Periph;
 1980              		.loc 1 1137 0
 1981 0020 0549     		ldr	r1, .L123
 1982 0022 054B     		ldr	r3, .L123
 1983 0024 DA69     		ldr	r2, [r3, #28]
 1984 0026 7B68     		ldr	r3, [r7, #4]
 1985 0028 DB43     		mvns	r3, r3
 1986 002a 1340     		ands	r3, r3, r2
 1987 002c CB61     		str	r3, [r1, #28]
 1988              	.L120:
1138:../src/stm32f10x_rcc.c ****   }
1139:../src/stm32f10x_rcc.c **** }
 1989              		.loc 1 1139 0
 1990 002e 0C37     		adds	r7, r7, #12
 1991              		.cfi_def_cfa_offset 4
 1992 0030 BD46     		mov	sp, r7
 1993              		.cfi_def_cfa_register 13
 1994              		@ sp needed
 1995 0032 5DF8047B 		ldr	r7, [sp], #4
 1996              		.cfi_restore 7
 1997              		.cfi_def_cfa_offset 0
 1998 0036 7047     		bx	lr
 1999              	.L124:
 2000              		.align	2
 2001              	.L123:
 2002 0038 00100240 		.word	1073876992
 2003              		.cfi_endproc
 2004              	.LFE59:
 2006              		.section	.text.RCC_AHBPeriphResetCmd,"ax",%progbits
 2007              		.align	2
 2008              		.global	RCC_AHBPeriphResetCmd
 2009              		.thumb
 2010              		.thumb_func
 2012              	RCC_AHBPeriphResetCmd:
 2013              	.LFB60:
1140:../src/stm32f10x_rcc.c **** 
1141:../src/stm32f10x_rcc.c **** #ifdef STM32F10X_CL
1142:../src/stm32f10x_rcc.c **** /**
1143:../src/stm32f10x_rcc.c ****   * @brief  Forces or releases AHB peripheral reset.
1144:../src/stm32f10x_rcc.c ****   * @note   This function applies only to STM32 Connectivity line devices.
1145:../src/stm32f10x_rcc.c ****   * @param  RCC_AHBPeriph: specifies the AHB peripheral to reset.
1146:../src/stm32f10x_rcc.c ****   *   This parameter can be any combination of the following values:
1147:../src/stm32f10x_rcc.c ****   *     @arg RCC_AHBPeriph_OTG_FS 
1148:../src/stm32f10x_rcc.c ****   *     @arg RCC_AHBPeriph_ETH_MAC
1149:../src/stm32f10x_rcc.c ****   * @param  NewState: new state of the specified peripheral reset.
1150:../src/stm32f10x_rcc.c ****   *   This parameter can be: ENABLE or DISABLE.
1151:../src/stm32f10x_rcc.c ****   * @retval None
1152:../src/stm32f10x_rcc.c ****   */
1153:../src/stm32f10x_rcc.c **** void RCC_AHBPeriphResetCmd(uint32_t RCC_AHBPeriph, FunctionalState NewState)
1154:../src/stm32f10x_rcc.c **** {
 2014              		.loc 1 1154 0
 2015              		.cfi_startproc
 2016              		@ args = 0, pretend = 0, frame = 8
 2017              		@ frame_needed = 1, uses_anonymous_args = 0
 2018              		@ link register save eliminated.
 2019 0000 80B4     		push	{r7}
 2020              		.cfi_def_cfa_offset 4
 2021              		.cfi_offset 7, -4
 2022 0002 83B0     		sub	sp, sp, #12
 2023              		.cfi_def_cfa_offset 16
 2024 0004 00AF     		add	r7, sp, #0
 2025              		.cfi_def_cfa_register 7
 2026 0006 7860     		str	r0, [r7, #4]
 2027 0008 0B46     		mov	r3, r1
 2028 000a FB70     		strb	r3, [r7, #3]
1155:../src/stm32f10x_rcc.c ****   /* Check the parameters */
1156:../src/stm32f10x_rcc.c ****   assert_param(IS_RCC_AHB_PERIPH_RESET(RCC_AHBPeriph));
1157:../src/stm32f10x_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1158:../src/stm32f10x_rcc.c **** 
1159:../src/stm32f10x_rcc.c ****   if (NewState != DISABLE)
 2029              		.loc 1 1159 0
 2030 000c FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 2031 000e 002B     		cmp	r3, #0
 2032 0010 06D0     		beq	.L126
1160:../src/stm32f10x_rcc.c ****   {
1161:../src/stm32f10x_rcc.c ****     RCC->AHBRSTR |= RCC_AHBPeriph;
 2033              		.loc 1 1161 0
 2034 0012 0949     		ldr	r1, .L128
 2035 0014 084B     		ldr	r3, .L128
 2036 0016 9A6A     		ldr	r2, [r3, #40]
 2037 0018 7B68     		ldr	r3, [r7, #4]
 2038 001a 1343     		orrs	r3, r3, r2
 2039 001c 8B62     		str	r3, [r1, #40]
 2040 001e 06E0     		b	.L125
 2041              	.L126:
1162:../src/stm32f10x_rcc.c ****   }
1163:../src/stm32f10x_rcc.c ****   else
1164:../src/stm32f10x_rcc.c ****   {
1165:../src/stm32f10x_rcc.c ****     RCC->AHBRSTR &= ~RCC_AHBPeriph;
 2042              		.loc 1 1165 0
 2043 0020 0549     		ldr	r1, .L128
 2044 0022 054B     		ldr	r3, .L128
 2045 0024 9A6A     		ldr	r2, [r3, #40]
 2046 0026 7B68     		ldr	r3, [r7, #4]
 2047 0028 DB43     		mvns	r3, r3
 2048 002a 1340     		ands	r3, r3, r2
 2049 002c 8B62     		str	r3, [r1, #40]
 2050              	.L125:
1166:../src/stm32f10x_rcc.c ****   }
1167:../src/stm32f10x_rcc.c **** }
 2051              		.loc 1 1167 0
 2052 002e 0C37     		adds	r7, r7, #12
 2053              		.cfi_def_cfa_offset 4
 2054 0030 BD46     		mov	sp, r7
 2055              		.cfi_def_cfa_register 13
 2056              		@ sp needed
 2057 0032 5DF8047B 		ldr	r7, [sp], #4
 2058              		.cfi_restore 7
 2059              		.cfi_def_cfa_offset 0
 2060 0036 7047     		bx	lr
 2061              	.L129:
 2062              		.align	2
 2063              	.L128:
 2064 0038 00100240 		.word	1073876992
 2065              		.cfi_endproc
 2066              	.LFE60:
 2068              		.section	.text.RCC_APB2PeriphResetCmd,"ax",%progbits
 2069              		.align	2
 2070              		.global	RCC_APB2PeriphResetCmd
 2071              		.thumb
 2072              		.thumb_func
 2074              	RCC_APB2PeriphResetCmd:
 2075              	.LFB61:
1168:../src/stm32f10x_rcc.c **** #endif /* STM32F10X_CL */ 
1169:../src/stm32f10x_rcc.c **** 
1170:../src/stm32f10x_rcc.c **** /**
1171:../src/stm32f10x_rcc.c ****   * @brief  Forces or releases High Speed APB (APB2) peripheral reset.
1172:../src/stm32f10x_rcc.c ****   * @param  RCC_APB2Periph: specifies the APB2 peripheral to reset.
1173:../src/stm32f10x_rcc.c ****   *   This parameter can be any combination of the following values:
1174:../src/stm32f10x_rcc.c ****   *     @arg RCC_APB2Periph_AFIO, RCC_APB2Periph_GPIOA, RCC_APB2Periph_GPIOB,
1175:../src/stm32f10x_rcc.c ****   *          RCC_APB2Periph_GPIOC, RCC_APB2Periph_GPIOD, RCC_APB2Periph_GPIOE,
1176:../src/stm32f10x_rcc.c ****   *          RCC_APB2Periph_GPIOF, RCC_APB2Periph_GPIOG, RCC_APB2Periph_ADC1,
1177:../src/stm32f10x_rcc.c ****   *          RCC_APB2Periph_ADC2, RCC_APB2Periph_TIM1, RCC_APB2Periph_SPI1,
1178:../src/stm32f10x_rcc.c ****   *          RCC_APB2Periph_TIM8, RCC_APB2Periph_USART1, RCC_APB2Periph_ADC3,
1179:../src/stm32f10x_rcc.c ****   *          RCC_APB2Periph_TIM15, RCC_APB2Periph_TIM16, RCC_APB2Periph_TIM17,
1180:../src/stm32f10x_rcc.c ****   *          RCC_APB2Periph_TIM9, RCC_APB2Periph_TIM10, RCC_APB2Periph_TIM11  
1181:../src/stm32f10x_rcc.c ****   * @param  NewState: new state of the specified peripheral reset.
1182:../src/stm32f10x_rcc.c ****   *   This parameter can be: ENABLE or DISABLE.
1183:../src/stm32f10x_rcc.c ****   * @retval None
1184:../src/stm32f10x_rcc.c ****   */
1185:../src/stm32f10x_rcc.c **** void RCC_APB2PeriphResetCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
1186:../src/stm32f10x_rcc.c **** {
 2076              		.loc 1 1186 0
 2077              		.cfi_startproc
 2078              		@ args = 0, pretend = 0, frame = 8
 2079              		@ frame_needed = 1, uses_anonymous_args = 0
 2080              		@ link register save eliminated.
 2081 0000 80B4     		push	{r7}
 2082              		.cfi_def_cfa_offset 4
 2083              		.cfi_offset 7, -4
 2084 0002 83B0     		sub	sp, sp, #12
 2085              		.cfi_def_cfa_offset 16
 2086 0004 00AF     		add	r7, sp, #0
 2087              		.cfi_def_cfa_register 7
 2088 0006 7860     		str	r0, [r7, #4]
 2089 0008 0B46     		mov	r3, r1
 2090 000a FB70     		strb	r3, [r7, #3]
1187:../src/stm32f10x_rcc.c ****   /* Check the parameters */
1188:../src/stm32f10x_rcc.c ****   assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
1189:../src/stm32f10x_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1190:../src/stm32f10x_rcc.c ****   if (NewState != DISABLE)
 2091              		.loc 1 1190 0
 2092 000c FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 2093 000e 002B     		cmp	r3, #0
 2094 0010 06D0     		beq	.L131
1191:../src/stm32f10x_rcc.c ****   {
1192:../src/stm32f10x_rcc.c ****     RCC->APB2RSTR |= RCC_APB2Periph;
 2095              		.loc 1 1192 0
 2096 0012 0949     		ldr	r1, .L133
 2097 0014 084B     		ldr	r3, .L133
 2098 0016 DA68     		ldr	r2, [r3, #12]
 2099 0018 7B68     		ldr	r3, [r7, #4]
 2100 001a 1343     		orrs	r3, r3, r2
 2101 001c CB60     		str	r3, [r1, #12]
 2102 001e 06E0     		b	.L130
 2103              	.L131:
1193:../src/stm32f10x_rcc.c ****   }
1194:../src/stm32f10x_rcc.c ****   else
1195:../src/stm32f10x_rcc.c ****   {
1196:../src/stm32f10x_rcc.c ****     RCC->APB2RSTR &= ~RCC_APB2Periph;
 2104              		.loc 1 1196 0
 2105 0020 0549     		ldr	r1, .L133
 2106 0022 054B     		ldr	r3, .L133
 2107 0024 DA68     		ldr	r2, [r3, #12]
 2108 0026 7B68     		ldr	r3, [r7, #4]
 2109 0028 DB43     		mvns	r3, r3
 2110 002a 1340     		ands	r3, r3, r2
 2111 002c CB60     		str	r3, [r1, #12]
 2112              	.L130:
1197:../src/stm32f10x_rcc.c ****   }
1198:../src/stm32f10x_rcc.c **** }
 2113              		.loc 1 1198 0
 2114 002e 0C37     		adds	r7, r7, #12
 2115              		.cfi_def_cfa_offset 4
 2116 0030 BD46     		mov	sp, r7
 2117              		.cfi_def_cfa_register 13
 2118              		@ sp needed
 2119 0032 5DF8047B 		ldr	r7, [sp], #4
 2120              		.cfi_restore 7
 2121              		.cfi_def_cfa_offset 0
 2122 0036 7047     		bx	lr
 2123              	.L134:
 2124              		.align	2
 2125              	.L133:
 2126 0038 00100240 		.word	1073876992
 2127              		.cfi_endproc
 2128              	.LFE61:
 2130              		.section	.text.RCC_APB1PeriphResetCmd,"ax",%progbits
 2131              		.align	2
 2132              		.global	RCC_APB1PeriphResetCmd
 2133              		.thumb
 2134              		.thumb_func
 2136              	RCC_APB1PeriphResetCmd:
 2137              	.LFB62:
1199:../src/stm32f10x_rcc.c **** 
1200:../src/stm32f10x_rcc.c **** /**
1201:../src/stm32f10x_rcc.c ****   * @brief  Forces or releases Low Speed APB (APB1) peripheral reset.
1202:../src/stm32f10x_rcc.c ****   * @param  RCC_APB1Periph: specifies the APB1 peripheral to reset.
1203:../src/stm32f10x_rcc.c ****   *   This parameter can be any combination of the following values:
1204:../src/stm32f10x_rcc.c ****   *     @arg RCC_APB1Periph_TIM2, RCC_APB1Periph_TIM3, RCC_APB1Periph_TIM4,
1205:../src/stm32f10x_rcc.c ****   *          RCC_APB1Periph_TIM5, RCC_APB1Periph_TIM6, RCC_APB1Periph_TIM7,
1206:../src/stm32f10x_rcc.c ****   *          RCC_APB1Periph_WWDG, RCC_APB1Periph_SPI2, RCC_APB1Periph_SPI3,
1207:../src/stm32f10x_rcc.c ****   *          RCC_APB1Periph_USART2, RCC_APB1Periph_USART3, RCC_APB1Periph_USART4, 
1208:../src/stm32f10x_rcc.c ****   *          RCC_APB1Periph_USART5, RCC_APB1Periph_I2C1, RCC_APB1Periph_I2C2,
1209:../src/stm32f10x_rcc.c ****   *          RCC_APB1Periph_USB, RCC_APB1Periph_CAN1, RCC_APB1Periph_BKP,
1210:../src/stm32f10x_rcc.c ****   *          RCC_APB1Periph_PWR, RCC_APB1Periph_DAC, RCC_APB1Periph_CEC,
1211:../src/stm32f10x_rcc.c ****   *          RCC_APB1Periph_TIM12, RCC_APB1Periph_TIM13, RCC_APB1Periph_TIM14  
1212:../src/stm32f10x_rcc.c ****   * @param  NewState: new state of the specified peripheral clock.
1213:../src/stm32f10x_rcc.c ****   *   This parameter can be: ENABLE or DISABLE.
1214:../src/stm32f10x_rcc.c ****   * @retval None
1215:../src/stm32f10x_rcc.c ****   */
1216:../src/stm32f10x_rcc.c **** void RCC_APB1PeriphResetCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
1217:../src/stm32f10x_rcc.c **** {
 2138              		.loc 1 1217 0
 2139              		.cfi_startproc
 2140              		@ args = 0, pretend = 0, frame = 8
 2141              		@ frame_needed = 1, uses_anonymous_args = 0
 2142              		@ link register save eliminated.
 2143 0000 80B4     		push	{r7}
 2144              		.cfi_def_cfa_offset 4
 2145              		.cfi_offset 7, -4
 2146 0002 83B0     		sub	sp, sp, #12
 2147              		.cfi_def_cfa_offset 16
 2148 0004 00AF     		add	r7, sp, #0
 2149              		.cfi_def_cfa_register 7
 2150 0006 7860     		str	r0, [r7, #4]
 2151 0008 0B46     		mov	r3, r1
 2152 000a FB70     		strb	r3, [r7, #3]
1218:../src/stm32f10x_rcc.c ****   /* Check the parameters */
1219:../src/stm32f10x_rcc.c ****   assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
1220:../src/stm32f10x_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1221:../src/stm32f10x_rcc.c ****   if (NewState != DISABLE)
 2153              		.loc 1 1221 0
 2154 000c FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 2155 000e 002B     		cmp	r3, #0
 2156 0010 06D0     		beq	.L136
1222:../src/stm32f10x_rcc.c ****   {
1223:../src/stm32f10x_rcc.c ****     RCC->APB1RSTR |= RCC_APB1Periph;
 2157              		.loc 1 1223 0
 2158 0012 0949     		ldr	r1, .L138
 2159 0014 084B     		ldr	r3, .L138
 2160 0016 1A69     		ldr	r2, [r3, #16]
 2161 0018 7B68     		ldr	r3, [r7, #4]
 2162 001a 1343     		orrs	r3, r3, r2
 2163 001c 0B61     		str	r3, [r1, #16]
 2164 001e 06E0     		b	.L135
 2165              	.L136:
1224:../src/stm32f10x_rcc.c ****   }
1225:../src/stm32f10x_rcc.c ****   else
1226:../src/stm32f10x_rcc.c ****   {
1227:../src/stm32f10x_rcc.c ****     RCC->APB1RSTR &= ~RCC_APB1Periph;
 2166              		.loc 1 1227 0
 2167 0020 0549     		ldr	r1, .L138
 2168 0022 054B     		ldr	r3, .L138
 2169 0024 1A69     		ldr	r2, [r3, #16]
 2170 0026 7B68     		ldr	r3, [r7, #4]
 2171 0028 DB43     		mvns	r3, r3
 2172 002a 1340     		ands	r3, r3, r2
 2173 002c 0B61     		str	r3, [r1, #16]
 2174              	.L135:
1228:../src/stm32f10x_rcc.c ****   }
1229:../src/stm32f10x_rcc.c **** }
 2175              		.loc 1 1229 0
 2176 002e 0C37     		adds	r7, r7, #12
 2177              		.cfi_def_cfa_offset 4
 2178 0030 BD46     		mov	sp, r7
 2179              		.cfi_def_cfa_register 13
 2180              		@ sp needed
 2181 0032 5DF8047B 		ldr	r7, [sp], #4
 2182              		.cfi_restore 7
 2183              		.cfi_def_cfa_offset 0
 2184 0036 7047     		bx	lr
 2185              	.L139:
 2186              		.align	2
 2187              	.L138:
 2188 0038 00100240 		.word	1073876992
 2189              		.cfi_endproc
 2190              	.LFE62:
 2192              		.section	.text.RCC_BackupResetCmd,"ax",%progbits
 2193              		.align	2
 2194              		.global	RCC_BackupResetCmd
 2195              		.thumb
 2196              		.thumb_func
 2198              	RCC_BackupResetCmd:
 2199              	.LFB63:
1230:../src/stm32f10x_rcc.c **** 
1231:../src/stm32f10x_rcc.c **** /**
1232:../src/stm32f10x_rcc.c ****   * @brief  Forces or releases the Backup domain reset.
1233:../src/stm32f10x_rcc.c ****   * @param  NewState: new state of the Backup domain reset.
1234:../src/stm32f10x_rcc.c ****   *   This parameter can be: ENABLE or DISABLE.
1235:../src/stm32f10x_rcc.c ****   * @retval None
1236:../src/stm32f10x_rcc.c ****   */
1237:../src/stm32f10x_rcc.c **** void RCC_BackupResetCmd(FunctionalState NewState)
1238:../src/stm32f10x_rcc.c **** {
 2200              		.loc 1 1238 0
 2201              		.cfi_startproc
 2202              		@ args = 0, pretend = 0, frame = 8
 2203              		@ frame_needed = 1, uses_anonymous_args = 0
 2204              		@ link register save eliminated.
 2205 0000 80B4     		push	{r7}
 2206              		.cfi_def_cfa_offset 4
 2207              		.cfi_offset 7, -4
 2208 0002 83B0     		sub	sp, sp, #12
 2209              		.cfi_def_cfa_offset 16
 2210 0004 00AF     		add	r7, sp, #0
 2211              		.cfi_def_cfa_register 7
 2212 0006 0346     		mov	r3, r0
 2213 0008 FB71     		strb	r3, [r7, #7]
1239:../src/stm32f10x_rcc.c ****   /* Check the parameters */
1240:../src/stm32f10x_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1241:../src/stm32f10x_rcc.c ****   *(__IO uint32_t *) BDCR_BDRST_BB = (uint32_t)NewState;
 2214              		.loc 1 1241 0
 2215 000a 044A     		ldr	r2, .L141
 2216 000c FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 2217 000e 1360     		str	r3, [r2]
1242:../src/stm32f10x_rcc.c **** }
 2218              		.loc 1 1242 0
 2219 0010 0C37     		adds	r7, r7, #12
 2220              		.cfi_def_cfa_offset 4
 2221 0012 BD46     		mov	sp, r7
 2222              		.cfi_def_cfa_register 13
 2223              		@ sp needed
 2224 0014 5DF8047B 		ldr	r7, [sp], #4
 2225              		.cfi_restore 7
 2226              		.cfi_def_cfa_offset 0
 2227 0018 7047     		bx	lr
 2228              	.L142:
 2229 001a 00BF     		.align	2
 2230              	.L141:
 2231 001c 40044242 		.word	1111622720
 2232              		.cfi_endproc
 2233              	.LFE63:
 2235              		.section	.text.RCC_ClockSecuritySystemCmd,"ax",%progbits
 2236              		.align	2
 2237              		.global	RCC_ClockSecuritySystemCmd
 2238              		.thumb
 2239              		.thumb_func
 2241              	RCC_ClockSecuritySystemCmd:
 2242              	.LFB64:
1243:../src/stm32f10x_rcc.c **** 
1244:../src/stm32f10x_rcc.c **** /**
1245:../src/stm32f10x_rcc.c ****   * @brief  Enables or disables the Clock Security System.
1246:../src/stm32f10x_rcc.c ****   * @param  NewState: new state of the Clock Security System..
1247:../src/stm32f10x_rcc.c ****   *   This parameter can be: ENABLE or DISABLE.
1248:../src/stm32f10x_rcc.c ****   * @retval None
1249:../src/stm32f10x_rcc.c ****   */
1250:../src/stm32f10x_rcc.c **** void RCC_ClockSecuritySystemCmd(FunctionalState NewState)
1251:../src/stm32f10x_rcc.c **** {
 2243              		.loc 1 1251 0
 2244              		.cfi_startproc
 2245              		@ args = 0, pretend = 0, frame = 8
 2246              		@ frame_needed = 1, uses_anonymous_args = 0
 2247              		@ link register save eliminated.
 2248 0000 80B4     		push	{r7}
 2249              		.cfi_def_cfa_offset 4
 2250              		.cfi_offset 7, -4
 2251 0002 83B0     		sub	sp, sp, #12
 2252              		.cfi_def_cfa_offset 16
 2253 0004 00AF     		add	r7, sp, #0
 2254              		.cfi_def_cfa_register 7
 2255 0006 0346     		mov	r3, r0
 2256 0008 FB71     		strb	r3, [r7, #7]
1252:../src/stm32f10x_rcc.c ****   /* Check the parameters */
1253:../src/stm32f10x_rcc.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
1254:../src/stm32f10x_rcc.c ****   *(__IO uint32_t *) CR_CSSON_BB = (uint32_t)NewState;
 2257              		.loc 1 1254 0
 2258 000a 044A     		ldr	r2, .L144
 2259 000c FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 2260 000e 1360     		str	r3, [r2]
1255:../src/stm32f10x_rcc.c **** }
 2261              		.loc 1 1255 0
 2262 0010 0C37     		adds	r7, r7, #12
 2263              		.cfi_def_cfa_offset 4
 2264 0012 BD46     		mov	sp, r7
 2265              		.cfi_def_cfa_register 13
 2266              		@ sp needed
 2267 0014 5DF8047B 		ldr	r7, [sp], #4
 2268              		.cfi_restore 7
 2269              		.cfi_def_cfa_offset 0
 2270 0018 7047     		bx	lr
 2271              	.L145:
 2272 001a 00BF     		.align	2
 2273              	.L144:
 2274 001c 4C004242 		.word	1111621708
 2275              		.cfi_endproc
 2276              	.LFE64:
 2278              		.section	.text.RCC_MCOConfig,"ax",%progbits
 2279              		.align	2
 2280              		.global	RCC_MCOConfig
 2281              		.thumb
 2282              		.thumb_func
 2284              	RCC_MCOConfig:
 2285              	.LFB65:
1256:../src/stm32f10x_rcc.c **** 
1257:../src/stm32f10x_rcc.c **** /**
1258:../src/stm32f10x_rcc.c ****   * @brief  Selects the clock source to output on MCO pin.
1259:../src/stm32f10x_rcc.c ****   * @param  RCC_MCO: specifies the clock source to output.
1260:../src/stm32f10x_rcc.c ****   *   
1261:../src/stm32f10x_rcc.c ****   *   For @b STM32_Connectivity_line_devices, this parameter can be one of the
1262:../src/stm32f10x_rcc.c ****   *   following values:       
1263:../src/stm32f10x_rcc.c ****   *     @arg RCC_MCO_NoClock: No clock selected
1264:../src/stm32f10x_rcc.c ****   *     @arg RCC_MCO_SYSCLK: System clock selected
1265:../src/stm32f10x_rcc.c ****   *     @arg RCC_MCO_HSI: HSI oscillator clock selected
1266:../src/stm32f10x_rcc.c ****   *     @arg RCC_MCO_HSE: HSE oscillator clock selected
1267:../src/stm32f10x_rcc.c ****   *     @arg RCC_MCO_PLLCLK_Div2: PLL clock divided by 2 selected
1268:../src/stm32f10x_rcc.c ****   *     @arg RCC_MCO_PLL2CLK: PLL2 clock selected                     
1269:../src/stm32f10x_rcc.c ****   *     @arg RCC_MCO_PLL3CLK_Div2: PLL3 clock divided by 2 selected   
1270:../src/stm32f10x_rcc.c ****   *     @arg RCC_MCO_XT1: External 3-25 MHz oscillator clock selected  
1271:../src/stm32f10x_rcc.c ****   *     @arg RCC_MCO_PLL3CLK: PLL3 clock selected 
1272:../src/stm32f10x_rcc.c ****   * 
1273:../src/stm32f10x_rcc.c ****   *   For  @b other_STM32_devices, this parameter can be one of the following values:        
1274:../src/stm32f10x_rcc.c ****   *     @arg RCC_MCO_NoClock: No clock selected
1275:../src/stm32f10x_rcc.c ****   *     @arg RCC_MCO_SYSCLK: System clock selected
1276:../src/stm32f10x_rcc.c ****   *     @arg RCC_MCO_HSI: HSI oscillator clock selected
1277:../src/stm32f10x_rcc.c ****   *     @arg RCC_MCO_HSE: HSE oscillator clock selected
1278:../src/stm32f10x_rcc.c ****   *     @arg RCC_MCO_PLLCLK_Div2: PLL clock divided by 2 selected
1279:../src/stm32f10x_rcc.c ****   *   
1280:../src/stm32f10x_rcc.c ****   * @retval None
1281:../src/stm32f10x_rcc.c ****   */
1282:../src/stm32f10x_rcc.c **** void RCC_MCOConfig(uint8_t RCC_MCO)
1283:../src/stm32f10x_rcc.c **** {
 2286              		.loc 1 1283 0
 2287              		.cfi_startproc
 2288              		@ args = 0, pretend = 0, frame = 8
 2289              		@ frame_needed = 1, uses_anonymous_args = 0
 2290              		@ link register save eliminated.
 2291 0000 80B4     		push	{r7}
 2292              		.cfi_def_cfa_offset 4
 2293              		.cfi_offset 7, -4
 2294 0002 83B0     		sub	sp, sp, #12
 2295              		.cfi_def_cfa_offset 16
 2296 0004 00AF     		add	r7, sp, #0
 2297              		.cfi_def_cfa_register 7
 2298 0006 0346     		mov	r3, r0
 2299 0008 FB71     		strb	r3, [r7, #7]
1284:../src/stm32f10x_rcc.c ****   /* Check the parameters */
1285:../src/stm32f10x_rcc.c ****   assert_param(IS_RCC_MCO(RCC_MCO));
1286:../src/stm32f10x_rcc.c **** 
1287:../src/stm32f10x_rcc.c ****   /* Perform Byte access to MCO bits to select the MCO source */
1288:../src/stm32f10x_rcc.c ****   *(__IO uint8_t *) CFGR_BYTE4_ADDRESS = RCC_MCO;
 2300              		.loc 1 1288 0
 2301 000a 044A     		ldr	r2, .L147
 2302 000c FB79     		ldrb	r3, [r7, #7]
 2303 000e 1370     		strb	r3, [r2]
1289:../src/stm32f10x_rcc.c **** }
 2304              		.loc 1 1289 0
 2305 0010 0C37     		adds	r7, r7, #12
 2306              		.cfi_def_cfa_offset 4
 2307 0012 BD46     		mov	sp, r7
 2308              		.cfi_def_cfa_register 13
 2309              		@ sp needed
 2310 0014 5DF8047B 		ldr	r7, [sp], #4
 2311              		.cfi_restore 7
 2312              		.cfi_def_cfa_offset 0
 2313 0018 7047     		bx	lr
 2314              	.L148:
 2315 001a 00BF     		.align	2
 2316              	.L147:
 2317 001c 07100240 		.word	1073876999
 2318              		.cfi_endproc
 2319              	.LFE65:
 2321              		.section	.text.RCC_GetFlagStatus,"ax",%progbits
 2322              		.align	2
 2323              		.global	RCC_GetFlagStatus
 2324              		.thumb
 2325              		.thumb_func
 2327              	RCC_GetFlagStatus:
 2328              	.LFB66:
1290:../src/stm32f10x_rcc.c **** 
1291:../src/stm32f10x_rcc.c **** /**
1292:../src/stm32f10x_rcc.c ****   * @brief  Checks whether the specified RCC flag is set or not.
1293:../src/stm32f10x_rcc.c ****   * @param  RCC_FLAG: specifies the flag to check.
1294:../src/stm32f10x_rcc.c ****   *   
1295:../src/stm32f10x_rcc.c ****   *   For @b STM32_Connectivity_line_devices, this parameter can be one of the
1296:../src/stm32f10x_rcc.c ****   *   following values:
1297:../src/stm32f10x_rcc.c ****   *     @arg RCC_FLAG_HSIRDY: HSI oscillator clock ready
1298:../src/stm32f10x_rcc.c ****   *     @arg RCC_FLAG_HSERDY: HSE oscillator clock ready
1299:../src/stm32f10x_rcc.c ****   *     @arg RCC_FLAG_PLLRDY: PLL clock ready
1300:../src/stm32f10x_rcc.c ****   *     @arg RCC_FLAG_PLL2RDY: PLL2 clock ready      
1301:../src/stm32f10x_rcc.c ****   *     @arg RCC_FLAG_PLL3RDY: PLL3 clock ready                           
1302:../src/stm32f10x_rcc.c ****   *     @arg RCC_FLAG_LSERDY: LSE oscillator clock ready
1303:../src/stm32f10x_rcc.c ****   *     @arg RCC_FLAG_LSIRDY: LSI oscillator clock ready
1304:../src/stm32f10x_rcc.c ****   *     @arg RCC_FLAG_PINRST: Pin reset
1305:../src/stm32f10x_rcc.c ****   *     @arg RCC_FLAG_PORRST: POR/PDR reset
1306:../src/stm32f10x_rcc.c ****   *     @arg RCC_FLAG_SFTRST: Software reset
1307:../src/stm32f10x_rcc.c ****   *     @arg RCC_FLAG_IWDGRST: Independent Watchdog reset
1308:../src/stm32f10x_rcc.c ****   *     @arg RCC_FLAG_WWDGRST: Window Watchdog reset
1309:../src/stm32f10x_rcc.c ****   *     @arg RCC_FLAG_LPWRRST: Low Power reset
1310:../src/stm32f10x_rcc.c ****   * 
1311:../src/stm32f10x_rcc.c ****   *   For @b other_STM32_devices, this parameter can be one of the following values:        
1312:../src/stm32f10x_rcc.c ****   *     @arg RCC_FLAG_HSIRDY: HSI oscillator clock ready
1313:../src/stm32f10x_rcc.c ****   *     @arg RCC_FLAG_HSERDY: HSE oscillator clock ready
1314:../src/stm32f10x_rcc.c ****   *     @arg RCC_FLAG_PLLRDY: PLL clock ready
1315:../src/stm32f10x_rcc.c ****   *     @arg RCC_FLAG_LSERDY: LSE oscillator clock ready
1316:../src/stm32f10x_rcc.c ****   *     @arg RCC_FLAG_LSIRDY: LSI oscillator clock ready
1317:../src/stm32f10x_rcc.c ****   *     @arg RCC_FLAG_PINRST: Pin reset
1318:../src/stm32f10x_rcc.c ****   *     @arg RCC_FLAG_PORRST: POR/PDR reset
1319:../src/stm32f10x_rcc.c ****   *     @arg RCC_FLAG_SFTRST: Software reset
1320:../src/stm32f10x_rcc.c ****   *     @arg RCC_FLAG_IWDGRST: Independent Watchdog reset
1321:../src/stm32f10x_rcc.c ****   *     @arg RCC_FLAG_WWDGRST: Window Watchdog reset
1322:../src/stm32f10x_rcc.c ****   *     @arg RCC_FLAG_LPWRRST: Low Power reset
1323:../src/stm32f10x_rcc.c ****   *   
1324:../src/stm32f10x_rcc.c ****   * @retval The new state of RCC_FLAG (SET or RESET).
1325:../src/stm32f10x_rcc.c ****   */
1326:../src/stm32f10x_rcc.c **** FlagStatus RCC_GetFlagStatus(uint8_t RCC_FLAG)
1327:../src/stm32f10x_rcc.c **** {
 2329              		.loc 1 1327 0
 2330              		.cfi_startproc
 2331              		@ args = 0, pretend = 0, frame = 24
 2332              		@ frame_needed = 1, uses_anonymous_args = 0
 2333              		@ link register save eliminated.
 2334 0000 80B4     		push	{r7}
 2335              		.cfi_def_cfa_offset 4
 2336              		.cfi_offset 7, -4
 2337 0002 87B0     		sub	sp, sp, #28
 2338              		.cfi_def_cfa_offset 32
 2339 0004 00AF     		add	r7, sp, #0
 2340              		.cfi_def_cfa_register 7
 2341 0006 0346     		mov	r3, r0
 2342 0008 FB71     		strb	r3, [r7, #7]
1328:../src/stm32f10x_rcc.c ****   uint32_t tmp = 0;
 2343              		.loc 1 1328 0
 2344 000a 0023     		movs	r3, #0
 2345 000c FB60     		str	r3, [r7, #12]
1329:../src/stm32f10x_rcc.c ****   uint32_t statusreg = 0;
 2346              		.loc 1 1329 0
 2347 000e 0023     		movs	r3, #0
 2348 0010 7B61     		str	r3, [r7, #20]
1330:../src/stm32f10x_rcc.c ****   FlagStatus bitstatus = RESET;
 2349              		.loc 1 1330 0
 2350 0012 0023     		movs	r3, #0
 2351 0014 FB74     		strb	r3, [r7, #19]
1331:../src/stm32f10x_rcc.c ****   /* Check the parameters */
1332:../src/stm32f10x_rcc.c ****   assert_param(IS_RCC_FLAG(RCC_FLAG));
1333:../src/stm32f10x_rcc.c **** 
1334:../src/stm32f10x_rcc.c ****   /* Get the RCC register index */
1335:../src/stm32f10x_rcc.c ****   tmp = RCC_FLAG >> 5;
 2352              		.loc 1 1335 0
 2353 0016 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 2354 0018 5B09     		lsrs	r3, r3, #5
 2355 001a DBB2     		uxtb	r3, r3
 2356 001c FB60     		str	r3, [r7, #12]
1336:../src/stm32f10x_rcc.c ****   if (tmp == 1)               /* The flag to check is in CR register */
 2357              		.loc 1 1336 0
 2358 001e FB68     		ldr	r3, [r7, #12]
 2359 0020 012B     		cmp	r3, #1
 2360 0022 03D1     		bne	.L150
1337:../src/stm32f10x_rcc.c ****   {
1338:../src/stm32f10x_rcc.c ****     statusreg = RCC->CR;
 2361              		.loc 1 1338 0
 2362 0024 124B     		ldr	r3, .L156
 2363 0026 1B68     		ldr	r3, [r3]
 2364 0028 7B61     		str	r3, [r7, #20]
 2365 002a 09E0     		b	.L151
 2366              	.L150:
1339:../src/stm32f10x_rcc.c ****   }
1340:../src/stm32f10x_rcc.c ****   else if (tmp == 2)          /* The flag to check is in BDCR register */
 2367              		.loc 1 1340 0
 2368 002c FB68     		ldr	r3, [r7, #12]
 2369 002e 022B     		cmp	r3, #2
 2370 0030 03D1     		bne	.L152
1341:../src/stm32f10x_rcc.c ****   {
1342:../src/stm32f10x_rcc.c ****     statusreg = RCC->BDCR;
 2371              		.loc 1 1342 0
 2372 0032 0F4B     		ldr	r3, .L156
 2373 0034 1B6A     		ldr	r3, [r3, #32]
 2374 0036 7B61     		str	r3, [r7, #20]
 2375 0038 02E0     		b	.L151
 2376              	.L152:
1343:../src/stm32f10x_rcc.c ****   }
1344:../src/stm32f10x_rcc.c ****   else                       /* The flag to check is in CSR register */
1345:../src/stm32f10x_rcc.c ****   {
1346:../src/stm32f10x_rcc.c ****     statusreg = RCC->CSR;
 2377              		.loc 1 1346 0
 2378 003a 0D4B     		ldr	r3, .L156
 2379 003c 5B6A     		ldr	r3, [r3, #36]
 2380 003e 7B61     		str	r3, [r7, #20]
 2381              	.L151:
1347:../src/stm32f10x_rcc.c ****   }
1348:../src/stm32f10x_rcc.c **** 
1349:../src/stm32f10x_rcc.c ****   /* Get the flag position */
1350:../src/stm32f10x_rcc.c ****   tmp = RCC_FLAG & FLAG_Mask;
 2382              		.loc 1 1350 0
 2383 0040 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 2384 0042 03F01F03 		and	r3, r3, #31
 2385 0046 FB60     		str	r3, [r7, #12]
1351:../src/stm32f10x_rcc.c ****   if ((statusreg & ((uint32_t)1 << tmp)) != (uint32_t)RESET)
 2386              		.loc 1 1351 0
 2387 0048 FB68     		ldr	r3, [r7, #12]
 2388 004a 7A69     		ldr	r2, [r7, #20]
 2389 004c 22FA03F3 		lsr	r3, r2, r3
 2390 0050 03F00103 		and	r3, r3, #1
 2391 0054 002B     		cmp	r3, #0
 2392 0056 02D0     		beq	.L153
1352:../src/stm32f10x_rcc.c ****   {
1353:../src/stm32f10x_rcc.c ****     bitstatus = SET;
 2393              		.loc 1 1353 0
 2394 0058 0123     		movs	r3, #1
 2395 005a FB74     		strb	r3, [r7, #19]
 2396 005c 01E0     		b	.L154
 2397              	.L153:
1354:../src/stm32f10x_rcc.c ****   }
1355:../src/stm32f10x_rcc.c ****   else
1356:../src/stm32f10x_rcc.c ****   {
1357:../src/stm32f10x_rcc.c ****     bitstatus = RESET;
 2398              		.loc 1 1357 0
 2399 005e 0023     		movs	r3, #0
 2400 0060 FB74     		strb	r3, [r7, #19]
 2401              	.L154:
1358:../src/stm32f10x_rcc.c ****   }
1359:../src/stm32f10x_rcc.c **** 
1360:../src/stm32f10x_rcc.c ****   /* Return the flag status */
1361:../src/stm32f10x_rcc.c ****   return bitstatus;
 2402              		.loc 1 1361 0
 2403 0062 FB7C     		ldrb	r3, [r7, #19]	@ zero_extendqisi2
1362:../src/stm32f10x_rcc.c **** }
 2404              		.loc 1 1362 0
 2405 0064 1846     		mov	r0, r3
 2406 0066 1C37     		adds	r7, r7, #28
 2407              		.cfi_def_cfa_offset 4
 2408 0068 BD46     		mov	sp, r7
 2409              		.cfi_def_cfa_register 13
 2410              		@ sp needed
 2411 006a 5DF8047B 		ldr	r7, [sp], #4
 2412              		.cfi_restore 7
 2413              		.cfi_def_cfa_offset 0
 2414 006e 7047     		bx	lr
 2415              	.L157:
 2416              		.align	2
 2417              	.L156:
 2418 0070 00100240 		.word	1073876992
 2419              		.cfi_endproc
 2420              	.LFE66:
 2422              		.section	.text.RCC_ClearFlag,"ax",%progbits
 2423              		.align	2
 2424              		.global	RCC_ClearFlag
 2425              		.thumb
 2426              		.thumb_func
 2428              	RCC_ClearFlag:
 2429              	.LFB67:
1363:../src/stm32f10x_rcc.c **** 
1364:../src/stm32f10x_rcc.c **** /**
1365:../src/stm32f10x_rcc.c ****   * @brief  Clears the RCC reset flags.
1366:../src/stm32f10x_rcc.c ****   * @note   The reset flags are: RCC_FLAG_PINRST, RCC_FLAG_PORRST, RCC_FLAG_SFTRST,
1367:../src/stm32f10x_rcc.c ****   *   RCC_FLAG_IWDGRST, RCC_FLAG_WWDGRST, RCC_FLAG_LPWRRST
1368:../src/stm32f10x_rcc.c ****   * @param  None
1369:../src/stm32f10x_rcc.c ****   * @retval None
1370:../src/stm32f10x_rcc.c ****   */
1371:../src/stm32f10x_rcc.c **** void RCC_ClearFlag(void)
1372:../src/stm32f10x_rcc.c **** {
 2430              		.loc 1 1372 0
 2431              		.cfi_startproc
 2432              		@ args = 0, pretend = 0, frame = 0
 2433              		@ frame_needed = 1, uses_anonymous_args = 0
 2434              		@ link register save eliminated.
 2435 0000 80B4     		push	{r7}
 2436              		.cfi_def_cfa_offset 4
 2437              		.cfi_offset 7, -4
 2438 0002 00AF     		add	r7, sp, #0
 2439              		.cfi_def_cfa_register 7
1373:../src/stm32f10x_rcc.c ****   /* Set RMVF bit to clear the reset flags */
1374:../src/stm32f10x_rcc.c ****   RCC->CSR |= CSR_RMVF_Set;
 2440              		.loc 1 1374 0
 2441 0004 044A     		ldr	r2, .L159
 2442 0006 044B     		ldr	r3, .L159
 2443 0008 5B6A     		ldr	r3, [r3, #36]
 2444 000a 43F08073 		orr	r3, r3, #16777216
 2445 000e 5362     		str	r3, [r2, #36]
1375:../src/stm32f10x_rcc.c **** }
 2446              		.loc 1 1375 0
 2447 0010 BD46     		mov	sp, r7
 2448              		.cfi_def_cfa_register 13
 2449              		@ sp needed
 2450 0012 5DF8047B 		ldr	r7, [sp], #4
 2451              		.cfi_restore 7
 2452              		.cfi_def_cfa_offset 0
 2453 0016 7047     		bx	lr
 2454              	.L160:
 2455              		.align	2
 2456              	.L159:
 2457 0018 00100240 		.word	1073876992
 2458              		.cfi_endproc
 2459              	.LFE67:
 2461              		.section	.text.RCC_GetITStatus,"ax",%progbits
 2462              		.align	2
 2463              		.global	RCC_GetITStatus
 2464              		.thumb
 2465              		.thumb_func
 2467              	RCC_GetITStatus:
 2468              	.LFB68:
1376:../src/stm32f10x_rcc.c **** 
1377:../src/stm32f10x_rcc.c **** /**
1378:../src/stm32f10x_rcc.c ****   * @brief  Checks whether the specified RCC interrupt has occurred or not.
1379:../src/stm32f10x_rcc.c ****   * @param  RCC_IT: specifies the RCC interrupt source to check.
1380:../src/stm32f10x_rcc.c ****   *   
1381:../src/stm32f10x_rcc.c ****   *   For @b STM32_Connectivity_line_devices, this parameter can be one of the
1382:../src/stm32f10x_rcc.c ****   *   following values:
1383:../src/stm32f10x_rcc.c ****   *     @arg RCC_IT_LSIRDY: LSI ready interrupt
1384:../src/stm32f10x_rcc.c ****   *     @arg RCC_IT_LSERDY: LSE ready interrupt
1385:../src/stm32f10x_rcc.c ****   *     @arg RCC_IT_HSIRDY: HSI ready interrupt
1386:../src/stm32f10x_rcc.c ****   *     @arg RCC_IT_HSERDY: HSE ready interrupt
1387:../src/stm32f10x_rcc.c ****   *     @arg RCC_IT_PLLRDY: PLL ready interrupt
1388:../src/stm32f10x_rcc.c ****   *     @arg RCC_IT_PLL2RDY: PLL2 ready interrupt 
1389:../src/stm32f10x_rcc.c ****   *     @arg RCC_IT_PLL3RDY: PLL3 ready interrupt                      
1390:../src/stm32f10x_rcc.c ****   *     @arg RCC_IT_CSS: Clock Security System interrupt
1391:../src/stm32f10x_rcc.c ****   * 
1392:../src/stm32f10x_rcc.c ****   *   For @b other_STM32_devices, this parameter can be one of the following values:        
1393:../src/stm32f10x_rcc.c ****   *     @arg RCC_IT_LSIRDY: LSI ready interrupt
1394:../src/stm32f10x_rcc.c ****   *     @arg RCC_IT_LSERDY: LSE ready interrupt
1395:../src/stm32f10x_rcc.c ****   *     @arg RCC_IT_HSIRDY: HSI ready interrupt
1396:../src/stm32f10x_rcc.c ****   *     @arg RCC_IT_HSERDY: HSE ready interrupt
1397:../src/stm32f10x_rcc.c ****   *     @arg RCC_IT_PLLRDY: PLL ready interrupt
1398:../src/stm32f10x_rcc.c ****   *     @arg RCC_IT_CSS: Clock Security System interrupt
1399:../src/stm32f10x_rcc.c ****   *   
1400:../src/stm32f10x_rcc.c ****   * @retval The new state of RCC_IT (SET or RESET).
1401:../src/stm32f10x_rcc.c ****   */
1402:../src/stm32f10x_rcc.c **** ITStatus RCC_GetITStatus(uint8_t RCC_IT)
1403:../src/stm32f10x_rcc.c **** {
 2469              		.loc 1 1403 0
 2470              		.cfi_startproc
 2471              		@ args = 0, pretend = 0, frame = 16
 2472              		@ frame_needed = 1, uses_anonymous_args = 0
 2473              		@ link register save eliminated.
 2474 0000 80B4     		push	{r7}
 2475              		.cfi_def_cfa_offset 4
 2476              		.cfi_offset 7, -4
 2477 0002 85B0     		sub	sp, sp, #20
 2478              		.cfi_def_cfa_offset 24
 2479 0004 00AF     		add	r7, sp, #0
 2480              		.cfi_def_cfa_register 7
 2481 0006 0346     		mov	r3, r0
 2482 0008 FB71     		strb	r3, [r7, #7]
1404:../src/stm32f10x_rcc.c ****   ITStatus bitstatus = RESET;
 2483              		.loc 1 1404 0
 2484 000a 0023     		movs	r3, #0
 2485 000c FB73     		strb	r3, [r7, #15]
1405:../src/stm32f10x_rcc.c ****   /* Check the parameters */
1406:../src/stm32f10x_rcc.c ****   assert_param(IS_RCC_GET_IT(RCC_IT));
1407:../src/stm32f10x_rcc.c **** 
1408:../src/stm32f10x_rcc.c ****   /* Check the status of the specified RCC interrupt */
1409:../src/stm32f10x_rcc.c ****   if ((RCC->CIR & RCC_IT) != (uint32_t)RESET)
 2486              		.loc 1 1409 0
 2487 000e 094B     		ldr	r3, .L165
 2488 0010 9A68     		ldr	r2, [r3, #8]
 2489 0012 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 2490 0014 1340     		ands	r3, r3, r2
 2491 0016 002B     		cmp	r3, #0
 2492 0018 02D0     		beq	.L162
1410:../src/stm32f10x_rcc.c ****   {
1411:../src/stm32f10x_rcc.c ****     bitstatus = SET;
 2493              		.loc 1 1411 0
 2494 001a 0123     		movs	r3, #1
 2495 001c FB73     		strb	r3, [r7, #15]
 2496 001e 01E0     		b	.L163
 2497              	.L162:
1412:../src/stm32f10x_rcc.c ****   }
1413:../src/stm32f10x_rcc.c ****   else
1414:../src/stm32f10x_rcc.c ****   {
1415:../src/stm32f10x_rcc.c ****     bitstatus = RESET;
 2498              		.loc 1 1415 0
 2499 0020 0023     		movs	r3, #0
 2500 0022 FB73     		strb	r3, [r7, #15]
 2501              	.L163:
1416:../src/stm32f10x_rcc.c ****   }
1417:../src/stm32f10x_rcc.c **** 
1418:../src/stm32f10x_rcc.c ****   /* Return the RCC_IT status */
1419:../src/stm32f10x_rcc.c ****   return  bitstatus;
 2502              		.loc 1 1419 0
 2503 0024 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
1420:../src/stm32f10x_rcc.c **** }
 2504              		.loc 1 1420 0
 2505 0026 1846     		mov	r0, r3
 2506 0028 1437     		adds	r7, r7, #20
 2507              		.cfi_def_cfa_offset 4
 2508 002a BD46     		mov	sp, r7
 2509              		.cfi_def_cfa_register 13
 2510              		@ sp needed
 2511 002c 5DF8047B 		ldr	r7, [sp], #4
 2512              		.cfi_restore 7
 2513              		.cfi_def_cfa_offset 0
 2514 0030 7047     		bx	lr
 2515              	.L166:
 2516 0032 00BF     		.align	2
 2517              	.L165:
 2518 0034 00100240 		.word	1073876992
 2519              		.cfi_endproc
 2520              	.LFE68:
 2522              		.section	.text.RCC_ClearITPendingBit,"ax",%progbits
 2523              		.align	2
 2524              		.global	RCC_ClearITPendingBit
 2525              		.thumb
 2526              		.thumb_func
 2528              	RCC_ClearITPendingBit:
 2529              	.LFB69:
1421:../src/stm32f10x_rcc.c **** 
1422:../src/stm32f10x_rcc.c **** /**
1423:../src/stm32f10x_rcc.c ****   * @brief  Clears the RCC's interrupt pending bits.
1424:../src/stm32f10x_rcc.c ****   * @param  RCC_IT: specifies the interrupt pending bit to clear.
1425:../src/stm32f10x_rcc.c ****   *   
1426:../src/stm32f10x_rcc.c ****   *   For @b STM32_Connectivity_line_devices, this parameter can be any combination
1427:../src/stm32f10x_rcc.c ****   *   of the following values:
1428:../src/stm32f10x_rcc.c ****   *     @arg RCC_IT_LSIRDY: LSI ready interrupt
1429:../src/stm32f10x_rcc.c ****   *     @arg RCC_IT_LSERDY: LSE ready interrupt
1430:../src/stm32f10x_rcc.c ****   *     @arg RCC_IT_HSIRDY: HSI ready interrupt
1431:../src/stm32f10x_rcc.c ****   *     @arg RCC_IT_HSERDY: HSE ready interrupt
1432:../src/stm32f10x_rcc.c ****   *     @arg RCC_IT_PLLRDY: PLL ready interrupt
1433:../src/stm32f10x_rcc.c ****   *     @arg RCC_IT_PLL2RDY: PLL2 ready interrupt 
1434:../src/stm32f10x_rcc.c ****   *     @arg RCC_IT_PLL3RDY: PLL3 ready interrupt                      
1435:../src/stm32f10x_rcc.c ****   *     @arg RCC_IT_CSS: Clock Security System interrupt
1436:../src/stm32f10x_rcc.c ****   * 
1437:../src/stm32f10x_rcc.c ****   *   For @b other_STM32_devices, this parameter can be any combination of the
1438:../src/stm32f10x_rcc.c ****   *   following values:        
1439:../src/stm32f10x_rcc.c ****   *     @arg RCC_IT_LSIRDY: LSI ready interrupt
1440:../src/stm32f10x_rcc.c ****   *     @arg RCC_IT_LSERDY: LSE ready interrupt
1441:../src/stm32f10x_rcc.c ****   *     @arg RCC_IT_HSIRDY: HSI ready interrupt
1442:../src/stm32f10x_rcc.c ****   *     @arg RCC_IT_HSERDY: HSE ready interrupt
1443:../src/stm32f10x_rcc.c ****   *     @arg RCC_IT_PLLRDY: PLL ready interrupt
1444:../src/stm32f10x_rcc.c ****   *   
1445:../src/stm32f10x_rcc.c ****   *     @arg RCC_IT_CSS: Clock Security System interrupt
1446:../src/stm32f10x_rcc.c ****   * @retval None
1447:../src/stm32f10x_rcc.c ****   */
1448:../src/stm32f10x_rcc.c **** void RCC_ClearITPendingBit(uint8_t RCC_IT)
1449:../src/stm32f10x_rcc.c **** {
 2530              		.loc 1 1449 0
 2531              		.cfi_startproc
 2532              		@ args = 0, pretend = 0, frame = 8
 2533              		@ frame_needed = 1, uses_anonymous_args = 0
 2534              		@ link register save eliminated.
 2535 0000 80B4     		push	{r7}
 2536              		.cfi_def_cfa_offset 4
 2537              		.cfi_offset 7, -4
 2538 0002 83B0     		sub	sp, sp, #12
 2539              		.cfi_def_cfa_offset 16
 2540 0004 00AF     		add	r7, sp, #0
 2541              		.cfi_def_cfa_register 7
 2542 0006 0346     		mov	r3, r0
 2543 0008 FB71     		strb	r3, [r7, #7]
1450:../src/stm32f10x_rcc.c ****   /* Check the parameters */
1451:../src/stm32f10x_rcc.c ****   assert_param(IS_RCC_CLEAR_IT(RCC_IT));
1452:../src/stm32f10x_rcc.c **** 
1453:../src/stm32f10x_rcc.c ****   /* Perform Byte access to RCC_CIR[23:16] bits to clear the selected interrupt
1454:../src/stm32f10x_rcc.c ****      pending bits */
1455:../src/stm32f10x_rcc.c ****   *(__IO uint8_t *) CIR_BYTE3_ADDRESS = RCC_IT;
 2544              		.loc 1 1455 0
 2545 000a 044A     		ldr	r2, .L168
 2546 000c FB79     		ldrb	r3, [r7, #7]
 2547 000e 1370     		strb	r3, [r2]
1456:../src/stm32f10x_rcc.c **** }
 2548              		.loc 1 1456 0
 2549 0010 0C37     		adds	r7, r7, #12
 2550              		.cfi_def_cfa_offset 4
 2551 0012 BD46     		mov	sp, r7
 2552              		.cfi_def_cfa_register 13
 2553              		@ sp needed
 2554 0014 5DF8047B 		ldr	r7, [sp], #4
 2555              		.cfi_restore 7
 2556              		.cfi_def_cfa_offset 0
 2557 0018 7047     		bx	lr
 2558              	.L169:
 2559 001a 00BF     		.align	2
 2560              	.L168:
 2561 001c 0A100240 		.word	1073877002
 2562              		.cfi_endproc
 2563              	.LFE69:
 2565              		.text
 2566              	.Letext0:
 2567              		.file 2 "f:\\eclipse\\gcc\\arm-none-eabi\\include\\machine\\_default_types.h"
 2568              		.file 3 "f:\\eclipse\\gcc\\arm-none-eabi\\include\\sys\\_stdint.h"
 2569              		.file 4 "F:\\ARM\\STM32 Eclipse Firmware\\STM32F107_Template\\cmsis/stm32f10x.h"
 2570              		.file 5 "F:\\ARM\\STM32 Eclipse Firmware\\STM32F107_Template\\inc/stm32f10x_rcc.h"
 2571              		.file 6 "F:\\ARM\\STM32 Eclipse Firmware\\STM32F107_Template\\cmsis/core_cm3.h"
DEFINED SYMBOLS
                            *ABS*:00000000 stm32f10x_rcc.c
C:\Users\MISAKA~1.MIS\AppData\Local\Temp\cc96XMW9.s:19     .data:00000000 $d
C:\Users\MISAKA~1.MIS\AppData\Local\Temp\cc96XMW9.s:22     .data:00000000 APBAHBPrescTable
C:\Users\MISAKA~1.MIS\AppData\Local\Temp\cc96XMW9.s:42     .data:00000010 ADCPrescTable
C:\Users\MISAKA~1.MIS\AppData\Local\Temp\cc96XMW9.s:48     .text.RCC_DeInit:00000000 $t
C:\Users\MISAKA~1.MIS\AppData\Local\Temp\cc96XMW9.s:53     .text.RCC_DeInit:00000000 RCC_DeInit
C:\Users\MISAKA~1.MIS\AppData\Local\Temp\cc96XMW9.s:123    .text.RCC_DeInit:00000068 $d
C:\Users\MISAKA~1.MIS\AppData\Local\Temp\cc96XMW9.s:129    .text.RCC_HSEConfig:00000000 $t
C:\Users\MISAKA~1.MIS\AppData\Local\Temp\cc96XMW9.s:134    .text.RCC_HSEConfig:00000000 RCC_HSEConfig
C:\Users\MISAKA~1.MIS\AppData\Local\Temp\cc96XMW9.s:201    .text.RCC_HSEConfig:00000058 $d
C:\Users\MISAKA~1.MIS\AppData\Local\Temp\cc96XMW9.s:206    .text.RCC_WaitForHSEStartUp:00000000 $t
C:\Users\MISAKA~1.MIS\AppData\Local\Temp\cc96XMW9.s:211    .text.RCC_WaitForHSEStartUp:00000000 RCC_WaitForHSEStartUp
C:\Users\MISAKA~1.MIS\AppData\Local\Temp\cc96XMW9.s:2327   .text.RCC_GetFlagStatus:00000000 RCC_GetFlagStatus
C:\Users\MISAKA~1.MIS\AppData\Local\Temp\cc96XMW9.s:282    .text.RCC_AdjustHSICalibrationValue:00000000 $t
C:\Users\MISAKA~1.MIS\AppData\Local\Temp\cc96XMW9.s:287    .text.RCC_AdjustHSICalibrationValue:00000000 RCC_AdjustHSICalibrationValue
C:\Users\MISAKA~1.MIS\AppData\Local\Temp\cc96XMW9.s:337    .text.RCC_AdjustHSICalibrationValue:00000038 $d
C:\Users\MISAKA~1.MIS\AppData\Local\Temp\cc96XMW9.s:342    .text.RCC_HSICmd:00000000 $t
C:\Users\MISAKA~1.MIS\AppData\Local\Temp\cc96XMW9.s:347    .text.RCC_HSICmd:00000000 RCC_HSICmd
C:\Users\MISAKA~1.MIS\AppData\Local\Temp\cc96XMW9.s:380    .text.RCC_HSICmd:0000001c $d
C:\Users\MISAKA~1.MIS\AppData\Local\Temp\cc96XMW9.s:385    .text.RCC_PLLConfig:00000000 $t
C:\Users\MISAKA~1.MIS\AppData\Local\Temp\cc96XMW9.s:390    .text.RCC_PLLConfig:00000000 RCC_PLLConfig
C:\Users\MISAKA~1.MIS\AppData\Local\Temp\cc96XMW9.s:441    .text.RCC_PLLConfig:00000038 $d
C:\Users\MISAKA~1.MIS\AppData\Local\Temp\cc96XMW9.s:446    .text.RCC_PLLCmd:00000000 $t
C:\Users\MISAKA~1.MIS\AppData\Local\Temp\cc96XMW9.s:451    .text.RCC_PLLCmd:00000000 RCC_PLLCmd
C:\Users\MISAKA~1.MIS\AppData\Local\Temp\cc96XMW9.s:484    .text.RCC_PLLCmd:0000001c $d
C:\Users\MISAKA~1.MIS\AppData\Local\Temp\cc96XMW9.s:489    .text.RCC_PREDIV1Config:00000000 $t
C:\Users\MISAKA~1.MIS\AppData\Local\Temp\cc96XMW9.s:494    .text.RCC_PREDIV1Config:00000000 RCC_PREDIV1Config
C:\Users\MISAKA~1.MIS\AppData\Local\Temp\cc96XMW9.s:546    .text.RCC_PREDIV1Config:0000003c $d
C:\Users\MISAKA~1.MIS\AppData\Local\Temp\cc96XMW9.s:551    .text.RCC_PREDIV2Config:00000000 $t
C:\Users\MISAKA~1.MIS\AppData\Local\Temp\cc96XMW9.s:556    .text.RCC_PREDIV2Config:00000000 RCC_PREDIV2Config
C:\Users\MISAKA~1.MIS\AppData\Local\Temp\cc96XMW9.s:604    .text.RCC_PREDIV2Config:00000034 $d
C:\Users\MISAKA~1.MIS\AppData\Local\Temp\cc96XMW9.s:609    .text.RCC_PLL2Config:00000000 $t
C:\Users\MISAKA~1.MIS\AppData\Local\Temp\cc96XMW9.s:614    .text.RCC_PLL2Config:00000000 RCC_PLL2Config
C:\Users\MISAKA~1.MIS\AppData\Local\Temp\cc96XMW9.s:662    .text.RCC_PLL2Config:00000034 $d
C:\Users\MISAKA~1.MIS\AppData\Local\Temp\cc96XMW9.s:667    .text.RCC_PLL2Cmd:00000000 $t
C:\Users\MISAKA~1.MIS\AppData\Local\Temp\cc96XMW9.s:672    .text.RCC_PLL2Cmd:00000000 RCC_PLL2Cmd
C:\Users\MISAKA~1.MIS\AppData\Local\Temp\cc96XMW9.s:705    .text.RCC_PLL2Cmd:0000001c $d
C:\Users\MISAKA~1.MIS\AppData\Local\Temp\cc96XMW9.s:710    .text.RCC_PLL3Config:00000000 $t
C:\Users\MISAKA~1.MIS\AppData\Local\Temp\cc96XMW9.s:715    .text.RCC_PLL3Config:00000000 RCC_PLL3Config
C:\Users\MISAKA~1.MIS\AppData\Local\Temp\cc96XMW9.s:763    .text.RCC_PLL3Config:00000034 $d
C:\Users\MISAKA~1.MIS\AppData\Local\Temp\cc96XMW9.s:768    .text.RCC_PLL3Cmd:00000000 $t
C:\Users\MISAKA~1.MIS\AppData\Local\Temp\cc96XMW9.s:773    .text.RCC_PLL3Cmd:00000000 RCC_PLL3Cmd
C:\Users\MISAKA~1.MIS\AppData\Local\Temp\cc96XMW9.s:806    .text.RCC_PLL3Cmd:0000001c $d
C:\Users\MISAKA~1.MIS\AppData\Local\Temp\cc96XMW9.s:811    .text.RCC_SYSCLKConfig:00000000 $t
C:\Users\MISAKA~1.MIS\AppData\Local\Temp\cc96XMW9.s:816    .text.RCC_SYSCLKConfig:00000000 RCC_SYSCLKConfig
C:\Users\MISAKA~1.MIS\AppData\Local\Temp\cc96XMW9.s:864    .text.RCC_SYSCLKConfig:00000034 $d
C:\Users\MISAKA~1.MIS\AppData\Local\Temp\cc96XMW9.s:869    .text.RCC_GetSYSCLKSource:00000000 $t
C:\Users\MISAKA~1.MIS\AppData\Local\Temp\cc96XMW9.s:874    .text.RCC_GetSYSCLKSource:00000000 RCC_GetSYSCLKSource
C:\Users\MISAKA~1.MIS\AppData\Local\Temp\cc96XMW9.s:904    .text.RCC_GetSYSCLKSource:0000001c $d
C:\Users\MISAKA~1.MIS\AppData\Local\Temp\cc96XMW9.s:909    .text.RCC_HCLKConfig:00000000 $t
C:\Users\MISAKA~1.MIS\AppData\Local\Temp\cc96XMW9.s:914    .text.RCC_HCLKConfig:00000000 RCC_HCLKConfig
C:\Users\MISAKA~1.MIS\AppData\Local\Temp\cc96XMW9.s:962    .text.RCC_HCLKConfig:00000034 $d
C:\Users\MISAKA~1.MIS\AppData\Local\Temp\cc96XMW9.s:967    .text.RCC_PCLK1Config:00000000 $t
C:\Users\MISAKA~1.MIS\AppData\Local\Temp\cc96XMW9.s:972    .text.RCC_PCLK1Config:00000000 RCC_PCLK1Config
C:\Users\MISAKA~1.MIS\AppData\Local\Temp\cc96XMW9.s:1020   .text.RCC_PCLK1Config:00000034 $d
C:\Users\MISAKA~1.MIS\AppData\Local\Temp\cc96XMW9.s:1025   .text.RCC_PCLK2Config:00000000 $t
C:\Users\MISAKA~1.MIS\AppData\Local\Temp\cc96XMW9.s:1030   .text.RCC_PCLK2Config:00000000 RCC_PCLK2Config
C:\Users\MISAKA~1.MIS\AppData\Local\Temp\cc96XMW9.s:1079   .text.RCC_PCLK2Config:00000034 $d
C:\Users\MISAKA~1.MIS\AppData\Local\Temp\cc96XMW9.s:1084   .text.RCC_ITConfig:00000000 $t
C:\Users\MISAKA~1.MIS\AppData\Local\Temp\cc96XMW9.s:1089   .text.RCC_ITConfig:00000000 RCC_ITConfig
C:\Users\MISAKA~1.MIS\AppData\Local\Temp\cc96XMW9.s:1148   .text.RCC_ITConfig:00000048 $d
C:\Users\MISAKA~1.MIS\AppData\Local\Temp\cc96XMW9.s:1153   .text.RCC_OTGFSCLKConfig:00000000 $t
C:\Users\MISAKA~1.MIS\AppData\Local\Temp\cc96XMW9.s:1158   .text.RCC_OTGFSCLKConfig:00000000 RCC_OTGFSCLKConfig
C:\Users\MISAKA~1.MIS\AppData\Local\Temp\cc96XMW9.s:1190   .text.RCC_OTGFSCLKConfig:00000018 $d
C:\Users\MISAKA~1.MIS\AppData\Local\Temp\cc96XMW9.s:1195   .text.RCC_ADCCLKConfig:00000000 $t
C:\Users\MISAKA~1.MIS\AppData\Local\Temp\cc96XMW9.s:1200   .text.RCC_ADCCLKConfig:00000000 RCC_ADCCLKConfig
C:\Users\MISAKA~1.MIS\AppData\Local\Temp\cc96XMW9.s:1248   .text.RCC_ADCCLKConfig:00000034 $d
C:\Users\MISAKA~1.MIS\AppData\Local\Temp\cc96XMW9.s:1253   .text.RCC_I2S2CLKConfig:00000000 $t
C:\Users\MISAKA~1.MIS\AppData\Local\Temp\cc96XMW9.s:1258   .text.RCC_I2S2CLKConfig:00000000 RCC_I2S2CLKConfig
C:\Users\MISAKA~1.MIS\AppData\Local\Temp\cc96XMW9.s:1290   .text.RCC_I2S2CLKConfig:00000018 $d
C:\Users\MISAKA~1.MIS\AppData\Local\Temp\cc96XMW9.s:1295   .text.RCC_I2S3CLKConfig:00000000 $t
C:\Users\MISAKA~1.MIS\AppData\Local\Temp\cc96XMW9.s:1300   .text.RCC_I2S3CLKConfig:00000000 RCC_I2S3CLKConfig
C:\Users\MISAKA~1.MIS\AppData\Local\Temp\cc96XMW9.s:1332   .text.RCC_I2S3CLKConfig:00000018 $d
C:\Users\MISAKA~1.MIS\AppData\Local\Temp\cc96XMW9.s:1337   .text.RCC_LSEConfig:00000000 $t
C:\Users\MISAKA~1.MIS\AppData\Local\Temp\cc96XMW9.s:1342   .text.RCC_LSEConfig:00000000 RCC_LSEConfig
C:\Users\MISAKA~1.MIS\AppData\Local\Temp\cc96XMW9.s:1402   .text.RCC_LSEConfig:0000003c $d
C:\Users\MISAKA~1.MIS\AppData\Local\Temp\cc96XMW9.s:1407   .text.RCC_LSICmd:00000000 $t
C:\Users\MISAKA~1.MIS\AppData\Local\Temp\cc96XMW9.s:1412   .text.RCC_LSICmd:00000000 RCC_LSICmd
C:\Users\MISAKA~1.MIS\AppData\Local\Temp\cc96XMW9.s:1445   .text.RCC_LSICmd:0000001c $d
C:\Users\MISAKA~1.MIS\AppData\Local\Temp\cc96XMW9.s:1450   .text.RCC_RTCCLKConfig:00000000 $t
C:\Users\MISAKA~1.MIS\AppData\Local\Temp\cc96XMW9.s:1455   .text.RCC_RTCCLKConfig:00000000 RCC_RTCCLKConfig
C:\Users\MISAKA~1.MIS\AppData\Local\Temp\cc96XMW9.s:1490   .text.RCC_RTCCLKConfig:00000020 $d
C:\Users\MISAKA~1.MIS\AppData\Local\Temp\cc96XMW9.s:1495   .text.RCC_RTCCLKCmd:00000000 $t
C:\Users\MISAKA~1.MIS\AppData\Local\Temp\cc96XMW9.s:1500   .text.RCC_RTCCLKCmd:00000000 RCC_RTCCLKCmd
C:\Users\MISAKA~1.MIS\AppData\Local\Temp\cc96XMW9.s:1533   .text.RCC_RTCCLKCmd:0000001c $d
C:\Users\MISAKA~1.MIS\AppData\Local\Temp\cc96XMW9.s:1538   .text.RCC_GetClocksFreq:00000000 $t
C:\Users\MISAKA~1.MIS\AppData\Local\Temp\cc96XMW9.s:1543   .text.RCC_GetClocksFreq:00000000 RCC_GetClocksFreq
C:\Users\MISAKA~1.MIS\AppData\Local\Temp\cc96XMW9.s:1811   .text.RCC_GetClocksFreq:000001b4 $d
C:\Users\MISAKA~1.MIS\AppData\Local\Temp\cc96XMW9.s:1821   .text.RCC_AHBPeriphClockCmd:00000000 $t
C:\Users\MISAKA~1.MIS\AppData\Local\Temp\cc96XMW9.s:1826   .text.RCC_AHBPeriphClockCmd:00000000 RCC_AHBPeriphClockCmd
C:\Users\MISAKA~1.MIS\AppData\Local\Temp\cc96XMW9.s:1878   .text.RCC_AHBPeriphClockCmd:00000038 $d
C:\Users\MISAKA~1.MIS\AppData\Local\Temp\cc96XMW9.s:1883   .text.RCC_APB2PeriphClockCmd:00000000 $t
C:\Users\MISAKA~1.MIS\AppData\Local\Temp\cc96XMW9.s:1888   .text.RCC_APB2PeriphClockCmd:00000000 RCC_APB2PeriphClockCmd
C:\Users\MISAKA~1.MIS\AppData\Local\Temp\cc96XMW9.s:1940   .text.RCC_APB2PeriphClockCmd:00000038 $d
C:\Users\MISAKA~1.MIS\AppData\Local\Temp\cc96XMW9.s:1945   .text.RCC_APB1PeriphClockCmd:00000000 $t
C:\Users\MISAKA~1.MIS\AppData\Local\Temp\cc96XMW9.s:1950   .text.RCC_APB1PeriphClockCmd:00000000 RCC_APB1PeriphClockCmd
C:\Users\MISAKA~1.MIS\AppData\Local\Temp\cc96XMW9.s:2002   .text.RCC_APB1PeriphClockCmd:00000038 $d
C:\Users\MISAKA~1.MIS\AppData\Local\Temp\cc96XMW9.s:2007   .text.RCC_AHBPeriphResetCmd:00000000 $t
C:\Users\MISAKA~1.MIS\AppData\Local\Temp\cc96XMW9.s:2012   .text.RCC_AHBPeriphResetCmd:00000000 RCC_AHBPeriphResetCmd
C:\Users\MISAKA~1.MIS\AppData\Local\Temp\cc96XMW9.s:2064   .text.RCC_AHBPeriphResetCmd:00000038 $d
C:\Users\MISAKA~1.MIS\AppData\Local\Temp\cc96XMW9.s:2069   .text.RCC_APB2PeriphResetCmd:00000000 $t
C:\Users\MISAKA~1.MIS\AppData\Local\Temp\cc96XMW9.s:2074   .text.RCC_APB2PeriphResetCmd:00000000 RCC_APB2PeriphResetCmd
C:\Users\MISAKA~1.MIS\AppData\Local\Temp\cc96XMW9.s:2126   .text.RCC_APB2PeriphResetCmd:00000038 $d
C:\Users\MISAKA~1.MIS\AppData\Local\Temp\cc96XMW9.s:2131   .text.RCC_APB1PeriphResetCmd:00000000 $t
C:\Users\MISAKA~1.MIS\AppData\Local\Temp\cc96XMW9.s:2136   .text.RCC_APB1PeriphResetCmd:00000000 RCC_APB1PeriphResetCmd
C:\Users\MISAKA~1.MIS\AppData\Local\Temp\cc96XMW9.s:2188   .text.RCC_APB1PeriphResetCmd:00000038 $d
C:\Users\MISAKA~1.MIS\AppData\Local\Temp\cc96XMW9.s:2193   .text.RCC_BackupResetCmd:00000000 $t
C:\Users\MISAKA~1.MIS\AppData\Local\Temp\cc96XMW9.s:2198   .text.RCC_BackupResetCmd:00000000 RCC_BackupResetCmd
C:\Users\MISAKA~1.MIS\AppData\Local\Temp\cc96XMW9.s:2231   .text.RCC_BackupResetCmd:0000001c $d
C:\Users\MISAKA~1.MIS\AppData\Local\Temp\cc96XMW9.s:2236   .text.RCC_ClockSecuritySystemCmd:00000000 $t
C:\Users\MISAKA~1.MIS\AppData\Local\Temp\cc96XMW9.s:2241   .text.RCC_ClockSecuritySystemCmd:00000000 RCC_ClockSecuritySystemCmd
C:\Users\MISAKA~1.MIS\AppData\Local\Temp\cc96XMW9.s:2274   .text.RCC_ClockSecuritySystemCmd:0000001c $d
C:\Users\MISAKA~1.MIS\AppData\Local\Temp\cc96XMW9.s:2279   .text.RCC_MCOConfig:00000000 $t
C:\Users\MISAKA~1.MIS\AppData\Local\Temp\cc96XMW9.s:2284   .text.RCC_MCOConfig:00000000 RCC_MCOConfig
C:\Users\MISAKA~1.MIS\AppData\Local\Temp\cc96XMW9.s:2317   .text.RCC_MCOConfig:0000001c $d
C:\Users\MISAKA~1.MIS\AppData\Local\Temp\cc96XMW9.s:2322   .text.RCC_GetFlagStatus:00000000 $t
C:\Users\MISAKA~1.MIS\AppData\Local\Temp\cc96XMW9.s:2418   .text.RCC_GetFlagStatus:00000070 $d
C:\Users\MISAKA~1.MIS\AppData\Local\Temp\cc96XMW9.s:2423   .text.RCC_ClearFlag:00000000 $t
C:\Users\MISAKA~1.MIS\AppData\Local\Temp\cc96XMW9.s:2428   .text.RCC_ClearFlag:00000000 RCC_ClearFlag
C:\Users\MISAKA~1.MIS\AppData\Local\Temp\cc96XMW9.s:2457   .text.RCC_ClearFlag:00000018 $d
C:\Users\MISAKA~1.MIS\AppData\Local\Temp\cc96XMW9.s:2462   .text.RCC_GetITStatus:00000000 $t
C:\Users\MISAKA~1.MIS\AppData\Local\Temp\cc96XMW9.s:2467   .text.RCC_GetITStatus:00000000 RCC_GetITStatus
C:\Users\MISAKA~1.MIS\AppData\Local\Temp\cc96XMW9.s:2518   .text.RCC_GetITStatus:00000034 $d
C:\Users\MISAKA~1.MIS\AppData\Local\Temp\cc96XMW9.s:2523   .text.RCC_ClearITPendingBit:00000000 $t
C:\Users\MISAKA~1.MIS\AppData\Local\Temp\cc96XMW9.s:2528   .text.RCC_ClearITPendingBit:00000000 RCC_ClearITPendingBit
C:\Users\MISAKA~1.MIS\AppData\Local\Temp\cc96XMW9.s:2561   .text.RCC_ClearITPendingBit:0000001c $d
                     .debug_frame:00000010 $d
                           .group:00000000 wm4.0.2d80f1b5ce3c69d13e258577ddf29668
                           .group:00000000 wm4.stm32f10x.h.51.6e18fa0f6016a7ea66d7cfe7c3be3cd1
                           .group:00000000 wm4.core_cm3.h.25.d35e9a9b04ec4aaebae9bf79fff061f9
                           .group:00000000 wm4.features.h.22.2e382148a0560adabf236cddd4e880f4
                           .group:00000000 wm4._default_types.h.15.933e8edd27a65e0b69af4a865eb623d2
                           .group:00000000 wm4._intsup.h.10.35a45952db64d30146faa63a55c20c1c
                           .group:00000000 wm4._stdint.h.10.f76354baea1c7088202064e6f3d4f5e3
                           .group:00000000 wm4.stdint.h.23.373a9d32a9e4c2e88fd347156532d281
                           .group:00000000 wm4.core_cm3.h.113.b286929a54d33b4c8909a7132437b244
                           .group:00000000 wm4.stm32f10x.h.522.34c9721dbd76a587b38991fd58e2fdab
                           .group:00000000 wm4.stm32f10x_bkp.h.25.4622919f1e30efdad5eb44e12edd5513
                           .group:00000000 wm4.stm32f10x_flash.h.25.4be61fcb02863962a1e006449d310650
                           .group:00000000 wm4.stm32f10x_gpio.h.25.80c981af0e637567395034c576cfb3ce
                           .group:00000000 wm4.stm32f10x_pwr.h.25.37ef75009f751ef5fe27910e0bf00a62
                           .group:00000000 wm4.stm32f10x_tim.h.25.21c6ec062f1e74898cb96a57da276fec
                           .group:00000000 wm4.misc.h.25.068e106f368fa5369a681ef57c106f4b
                           .group:00000000 wm4.stm32f10x.h.8304.f7d8ad90959e99679b3257267c3aadfe
                           .group:00000000 wm4.stm32f10x_rcc.h.67.52760615f14f7330527f4fbb5f6fb38b

NO UNDEFINED SYMBOLS
