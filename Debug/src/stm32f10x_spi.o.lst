   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 6
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.file	"stm32f10x_spi.c"
  15              		.text
  16              	.Ltext0:
  17              		.cfi_sections	.debug_frame
  18              		.section	.text.SPI_I2S_DeInit,"ax",%progbits
  19              		.align	2
  20              		.global	SPI_I2S_DeInit
  21              		.thumb
  22              		.thumb_func
  24              	SPI_I2S_DeInit:
  25              	.LFB29:
  26              		.file 1 "../src/stm32f10x_spi.c"
   1:../src/stm32f10x_spi.c **** /**
   2:../src/stm32f10x_spi.c ****   ******************************************************************************
   3:../src/stm32f10x_spi.c ****   * @file    stm32f10x_spi.c
   4:../src/stm32f10x_spi.c ****   * @author  MCD Application Team
   5:../src/stm32f10x_spi.c ****   * @version V3.5.0
   6:../src/stm32f10x_spi.c ****   * @date    11-March-2011
   7:../src/stm32f10x_spi.c ****   * @brief   This file provides all the SPI firmware functions.
   8:../src/stm32f10x_spi.c ****   ******************************************************************************
   9:../src/stm32f10x_spi.c ****   * @attention
  10:../src/stm32f10x_spi.c ****   *
  11:../src/stm32f10x_spi.c ****   * THE PRESENT FIRMWARE WHICH IS FOR GUIDANCE ONLY AIMS AT PROVIDING CUSTOMERS
  12:../src/stm32f10x_spi.c ****   * WITH CODING INFORMATION REGARDING THEIR PRODUCTS IN ORDER FOR THEM TO SAVE
  13:../src/stm32f10x_spi.c ****   * TIME. AS A RESULT, STMICROELECTRONICS SHALL NOT BE HELD LIABLE FOR ANY
  14:../src/stm32f10x_spi.c ****   * DIRECT, INDIRECT OR CONSEQUENTIAL DAMAGES WITH RESPECT TO ANY CLAIMS ARISING
  15:../src/stm32f10x_spi.c ****   * FROM THE CONTENT OF SUCH FIRMWARE AND/OR THE USE MADE BY CUSTOMERS OF THE
  16:../src/stm32f10x_spi.c ****   * CODING INFORMATION CONTAINED HEREIN IN CONNECTION WITH THEIR PRODUCTS.
  17:../src/stm32f10x_spi.c ****   *
  18:../src/stm32f10x_spi.c ****   * <h2><center>&copy; COPYRIGHT 2011 STMicroelectronics</center></h2>
  19:../src/stm32f10x_spi.c ****   ******************************************************************************
  20:../src/stm32f10x_spi.c ****   */
  21:../src/stm32f10x_spi.c **** 
  22:../src/stm32f10x_spi.c **** /* Includes ------------------------------------------------------------------*/
  23:../src/stm32f10x_spi.c **** #include "stm32f10x_spi.h"
  24:../src/stm32f10x_spi.c **** #include "stm32f10x_rcc.h"
  25:../src/stm32f10x_spi.c **** 
  26:../src/stm32f10x_spi.c **** /** @addtogroup STM32F10x_StdPeriph_Driver
  27:../src/stm32f10x_spi.c ****   * @{
  28:../src/stm32f10x_spi.c ****   */
  29:../src/stm32f10x_spi.c **** 
  30:../src/stm32f10x_spi.c **** /** @defgroup SPI 
  31:../src/stm32f10x_spi.c ****   * @brief SPI driver modules
  32:../src/stm32f10x_spi.c ****   * @{
  33:../src/stm32f10x_spi.c ****   */ 
  34:../src/stm32f10x_spi.c **** 
  35:../src/stm32f10x_spi.c **** /** @defgroup SPI_Private_TypesDefinitions
  36:../src/stm32f10x_spi.c ****   * @{
  37:../src/stm32f10x_spi.c ****   */
  38:../src/stm32f10x_spi.c **** 
  39:../src/stm32f10x_spi.c **** /**
  40:../src/stm32f10x_spi.c ****   * @}
  41:../src/stm32f10x_spi.c ****   */ 
  42:../src/stm32f10x_spi.c **** 
  43:../src/stm32f10x_spi.c **** 
  44:../src/stm32f10x_spi.c **** /** @defgroup SPI_Private_Defines
  45:../src/stm32f10x_spi.c ****   * @{
  46:../src/stm32f10x_spi.c ****   */
  47:../src/stm32f10x_spi.c **** 
  48:../src/stm32f10x_spi.c **** /* SPI SPE mask */
  49:../src/stm32f10x_spi.c **** #define CR1_SPE_Set          ((uint16_t)0x0040)
  50:../src/stm32f10x_spi.c **** #define CR1_SPE_Reset        ((uint16_t)0xFFBF)
  51:../src/stm32f10x_spi.c **** 
  52:../src/stm32f10x_spi.c **** /* I2S I2SE mask */
  53:../src/stm32f10x_spi.c **** #define I2SCFGR_I2SE_Set     ((uint16_t)0x0400)
  54:../src/stm32f10x_spi.c **** #define I2SCFGR_I2SE_Reset   ((uint16_t)0xFBFF)
  55:../src/stm32f10x_spi.c **** 
  56:../src/stm32f10x_spi.c **** /* SPI CRCNext mask */
  57:../src/stm32f10x_spi.c **** #define CR1_CRCNext_Set      ((uint16_t)0x1000)
  58:../src/stm32f10x_spi.c **** 
  59:../src/stm32f10x_spi.c **** /* SPI CRCEN mask */
  60:../src/stm32f10x_spi.c **** #define CR1_CRCEN_Set        ((uint16_t)0x2000)
  61:../src/stm32f10x_spi.c **** #define CR1_CRCEN_Reset      ((uint16_t)0xDFFF)
  62:../src/stm32f10x_spi.c **** 
  63:../src/stm32f10x_spi.c **** /* SPI SSOE mask */
  64:../src/stm32f10x_spi.c **** #define CR2_SSOE_Set         ((uint16_t)0x0004)
  65:../src/stm32f10x_spi.c **** #define CR2_SSOE_Reset       ((uint16_t)0xFFFB)
  66:../src/stm32f10x_spi.c **** 
  67:../src/stm32f10x_spi.c **** /* SPI registers Masks */
  68:../src/stm32f10x_spi.c **** #define CR1_CLEAR_Mask       ((uint16_t)0x3040)
  69:../src/stm32f10x_spi.c **** #define I2SCFGR_CLEAR_Mask   ((uint16_t)0xF040)
  70:../src/stm32f10x_spi.c **** 
  71:../src/stm32f10x_spi.c **** /* SPI or I2S mode selection masks */
  72:../src/stm32f10x_spi.c **** #define SPI_Mode_Select      ((uint16_t)0xF7FF)
  73:../src/stm32f10x_spi.c **** #define I2S_Mode_Select      ((uint16_t)0x0800) 
  74:../src/stm32f10x_spi.c **** 
  75:../src/stm32f10x_spi.c **** /* I2S clock source selection masks */
  76:../src/stm32f10x_spi.c **** #define I2S2_CLOCK_SRC       ((uint32_t)(0x00020000))
  77:../src/stm32f10x_spi.c **** #define I2S3_CLOCK_SRC       ((uint32_t)(0x00040000))
  78:../src/stm32f10x_spi.c **** #define I2S_MUL_MASK         ((uint32_t)(0x0000F000))
  79:../src/stm32f10x_spi.c **** #define I2S_DIV_MASK         ((uint32_t)(0x000000F0))
  80:../src/stm32f10x_spi.c **** 
  81:../src/stm32f10x_spi.c **** /**
  82:../src/stm32f10x_spi.c ****   * @}
  83:../src/stm32f10x_spi.c ****   */
  84:../src/stm32f10x_spi.c **** 
  85:../src/stm32f10x_spi.c **** /** @defgroup SPI_Private_Macros
  86:../src/stm32f10x_spi.c ****   * @{
  87:../src/stm32f10x_spi.c ****   */
  88:../src/stm32f10x_spi.c **** 
  89:../src/stm32f10x_spi.c **** /**
  90:../src/stm32f10x_spi.c ****   * @}
  91:../src/stm32f10x_spi.c ****   */
  92:../src/stm32f10x_spi.c **** 
  93:../src/stm32f10x_spi.c **** /** @defgroup SPI_Private_Variables
  94:../src/stm32f10x_spi.c ****   * @{
  95:../src/stm32f10x_spi.c ****   */
  96:../src/stm32f10x_spi.c **** 
  97:../src/stm32f10x_spi.c **** /**
  98:../src/stm32f10x_spi.c ****   * @}
  99:../src/stm32f10x_spi.c ****   */
 100:../src/stm32f10x_spi.c **** 
 101:../src/stm32f10x_spi.c **** /** @defgroup SPI_Private_FunctionPrototypes
 102:../src/stm32f10x_spi.c ****   * @{
 103:../src/stm32f10x_spi.c ****   */
 104:../src/stm32f10x_spi.c **** 
 105:../src/stm32f10x_spi.c **** /**
 106:../src/stm32f10x_spi.c ****   * @}
 107:../src/stm32f10x_spi.c ****   */
 108:../src/stm32f10x_spi.c **** 
 109:../src/stm32f10x_spi.c **** /** @defgroup SPI_Private_Functions
 110:../src/stm32f10x_spi.c ****   * @{
 111:../src/stm32f10x_spi.c ****   */
 112:../src/stm32f10x_spi.c **** 
 113:../src/stm32f10x_spi.c **** /**
 114:../src/stm32f10x_spi.c ****   * @brief  Deinitializes the SPIx peripheral registers to their default
 115:../src/stm32f10x_spi.c ****   *         reset values (Affects also the I2Ss).
 116:../src/stm32f10x_spi.c ****   * @param  SPIx: where x can be 1, 2 or 3 to select the SPI peripheral.
 117:../src/stm32f10x_spi.c ****   * @retval None
 118:../src/stm32f10x_spi.c ****   */
 119:../src/stm32f10x_spi.c **** void SPI_I2S_DeInit(SPI_TypeDef* SPIx)
 120:../src/stm32f10x_spi.c **** {
  27              		.loc 1 120 0
  28              		.cfi_startproc
  29              		@ args = 0, pretend = 0, frame = 8
  30              		@ frame_needed = 1, uses_anonymous_args = 0
  31 0000 80B5     		push	{r7, lr}
  32              		.cfi_def_cfa_offset 8
  33              		.cfi_offset 7, -8
  34              		.cfi_offset 14, -4
  35 0002 82B0     		sub	sp, sp, #8
  36              		.cfi_def_cfa_offset 16
  37 0004 00AF     		add	r7, sp, #0
  38              		.cfi_def_cfa_register 7
  39 0006 7860     		str	r0, [r7, #4]
 121:../src/stm32f10x_spi.c ****   /* Check the parameters */
 122:../src/stm32f10x_spi.c ****   assert_param(IS_SPI_ALL_PERIPH(SPIx));
 123:../src/stm32f10x_spi.c **** 
 124:../src/stm32f10x_spi.c ****   if (SPIx == SPI1)
  40              		.loc 1 124 0
  41 0008 7B68     		ldr	r3, [r7, #4]
  42 000a 174A     		ldr	r2, .L5
  43 000c 9342     		cmp	r3, r2
  44 000e 0AD1     		bne	.L2
 125:../src/stm32f10x_spi.c ****   {
 126:../src/stm32f10x_spi.c ****     /* Enable SPI1 reset state */
 127:../src/stm32f10x_spi.c ****     RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI1, ENABLE);
  45              		.loc 1 127 0
  46 0010 4FF48050 		mov	r0, #4096
  47 0014 0121     		movs	r1, #1
  48 0016 FFF7FEFF 		bl	RCC_APB2PeriphResetCmd
 128:../src/stm32f10x_spi.c ****     /* Release SPI1 from reset state */
 129:../src/stm32f10x_spi.c ****     RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI1, DISABLE);
  49              		.loc 1 129 0
  50 001a 4FF48050 		mov	r0, #4096
  51 001e 0021     		movs	r1, #0
  52 0020 FFF7FEFF 		bl	RCC_APB2PeriphResetCmd
  53 0024 1CE0     		b	.L1
  54              	.L2:
 130:../src/stm32f10x_spi.c ****   }
 131:../src/stm32f10x_spi.c ****   else if (SPIx == SPI2)
  55              		.loc 1 131 0
  56 0026 7B68     		ldr	r3, [r7, #4]
  57 0028 104A     		ldr	r2, .L5+4
  58 002a 9342     		cmp	r3, r2
  59 002c 0AD1     		bne	.L4
 132:../src/stm32f10x_spi.c ****   {
 133:../src/stm32f10x_spi.c ****     /* Enable SPI2 reset state */
 134:../src/stm32f10x_spi.c ****     RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI2, ENABLE);
  60              		.loc 1 134 0
  61 002e 4FF48040 		mov	r0, #16384
  62 0032 0121     		movs	r1, #1
  63 0034 FFF7FEFF 		bl	RCC_APB1PeriphResetCmd
 135:../src/stm32f10x_spi.c ****     /* Release SPI2 from reset state */
 136:../src/stm32f10x_spi.c ****     RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI2, DISABLE);
  64              		.loc 1 136 0
  65 0038 4FF48040 		mov	r0, #16384
  66 003c 0021     		movs	r1, #0
  67 003e FFF7FEFF 		bl	RCC_APB1PeriphResetCmd
  68 0042 0DE0     		b	.L1
  69              	.L4:
 137:../src/stm32f10x_spi.c ****   }
 138:../src/stm32f10x_spi.c ****   else
 139:../src/stm32f10x_spi.c ****   {
 140:../src/stm32f10x_spi.c ****     if (SPIx == SPI3)
  70              		.loc 1 140 0
  71 0044 7B68     		ldr	r3, [r7, #4]
  72 0046 0A4A     		ldr	r2, .L5+8
  73 0048 9342     		cmp	r3, r2
  74 004a 09D1     		bne	.L1
 141:../src/stm32f10x_spi.c ****     {
 142:../src/stm32f10x_spi.c ****       /* Enable SPI3 reset state */
 143:../src/stm32f10x_spi.c ****       RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI3, ENABLE);
  75              		.loc 1 143 0
  76 004c 4FF40040 		mov	r0, #32768
  77 0050 0121     		movs	r1, #1
  78 0052 FFF7FEFF 		bl	RCC_APB1PeriphResetCmd
 144:../src/stm32f10x_spi.c ****       /* Release SPI3 from reset state */
 145:../src/stm32f10x_spi.c ****       RCC_APB1PeriphResetCmd(RCC_APB1Periph_SPI3, DISABLE);
  79              		.loc 1 145 0
  80 0056 4FF40040 		mov	r0, #32768
  81 005a 0021     		movs	r1, #0
  82 005c FFF7FEFF 		bl	RCC_APB1PeriphResetCmd
  83              	.L1:
 146:../src/stm32f10x_spi.c ****     }
 147:../src/stm32f10x_spi.c ****   }
 148:../src/stm32f10x_spi.c **** }
  84              		.loc 1 148 0
  85 0060 0837     		adds	r7, r7, #8
  86              		.cfi_def_cfa_offset 8
  87 0062 BD46     		mov	sp, r7
  88              		.cfi_def_cfa_register 13
  89              		@ sp needed
  90 0064 80BD     		pop	{r7, pc}
  91              	.L6:
  92 0066 00BF     		.align	2
  93              	.L5:
  94 0068 00300140 		.word	1073819648
  95 006c 00380040 		.word	1073756160
  96 0070 003C0040 		.word	1073757184
  97              		.cfi_endproc
  98              	.LFE29:
 100              		.section	.text.SPI_Init,"ax",%progbits
 101              		.align	2
 102              		.global	SPI_Init
 103              		.thumb
 104              		.thumb_func
 106              	SPI_Init:
 107              	.LFB30:
 149:../src/stm32f10x_spi.c **** 
 150:../src/stm32f10x_spi.c **** /**
 151:../src/stm32f10x_spi.c ****   * @brief  Initializes the SPIx peripheral according to the specified 
 152:../src/stm32f10x_spi.c ****   *         parameters in the SPI_InitStruct.
 153:../src/stm32f10x_spi.c ****   * @param  SPIx: where x can be 1, 2 or 3 to select the SPI peripheral.
 154:../src/stm32f10x_spi.c ****   * @param  SPI_InitStruct: pointer to a SPI_InitTypeDef structure that
 155:../src/stm32f10x_spi.c ****   *         contains the configuration information for the specified SPI peripheral.
 156:../src/stm32f10x_spi.c ****   * @retval None
 157:../src/stm32f10x_spi.c ****   */
 158:../src/stm32f10x_spi.c **** void SPI_Init(SPI_TypeDef* SPIx, SPI_InitTypeDef* SPI_InitStruct)
 159:../src/stm32f10x_spi.c **** {
 108              		.loc 1 159 0
 109              		.cfi_startproc
 110              		@ args = 0, pretend = 0, frame = 16
 111              		@ frame_needed = 1, uses_anonymous_args = 0
 112              		@ link register save eliminated.
 113 0000 80B4     		push	{r7}
 114              		.cfi_def_cfa_offset 4
 115              		.cfi_offset 7, -4
 116 0002 85B0     		sub	sp, sp, #20
 117              		.cfi_def_cfa_offset 24
 118 0004 00AF     		add	r7, sp, #0
 119              		.cfi_def_cfa_register 7
 120 0006 7860     		str	r0, [r7, #4]
 121 0008 3960     		str	r1, [r7]
 160:../src/stm32f10x_spi.c ****   uint16_t tmpreg = 0;
 122              		.loc 1 160 0
 123 000a 0023     		movs	r3, #0
 124 000c FB81     		strh	r3, [r7, #14]	@ movhi
 161:../src/stm32f10x_spi.c ****   
 162:../src/stm32f10x_spi.c ****   /* check the parameters */
 163:../src/stm32f10x_spi.c ****   assert_param(IS_SPI_ALL_PERIPH(SPIx));   
 164:../src/stm32f10x_spi.c ****   
 165:../src/stm32f10x_spi.c ****   /* Check the SPI parameters */
 166:../src/stm32f10x_spi.c ****   assert_param(IS_SPI_DIRECTION_MODE(SPI_InitStruct->SPI_Direction));
 167:../src/stm32f10x_spi.c ****   assert_param(IS_SPI_MODE(SPI_InitStruct->SPI_Mode));
 168:../src/stm32f10x_spi.c ****   assert_param(IS_SPI_DATASIZE(SPI_InitStruct->SPI_DataSize));
 169:../src/stm32f10x_spi.c ****   assert_param(IS_SPI_CPOL(SPI_InitStruct->SPI_CPOL));
 170:../src/stm32f10x_spi.c ****   assert_param(IS_SPI_CPHA(SPI_InitStruct->SPI_CPHA));
 171:../src/stm32f10x_spi.c ****   assert_param(IS_SPI_NSS(SPI_InitStruct->SPI_NSS));
 172:../src/stm32f10x_spi.c ****   assert_param(IS_SPI_BAUDRATE_PRESCALER(SPI_InitStruct->SPI_BaudRatePrescaler));
 173:../src/stm32f10x_spi.c ****   assert_param(IS_SPI_FIRST_BIT(SPI_InitStruct->SPI_FirstBit));
 174:../src/stm32f10x_spi.c ****   assert_param(IS_SPI_CRC_POLYNOMIAL(SPI_InitStruct->SPI_CRCPolynomial));
 175:../src/stm32f10x_spi.c **** 
 176:../src/stm32f10x_spi.c **** /*---------------------------- SPIx CR1 Configuration ------------------------*/
 177:../src/stm32f10x_spi.c ****   /* Get the SPIx CR1 value */
 178:../src/stm32f10x_spi.c ****   tmpreg = SPIx->CR1;
 125              		.loc 1 178 0
 126 000e 7B68     		ldr	r3, [r7, #4]
 127 0010 1B88     		ldrh	r3, [r3]	@ movhi
 128 0012 FB81     		strh	r3, [r7, #14]	@ movhi
 179:../src/stm32f10x_spi.c ****   /* Clear BIDIMode, BIDIOE, RxONLY, SSM, SSI, LSBFirst, BR, MSTR, CPOL and CPHA bits */
 180:../src/stm32f10x_spi.c ****   tmpreg &= CR1_CLEAR_Mask;
 129              		.loc 1 180 0
 130 0014 FB89     		ldrh	r3, [r7, #14]	@ movhi
 131 0016 03F44153 		and	r3, r3, #12352
 132 001a FB81     		strh	r3, [r7, #14]	@ movhi
 181:../src/stm32f10x_spi.c ****   /* Configure SPIx: direction, NSS management, first transmitted bit, BaudRate prescaler
 182:../src/stm32f10x_spi.c ****      master/salve mode, CPOL and CPHA */
 183:../src/stm32f10x_spi.c ****   /* Set BIDImode, BIDIOE and RxONLY bits according to SPI_Direction value */
 184:../src/stm32f10x_spi.c ****   /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
 185:../src/stm32f10x_spi.c ****   /* Set LSBFirst bit according to SPI_FirstBit value */
 186:../src/stm32f10x_spi.c ****   /* Set BR bits according to SPI_BaudRatePrescaler value */
 187:../src/stm32f10x_spi.c ****   /* Set CPOL bit according to SPI_CPOL value */
 188:../src/stm32f10x_spi.c ****   /* Set CPHA bit according to SPI_CPHA value */
 189:../src/stm32f10x_spi.c ****   tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 133              		.loc 1 189 0
 134 001c 3B68     		ldr	r3, [r7]
 135 001e 1A88     		ldrh	r2, [r3]
 136 0020 3B68     		ldr	r3, [r7]
 137 0022 5B88     		ldrh	r3, [r3, #2]
 138 0024 1343     		orrs	r3, r3, r2
 139 0026 9AB2     		uxth	r2, r3
 190:../src/stm32f10x_spi.c ****                   SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
 140              		.loc 1 190 0
 141 0028 3B68     		ldr	r3, [r7]
 142 002a 9B88     		ldrh	r3, [r3, #4]
 189:../src/stm32f10x_spi.c ****                   SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
 143              		.loc 1 189 0
 144 002c 1343     		orrs	r3, r3, r2
 145 002e 9AB2     		uxth	r2, r3
 146              		.loc 1 190 0
 147 0030 3B68     		ldr	r3, [r7]
 148 0032 DB88     		ldrh	r3, [r3, #6]
 189:../src/stm32f10x_spi.c ****                   SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
 149              		.loc 1 189 0
 150 0034 1343     		orrs	r3, r3, r2
 151 0036 9AB2     		uxth	r2, r3
 191:../src/stm32f10x_spi.c ****                   SPI_InitStruct->SPI_CPHA | SPI_InitStruct->SPI_NSS |  
 152              		.loc 1 191 0
 153 0038 3B68     		ldr	r3, [r7]
 154 003a 1B89     		ldrh	r3, [r3, #8]
 189:../src/stm32f10x_spi.c ****                   SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
 155              		.loc 1 189 0
 156 003c 1343     		orrs	r3, r3, r2
 157 003e 9AB2     		uxth	r2, r3
 158              		.loc 1 191 0
 159 0040 3B68     		ldr	r3, [r7]
 160 0042 5B89     		ldrh	r3, [r3, #10]
 189:../src/stm32f10x_spi.c ****                   SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
 161              		.loc 1 189 0
 162 0044 1343     		orrs	r3, r3, r2
 163 0046 9AB2     		uxth	r2, r3
 192:../src/stm32f10x_spi.c ****                   SPI_InitStruct->SPI_BaudRatePrescaler | SPI_InitStruct->SPI_FirstBit);
 164              		.loc 1 192 0
 165 0048 3B68     		ldr	r3, [r7]
 166 004a 9B89     		ldrh	r3, [r3, #12]
 189:../src/stm32f10x_spi.c ****                   SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
 167              		.loc 1 189 0
 168 004c 1343     		orrs	r3, r3, r2
 169 004e 9AB2     		uxth	r2, r3
 170              		.loc 1 192 0
 171 0050 3B68     		ldr	r3, [r7]
 172 0052 DB89     		ldrh	r3, [r3, #14]
 189:../src/stm32f10x_spi.c ****                   SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
 173              		.loc 1 189 0
 174 0054 1343     		orrs	r3, r3, r2
 175 0056 9AB2     		uxth	r2, r3
 176 0058 FB89     		ldrh	r3, [r7, #14]	@ movhi
 177 005a 1343     		orrs	r3, r3, r2
 178 005c FB81     		strh	r3, [r7, #14]	@ movhi
 193:../src/stm32f10x_spi.c ****   /* Write to SPIx CR1 */
 194:../src/stm32f10x_spi.c ****   SPIx->CR1 = tmpreg;
 179              		.loc 1 194 0
 180 005e 7B68     		ldr	r3, [r7, #4]
 181 0060 FA89     		ldrh	r2, [r7, #14]	@ movhi
 182 0062 1A80     		strh	r2, [r3]	@ movhi
 195:../src/stm32f10x_spi.c ****   
 196:../src/stm32f10x_spi.c ****   /* Activate the SPI mode (Reset I2SMOD bit in I2SCFGR register) */
 197:../src/stm32f10x_spi.c ****   SPIx->I2SCFGR &= SPI_Mode_Select;		
 183              		.loc 1 197 0
 184 0064 7B68     		ldr	r3, [r7, #4]
 185 0066 9B8B     		ldrh	r3, [r3, #28]	@ movhi
 186 0068 9BB2     		uxth	r3, r3
 187 006a 23F40063 		bic	r3, r3, #2048
 188 006e 9AB2     		uxth	r2, r3
 189 0070 7B68     		ldr	r3, [r7, #4]
 190 0072 9A83     		strh	r2, [r3, #28]	@ movhi
 198:../src/stm32f10x_spi.c **** 
 199:../src/stm32f10x_spi.c **** /*---------------------------- SPIx CRCPOLY Configuration --------------------*/
 200:../src/stm32f10x_spi.c ****   /* Write to SPIx CRCPOLY */
 201:../src/stm32f10x_spi.c ****   SPIx->CRCPR = SPI_InitStruct->SPI_CRCPolynomial;
 191              		.loc 1 201 0
 192 0074 3B68     		ldr	r3, [r7]
 193 0076 1A8A     		ldrh	r2, [r3, #16]
 194 0078 7B68     		ldr	r3, [r7, #4]
 195 007a 1A82     		strh	r2, [r3, #16]	@ movhi
 202:../src/stm32f10x_spi.c **** }
 196              		.loc 1 202 0
 197 007c 1437     		adds	r7, r7, #20
 198              		.cfi_def_cfa_offset 4
 199 007e BD46     		mov	sp, r7
 200              		.cfi_def_cfa_register 13
 201              		@ sp needed
 202 0080 5DF8047B 		ldr	r7, [sp], #4
 203              		.cfi_restore 7
 204              		.cfi_def_cfa_offset 0
 205 0084 7047     		bx	lr
 206              		.cfi_endproc
 207              	.LFE30:
 209 0086 00BF     		.section	.text.I2S_Init,"ax",%progbits
 210              		.align	2
 211              		.global	I2S_Init
 212              		.thumb
 213              		.thumb_func
 215              	I2S_Init:
 216              	.LFB31:
 203:../src/stm32f10x_spi.c **** 
 204:../src/stm32f10x_spi.c **** /**
 205:../src/stm32f10x_spi.c ****   * @brief  Initializes the SPIx peripheral according to the specified 
 206:../src/stm32f10x_spi.c ****   *         parameters in the I2S_InitStruct.
 207:../src/stm32f10x_spi.c ****   * @param  SPIx: where x can be  2 or 3 to select the SPI peripheral
 208:../src/stm32f10x_spi.c ****   *         (configured in I2S mode).
 209:../src/stm32f10x_spi.c ****   * @param  I2S_InitStruct: pointer to an I2S_InitTypeDef structure that
 210:../src/stm32f10x_spi.c ****   *         contains the configuration information for the specified SPI peripheral
 211:../src/stm32f10x_spi.c ****   *         configured in I2S mode.
 212:../src/stm32f10x_spi.c ****   * @note
 213:../src/stm32f10x_spi.c ****   *  The function calculates the optimal prescaler needed to obtain the most 
 214:../src/stm32f10x_spi.c ****   *  accurate audio frequency (depending on the I2S clock source, the PLL values 
 215:../src/stm32f10x_spi.c ****   *  and the product configuration). But in case the prescaler value is greater 
 216:../src/stm32f10x_spi.c ****   *  than 511, the default value (0x02) will be configured instead.  *   
 217:../src/stm32f10x_spi.c ****   * @retval None
 218:../src/stm32f10x_spi.c ****   */
 219:../src/stm32f10x_spi.c **** void I2S_Init(SPI_TypeDef* SPIx, I2S_InitTypeDef* I2S_InitStruct)
 220:../src/stm32f10x_spi.c **** {
 217              		.loc 1 220 0
 218              		.cfi_startproc
 219              		@ args = 0, pretend = 0, frame = 48
 220              		@ frame_needed = 1, uses_anonymous_args = 0
 221 0000 80B5     		push	{r7, lr}
 222              		.cfi_def_cfa_offset 8
 223              		.cfi_offset 7, -8
 224              		.cfi_offset 14, -4
 225 0002 8CB0     		sub	sp, sp, #48
 226              		.cfi_def_cfa_offset 56
 227 0004 00AF     		add	r7, sp, #0
 228              		.cfi_def_cfa_register 7
 229 0006 7860     		str	r0, [r7, #4]
 230 0008 3960     		str	r1, [r7]
 221:../src/stm32f10x_spi.c ****   uint16_t tmpreg = 0, i2sdiv = 2, i2sodd = 0, packetlength = 1;
 231              		.loc 1 221 0
 232 000a 0023     		movs	r3, #0
 233 000c FB83     		strh	r3, [r7, #30]	@ movhi
 234 000e 0223     		movs	r3, #2
 235 0010 FB85     		strh	r3, [r7, #46]	@ movhi
 236 0012 0023     		movs	r3, #0
 237 0014 BB85     		strh	r3, [r7, #44]	@ movhi
 238 0016 0123     		movs	r3, #1
 239 0018 7B85     		strh	r3, [r7, #42]	@ movhi
 222:../src/stm32f10x_spi.c ****   uint32_t tmp = 0;
 240              		.loc 1 222 0
 241 001a 0023     		movs	r3, #0
 242 001c 7B62     		str	r3, [r7, #36]
 223:../src/stm32f10x_spi.c ****   RCC_ClocksTypeDef RCC_Clocks;
 224:../src/stm32f10x_spi.c ****   uint32_t sourceclock = 0;
 243              		.loc 1 224 0
 244 001e 0023     		movs	r3, #0
 245 0020 3B62     		str	r3, [r7, #32]
 225:../src/stm32f10x_spi.c ****   
 226:../src/stm32f10x_spi.c ****   /* Check the I2S parameters */
 227:../src/stm32f10x_spi.c ****   assert_param(IS_SPI_23_PERIPH(SPIx));
 228:../src/stm32f10x_spi.c ****   assert_param(IS_I2S_MODE(I2S_InitStruct->I2S_Mode));
 229:../src/stm32f10x_spi.c ****   assert_param(IS_I2S_STANDARD(I2S_InitStruct->I2S_Standard));
 230:../src/stm32f10x_spi.c ****   assert_param(IS_I2S_DATA_FORMAT(I2S_InitStruct->I2S_DataFormat));
 231:../src/stm32f10x_spi.c ****   assert_param(IS_I2S_MCLK_OUTPUT(I2S_InitStruct->I2S_MCLKOutput));
 232:../src/stm32f10x_spi.c ****   assert_param(IS_I2S_AUDIO_FREQ(I2S_InitStruct->I2S_AudioFreq));
 233:../src/stm32f10x_spi.c ****   assert_param(IS_I2S_CPOL(I2S_InitStruct->I2S_CPOL));  
 234:../src/stm32f10x_spi.c **** 
 235:../src/stm32f10x_spi.c **** /*----------------------- SPIx I2SCFGR & I2SPR Configuration -----------------*/
 236:../src/stm32f10x_spi.c ****   /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
 237:../src/stm32f10x_spi.c ****   SPIx->I2SCFGR &= I2SCFGR_CLEAR_Mask; 
 246              		.loc 1 237 0
 247 0022 7B68     		ldr	r3, [r7, #4]
 248 0024 9B8B     		ldrh	r3, [r3, #28]	@ movhi
 249 0026 9BB2     		uxth	r3, r3
 250 0028 23F47B63 		bic	r3, r3, #4016
 251 002c 23F00F03 		bic	r3, r3, #15
 252 0030 9AB2     		uxth	r2, r3
 253 0032 7B68     		ldr	r3, [r7, #4]
 254 0034 9A83     		strh	r2, [r3, #28]	@ movhi
 238:../src/stm32f10x_spi.c ****   SPIx->I2SPR = 0x0002;
 255              		.loc 1 238 0
 256 0036 7B68     		ldr	r3, [r7, #4]
 257 0038 0222     		movs	r2, #2
 258 003a 1A84     		strh	r2, [r3, #32]	@ movhi
 239:../src/stm32f10x_spi.c ****   
 240:../src/stm32f10x_spi.c ****   /* Get the I2SCFGR register value */
 241:../src/stm32f10x_spi.c ****   tmpreg = SPIx->I2SCFGR;
 259              		.loc 1 241 0
 260 003c 7B68     		ldr	r3, [r7, #4]
 261 003e 9B8B     		ldrh	r3, [r3, #28]	@ movhi
 262 0040 FB83     		strh	r3, [r7, #30]	@ movhi
 242:../src/stm32f10x_spi.c ****   
 243:../src/stm32f10x_spi.c ****   /* If the default value has to be written, reinitialize i2sdiv and i2sodd*/
 244:../src/stm32f10x_spi.c ****   if(I2S_InitStruct->I2S_AudioFreq == I2S_AudioFreq_Default)
 263              		.loc 1 244 0
 264 0042 3B68     		ldr	r3, [r7]
 265 0044 9B68     		ldr	r3, [r3, #8]
 266 0046 022B     		cmp	r3, #2
 267 0048 04D1     		bne	.L9
 245:../src/stm32f10x_spi.c ****   {
 246:../src/stm32f10x_spi.c ****     i2sodd = (uint16_t)0;
 268              		.loc 1 246 0
 269 004a 0023     		movs	r3, #0
 270 004c BB85     		strh	r3, [r7, #44]	@ movhi
 247:../src/stm32f10x_spi.c ****     i2sdiv = (uint16_t)2;   
 271              		.loc 1 247 0
 272 004e 0223     		movs	r3, #2
 273 0050 FB85     		strh	r3, [r7, #46]	@ movhi
 274 0052 81E0     		b	.L10
 275              	.L9:
 248:../src/stm32f10x_spi.c ****   }
 249:../src/stm32f10x_spi.c ****   /* If the requested audio frequency is not the default, compute the prescaler */
 250:../src/stm32f10x_spi.c ****   else
 251:../src/stm32f10x_spi.c ****   {
 252:../src/stm32f10x_spi.c ****     /* Check the frame length (For the Prescaler computing) */
 253:../src/stm32f10x_spi.c ****     if(I2S_InitStruct->I2S_DataFormat == I2S_DataFormat_16b)
 276              		.loc 1 253 0
 277 0054 3B68     		ldr	r3, [r7]
 278 0056 9B88     		ldrh	r3, [r3, #4]
 279 0058 002B     		cmp	r3, #0
 280 005a 02D1     		bne	.L11
 254:../src/stm32f10x_spi.c ****     {
 255:../src/stm32f10x_spi.c ****       /* Packet length is 16 bits */
 256:../src/stm32f10x_spi.c ****       packetlength = 1;
 281              		.loc 1 256 0
 282 005c 0123     		movs	r3, #1
 283 005e 7B85     		strh	r3, [r7, #42]	@ movhi
 284 0060 01E0     		b	.L12
 285              	.L11:
 257:../src/stm32f10x_spi.c ****     }
 258:../src/stm32f10x_spi.c ****     else
 259:../src/stm32f10x_spi.c ****     {
 260:../src/stm32f10x_spi.c ****       /* Packet length is 32 bits */
 261:../src/stm32f10x_spi.c ****       packetlength = 2;
 286              		.loc 1 261 0
 287 0062 0223     		movs	r3, #2
 288 0064 7B85     		strh	r3, [r7, #42]	@ movhi
 289              	.L12:
 262:../src/stm32f10x_spi.c ****     }
 263:../src/stm32f10x_spi.c **** 
 264:../src/stm32f10x_spi.c ****     /* Get the I2S clock source mask depending on the peripheral number */
 265:../src/stm32f10x_spi.c ****     if(((uint32_t)SPIx) == SPI2_BASE)
 290              		.loc 1 265 0
 291 0066 7B68     		ldr	r3, [r7, #4]
 292 0068 524A     		ldr	r2, .L23
 293 006a 9342     		cmp	r3, r2
 294 006c 03D1     		bne	.L13
 266:../src/stm32f10x_spi.c ****     {
 267:../src/stm32f10x_spi.c ****       /* The mask is relative to I2S2 */
 268:../src/stm32f10x_spi.c ****       tmp = I2S2_CLOCK_SRC;
 295              		.loc 1 268 0
 296 006e 4FF40033 		mov	r3, #131072
 297 0072 7B62     		str	r3, [r7, #36]
 298 0074 02E0     		b	.L14
 299              	.L13:
 269:../src/stm32f10x_spi.c ****     }
 270:../src/stm32f10x_spi.c ****     else 
 271:../src/stm32f10x_spi.c ****     {
 272:../src/stm32f10x_spi.c ****       /* The mask is relative to I2S3 */      
 273:../src/stm32f10x_spi.c ****       tmp = I2S3_CLOCK_SRC;
 300              		.loc 1 273 0
 301 0076 4FF48023 		mov	r3, #262144
 302 007a 7B62     		str	r3, [r7, #36]
 303              	.L14:
 274:../src/stm32f10x_spi.c ****     }
 275:../src/stm32f10x_spi.c **** 
 276:../src/stm32f10x_spi.c ****     /* Check the I2S clock source configuration depending on the Device:
 277:../src/stm32f10x_spi.c ****        Only Connectivity line devices have the PLL3 VCO clock */
 278:../src/stm32f10x_spi.c **** #ifdef STM32F10X_CL
 279:../src/stm32f10x_spi.c ****     if((RCC->CFGR2 & tmp) != 0)
 304              		.loc 1 279 0
 305 007c 4E4B     		ldr	r3, .L23+4
 306 007e DA6A     		ldr	r2, [r3, #44]
 307 0080 7B6A     		ldr	r3, [r7, #36]
 308 0082 1340     		ands	r3, r3, r2
 309 0084 002B     		cmp	r3, #0
 310 0086 25D0     		beq	.L15
 280:../src/stm32f10x_spi.c ****     {
 281:../src/stm32f10x_spi.c ****       /* Get the configuration bits of RCC PLL3 multiplier */
 282:../src/stm32f10x_spi.c ****       tmp = (uint32_t)((RCC->CFGR2 & I2S_MUL_MASK) >> 12);
 311              		.loc 1 282 0
 312 0088 4B4B     		ldr	r3, .L23+4
 313 008a DB6A     		ldr	r3, [r3, #44]
 314 008c 03F47043 		and	r3, r3, #61440
 315 0090 1B0B     		lsrs	r3, r3, #12
 316 0092 7B62     		str	r3, [r7, #36]
 283:../src/stm32f10x_spi.c **** 
 284:../src/stm32f10x_spi.c ****       /* Get the value of the PLL3 multiplier */      
 285:../src/stm32f10x_spi.c ****       if((tmp > 5) && (tmp < 15))
 317              		.loc 1 285 0
 318 0094 7B6A     		ldr	r3, [r7, #36]
 319 0096 052B     		cmp	r3, #5
 320 0098 06D9     		bls	.L16
 321              		.loc 1 285 0 is_stmt 0 discriminator 1
 322 009a 7B6A     		ldr	r3, [r7, #36]
 323 009c 0E2B     		cmp	r3, #14
 324 009e 03D8     		bhi	.L16
 286:../src/stm32f10x_spi.c ****       {
 287:../src/stm32f10x_spi.c ****         /* Multiplier is between 8 and 14 (value 15 is forbidden) */
 288:../src/stm32f10x_spi.c ****         tmp += 2;
 325              		.loc 1 288 0 is_stmt 1
 326 00a0 7B6A     		ldr	r3, [r7, #36]
 327 00a2 0233     		adds	r3, r3, #2
 328 00a4 7B62     		str	r3, [r7, #36]
 329 00a6 04E0     		b	.L17
 330              	.L16:
 289:../src/stm32f10x_spi.c ****       }
 290:../src/stm32f10x_spi.c ****       else
 291:../src/stm32f10x_spi.c ****       {
 292:../src/stm32f10x_spi.c ****         if (tmp == 15)
 331              		.loc 1 292 0
 332 00a8 7B6A     		ldr	r3, [r7, #36]
 333 00aa 0F2B     		cmp	r3, #15
 334 00ac 01D1     		bne	.L17
 293:../src/stm32f10x_spi.c ****         {
 294:../src/stm32f10x_spi.c ****           /* Multiplier is 20 */
 295:../src/stm32f10x_spi.c ****           tmp = 20;
 335              		.loc 1 295 0
 336 00ae 1423     		movs	r3, #20
 337 00b0 7B62     		str	r3, [r7, #36]
 338              	.L17:
 296:../src/stm32f10x_spi.c ****         }
 297:../src/stm32f10x_spi.c ****       }      
 298:../src/stm32f10x_spi.c ****       /* Get the PREDIV2 value */
 299:../src/stm32f10x_spi.c ****       sourceclock = (uint32_t)(((RCC->CFGR2 & I2S_DIV_MASK) >> 4) + 1);
 339              		.loc 1 299 0
 340 00b2 414B     		ldr	r3, .L23+4
 341 00b4 DB6A     		ldr	r3, [r3, #44]
 342 00b6 03F0F003 		and	r3, r3, #240
 343 00ba 1B09     		lsrs	r3, r3, #4
 344 00bc 0133     		adds	r3, r3, #1
 345 00be 3B62     		str	r3, [r7, #32]
 300:../src/stm32f10x_spi.c ****       
 301:../src/stm32f10x_spi.c ****       /* Calculate the Source Clock frequency based on PLL3 and PREDIV2 values */
 302:../src/stm32f10x_spi.c ****       sourceclock = (uint32_t) ((HSE_Value / sourceclock) * tmp * 2); 
 346              		.loc 1 302 0
 347 00c0 3E4A     		ldr	r2, .L23+8
 348 00c2 3B6A     		ldr	r3, [r7, #32]
 349 00c4 B2FBF3F3 		udiv	r3, r2, r3
 350 00c8 7A6A     		ldr	r2, [r7, #36]
 351 00ca 02FB03F3 		mul	r3, r2, r3
 352 00ce 5B00     		lsls	r3, r3, #1
 353 00d0 3B62     		str	r3, [r7, #32]
 354 00d2 06E0     		b	.L18
 355              	.L15:
 303:../src/stm32f10x_spi.c ****     }
 304:../src/stm32f10x_spi.c ****     else
 305:../src/stm32f10x_spi.c ****     {
 306:../src/stm32f10x_spi.c ****       /* I2S Clock source is System clock: Get System Clock frequency */
 307:../src/stm32f10x_spi.c ****       RCC_GetClocksFreq(&RCC_Clocks);      
 356              		.loc 1 307 0
 357 00d4 07F10803 		add	r3, r7, #8
 358 00d8 1846     		mov	r0, r3
 359 00da FFF7FEFF 		bl	RCC_GetClocksFreq
 308:../src/stm32f10x_spi.c ****       
 309:../src/stm32f10x_spi.c ****       /* Get the source clock value: based on System Clock value */
 310:../src/stm32f10x_spi.c ****       sourceclock = RCC_Clocks.SYSCLK_Frequency;
 360              		.loc 1 310 0
 361 00de BB68     		ldr	r3, [r7, #8]
 362 00e0 3B62     		str	r3, [r7, #32]
 363              	.L18:
 311:../src/stm32f10x_spi.c ****     }        
 312:../src/stm32f10x_spi.c **** #else /* STM32F10X_HD */
 313:../src/stm32f10x_spi.c ****     /* I2S Clock source is System clock: Get System Clock frequency */
 314:../src/stm32f10x_spi.c ****     RCC_GetClocksFreq(&RCC_Clocks);      
 315:../src/stm32f10x_spi.c ****       
 316:../src/stm32f10x_spi.c ****     /* Get the source clock value: based on System Clock value */
 317:../src/stm32f10x_spi.c ****     sourceclock = RCC_Clocks.SYSCLK_Frequency;    
 318:../src/stm32f10x_spi.c **** #endif /* STM32F10X_CL */    
 319:../src/stm32f10x_spi.c **** 
 320:../src/stm32f10x_spi.c ****     /* Compute the Real divider depending on the MCLK output state with a floating point */
 321:../src/stm32f10x_spi.c ****     if(I2S_InitStruct->I2S_MCLKOutput == I2S_MCLKOutput_Enable)
 364              		.loc 1 321 0
 365 00e2 3B68     		ldr	r3, [r7]
 366 00e4 DB88     		ldrh	r3, [r3, #6]
 367 00e6 B3F5007F 		cmp	r3, #512
 368 00ea 0FD1     		bne	.L19
 322:../src/stm32f10x_spi.c ****     {
 323:../src/stm32f10x_spi.c ****       /* MCLK output is enabled */
 324:../src/stm32f10x_spi.c ****       tmp = (uint16_t)(((((sourceclock / 256) * 10) / I2S_InitStruct->I2S_AudioFreq)) + 5);
 369              		.loc 1 324 0
 370 00ec 3B6A     		ldr	r3, [r7, #32]
 371 00ee 1A0A     		lsrs	r2, r3, #8
 372 00f0 1346     		mov	r3, r2
 373 00f2 9B00     		lsls	r3, r3, #2
 374 00f4 1344     		add	r3, r3, r2
 375 00f6 5B00     		lsls	r3, r3, #1
 376 00f8 1A46     		mov	r2, r3
 377 00fa 3B68     		ldr	r3, [r7]
 378 00fc 9B68     		ldr	r3, [r3, #8]
 379 00fe B2FBF3F3 		udiv	r3, r2, r3
 380 0102 9BB2     		uxth	r3, r3
 381 0104 0533     		adds	r3, r3, #5
 382 0106 9BB2     		uxth	r3, r3
 383 0108 7B62     		str	r3, [r7, #36]
 384 010a 12E0     		b	.L20
 385              	.L19:
 325:../src/stm32f10x_spi.c ****     }
 326:../src/stm32f10x_spi.c ****     else
 327:../src/stm32f10x_spi.c ****     {
 328:../src/stm32f10x_spi.c ****       /* MCLK output is disabled */
 329:../src/stm32f10x_spi.c ****       tmp = (uint16_t)(((((sourceclock / (32 * packetlength)) *10 ) / I2S_InitStruct->I2S_AudioFreq
 386              		.loc 1 329 0
 387 010c 7B8D     		ldrh	r3, [r7, #42]
 388 010e 5B01     		lsls	r3, r3, #5
 389 0110 1A46     		mov	r2, r3
 390 0112 3B6A     		ldr	r3, [r7, #32]
 391 0114 B3FBF2F2 		udiv	r2, r3, r2
 392 0118 1346     		mov	r3, r2
 393 011a 9B00     		lsls	r3, r3, #2
 394 011c 1344     		add	r3, r3, r2
 395 011e 5B00     		lsls	r3, r3, #1
 396 0120 1A46     		mov	r2, r3
 397 0122 3B68     		ldr	r3, [r7]
 398 0124 9B68     		ldr	r3, [r3, #8]
 399 0126 B2FBF3F3 		udiv	r3, r2, r3
 400 012a 9BB2     		uxth	r3, r3
 401 012c 0533     		adds	r3, r3, #5
 402 012e 9BB2     		uxth	r3, r3
 403 0130 7B62     		str	r3, [r7, #36]
 404              	.L20:
 330:../src/stm32f10x_spi.c ****     }
 331:../src/stm32f10x_spi.c ****     
 332:../src/stm32f10x_spi.c ****     /* Remove the floating point */
 333:../src/stm32f10x_spi.c ****     tmp = tmp / 10;  
 405              		.loc 1 333 0
 406 0132 7B6A     		ldr	r3, [r7, #36]
 407 0134 224A     		ldr	r2, .L23+12
 408 0136 A2FB0323 		umull	r2, r3, r2, r3
 409 013a DB08     		lsrs	r3, r3, #3
 410 013c 7B62     		str	r3, [r7, #36]
 334:../src/stm32f10x_spi.c ****       
 335:../src/stm32f10x_spi.c ****     /* Check the parity of the divider */
 336:../src/stm32f10x_spi.c ****     i2sodd = (uint16_t)(tmp & (uint16_t)0x0001);
 411              		.loc 1 336 0
 412 013e 7B6A     		ldr	r3, [r7, #36]
 413 0140 9BB2     		uxth	r3, r3
 414 0142 03F00103 		and	r3, r3, #1
 415 0146 BB85     		strh	r3, [r7, #44]	@ movhi
 337:../src/stm32f10x_spi.c ****    
 338:../src/stm32f10x_spi.c ****     /* Compute the i2sdiv prescaler */
 339:../src/stm32f10x_spi.c ****     i2sdiv = (uint16_t)((tmp - i2sodd) / 2);
 416              		.loc 1 339 0
 417 0148 BB8D     		ldrh	r3, [r7, #44]
 418 014a 7A6A     		ldr	r2, [r7, #36]
 419 014c D31A     		subs	r3, r2, r3
 420 014e 5B08     		lsrs	r3, r3, #1
 421 0150 FB85     		strh	r3, [r7, #46]	@ movhi
 340:../src/stm32f10x_spi.c ****    
 341:../src/stm32f10x_spi.c ****     /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
 342:../src/stm32f10x_spi.c ****     i2sodd = (uint16_t) (i2sodd << 8);
 422              		.loc 1 342 0
 423 0152 BB8D     		ldrh	r3, [r7, #44]	@ movhi
 424 0154 1B02     		lsls	r3, r3, #8
 425 0156 BB85     		strh	r3, [r7, #44]	@ movhi
 426              	.L10:
 343:../src/stm32f10x_spi.c ****   }
 344:../src/stm32f10x_spi.c ****   
 345:../src/stm32f10x_spi.c ****   /* Test if the divider is 1 or 0 or greater than 0xFF */
 346:../src/stm32f10x_spi.c ****   if ((i2sdiv < 2) || (i2sdiv > 0xFF))
 427              		.loc 1 346 0
 428 0158 FB8D     		ldrh	r3, [r7, #46]
 429 015a 012B     		cmp	r3, #1
 430 015c 02D9     		bls	.L21
 431              		.loc 1 346 0 is_stmt 0 discriminator 1
 432 015e FB8D     		ldrh	r3, [r7, #46]
 433 0160 FF2B     		cmp	r3, #255
 434 0162 03D9     		bls	.L22
 435              	.L21:
 347:../src/stm32f10x_spi.c ****   {
 348:../src/stm32f10x_spi.c ****     /* Set the default values */
 349:../src/stm32f10x_spi.c ****     i2sdiv = 2;
 436              		.loc 1 349 0 is_stmt 1
 437 0164 0223     		movs	r3, #2
 438 0166 FB85     		strh	r3, [r7, #46]	@ movhi
 350:../src/stm32f10x_spi.c ****     i2sodd = 0;
 439              		.loc 1 350 0
 440 0168 0023     		movs	r3, #0
 441 016a BB85     		strh	r3, [r7, #44]	@ movhi
 442              	.L22:
 351:../src/stm32f10x_spi.c ****   }
 352:../src/stm32f10x_spi.c **** 
 353:../src/stm32f10x_spi.c ****   /* Write to SPIx I2SPR register the computed value */
 354:../src/stm32f10x_spi.c ****   SPIx->I2SPR = (uint16_t)(i2sdiv | (uint16_t)(i2sodd | (uint16_t)I2S_InitStruct->I2S_MCLKOutput));
 443              		.loc 1 354 0
 444 016c 3B68     		ldr	r3, [r7]
 445 016e DA88     		ldrh	r2, [r3, #6]
 446 0170 BB8D     		ldrh	r3, [r7, #44]	@ movhi
 447 0172 1343     		orrs	r3, r3, r2
 448 0174 9AB2     		uxth	r2, r3
 449 0176 FB8D     		ldrh	r3, [r7, #46]	@ movhi
 450 0178 1343     		orrs	r3, r3, r2
 451 017a 9AB2     		uxth	r2, r3
 452 017c 7B68     		ldr	r3, [r7, #4]
 453 017e 1A84     		strh	r2, [r3, #32]	@ movhi
 355:../src/stm32f10x_spi.c ****  
 356:../src/stm32f10x_spi.c ****   /* Configure the I2S with the SPI_InitStruct values */
 357:../src/stm32f10x_spi.c ****   tmpreg |= (uint16_t)(I2S_Mode_Select | (uint16_t)(I2S_InitStruct->I2S_Mode | \
 454              		.loc 1 357 0
 455 0180 3B68     		ldr	r3, [r7]
 456 0182 1A88     		ldrh	r2, [r3]
 358:../src/stm32f10x_spi.c ****                   (uint16_t)(I2S_InitStruct->I2S_Standard | (uint16_t)(I2S_InitStruct->I2S_DataForm
 457              		.loc 1 358 0
 458 0184 3B68     		ldr	r3, [r7]
 459 0186 5988     		ldrh	r1, [r3, #2]
 460 0188 3B68     		ldr	r3, [r7]
 461 018a 9888     		ldrh	r0, [r3, #4]
 359:../src/stm32f10x_spi.c ****                   (uint16_t)I2S_InitStruct->I2S_CPOL))));
 462              		.loc 1 359 0
 463 018c 3B68     		ldr	r3, [r7]
 464 018e 9B89     		ldrh	r3, [r3, #12]
 358:../src/stm32f10x_spi.c ****                   (uint16_t)(I2S_InitStruct->I2S_Standard | (uint16_t)(I2S_InitStruct->I2S_DataForm
 465              		.loc 1 358 0
 466 0190 0343     		orrs	r3, r3, r0
 467 0192 9BB2     		uxth	r3, r3
 468 0194 0B43     		orrs	r3, r3, r1
 469 0196 9BB2     		uxth	r3, r3
 357:../src/stm32f10x_spi.c ****                   (uint16_t)(I2S_InitStruct->I2S_Standard | (uint16_t)(I2S_InitStruct->I2S_DataForm
 470              		.loc 1 357 0
 471 0198 1343     		orrs	r3, r3, r2
 472 019a 9AB2     		uxth	r2, r3
 473 019c FB8B     		ldrh	r3, [r7, #30]	@ movhi
 474 019e 1343     		orrs	r3, r3, r2
 475 01a0 9BB2     		uxth	r3, r3
 476 01a2 43F40063 		orr	r3, r3, #2048
 477 01a6 FB83     		strh	r3, [r7, #30]	@ movhi
 360:../src/stm32f10x_spi.c ****  
 361:../src/stm32f10x_spi.c ****   /* Write to SPIx I2SCFGR */  
 362:../src/stm32f10x_spi.c ****   SPIx->I2SCFGR = tmpreg;   
 478              		.loc 1 362 0
 479 01a8 7B68     		ldr	r3, [r7, #4]
 480 01aa FA8B     		ldrh	r2, [r7, #30]	@ movhi
 481 01ac 9A83     		strh	r2, [r3, #28]	@ movhi
 363:../src/stm32f10x_spi.c **** }
 482              		.loc 1 363 0
 483 01ae 3037     		adds	r7, r7, #48
 484              		.cfi_def_cfa_offset 8
 485 01b0 BD46     		mov	sp, r7
 486              		.cfi_def_cfa_register 13
 487              		@ sp needed
 488 01b2 80BD     		pop	{r7, pc}
 489              	.L24:
 490              		.align	2
 491              	.L23:
 492 01b4 00380040 		.word	1073756160
 493 01b8 00100240 		.word	1073876992
 494 01bc 40787D01 		.word	25000000
 495 01c0 CDCCCCCC 		.word	-858993459
 496              		.cfi_endproc
 497              	.LFE31:
 499              		.section	.text.SPI_StructInit,"ax",%progbits
 500              		.align	2
 501              		.global	SPI_StructInit
 502              		.thumb
 503              		.thumb_func
 505              	SPI_StructInit:
 506              	.LFB32:
 364:../src/stm32f10x_spi.c **** 
 365:../src/stm32f10x_spi.c **** /**
 366:../src/stm32f10x_spi.c ****   * @brief  Fills each SPI_InitStruct member with its default value.
 367:../src/stm32f10x_spi.c ****   * @param  SPI_InitStruct : pointer to a SPI_InitTypeDef structure which will be initialized.
 368:../src/stm32f10x_spi.c ****   * @retval None
 369:../src/stm32f10x_spi.c ****   */
 370:../src/stm32f10x_spi.c **** void SPI_StructInit(SPI_InitTypeDef* SPI_InitStruct)
 371:../src/stm32f10x_spi.c **** {
 507              		.loc 1 371 0
 508              		.cfi_startproc
 509              		@ args = 0, pretend = 0, frame = 8
 510              		@ frame_needed = 1, uses_anonymous_args = 0
 511              		@ link register save eliminated.
 512 0000 80B4     		push	{r7}
 513              		.cfi_def_cfa_offset 4
 514              		.cfi_offset 7, -4
 515 0002 83B0     		sub	sp, sp, #12
 516              		.cfi_def_cfa_offset 16
 517 0004 00AF     		add	r7, sp, #0
 518              		.cfi_def_cfa_register 7
 519 0006 7860     		str	r0, [r7, #4]
 372:../src/stm32f10x_spi.c **** /*--------------- Reset SPI init structure parameters values -----------------*/
 373:../src/stm32f10x_spi.c ****   /* Initialize the SPI_Direction member */
 374:../src/stm32f10x_spi.c ****   SPI_InitStruct->SPI_Direction = SPI_Direction_2Lines_FullDuplex;
 520              		.loc 1 374 0
 521 0008 7B68     		ldr	r3, [r7, #4]
 522 000a 0022     		movs	r2, #0
 523 000c 1A80     		strh	r2, [r3]	@ movhi
 375:../src/stm32f10x_spi.c ****   /* initialize the SPI_Mode member */
 376:../src/stm32f10x_spi.c ****   SPI_InitStruct->SPI_Mode = SPI_Mode_Slave;
 524              		.loc 1 376 0
 525 000e 7B68     		ldr	r3, [r7, #4]
 526 0010 0022     		movs	r2, #0
 527 0012 5A80     		strh	r2, [r3, #2]	@ movhi
 377:../src/stm32f10x_spi.c ****   /* initialize the SPI_DataSize member */
 378:../src/stm32f10x_spi.c ****   SPI_InitStruct->SPI_DataSize = SPI_DataSize_8b;
 528              		.loc 1 378 0
 529 0014 7B68     		ldr	r3, [r7, #4]
 530 0016 0022     		movs	r2, #0
 531 0018 9A80     		strh	r2, [r3, #4]	@ movhi
 379:../src/stm32f10x_spi.c ****   /* Initialize the SPI_CPOL member */
 380:../src/stm32f10x_spi.c ****   SPI_InitStruct->SPI_CPOL = SPI_CPOL_Low;
 532              		.loc 1 380 0
 533 001a 7B68     		ldr	r3, [r7, #4]
 534 001c 0022     		movs	r2, #0
 535 001e DA80     		strh	r2, [r3, #6]	@ movhi
 381:../src/stm32f10x_spi.c ****   /* Initialize the SPI_CPHA member */
 382:../src/stm32f10x_spi.c ****   SPI_InitStruct->SPI_CPHA = SPI_CPHA_1Edge;
 536              		.loc 1 382 0
 537 0020 7B68     		ldr	r3, [r7, #4]
 538 0022 0022     		movs	r2, #0
 539 0024 1A81     		strh	r2, [r3, #8]	@ movhi
 383:../src/stm32f10x_spi.c ****   /* Initialize the SPI_NSS member */
 384:../src/stm32f10x_spi.c ****   SPI_InitStruct->SPI_NSS = SPI_NSS_Hard;
 540              		.loc 1 384 0
 541 0026 7B68     		ldr	r3, [r7, #4]
 542 0028 0022     		movs	r2, #0
 543 002a 5A81     		strh	r2, [r3, #10]	@ movhi
 385:../src/stm32f10x_spi.c ****   /* Initialize the SPI_BaudRatePrescaler member */
 386:../src/stm32f10x_spi.c ****   SPI_InitStruct->SPI_BaudRatePrescaler = SPI_BaudRatePrescaler_2;
 544              		.loc 1 386 0
 545 002c 7B68     		ldr	r3, [r7, #4]
 546 002e 0022     		movs	r2, #0
 547 0030 9A81     		strh	r2, [r3, #12]	@ movhi
 387:../src/stm32f10x_spi.c ****   /* Initialize the SPI_FirstBit member */
 388:../src/stm32f10x_spi.c ****   SPI_InitStruct->SPI_FirstBit = SPI_FirstBit_MSB;
 548              		.loc 1 388 0
 549 0032 7B68     		ldr	r3, [r7, #4]
 550 0034 0022     		movs	r2, #0
 551 0036 DA81     		strh	r2, [r3, #14]	@ movhi
 389:../src/stm32f10x_spi.c ****   /* Initialize the SPI_CRCPolynomial member */
 390:../src/stm32f10x_spi.c ****   SPI_InitStruct->SPI_CRCPolynomial = 7;
 552              		.loc 1 390 0
 553 0038 7B68     		ldr	r3, [r7, #4]
 554 003a 0722     		movs	r2, #7
 555 003c 1A82     		strh	r2, [r3, #16]	@ movhi
 391:../src/stm32f10x_spi.c **** }
 556              		.loc 1 391 0
 557 003e 0C37     		adds	r7, r7, #12
 558              		.cfi_def_cfa_offset 4
 559 0040 BD46     		mov	sp, r7
 560              		.cfi_def_cfa_register 13
 561              		@ sp needed
 562 0042 5DF8047B 		ldr	r7, [sp], #4
 563              		.cfi_restore 7
 564              		.cfi_def_cfa_offset 0
 565 0046 7047     		bx	lr
 566              		.cfi_endproc
 567              	.LFE32:
 569              		.section	.text.I2S_StructInit,"ax",%progbits
 570              		.align	2
 571              		.global	I2S_StructInit
 572              		.thumb
 573              		.thumb_func
 575              	I2S_StructInit:
 576              	.LFB33:
 392:../src/stm32f10x_spi.c **** 
 393:../src/stm32f10x_spi.c **** /**
 394:../src/stm32f10x_spi.c ****   * @brief  Fills each I2S_InitStruct member with its default value.
 395:../src/stm32f10x_spi.c ****   * @param  I2S_InitStruct : pointer to a I2S_InitTypeDef structure which will be initialized.
 396:../src/stm32f10x_spi.c ****   * @retval None
 397:../src/stm32f10x_spi.c ****   */
 398:../src/stm32f10x_spi.c **** void I2S_StructInit(I2S_InitTypeDef* I2S_InitStruct)
 399:../src/stm32f10x_spi.c **** {
 577              		.loc 1 399 0
 578              		.cfi_startproc
 579              		@ args = 0, pretend = 0, frame = 8
 580              		@ frame_needed = 1, uses_anonymous_args = 0
 581              		@ link register save eliminated.
 582 0000 80B4     		push	{r7}
 583              		.cfi_def_cfa_offset 4
 584              		.cfi_offset 7, -4
 585 0002 83B0     		sub	sp, sp, #12
 586              		.cfi_def_cfa_offset 16
 587 0004 00AF     		add	r7, sp, #0
 588              		.cfi_def_cfa_register 7
 589 0006 7860     		str	r0, [r7, #4]
 400:../src/stm32f10x_spi.c **** /*--------------- Reset I2S init structure parameters values -----------------*/
 401:../src/stm32f10x_spi.c ****   /* Initialize the I2S_Mode member */
 402:../src/stm32f10x_spi.c ****   I2S_InitStruct->I2S_Mode = I2S_Mode_SlaveTx;
 590              		.loc 1 402 0
 591 0008 7B68     		ldr	r3, [r7, #4]
 592 000a 0022     		movs	r2, #0
 593 000c 1A80     		strh	r2, [r3]	@ movhi
 403:../src/stm32f10x_spi.c ****   
 404:../src/stm32f10x_spi.c ****   /* Initialize the I2S_Standard member */
 405:../src/stm32f10x_spi.c ****   I2S_InitStruct->I2S_Standard = I2S_Standard_Phillips;
 594              		.loc 1 405 0
 595 000e 7B68     		ldr	r3, [r7, #4]
 596 0010 0022     		movs	r2, #0
 597 0012 5A80     		strh	r2, [r3, #2]	@ movhi
 406:../src/stm32f10x_spi.c ****   
 407:../src/stm32f10x_spi.c ****   /* Initialize the I2S_DataFormat member */
 408:../src/stm32f10x_spi.c ****   I2S_InitStruct->I2S_DataFormat = I2S_DataFormat_16b;
 598              		.loc 1 408 0
 599 0014 7B68     		ldr	r3, [r7, #4]
 600 0016 0022     		movs	r2, #0
 601 0018 9A80     		strh	r2, [r3, #4]	@ movhi
 409:../src/stm32f10x_spi.c ****   
 410:../src/stm32f10x_spi.c ****   /* Initialize the I2S_MCLKOutput member */
 411:../src/stm32f10x_spi.c ****   I2S_InitStruct->I2S_MCLKOutput = I2S_MCLKOutput_Disable;
 602              		.loc 1 411 0
 603 001a 7B68     		ldr	r3, [r7, #4]
 604 001c 0022     		movs	r2, #0
 605 001e DA80     		strh	r2, [r3, #6]	@ movhi
 412:../src/stm32f10x_spi.c ****   
 413:../src/stm32f10x_spi.c ****   /* Initialize the I2S_AudioFreq member */
 414:../src/stm32f10x_spi.c ****   I2S_InitStruct->I2S_AudioFreq = I2S_AudioFreq_Default;
 606              		.loc 1 414 0
 607 0020 7B68     		ldr	r3, [r7, #4]
 608 0022 0222     		movs	r2, #2
 609 0024 9A60     		str	r2, [r3, #8]
 415:../src/stm32f10x_spi.c ****   
 416:../src/stm32f10x_spi.c ****   /* Initialize the I2S_CPOL member */
 417:../src/stm32f10x_spi.c ****   I2S_InitStruct->I2S_CPOL = I2S_CPOL_Low;
 610              		.loc 1 417 0
 611 0026 7B68     		ldr	r3, [r7, #4]
 612 0028 0022     		movs	r2, #0
 613 002a 9A81     		strh	r2, [r3, #12]	@ movhi
 418:../src/stm32f10x_spi.c **** }
 614              		.loc 1 418 0
 615 002c 0C37     		adds	r7, r7, #12
 616              		.cfi_def_cfa_offset 4
 617 002e BD46     		mov	sp, r7
 618              		.cfi_def_cfa_register 13
 619              		@ sp needed
 620 0030 5DF8047B 		ldr	r7, [sp], #4
 621              		.cfi_restore 7
 622              		.cfi_def_cfa_offset 0
 623 0034 7047     		bx	lr
 624              		.cfi_endproc
 625              	.LFE33:
 627 0036 00BF     		.section	.text.SPI_Cmd,"ax",%progbits
 628              		.align	2
 629              		.global	SPI_Cmd
 630              		.thumb
 631              		.thumb_func
 633              	SPI_Cmd:
 634              	.LFB34:
 419:../src/stm32f10x_spi.c **** 
 420:../src/stm32f10x_spi.c **** /**
 421:../src/stm32f10x_spi.c ****   * @brief  Enables or disables the specified SPI peripheral.
 422:../src/stm32f10x_spi.c ****   * @param  SPIx: where x can be 1, 2 or 3 to select the SPI peripheral.
 423:../src/stm32f10x_spi.c ****   * @param  NewState: new state of the SPIx peripheral. 
 424:../src/stm32f10x_spi.c ****   *   This parameter can be: ENABLE or DISABLE.
 425:../src/stm32f10x_spi.c ****   * @retval None
 426:../src/stm32f10x_spi.c ****   */
 427:../src/stm32f10x_spi.c **** void SPI_Cmd(SPI_TypeDef* SPIx, FunctionalState NewState)
 428:../src/stm32f10x_spi.c **** {
 635              		.loc 1 428 0
 636              		.cfi_startproc
 637              		@ args = 0, pretend = 0, frame = 8
 638              		@ frame_needed = 1, uses_anonymous_args = 0
 639              		@ link register save eliminated.
 640 0000 80B4     		push	{r7}
 641              		.cfi_def_cfa_offset 4
 642              		.cfi_offset 7, -4
 643 0002 83B0     		sub	sp, sp, #12
 644              		.cfi_def_cfa_offset 16
 645 0004 00AF     		add	r7, sp, #0
 646              		.cfi_def_cfa_register 7
 647 0006 7860     		str	r0, [r7, #4]
 648 0008 0B46     		mov	r3, r1
 649 000a FB70     		strb	r3, [r7, #3]
 429:../src/stm32f10x_spi.c ****   /* Check the parameters */
 430:../src/stm32f10x_spi.c ****   assert_param(IS_SPI_ALL_PERIPH(SPIx));
 431:../src/stm32f10x_spi.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 432:../src/stm32f10x_spi.c ****   if (NewState != DISABLE)
 650              		.loc 1 432 0
 651 000c FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 652 000e 002B     		cmp	r3, #0
 653 0010 08D0     		beq	.L28
 433:../src/stm32f10x_spi.c ****   {
 434:../src/stm32f10x_spi.c ****     /* Enable the selected SPI peripheral */
 435:../src/stm32f10x_spi.c ****     SPIx->CR1 |= CR1_SPE_Set;
 654              		.loc 1 435 0
 655 0012 7B68     		ldr	r3, [r7, #4]
 656 0014 1B88     		ldrh	r3, [r3]	@ movhi
 657 0016 9BB2     		uxth	r3, r3
 658 0018 43F04003 		orr	r3, r3, #64
 659 001c 9AB2     		uxth	r2, r3
 660 001e 7B68     		ldr	r3, [r7, #4]
 661 0020 1A80     		strh	r2, [r3]	@ movhi
 662 0022 07E0     		b	.L27
 663              	.L28:
 436:../src/stm32f10x_spi.c ****   }
 437:../src/stm32f10x_spi.c ****   else
 438:../src/stm32f10x_spi.c ****   {
 439:../src/stm32f10x_spi.c ****     /* Disable the selected SPI peripheral */
 440:../src/stm32f10x_spi.c ****     SPIx->CR1 &= CR1_SPE_Reset;
 664              		.loc 1 440 0
 665 0024 7B68     		ldr	r3, [r7, #4]
 666 0026 1B88     		ldrh	r3, [r3]	@ movhi
 667 0028 9BB2     		uxth	r3, r3
 668 002a 23F04003 		bic	r3, r3, #64
 669 002e 9AB2     		uxth	r2, r3
 670 0030 7B68     		ldr	r3, [r7, #4]
 671 0032 1A80     		strh	r2, [r3]	@ movhi
 672              	.L27:
 441:../src/stm32f10x_spi.c ****   }
 442:../src/stm32f10x_spi.c **** }
 673              		.loc 1 442 0
 674 0034 0C37     		adds	r7, r7, #12
 675              		.cfi_def_cfa_offset 4
 676 0036 BD46     		mov	sp, r7
 677              		.cfi_def_cfa_register 13
 678              		@ sp needed
 679 0038 5DF8047B 		ldr	r7, [sp], #4
 680              		.cfi_restore 7
 681              		.cfi_def_cfa_offset 0
 682 003c 7047     		bx	lr
 683              		.cfi_endproc
 684              	.LFE34:
 686 003e 00BF     		.section	.text.I2S_Cmd,"ax",%progbits
 687              		.align	2
 688              		.global	I2S_Cmd
 689              		.thumb
 690              		.thumb_func
 692              	I2S_Cmd:
 693              	.LFB35:
 443:../src/stm32f10x_spi.c **** 
 444:../src/stm32f10x_spi.c **** /**
 445:../src/stm32f10x_spi.c ****   * @brief  Enables or disables the specified SPI peripheral (in I2S mode).
 446:../src/stm32f10x_spi.c ****   * @param  SPIx: where x can be 2 or 3 to select the SPI peripheral.
 447:../src/stm32f10x_spi.c ****   * @param  NewState: new state of the SPIx peripheral. 
 448:../src/stm32f10x_spi.c ****   *   This parameter can be: ENABLE or DISABLE.
 449:../src/stm32f10x_spi.c ****   * @retval None
 450:../src/stm32f10x_spi.c ****   */
 451:../src/stm32f10x_spi.c **** void I2S_Cmd(SPI_TypeDef* SPIx, FunctionalState NewState)
 452:../src/stm32f10x_spi.c **** {
 694              		.loc 1 452 0
 695              		.cfi_startproc
 696              		@ args = 0, pretend = 0, frame = 8
 697              		@ frame_needed = 1, uses_anonymous_args = 0
 698              		@ link register save eliminated.
 699 0000 80B4     		push	{r7}
 700              		.cfi_def_cfa_offset 4
 701              		.cfi_offset 7, -4
 702 0002 83B0     		sub	sp, sp, #12
 703              		.cfi_def_cfa_offset 16
 704 0004 00AF     		add	r7, sp, #0
 705              		.cfi_def_cfa_register 7
 706 0006 7860     		str	r0, [r7, #4]
 707 0008 0B46     		mov	r3, r1
 708 000a FB70     		strb	r3, [r7, #3]
 453:../src/stm32f10x_spi.c ****   /* Check the parameters */
 454:../src/stm32f10x_spi.c ****   assert_param(IS_SPI_23_PERIPH(SPIx));
 455:../src/stm32f10x_spi.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 456:../src/stm32f10x_spi.c ****   if (NewState != DISABLE)
 709              		.loc 1 456 0
 710 000c FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 711 000e 002B     		cmp	r3, #0
 712 0010 08D0     		beq	.L31
 457:../src/stm32f10x_spi.c ****   {
 458:../src/stm32f10x_spi.c ****     /* Enable the selected SPI peripheral (in I2S mode) */
 459:../src/stm32f10x_spi.c ****     SPIx->I2SCFGR |= I2SCFGR_I2SE_Set;
 713              		.loc 1 459 0
 714 0012 7B68     		ldr	r3, [r7, #4]
 715 0014 9B8B     		ldrh	r3, [r3, #28]	@ movhi
 716 0016 9BB2     		uxth	r3, r3
 717 0018 43F48063 		orr	r3, r3, #1024
 718 001c 9AB2     		uxth	r2, r3
 719 001e 7B68     		ldr	r3, [r7, #4]
 720 0020 9A83     		strh	r2, [r3, #28]	@ movhi
 721 0022 07E0     		b	.L30
 722              	.L31:
 460:../src/stm32f10x_spi.c ****   }
 461:../src/stm32f10x_spi.c ****   else
 462:../src/stm32f10x_spi.c ****   {
 463:../src/stm32f10x_spi.c ****     /* Disable the selected SPI peripheral (in I2S mode) */
 464:../src/stm32f10x_spi.c ****     SPIx->I2SCFGR &= I2SCFGR_I2SE_Reset;
 723              		.loc 1 464 0
 724 0024 7B68     		ldr	r3, [r7, #4]
 725 0026 9B8B     		ldrh	r3, [r3, #28]	@ movhi
 726 0028 9BB2     		uxth	r3, r3
 727 002a 23F48063 		bic	r3, r3, #1024
 728 002e 9AB2     		uxth	r2, r3
 729 0030 7B68     		ldr	r3, [r7, #4]
 730 0032 9A83     		strh	r2, [r3, #28]	@ movhi
 731              	.L30:
 465:../src/stm32f10x_spi.c ****   }
 466:../src/stm32f10x_spi.c **** }
 732              		.loc 1 466 0
 733 0034 0C37     		adds	r7, r7, #12
 734              		.cfi_def_cfa_offset 4
 735 0036 BD46     		mov	sp, r7
 736              		.cfi_def_cfa_register 13
 737              		@ sp needed
 738 0038 5DF8047B 		ldr	r7, [sp], #4
 739              		.cfi_restore 7
 740              		.cfi_def_cfa_offset 0
 741 003c 7047     		bx	lr
 742              		.cfi_endproc
 743              	.LFE35:
 745 003e 00BF     		.section	.text.SPI_I2S_ITConfig,"ax",%progbits
 746              		.align	2
 747              		.global	SPI_I2S_ITConfig
 748              		.thumb
 749              		.thumb_func
 751              	SPI_I2S_ITConfig:
 752              	.LFB36:
 467:../src/stm32f10x_spi.c **** 
 468:../src/stm32f10x_spi.c **** /**
 469:../src/stm32f10x_spi.c ****   * @brief  Enables or disables the specified SPI/I2S interrupts.
 470:../src/stm32f10x_spi.c ****   * @param  SPIx: where x can be
 471:../src/stm32f10x_spi.c ****   *   - 1, 2 or 3 in SPI mode 
 472:../src/stm32f10x_spi.c ****   *   - 2 or 3 in I2S mode
 473:../src/stm32f10x_spi.c ****   * @param  SPI_I2S_IT: specifies the SPI/I2S interrupt source to be enabled or disabled. 
 474:../src/stm32f10x_spi.c ****   *   This parameter can be one of the following values:
 475:../src/stm32f10x_spi.c ****   *     @arg SPI_I2S_IT_TXE: Tx buffer empty interrupt mask
 476:../src/stm32f10x_spi.c ****   *     @arg SPI_I2S_IT_RXNE: Rx buffer not empty interrupt mask
 477:../src/stm32f10x_spi.c ****   *     @arg SPI_I2S_IT_ERR: Error interrupt mask
 478:../src/stm32f10x_spi.c ****   * @param  NewState: new state of the specified SPI/I2S interrupt.
 479:../src/stm32f10x_spi.c ****   *   This parameter can be: ENABLE or DISABLE.
 480:../src/stm32f10x_spi.c ****   * @retval None
 481:../src/stm32f10x_spi.c ****   */
 482:../src/stm32f10x_spi.c **** void SPI_I2S_ITConfig(SPI_TypeDef* SPIx, uint8_t SPI_I2S_IT, FunctionalState NewState)
 483:../src/stm32f10x_spi.c **** {
 753              		.loc 1 483 0
 754              		.cfi_startproc
 755              		@ args = 0, pretend = 0, frame = 16
 756              		@ frame_needed = 1, uses_anonymous_args = 0
 757              		@ link register save eliminated.
 758 0000 80B4     		push	{r7}
 759              		.cfi_def_cfa_offset 4
 760              		.cfi_offset 7, -4
 761 0002 85B0     		sub	sp, sp, #20
 762              		.cfi_def_cfa_offset 24
 763 0004 00AF     		add	r7, sp, #0
 764              		.cfi_def_cfa_register 7
 765 0006 7860     		str	r0, [r7, #4]
 766 0008 0B46     		mov	r3, r1
 767 000a FB70     		strb	r3, [r7, #3]
 768 000c 1346     		mov	r3, r2
 769 000e BB70     		strb	r3, [r7, #2]
 484:../src/stm32f10x_spi.c ****   uint16_t itpos = 0, itmask = 0 ;
 770              		.loc 1 484 0
 771 0010 0023     		movs	r3, #0
 772 0012 FB81     		strh	r3, [r7, #14]	@ movhi
 773 0014 0023     		movs	r3, #0
 774 0016 BB81     		strh	r3, [r7, #12]	@ movhi
 485:../src/stm32f10x_spi.c ****   /* Check the parameters */
 486:../src/stm32f10x_spi.c ****   assert_param(IS_SPI_ALL_PERIPH(SPIx));
 487:../src/stm32f10x_spi.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 488:../src/stm32f10x_spi.c ****   assert_param(IS_SPI_I2S_CONFIG_IT(SPI_I2S_IT));
 489:../src/stm32f10x_spi.c **** 
 490:../src/stm32f10x_spi.c ****   /* Get the SPI/I2S IT index */
 491:../src/stm32f10x_spi.c ****   itpos = SPI_I2S_IT >> 4;
 775              		.loc 1 491 0
 776 0018 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 777 001a 1B09     		lsrs	r3, r3, #4
 778 001c DBB2     		uxtb	r3, r3
 779 001e FB81     		strh	r3, [r7, #14]	@ movhi
 492:../src/stm32f10x_spi.c **** 
 493:../src/stm32f10x_spi.c ****   /* Set the IT mask */
 494:../src/stm32f10x_spi.c ****   itmask = (uint16_t)1 << (uint16_t)itpos;
 780              		.loc 1 494 0
 781 0020 FB89     		ldrh	r3, [r7, #14]
 782 0022 0122     		movs	r2, #1
 783 0024 02FA03F3 		lsl	r3, r2, r3
 784 0028 BB81     		strh	r3, [r7, #12]	@ movhi
 495:../src/stm32f10x_spi.c **** 
 496:../src/stm32f10x_spi.c ****   if (NewState != DISABLE)
 785              		.loc 1 496 0
 786 002a BB78     		ldrb	r3, [r7, #2]	@ zero_extendqisi2
 787 002c 002B     		cmp	r3, #0
 788 002e 08D0     		beq	.L34
 497:../src/stm32f10x_spi.c ****   {
 498:../src/stm32f10x_spi.c ****     /* Enable the selected SPI/I2S interrupt */
 499:../src/stm32f10x_spi.c ****     SPIx->CR2 |= itmask;
 789              		.loc 1 499 0
 790 0030 7B68     		ldr	r3, [r7, #4]
 791 0032 9B88     		ldrh	r3, [r3, #4]	@ movhi
 792 0034 9AB2     		uxth	r2, r3
 793 0036 BB89     		ldrh	r3, [r7, #12]	@ movhi
 794 0038 1343     		orrs	r3, r3, r2
 795 003a 9AB2     		uxth	r2, r3
 796 003c 7B68     		ldr	r3, [r7, #4]
 797 003e 9A80     		strh	r2, [r3, #4]	@ movhi
 798 0040 09E0     		b	.L33
 799              	.L34:
 500:../src/stm32f10x_spi.c ****   }
 501:../src/stm32f10x_spi.c ****   else
 502:../src/stm32f10x_spi.c ****   {
 503:../src/stm32f10x_spi.c ****     /* Disable the selected SPI/I2S interrupt */
 504:../src/stm32f10x_spi.c ****     SPIx->CR2 &= (uint16_t)~itmask;
 800              		.loc 1 504 0
 801 0042 7B68     		ldr	r3, [r7, #4]
 802 0044 9B88     		ldrh	r3, [r3, #4]	@ movhi
 803 0046 9AB2     		uxth	r2, r3
 804 0048 BB89     		ldrh	r3, [r7, #12]	@ movhi
 805 004a DB43     		mvns	r3, r3
 806 004c 9BB2     		uxth	r3, r3
 807 004e 1340     		ands	r3, r3, r2
 808 0050 9AB2     		uxth	r2, r3
 809 0052 7B68     		ldr	r3, [r7, #4]
 810 0054 9A80     		strh	r2, [r3, #4]	@ movhi
 811              	.L33:
 505:../src/stm32f10x_spi.c ****   }
 506:../src/stm32f10x_spi.c **** }
 812              		.loc 1 506 0
 813 0056 1437     		adds	r7, r7, #20
 814              		.cfi_def_cfa_offset 4
 815 0058 BD46     		mov	sp, r7
 816              		.cfi_def_cfa_register 13
 817              		@ sp needed
 818 005a 5DF8047B 		ldr	r7, [sp], #4
 819              		.cfi_restore 7
 820              		.cfi_def_cfa_offset 0
 821 005e 7047     		bx	lr
 822              		.cfi_endproc
 823              	.LFE36:
 825              		.section	.text.SPI_I2S_DMACmd,"ax",%progbits
 826              		.align	2
 827              		.global	SPI_I2S_DMACmd
 828              		.thumb
 829              		.thumb_func
 831              	SPI_I2S_DMACmd:
 832              	.LFB37:
 507:../src/stm32f10x_spi.c **** 
 508:../src/stm32f10x_spi.c **** /**
 509:../src/stm32f10x_spi.c ****   * @brief  Enables or disables the SPIx/I2Sx DMA interface.
 510:../src/stm32f10x_spi.c ****   * @param  SPIx: where x can be
 511:../src/stm32f10x_spi.c ****   *   - 1, 2 or 3 in SPI mode 
 512:../src/stm32f10x_spi.c ****   *   - 2 or 3 in I2S mode
 513:../src/stm32f10x_spi.c ****   * @param  SPI_I2S_DMAReq: specifies the SPI/I2S DMA transfer request to be enabled or disabled. 
 514:../src/stm32f10x_spi.c ****   *   This parameter can be any combination of the following values:
 515:../src/stm32f10x_spi.c ****   *     @arg SPI_I2S_DMAReq_Tx: Tx buffer DMA transfer request
 516:../src/stm32f10x_spi.c ****   *     @arg SPI_I2S_DMAReq_Rx: Rx buffer DMA transfer request
 517:../src/stm32f10x_spi.c ****   * @param  NewState: new state of the selected SPI/I2S DMA transfer request.
 518:../src/stm32f10x_spi.c ****   *   This parameter can be: ENABLE or DISABLE.
 519:../src/stm32f10x_spi.c ****   * @retval None
 520:../src/stm32f10x_spi.c ****   */
 521:../src/stm32f10x_spi.c **** void SPI_I2S_DMACmd(SPI_TypeDef* SPIx, uint16_t SPI_I2S_DMAReq, FunctionalState NewState)
 522:../src/stm32f10x_spi.c **** {
 833              		.loc 1 522 0
 834              		.cfi_startproc
 835              		@ args = 0, pretend = 0, frame = 8
 836              		@ frame_needed = 1, uses_anonymous_args = 0
 837              		@ link register save eliminated.
 838 0000 80B4     		push	{r7}
 839              		.cfi_def_cfa_offset 4
 840              		.cfi_offset 7, -4
 841 0002 83B0     		sub	sp, sp, #12
 842              		.cfi_def_cfa_offset 16
 843 0004 00AF     		add	r7, sp, #0
 844              		.cfi_def_cfa_register 7
 845 0006 7860     		str	r0, [r7, #4]
 846 0008 0B46     		mov	r3, r1
 847 000a 7B80     		strh	r3, [r7, #2]	@ movhi
 848 000c 1346     		mov	r3, r2
 849 000e 7B70     		strb	r3, [r7, #1]
 523:../src/stm32f10x_spi.c ****   /* Check the parameters */
 524:../src/stm32f10x_spi.c ****   assert_param(IS_SPI_ALL_PERIPH(SPIx));
 525:../src/stm32f10x_spi.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 526:../src/stm32f10x_spi.c ****   assert_param(IS_SPI_I2S_DMAREQ(SPI_I2S_DMAReq));
 527:../src/stm32f10x_spi.c ****   if (NewState != DISABLE)
 850              		.loc 1 527 0
 851 0010 7B78     		ldrb	r3, [r7, #1]	@ zero_extendqisi2
 852 0012 002B     		cmp	r3, #0
 853 0014 08D0     		beq	.L37
 528:../src/stm32f10x_spi.c ****   {
 529:../src/stm32f10x_spi.c ****     /* Enable the selected SPI/I2S DMA requests */
 530:../src/stm32f10x_spi.c ****     SPIx->CR2 |= SPI_I2S_DMAReq;
 854              		.loc 1 530 0
 855 0016 7B68     		ldr	r3, [r7, #4]
 856 0018 9B88     		ldrh	r3, [r3, #4]	@ movhi
 857 001a 9AB2     		uxth	r2, r3
 858 001c 7B88     		ldrh	r3, [r7, #2]	@ movhi
 859 001e 1343     		orrs	r3, r3, r2
 860 0020 9AB2     		uxth	r2, r3
 861 0022 7B68     		ldr	r3, [r7, #4]
 862 0024 9A80     		strh	r2, [r3, #4]	@ movhi
 863 0026 09E0     		b	.L36
 864              	.L37:
 531:../src/stm32f10x_spi.c ****   }
 532:../src/stm32f10x_spi.c ****   else
 533:../src/stm32f10x_spi.c ****   {
 534:../src/stm32f10x_spi.c ****     /* Disable the selected SPI/I2S DMA requests */
 535:../src/stm32f10x_spi.c ****     SPIx->CR2 &= (uint16_t)~SPI_I2S_DMAReq;
 865              		.loc 1 535 0
 866 0028 7B68     		ldr	r3, [r7, #4]
 867 002a 9B88     		ldrh	r3, [r3, #4]	@ movhi
 868 002c 9AB2     		uxth	r2, r3
 869 002e 7B88     		ldrh	r3, [r7, #2]	@ movhi
 870 0030 DB43     		mvns	r3, r3
 871 0032 9BB2     		uxth	r3, r3
 872 0034 1340     		ands	r3, r3, r2
 873 0036 9AB2     		uxth	r2, r3
 874 0038 7B68     		ldr	r3, [r7, #4]
 875 003a 9A80     		strh	r2, [r3, #4]	@ movhi
 876              	.L36:
 536:../src/stm32f10x_spi.c ****   }
 537:../src/stm32f10x_spi.c **** }
 877              		.loc 1 537 0
 878 003c 0C37     		adds	r7, r7, #12
 879              		.cfi_def_cfa_offset 4
 880 003e BD46     		mov	sp, r7
 881              		.cfi_def_cfa_register 13
 882              		@ sp needed
 883 0040 5DF8047B 		ldr	r7, [sp], #4
 884              		.cfi_restore 7
 885              		.cfi_def_cfa_offset 0
 886 0044 7047     		bx	lr
 887              		.cfi_endproc
 888              	.LFE37:
 890 0046 00BF     		.section	.text.SPI_I2S_SendData,"ax",%progbits
 891              		.align	2
 892              		.global	SPI_I2S_SendData
 893              		.thumb
 894              		.thumb_func
 896              	SPI_I2S_SendData:
 897              	.LFB38:
 538:../src/stm32f10x_spi.c **** 
 539:../src/stm32f10x_spi.c **** /**
 540:../src/stm32f10x_spi.c ****   * @brief  Transmits a Data through the SPIx/I2Sx peripheral.
 541:../src/stm32f10x_spi.c ****   * @param  SPIx: where x can be
 542:../src/stm32f10x_spi.c ****   *   - 1, 2 or 3 in SPI mode 
 543:../src/stm32f10x_spi.c ****   *   - 2 or 3 in I2S mode
 544:../src/stm32f10x_spi.c ****   * @param  Data : Data to be transmitted.
 545:../src/stm32f10x_spi.c ****   * @retval None
 546:../src/stm32f10x_spi.c ****   */
 547:../src/stm32f10x_spi.c **** void SPI_I2S_SendData(SPI_TypeDef* SPIx, uint16_t Data)
 548:../src/stm32f10x_spi.c **** {
 898              		.loc 1 548 0
 899              		.cfi_startproc
 900              		@ args = 0, pretend = 0, frame = 8
 901              		@ frame_needed = 1, uses_anonymous_args = 0
 902              		@ link register save eliminated.
 903 0000 80B4     		push	{r7}
 904              		.cfi_def_cfa_offset 4
 905              		.cfi_offset 7, -4
 906 0002 83B0     		sub	sp, sp, #12
 907              		.cfi_def_cfa_offset 16
 908 0004 00AF     		add	r7, sp, #0
 909              		.cfi_def_cfa_register 7
 910 0006 7860     		str	r0, [r7, #4]
 911 0008 0B46     		mov	r3, r1
 912 000a 7B80     		strh	r3, [r7, #2]	@ movhi
 549:../src/stm32f10x_spi.c ****   /* Check the parameters */
 550:../src/stm32f10x_spi.c ****   assert_param(IS_SPI_ALL_PERIPH(SPIx));
 551:../src/stm32f10x_spi.c ****   
 552:../src/stm32f10x_spi.c ****   /* Write in the DR register the data to be sent */
 553:../src/stm32f10x_spi.c ****   SPIx->DR = Data;
 913              		.loc 1 553 0
 914 000c 7B68     		ldr	r3, [r7, #4]
 915 000e 7A88     		ldrh	r2, [r7, #2]	@ movhi
 916 0010 9A81     		strh	r2, [r3, #12]	@ movhi
 554:../src/stm32f10x_spi.c **** }
 917              		.loc 1 554 0
 918 0012 0C37     		adds	r7, r7, #12
 919              		.cfi_def_cfa_offset 4
 920 0014 BD46     		mov	sp, r7
 921              		.cfi_def_cfa_register 13
 922              		@ sp needed
 923 0016 5DF8047B 		ldr	r7, [sp], #4
 924              		.cfi_restore 7
 925              		.cfi_def_cfa_offset 0
 926 001a 7047     		bx	lr
 927              		.cfi_endproc
 928              	.LFE38:
 930              		.section	.text.SPI_I2S_ReceiveData,"ax",%progbits
 931              		.align	2
 932              		.global	SPI_I2S_ReceiveData
 933              		.thumb
 934              		.thumb_func
 936              	SPI_I2S_ReceiveData:
 937              	.LFB39:
 555:../src/stm32f10x_spi.c **** 
 556:../src/stm32f10x_spi.c **** /**
 557:../src/stm32f10x_spi.c ****   * @brief  Returns the most recent received data by the SPIx/I2Sx peripheral. 
 558:../src/stm32f10x_spi.c ****   * @param  SPIx: where x can be
 559:../src/stm32f10x_spi.c ****   *   - 1, 2 or 3 in SPI mode 
 560:../src/stm32f10x_spi.c ****   *   - 2 or 3 in I2S mode
 561:../src/stm32f10x_spi.c ****   * @retval The value of the received data.
 562:../src/stm32f10x_spi.c ****   */
 563:../src/stm32f10x_spi.c **** uint16_t SPI_I2S_ReceiveData(SPI_TypeDef* SPIx)
 564:../src/stm32f10x_spi.c **** {
 938              		.loc 1 564 0
 939              		.cfi_startproc
 940              		@ args = 0, pretend = 0, frame = 8
 941              		@ frame_needed = 1, uses_anonymous_args = 0
 942              		@ link register save eliminated.
 943 0000 80B4     		push	{r7}
 944              		.cfi_def_cfa_offset 4
 945              		.cfi_offset 7, -4
 946 0002 83B0     		sub	sp, sp, #12
 947              		.cfi_def_cfa_offset 16
 948 0004 00AF     		add	r7, sp, #0
 949              		.cfi_def_cfa_register 7
 950 0006 7860     		str	r0, [r7, #4]
 565:../src/stm32f10x_spi.c ****   /* Check the parameters */
 566:../src/stm32f10x_spi.c ****   assert_param(IS_SPI_ALL_PERIPH(SPIx));
 567:../src/stm32f10x_spi.c ****   
 568:../src/stm32f10x_spi.c ****   /* Return the data in the DR register */
 569:../src/stm32f10x_spi.c ****   return SPIx->DR;
 951              		.loc 1 569 0
 952 0008 7B68     		ldr	r3, [r7, #4]
 953 000a 9B89     		ldrh	r3, [r3, #12]	@ movhi
 954 000c 9BB2     		uxth	r3, r3
 570:../src/stm32f10x_spi.c **** }
 955              		.loc 1 570 0
 956 000e 1846     		mov	r0, r3
 957 0010 0C37     		adds	r7, r7, #12
 958              		.cfi_def_cfa_offset 4
 959 0012 BD46     		mov	sp, r7
 960              		.cfi_def_cfa_register 13
 961              		@ sp needed
 962 0014 5DF8047B 		ldr	r7, [sp], #4
 963              		.cfi_restore 7
 964              		.cfi_def_cfa_offset 0
 965 0018 7047     		bx	lr
 966              		.cfi_endproc
 967              	.LFE39:
 969 001a 00BF     		.section	.text.SPI_NSSInternalSoftwareConfig,"ax",%progbits
 970              		.align	2
 971              		.global	SPI_NSSInternalSoftwareConfig
 972              		.thumb
 973              		.thumb_func
 975              	SPI_NSSInternalSoftwareConfig:
 976              	.LFB40:
 571:../src/stm32f10x_spi.c **** 
 572:../src/stm32f10x_spi.c **** /**
 573:../src/stm32f10x_spi.c ****   * @brief  Configures internally by software the NSS pin for the selected SPI.
 574:../src/stm32f10x_spi.c ****   * @param  SPIx: where x can be 1, 2 or 3 to select the SPI peripheral.
 575:../src/stm32f10x_spi.c ****   * @param  SPI_NSSInternalSoft: specifies the SPI NSS internal state.
 576:../src/stm32f10x_spi.c ****   *   This parameter can be one of the following values:
 577:../src/stm32f10x_spi.c ****   *     @arg SPI_NSSInternalSoft_Set: Set NSS pin internally
 578:../src/stm32f10x_spi.c ****   *     @arg SPI_NSSInternalSoft_Reset: Reset NSS pin internally
 579:../src/stm32f10x_spi.c ****   * @retval None
 580:../src/stm32f10x_spi.c ****   */
 581:../src/stm32f10x_spi.c **** void SPI_NSSInternalSoftwareConfig(SPI_TypeDef* SPIx, uint16_t SPI_NSSInternalSoft)
 582:../src/stm32f10x_spi.c **** {
 977              		.loc 1 582 0
 978              		.cfi_startproc
 979              		@ args = 0, pretend = 0, frame = 8
 980              		@ frame_needed = 1, uses_anonymous_args = 0
 981              		@ link register save eliminated.
 982 0000 80B4     		push	{r7}
 983              		.cfi_def_cfa_offset 4
 984              		.cfi_offset 7, -4
 985 0002 83B0     		sub	sp, sp, #12
 986              		.cfi_def_cfa_offset 16
 987 0004 00AF     		add	r7, sp, #0
 988              		.cfi_def_cfa_register 7
 989 0006 7860     		str	r0, [r7, #4]
 990 0008 0B46     		mov	r3, r1
 991 000a 7B80     		strh	r3, [r7, #2]	@ movhi
 583:../src/stm32f10x_spi.c ****   /* Check the parameters */
 584:../src/stm32f10x_spi.c ****   assert_param(IS_SPI_ALL_PERIPH(SPIx));
 585:../src/stm32f10x_spi.c ****   assert_param(IS_SPI_NSS_INTERNAL(SPI_NSSInternalSoft));
 586:../src/stm32f10x_spi.c ****   if (SPI_NSSInternalSoft != SPI_NSSInternalSoft_Reset)
 992              		.loc 1 586 0
 993 000c 7B88     		ldrh	r3, [r7, #2]
 994 000e 4FF6FF62 		movw	r2, #65279
 995 0012 9342     		cmp	r3, r2
 996 0014 08D0     		beq	.L43
 587:../src/stm32f10x_spi.c ****   {
 588:../src/stm32f10x_spi.c ****     /* Set NSS pin internally by software */
 589:../src/stm32f10x_spi.c ****     SPIx->CR1 |= SPI_NSSInternalSoft_Set;
 997              		.loc 1 589 0
 998 0016 7B68     		ldr	r3, [r7, #4]
 999 0018 1B88     		ldrh	r3, [r3]	@ movhi
 1000 001a 9BB2     		uxth	r3, r3
 1001 001c 43F48073 		orr	r3, r3, #256
 1002 0020 9AB2     		uxth	r2, r3
 1003 0022 7B68     		ldr	r3, [r7, #4]
 1004 0024 1A80     		strh	r2, [r3]	@ movhi
 1005 0026 07E0     		b	.L42
 1006              	.L43:
 590:../src/stm32f10x_spi.c ****   }
 591:../src/stm32f10x_spi.c ****   else
 592:../src/stm32f10x_spi.c ****   {
 593:../src/stm32f10x_spi.c ****     /* Reset NSS pin internally by software */
 594:../src/stm32f10x_spi.c ****     SPIx->CR1 &= SPI_NSSInternalSoft_Reset;
 1007              		.loc 1 594 0
 1008 0028 7B68     		ldr	r3, [r7, #4]
 1009 002a 1B88     		ldrh	r3, [r3]	@ movhi
 1010 002c 9BB2     		uxth	r3, r3
 1011 002e 23F48073 		bic	r3, r3, #256
 1012 0032 9AB2     		uxth	r2, r3
 1013 0034 7B68     		ldr	r3, [r7, #4]
 1014 0036 1A80     		strh	r2, [r3]	@ movhi
 1015              	.L42:
 595:../src/stm32f10x_spi.c ****   }
 596:../src/stm32f10x_spi.c **** }
 1016              		.loc 1 596 0
 1017 0038 0C37     		adds	r7, r7, #12
 1018              		.cfi_def_cfa_offset 4
 1019 003a BD46     		mov	sp, r7
 1020              		.cfi_def_cfa_register 13
 1021              		@ sp needed
 1022 003c 5DF8047B 		ldr	r7, [sp], #4
 1023              		.cfi_restore 7
 1024              		.cfi_def_cfa_offset 0
 1025 0040 7047     		bx	lr
 1026              		.cfi_endproc
 1027              	.LFE40:
 1029 0042 00BF     		.section	.text.SPI_SSOutputCmd,"ax",%progbits
 1030              		.align	2
 1031              		.global	SPI_SSOutputCmd
 1032              		.thumb
 1033              		.thumb_func
 1035              	SPI_SSOutputCmd:
 1036              	.LFB41:
 597:../src/stm32f10x_spi.c **** 
 598:../src/stm32f10x_spi.c **** /**
 599:../src/stm32f10x_spi.c ****   * @brief  Enables or disables the SS output for the selected SPI.
 600:../src/stm32f10x_spi.c ****   * @param  SPIx: where x can be 1, 2 or 3 to select the SPI peripheral.
 601:../src/stm32f10x_spi.c ****   * @param  NewState: new state of the SPIx SS output. 
 602:../src/stm32f10x_spi.c ****   *   This parameter can be: ENABLE or DISABLE.
 603:../src/stm32f10x_spi.c ****   * @retval None
 604:../src/stm32f10x_spi.c ****   */
 605:../src/stm32f10x_spi.c **** void SPI_SSOutputCmd(SPI_TypeDef* SPIx, FunctionalState NewState)
 606:../src/stm32f10x_spi.c **** {
 1037              		.loc 1 606 0
 1038              		.cfi_startproc
 1039              		@ args = 0, pretend = 0, frame = 8
 1040              		@ frame_needed = 1, uses_anonymous_args = 0
 1041              		@ link register save eliminated.
 1042 0000 80B4     		push	{r7}
 1043              		.cfi_def_cfa_offset 4
 1044              		.cfi_offset 7, -4
 1045 0002 83B0     		sub	sp, sp, #12
 1046              		.cfi_def_cfa_offset 16
 1047 0004 00AF     		add	r7, sp, #0
 1048              		.cfi_def_cfa_register 7
 1049 0006 7860     		str	r0, [r7, #4]
 1050 0008 0B46     		mov	r3, r1
 1051 000a FB70     		strb	r3, [r7, #3]
 607:../src/stm32f10x_spi.c ****   /* Check the parameters */
 608:../src/stm32f10x_spi.c ****   assert_param(IS_SPI_ALL_PERIPH(SPIx));
 609:../src/stm32f10x_spi.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 610:../src/stm32f10x_spi.c ****   if (NewState != DISABLE)
 1052              		.loc 1 610 0
 1053 000c FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1054 000e 002B     		cmp	r3, #0
 1055 0010 08D0     		beq	.L46
 611:../src/stm32f10x_spi.c ****   {
 612:../src/stm32f10x_spi.c ****     /* Enable the selected SPI SS output */
 613:../src/stm32f10x_spi.c ****     SPIx->CR2 |= CR2_SSOE_Set;
 1056              		.loc 1 613 0
 1057 0012 7B68     		ldr	r3, [r7, #4]
 1058 0014 9B88     		ldrh	r3, [r3, #4]	@ movhi
 1059 0016 9BB2     		uxth	r3, r3
 1060 0018 43F00403 		orr	r3, r3, #4
 1061 001c 9AB2     		uxth	r2, r3
 1062 001e 7B68     		ldr	r3, [r7, #4]
 1063 0020 9A80     		strh	r2, [r3, #4]	@ movhi
 1064 0022 07E0     		b	.L45
 1065              	.L46:
 614:../src/stm32f10x_spi.c ****   }
 615:../src/stm32f10x_spi.c ****   else
 616:../src/stm32f10x_spi.c ****   {
 617:../src/stm32f10x_spi.c ****     /* Disable the selected SPI SS output */
 618:../src/stm32f10x_spi.c ****     SPIx->CR2 &= CR2_SSOE_Reset;
 1066              		.loc 1 618 0
 1067 0024 7B68     		ldr	r3, [r7, #4]
 1068 0026 9B88     		ldrh	r3, [r3, #4]	@ movhi
 1069 0028 9BB2     		uxth	r3, r3
 1070 002a 23F00403 		bic	r3, r3, #4
 1071 002e 9AB2     		uxth	r2, r3
 1072 0030 7B68     		ldr	r3, [r7, #4]
 1073 0032 9A80     		strh	r2, [r3, #4]	@ movhi
 1074              	.L45:
 619:../src/stm32f10x_spi.c ****   }
 620:../src/stm32f10x_spi.c **** }
 1075              		.loc 1 620 0
 1076 0034 0C37     		adds	r7, r7, #12
 1077              		.cfi_def_cfa_offset 4
 1078 0036 BD46     		mov	sp, r7
 1079              		.cfi_def_cfa_register 13
 1080              		@ sp needed
 1081 0038 5DF8047B 		ldr	r7, [sp], #4
 1082              		.cfi_restore 7
 1083              		.cfi_def_cfa_offset 0
 1084 003c 7047     		bx	lr
 1085              		.cfi_endproc
 1086              	.LFE41:
 1088 003e 00BF     		.section	.text.SPI_DataSizeConfig,"ax",%progbits
 1089              		.align	2
 1090              		.global	SPI_DataSizeConfig
 1091              		.thumb
 1092              		.thumb_func
 1094              	SPI_DataSizeConfig:
 1095              	.LFB42:
 621:../src/stm32f10x_spi.c **** 
 622:../src/stm32f10x_spi.c **** /**
 623:../src/stm32f10x_spi.c ****   * @brief  Configures the data size for the selected SPI.
 624:../src/stm32f10x_spi.c ****   * @param  SPIx: where x can be 1, 2 or 3 to select the SPI peripheral.
 625:../src/stm32f10x_spi.c ****   * @param  SPI_DataSize: specifies the SPI data size.
 626:../src/stm32f10x_spi.c ****   *   This parameter can be one of the following values:
 627:../src/stm32f10x_spi.c ****   *     @arg SPI_DataSize_16b: Set data frame format to 16bit
 628:../src/stm32f10x_spi.c ****   *     @arg SPI_DataSize_8b: Set data frame format to 8bit
 629:../src/stm32f10x_spi.c ****   * @retval None
 630:../src/stm32f10x_spi.c ****   */
 631:../src/stm32f10x_spi.c **** void SPI_DataSizeConfig(SPI_TypeDef* SPIx, uint16_t SPI_DataSize)
 632:../src/stm32f10x_spi.c **** {
 1096              		.loc 1 632 0
 1097              		.cfi_startproc
 1098              		@ args = 0, pretend = 0, frame = 8
 1099              		@ frame_needed = 1, uses_anonymous_args = 0
 1100              		@ link register save eliminated.
 1101 0000 80B4     		push	{r7}
 1102              		.cfi_def_cfa_offset 4
 1103              		.cfi_offset 7, -4
 1104 0002 83B0     		sub	sp, sp, #12
 1105              		.cfi_def_cfa_offset 16
 1106 0004 00AF     		add	r7, sp, #0
 1107              		.cfi_def_cfa_register 7
 1108 0006 7860     		str	r0, [r7, #4]
 1109 0008 0B46     		mov	r3, r1
 1110 000a 7B80     		strh	r3, [r7, #2]	@ movhi
 633:../src/stm32f10x_spi.c ****   /* Check the parameters */
 634:../src/stm32f10x_spi.c ****   assert_param(IS_SPI_ALL_PERIPH(SPIx));
 635:../src/stm32f10x_spi.c ****   assert_param(IS_SPI_DATASIZE(SPI_DataSize));
 636:../src/stm32f10x_spi.c ****   /* Clear DFF bit */
 637:../src/stm32f10x_spi.c ****   SPIx->CR1 &= (uint16_t)~SPI_DataSize_16b;
 1111              		.loc 1 637 0
 1112 000c 7B68     		ldr	r3, [r7, #4]
 1113 000e 1B88     		ldrh	r3, [r3]	@ movhi
 1114 0010 9BB2     		uxth	r3, r3
 1115 0012 23F40063 		bic	r3, r3, #2048
 1116 0016 9AB2     		uxth	r2, r3
 1117 0018 7B68     		ldr	r3, [r7, #4]
 1118 001a 1A80     		strh	r2, [r3]	@ movhi
 638:../src/stm32f10x_spi.c ****   /* Set new DFF bit value */
 639:../src/stm32f10x_spi.c ****   SPIx->CR1 |= SPI_DataSize;
 1119              		.loc 1 639 0
 1120 001c 7B68     		ldr	r3, [r7, #4]
 1121 001e 1B88     		ldrh	r3, [r3]	@ movhi
 1122 0020 9AB2     		uxth	r2, r3
 1123 0022 7B88     		ldrh	r3, [r7, #2]	@ movhi
 1124 0024 1343     		orrs	r3, r3, r2
 1125 0026 9AB2     		uxth	r2, r3
 1126 0028 7B68     		ldr	r3, [r7, #4]
 1127 002a 1A80     		strh	r2, [r3]	@ movhi
 640:../src/stm32f10x_spi.c **** }
 1128              		.loc 1 640 0
 1129 002c 0C37     		adds	r7, r7, #12
 1130              		.cfi_def_cfa_offset 4
 1131 002e BD46     		mov	sp, r7
 1132              		.cfi_def_cfa_register 13
 1133              		@ sp needed
 1134 0030 5DF8047B 		ldr	r7, [sp], #4
 1135              		.cfi_restore 7
 1136              		.cfi_def_cfa_offset 0
 1137 0034 7047     		bx	lr
 1138              		.cfi_endproc
 1139              	.LFE42:
 1141 0036 00BF     		.section	.text.SPI_TransmitCRC,"ax",%progbits
 1142              		.align	2
 1143              		.global	SPI_TransmitCRC
 1144              		.thumb
 1145              		.thumb_func
 1147              	SPI_TransmitCRC:
 1148              	.LFB43:
 641:../src/stm32f10x_spi.c **** 
 642:../src/stm32f10x_spi.c **** /**
 643:../src/stm32f10x_spi.c ****   * @brief  Transmit the SPIx CRC value.
 644:../src/stm32f10x_spi.c ****   * @param  SPIx: where x can be 1, 2 or 3 to select the SPI peripheral.
 645:../src/stm32f10x_spi.c ****   * @retval None
 646:../src/stm32f10x_spi.c ****   */
 647:../src/stm32f10x_spi.c **** void SPI_TransmitCRC(SPI_TypeDef* SPIx)
 648:../src/stm32f10x_spi.c **** {
 1149              		.loc 1 648 0
 1150              		.cfi_startproc
 1151              		@ args = 0, pretend = 0, frame = 8
 1152              		@ frame_needed = 1, uses_anonymous_args = 0
 1153              		@ link register save eliminated.
 1154 0000 80B4     		push	{r7}
 1155              		.cfi_def_cfa_offset 4
 1156              		.cfi_offset 7, -4
 1157 0002 83B0     		sub	sp, sp, #12
 1158              		.cfi_def_cfa_offset 16
 1159 0004 00AF     		add	r7, sp, #0
 1160              		.cfi_def_cfa_register 7
 1161 0006 7860     		str	r0, [r7, #4]
 649:../src/stm32f10x_spi.c ****   /* Check the parameters */
 650:../src/stm32f10x_spi.c ****   assert_param(IS_SPI_ALL_PERIPH(SPIx));
 651:../src/stm32f10x_spi.c ****   
 652:../src/stm32f10x_spi.c ****   /* Enable the selected SPI CRC transmission */
 653:../src/stm32f10x_spi.c ****   SPIx->CR1 |= CR1_CRCNext_Set;
 1162              		.loc 1 653 0
 1163 0008 7B68     		ldr	r3, [r7, #4]
 1164 000a 1B88     		ldrh	r3, [r3]	@ movhi
 1165 000c 9BB2     		uxth	r3, r3
 1166 000e 43F48053 		orr	r3, r3, #4096
 1167 0012 9AB2     		uxth	r2, r3
 1168 0014 7B68     		ldr	r3, [r7, #4]
 1169 0016 1A80     		strh	r2, [r3]	@ movhi
 654:../src/stm32f10x_spi.c **** }
 1170              		.loc 1 654 0
 1171 0018 0C37     		adds	r7, r7, #12
 1172              		.cfi_def_cfa_offset 4
 1173 001a BD46     		mov	sp, r7
 1174              		.cfi_def_cfa_register 13
 1175              		@ sp needed
 1176 001c 5DF8047B 		ldr	r7, [sp], #4
 1177              		.cfi_restore 7
 1178              		.cfi_def_cfa_offset 0
 1179 0020 7047     		bx	lr
 1180              		.cfi_endproc
 1181              	.LFE43:
 1183 0022 00BF     		.section	.text.SPI_CalculateCRC,"ax",%progbits
 1184              		.align	2
 1185              		.global	SPI_CalculateCRC
 1186              		.thumb
 1187              		.thumb_func
 1189              	SPI_CalculateCRC:
 1190              	.LFB44:
 655:../src/stm32f10x_spi.c **** 
 656:../src/stm32f10x_spi.c **** /**
 657:../src/stm32f10x_spi.c ****   * @brief  Enables or disables the CRC value calculation of the transferred bytes.
 658:../src/stm32f10x_spi.c ****   * @param  SPIx: where x can be 1, 2 or 3 to select the SPI peripheral.
 659:../src/stm32f10x_spi.c ****   * @param  NewState: new state of the SPIx CRC value calculation.
 660:../src/stm32f10x_spi.c ****   *   This parameter can be: ENABLE or DISABLE.
 661:../src/stm32f10x_spi.c ****   * @retval None
 662:../src/stm32f10x_spi.c ****   */
 663:../src/stm32f10x_spi.c **** void SPI_CalculateCRC(SPI_TypeDef* SPIx, FunctionalState NewState)
 664:../src/stm32f10x_spi.c **** {
 1191              		.loc 1 664 0
 1192              		.cfi_startproc
 1193              		@ args = 0, pretend = 0, frame = 8
 1194              		@ frame_needed = 1, uses_anonymous_args = 0
 1195              		@ link register save eliminated.
 1196 0000 80B4     		push	{r7}
 1197              		.cfi_def_cfa_offset 4
 1198              		.cfi_offset 7, -4
 1199 0002 83B0     		sub	sp, sp, #12
 1200              		.cfi_def_cfa_offset 16
 1201 0004 00AF     		add	r7, sp, #0
 1202              		.cfi_def_cfa_register 7
 1203 0006 7860     		str	r0, [r7, #4]
 1204 0008 0B46     		mov	r3, r1
 1205 000a FB70     		strb	r3, [r7, #3]
 665:../src/stm32f10x_spi.c ****   /* Check the parameters */
 666:../src/stm32f10x_spi.c ****   assert_param(IS_SPI_ALL_PERIPH(SPIx));
 667:../src/stm32f10x_spi.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 668:../src/stm32f10x_spi.c ****   if (NewState != DISABLE)
 1206              		.loc 1 668 0
 1207 000c FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1208 000e 002B     		cmp	r3, #0
 1209 0010 08D0     		beq	.L51
 669:../src/stm32f10x_spi.c ****   {
 670:../src/stm32f10x_spi.c ****     /* Enable the selected SPI CRC calculation */
 671:../src/stm32f10x_spi.c ****     SPIx->CR1 |= CR1_CRCEN_Set;
 1210              		.loc 1 671 0
 1211 0012 7B68     		ldr	r3, [r7, #4]
 1212 0014 1B88     		ldrh	r3, [r3]	@ movhi
 1213 0016 9BB2     		uxth	r3, r3
 1214 0018 43F40053 		orr	r3, r3, #8192
 1215 001c 9AB2     		uxth	r2, r3
 1216 001e 7B68     		ldr	r3, [r7, #4]
 1217 0020 1A80     		strh	r2, [r3]	@ movhi
 1218 0022 07E0     		b	.L50
 1219              	.L51:
 672:../src/stm32f10x_spi.c ****   }
 673:../src/stm32f10x_spi.c ****   else
 674:../src/stm32f10x_spi.c ****   {
 675:../src/stm32f10x_spi.c ****     /* Disable the selected SPI CRC calculation */
 676:../src/stm32f10x_spi.c ****     SPIx->CR1 &= CR1_CRCEN_Reset;
 1220              		.loc 1 676 0
 1221 0024 7B68     		ldr	r3, [r7, #4]
 1222 0026 1B88     		ldrh	r3, [r3]	@ movhi
 1223 0028 9BB2     		uxth	r3, r3
 1224 002a 23F40053 		bic	r3, r3, #8192
 1225 002e 9AB2     		uxth	r2, r3
 1226 0030 7B68     		ldr	r3, [r7, #4]
 1227 0032 1A80     		strh	r2, [r3]	@ movhi
 1228              	.L50:
 677:../src/stm32f10x_spi.c ****   }
 678:../src/stm32f10x_spi.c **** }
 1229              		.loc 1 678 0
 1230 0034 0C37     		adds	r7, r7, #12
 1231              		.cfi_def_cfa_offset 4
 1232 0036 BD46     		mov	sp, r7
 1233              		.cfi_def_cfa_register 13
 1234              		@ sp needed
 1235 0038 5DF8047B 		ldr	r7, [sp], #4
 1236              		.cfi_restore 7
 1237              		.cfi_def_cfa_offset 0
 1238 003c 7047     		bx	lr
 1239              		.cfi_endproc
 1240              	.LFE44:
 1242 003e 00BF     		.section	.text.SPI_GetCRC,"ax",%progbits
 1243              		.align	2
 1244              		.global	SPI_GetCRC
 1245              		.thumb
 1246              		.thumb_func
 1248              	SPI_GetCRC:
 1249              	.LFB45:
 679:../src/stm32f10x_spi.c **** 
 680:../src/stm32f10x_spi.c **** /**
 681:../src/stm32f10x_spi.c ****   * @brief  Returns the transmit or the receive CRC register value for the specified SPI.
 682:../src/stm32f10x_spi.c ****   * @param  SPIx: where x can be 1, 2 or 3 to select the SPI peripheral.
 683:../src/stm32f10x_spi.c ****   * @param  SPI_CRC: specifies the CRC register to be read.
 684:../src/stm32f10x_spi.c ****   *   This parameter can be one of the following values:
 685:../src/stm32f10x_spi.c ****   *     @arg SPI_CRC_Tx: Selects Tx CRC register
 686:../src/stm32f10x_spi.c ****   *     @arg SPI_CRC_Rx: Selects Rx CRC register
 687:../src/stm32f10x_spi.c ****   * @retval The selected CRC register value..
 688:../src/stm32f10x_spi.c ****   */
 689:../src/stm32f10x_spi.c **** uint16_t SPI_GetCRC(SPI_TypeDef* SPIx, uint8_t SPI_CRC)
 690:../src/stm32f10x_spi.c **** {
 1250              		.loc 1 690 0
 1251              		.cfi_startproc
 1252              		@ args = 0, pretend = 0, frame = 16
 1253              		@ frame_needed = 1, uses_anonymous_args = 0
 1254              		@ link register save eliminated.
 1255 0000 80B4     		push	{r7}
 1256              		.cfi_def_cfa_offset 4
 1257              		.cfi_offset 7, -4
 1258 0002 85B0     		sub	sp, sp, #20
 1259              		.cfi_def_cfa_offset 24
 1260 0004 00AF     		add	r7, sp, #0
 1261              		.cfi_def_cfa_register 7
 1262 0006 7860     		str	r0, [r7, #4]
 1263 0008 0B46     		mov	r3, r1
 1264 000a FB70     		strb	r3, [r7, #3]
 691:../src/stm32f10x_spi.c ****   uint16_t crcreg = 0;
 1265              		.loc 1 691 0
 1266 000c 0023     		movs	r3, #0
 1267 000e FB81     		strh	r3, [r7, #14]	@ movhi
 692:../src/stm32f10x_spi.c ****   /* Check the parameters */
 693:../src/stm32f10x_spi.c ****   assert_param(IS_SPI_ALL_PERIPH(SPIx));
 694:../src/stm32f10x_spi.c ****   assert_param(IS_SPI_CRC(SPI_CRC));
 695:../src/stm32f10x_spi.c ****   if (SPI_CRC != SPI_CRC_Rx)
 1268              		.loc 1 695 0
 1269 0010 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1270 0012 012B     		cmp	r3, #1
 1271 0014 03D0     		beq	.L54
 696:../src/stm32f10x_spi.c ****   {
 697:../src/stm32f10x_spi.c ****     /* Get the Tx CRC register */
 698:../src/stm32f10x_spi.c ****     crcreg = SPIx->TXCRCR;
 1272              		.loc 1 698 0
 1273 0016 7B68     		ldr	r3, [r7, #4]
 1274 0018 1B8B     		ldrh	r3, [r3, #24]	@ movhi
 1275 001a FB81     		strh	r3, [r7, #14]	@ movhi
 1276 001c 02E0     		b	.L55
 1277              	.L54:
 699:../src/stm32f10x_spi.c ****   }
 700:../src/stm32f10x_spi.c ****   else
 701:../src/stm32f10x_spi.c ****   {
 702:../src/stm32f10x_spi.c ****     /* Get the Rx CRC register */
 703:../src/stm32f10x_spi.c ****     crcreg = SPIx->RXCRCR;
 1278              		.loc 1 703 0
 1279 001e 7B68     		ldr	r3, [r7, #4]
 1280 0020 9B8A     		ldrh	r3, [r3, #20]	@ movhi
 1281 0022 FB81     		strh	r3, [r7, #14]	@ movhi
 1282              	.L55:
 704:../src/stm32f10x_spi.c ****   }
 705:../src/stm32f10x_spi.c ****   /* Return the selected CRC register */
 706:../src/stm32f10x_spi.c ****   return crcreg;
 1283              		.loc 1 706 0
 1284 0024 FB89     		ldrh	r3, [r7, #14]
 707:../src/stm32f10x_spi.c **** }
 1285              		.loc 1 707 0
 1286 0026 1846     		mov	r0, r3
 1287 0028 1437     		adds	r7, r7, #20
 1288              		.cfi_def_cfa_offset 4
 1289 002a BD46     		mov	sp, r7
 1290              		.cfi_def_cfa_register 13
 1291              		@ sp needed
 1292 002c 5DF8047B 		ldr	r7, [sp], #4
 1293              		.cfi_restore 7
 1294              		.cfi_def_cfa_offset 0
 1295 0030 7047     		bx	lr
 1296              		.cfi_endproc
 1297              	.LFE45:
 1299 0032 00BF     		.section	.text.SPI_GetCRCPolynomial,"ax",%progbits
 1300              		.align	2
 1301              		.global	SPI_GetCRCPolynomial
 1302              		.thumb
 1303              		.thumb_func
 1305              	SPI_GetCRCPolynomial:
 1306              	.LFB46:
 708:../src/stm32f10x_spi.c **** 
 709:../src/stm32f10x_spi.c **** /**
 710:../src/stm32f10x_spi.c ****   * @brief  Returns the CRC Polynomial register value for the specified SPI.
 711:../src/stm32f10x_spi.c ****   * @param  SPIx: where x can be 1, 2 or 3 to select the SPI peripheral.
 712:../src/stm32f10x_spi.c ****   * @retval The CRC Polynomial register value.
 713:../src/stm32f10x_spi.c ****   */
 714:../src/stm32f10x_spi.c **** uint16_t SPI_GetCRCPolynomial(SPI_TypeDef* SPIx)
 715:../src/stm32f10x_spi.c **** {
 1307              		.loc 1 715 0
 1308              		.cfi_startproc
 1309              		@ args = 0, pretend = 0, frame = 8
 1310              		@ frame_needed = 1, uses_anonymous_args = 0
 1311              		@ link register save eliminated.
 1312 0000 80B4     		push	{r7}
 1313              		.cfi_def_cfa_offset 4
 1314              		.cfi_offset 7, -4
 1315 0002 83B0     		sub	sp, sp, #12
 1316              		.cfi_def_cfa_offset 16
 1317 0004 00AF     		add	r7, sp, #0
 1318              		.cfi_def_cfa_register 7
 1319 0006 7860     		str	r0, [r7, #4]
 716:../src/stm32f10x_spi.c ****   /* Check the parameters */
 717:../src/stm32f10x_spi.c ****   assert_param(IS_SPI_ALL_PERIPH(SPIx));
 718:../src/stm32f10x_spi.c ****   
 719:../src/stm32f10x_spi.c ****   /* Return the CRC polynomial register */
 720:../src/stm32f10x_spi.c ****   return SPIx->CRCPR;
 1320              		.loc 1 720 0
 1321 0008 7B68     		ldr	r3, [r7, #4]
 1322 000a 1B8A     		ldrh	r3, [r3, #16]	@ movhi
 1323 000c 9BB2     		uxth	r3, r3
 721:../src/stm32f10x_spi.c **** }
 1324              		.loc 1 721 0
 1325 000e 1846     		mov	r0, r3
 1326 0010 0C37     		adds	r7, r7, #12
 1327              		.cfi_def_cfa_offset 4
 1328 0012 BD46     		mov	sp, r7
 1329              		.cfi_def_cfa_register 13
 1330              		@ sp needed
 1331 0014 5DF8047B 		ldr	r7, [sp], #4
 1332              		.cfi_restore 7
 1333              		.cfi_def_cfa_offset 0
 1334 0018 7047     		bx	lr
 1335              		.cfi_endproc
 1336              	.LFE46:
 1338 001a 00BF     		.section	.text.SPI_BiDirectionalLineConfig,"ax",%progbits
 1339              		.align	2
 1340              		.global	SPI_BiDirectionalLineConfig
 1341              		.thumb
 1342              		.thumb_func
 1344              	SPI_BiDirectionalLineConfig:
 1345              	.LFB47:
 722:../src/stm32f10x_spi.c **** 
 723:../src/stm32f10x_spi.c **** /**
 724:../src/stm32f10x_spi.c ****   * @brief  Selects the data transfer direction in bi-directional mode for the specified SPI.
 725:../src/stm32f10x_spi.c ****   * @param  SPIx: where x can be 1, 2 or 3 to select the SPI peripheral.
 726:../src/stm32f10x_spi.c ****   * @param  SPI_Direction: specifies the data transfer direction in bi-directional mode. 
 727:../src/stm32f10x_spi.c ****   *   This parameter can be one of the following values:
 728:../src/stm32f10x_spi.c ****   *     @arg SPI_Direction_Tx: Selects Tx transmission direction
 729:../src/stm32f10x_spi.c ****   *     @arg SPI_Direction_Rx: Selects Rx receive direction
 730:../src/stm32f10x_spi.c ****   * @retval None
 731:../src/stm32f10x_spi.c ****   */
 732:../src/stm32f10x_spi.c **** void SPI_BiDirectionalLineConfig(SPI_TypeDef* SPIx, uint16_t SPI_Direction)
 733:../src/stm32f10x_spi.c **** {
 1346              		.loc 1 733 0
 1347              		.cfi_startproc
 1348              		@ args = 0, pretend = 0, frame = 8
 1349              		@ frame_needed = 1, uses_anonymous_args = 0
 1350              		@ link register save eliminated.
 1351 0000 80B4     		push	{r7}
 1352              		.cfi_def_cfa_offset 4
 1353              		.cfi_offset 7, -4
 1354 0002 83B0     		sub	sp, sp, #12
 1355              		.cfi_def_cfa_offset 16
 1356 0004 00AF     		add	r7, sp, #0
 1357              		.cfi_def_cfa_register 7
 1358 0006 7860     		str	r0, [r7, #4]
 1359 0008 0B46     		mov	r3, r1
 1360 000a 7B80     		strh	r3, [r7, #2]	@ movhi
 734:../src/stm32f10x_spi.c ****   /* Check the parameters */
 735:../src/stm32f10x_spi.c ****   assert_param(IS_SPI_ALL_PERIPH(SPIx));
 736:../src/stm32f10x_spi.c ****   assert_param(IS_SPI_DIRECTION(SPI_Direction));
 737:../src/stm32f10x_spi.c ****   if (SPI_Direction == SPI_Direction_Tx)
 1361              		.loc 1 737 0
 1362 000c 7B88     		ldrh	r3, [r7, #2]
 1363 000e B3F5804F 		cmp	r3, #16384
 1364 0012 08D1     		bne	.L60
 738:../src/stm32f10x_spi.c ****   {
 739:../src/stm32f10x_spi.c ****     /* Set the Tx only mode */
 740:../src/stm32f10x_spi.c ****     SPIx->CR1 |= SPI_Direction_Tx;
 1365              		.loc 1 740 0
 1366 0014 7B68     		ldr	r3, [r7, #4]
 1367 0016 1B88     		ldrh	r3, [r3]	@ movhi
 1368 0018 9BB2     		uxth	r3, r3
 1369 001a 43F48043 		orr	r3, r3, #16384
 1370 001e 9AB2     		uxth	r2, r3
 1371 0020 7B68     		ldr	r3, [r7, #4]
 1372 0022 1A80     		strh	r2, [r3]	@ movhi
 1373 0024 07E0     		b	.L59
 1374              	.L60:
 741:../src/stm32f10x_spi.c ****   }
 742:../src/stm32f10x_spi.c ****   else
 743:../src/stm32f10x_spi.c ****   {
 744:../src/stm32f10x_spi.c ****     /* Set the Rx only mode */
 745:../src/stm32f10x_spi.c ****     SPIx->CR1 &= SPI_Direction_Rx;
 1375              		.loc 1 745 0
 1376 0026 7B68     		ldr	r3, [r7, #4]
 1377 0028 1B88     		ldrh	r3, [r3]	@ movhi
 1378 002a 9BB2     		uxth	r3, r3
 1379 002c 23F48043 		bic	r3, r3, #16384
 1380 0030 9AB2     		uxth	r2, r3
 1381 0032 7B68     		ldr	r3, [r7, #4]
 1382 0034 1A80     		strh	r2, [r3]	@ movhi
 1383              	.L59:
 746:../src/stm32f10x_spi.c ****   }
 747:../src/stm32f10x_spi.c **** }
 1384              		.loc 1 747 0
 1385 0036 0C37     		adds	r7, r7, #12
 1386              		.cfi_def_cfa_offset 4
 1387 0038 BD46     		mov	sp, r7
 1388              		.cfi_def_cfa_register 13
 1389              		@ sp needed
 1390 003a 5DF8047B 		ldr	r7, [sp], #4
 1391              		.cfi_restore 7
 1392              		.cfi_def_cfa_offset 0
 1393 003e 7047     		bx	lr
 1394              		.cfi_endproc
 1395              	.LFE47:
 1397              		.section	.text.SPI_I2S_GetFlagStatus,"ax",%progbits
 1398              		.align	2
 1399              		.global	SPI_I2S_GetFlagStatus
 1400              		.thumb
 1401              		.thumb_func
 1403              	SPI_I2S_GetFlagStatus:
 1404              	.LFB48:
 748:../src/stm32f10x_spi.c **** 
 749:../src/stm32f10x_spi.c **** /**
 750:../src/stm32f10x_spi.c ****   * @brief  Checks whether the specified SPI/I2S flag is set or not.
 751:../src/stm32f10x_spi.c ****   * @param  SPIx: where x can be
 752:../src/stm32f10x_spi.c ****   *   - 1, 2 or 3 in SPI mode 
 753:../src/stm32f10x_spi.c ****   *   - 2 or 3 in I2S mode
 754:../src/stm32f10x_spi.c ****   * @param  SPI_I2S_FLAG: specifies the SPI/I2S flag to check. 
 755:../src/stm32f10x_spi.c ****   *   This parameter can be one of the following values:
 756:../src/stm32f10x_spi.c ****   *     @arg SPI_I2S_FLAG_TXE: Transmit buffer empty flag.
 757:../src/stm32f10x_spi.c ****   *     @arg SPI_I2S_FLAG_RXNE: Receive buffer not empty flag.
 758:../src/stm32f10x_spi.c ****   *     @arg SPI_I2S_FLAG_BSY: Busy flag.
 759:../src/stm32f10x_spi.c ****   *     @arg SPI_I2S_FLAG_OVR: Overrun flag.
 760:../src/stm32f10x_spi.c ****   *     @arg SPI_FLAG_MODF: Mode Fault flag.
 761:../src/stm32f10x_spi.c ****   *     @arg SPI_FLAG_CRCERR: CRC Error flag.
 762:../src/stm32f10x_spi.c ****   *     @arg I2S_FLAG_UDR: Underrun Error flag.
 763:../src/stm32f10x_spi.c ****   *     @arg I2S_FLAG_CHSIDE: Channel Side flag.
 764:../src/stm32f10x_spi.c ****   * @retval The new state of SPI_I2S_FLAG (SET or RESET).
 765:../src/stm32f10x_spi.c ****   */
 766:../src/stm32f10x_spi.c **** FlagStatus SPI_I2S_GetFlagStatus(SPI_TypeDef* SPIx, uint16_t SPI_I2S_FLAG)
 767:../src/stm32f10x_spi.c **** {
 1405              		.loc 1 767 0
 1406              		.cfi_startproc
 1407              		@ args = 0, pretend = 0, frame = 16
 1408              		@ frame_needed = 1, uses_anonymous_args = 0
 1409              		@ link register save eliminated.
 1410 0000 80B4     		push	{r7}
 1411              		.cfi_def_cfa_offset 4
 1412              		.cfi_offset 7, -4
 1413 0002 85B0     		sub	sp, sp, #20
 1414              		.cfi_def_cfa_offset 24
 1415 0004 00AF     		add	r7, sp, #0
 1416              		.cfi_def_cfa_register 7
 1417 0006 7860     		str	r0, [r7, #4]
 1418 0008 0B46     		mov	r3, r1
 1419 000a 7B80     		strh	r3, [r7, #2]	@ movhi
 768:../src/stm32f10x_spi.c ****   FlagStatus bitstatus = RESET;
 1420              		.loc 1 768 0
 1421 000c 0023     		movs	r3, #0
 1422 000e FB73     		strb	r3, [r7, #15]
 769:../src/stm32f10x_spi.c ****   /* Check the parameters */
 770:../src/stm32f10x_spi.c ****   assert_param(IS_SPI_ALL_PERIPH(SPIx));
 771:../src/stm32f10x_spi.c ****   assert_param(IS_SPI_I2S_GET_FLAG(SPI_I2S_FLAG));
 772:../src/stm32f10x_spi.c ****   /* Check the status of the specified SPI/I2S flag */
 773:../src/stm32f10x_spi.c ****   if ((SPIx->SR & SPI_I2S_FLAG) != (uint16_t)RESET)
 1423              		.loc 1 773 0
 1424 0010 7B68     		ldr	r3, [r7, #4]
 1425 0012 1B89     		ldrh	r3, [r3, #8]	@ movhi
 1426 0014 9AB2     		uxth	r2, r3
 1427 0016 7B88     		ldrh	r3, [r7, #2]	@ movhi
 1428 0018 1340     		ands	r3, r3, r2
 1429 001a 9BB2     		uxth	r3, r3
 1430 001c 002B     		cmp	r3, #0
 1431 001e 02D0     		beq	.L63
 774:../src/stm32f10x_spi.c ****   {
 775:../src/stm32f10x_spi.c ****     /* SPI_I2S_FLAG is set */
 776:../src/stm32f10x_spi.c ****     bitstatus = SET;
 1432              		.loc 1 776 0
 1433 0020 0123     		movs	r3, #1
 1434 0022 FB73     		strb	r3, [r7, #15]
 1435 0024 01E0     		b	.L64
 1436              	.L63:
 777:../src/stm32f10x_spi.c ****   }
 778:../src/stm32f10x_spi.c ****   else
 779:../src/stm32f10x_spi.c ****   {
 780:../src/stm32f10x_spi.c ****     /* SPI_I2S_FLAG is reset */
 781:../src/stm32f10x_spi.c ****     bitstatus = RESET;
 1437              		.loc 1 781 0
 1438 0026 0023     		movs	r3, #0
 1439 0028 FB73     		strb	r3, [r7, #15]
 1440              	.L64:
 782:../src/stm32f10x_spi.c ****   }
 783:../src/stm32f10x_spi.c ****   /* Return the SPI_I2S_FLAG status */
 784:../src/stm32f10x_spi.c ****   return  bitstatus;
 1441              		.loc 1 784 0
 1442 002a FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 785:../src/stm32f10x_spi.c **** }
 1443              		.loc 1 785 0
 1444 002c 1846     		mov	r0, r3
 1445 002e 1437     		adds	r7, r7, #20
 1446              		.cfi_def_cfa_offset 4
 1447 0030 BD46     		mov	sp, r7
 1448              		.cfi_def_cfa_register 13
 1449              		@ sp needed
 1450 0032 5DF8047B 		ldr	r7, [sp], #4
 1451              		.cfi_restore 7
 1452              		.cfi_def_cfa_offset 0
 1453 0036 7047     		bx	lr
 1454              		.cfi_endproc
 1455              	.LFE48:
 1457              		.section	.text.SPI_I2S_ClearFlag,"ax",%progbits
 1458              		.align	2
 1459              		.global	SPI_I2S_ClearFlag
 1460              		.thumb
 1461              		.thumb_func
 1463              	SPI_I2S_ClearFlag:
 1464              	.LFB49:
 786:../src/stm32f10x_spi.c **** 
 787:../src/stm32f10x_spi.c **** /**
 788:../src/stm32f10x_spi.c ****   * @brief  Clears the SPIx CRC Error (CRCERR) flag.
 789:../src/stm32f10x_spi.c ****   * @param  SPIx: where x can be
 790:../src/stm32f10x_spi.c ****   *   - 1, 2 or 3 in SPI mode 
 791:../src/stm32f10x_spi.c ****   * @param  SPI_I2S_FLAG: specifies the SPI flag to clear. 
 792:../src/stm32f10x_spi.c ****   *   This function clears only CRCERR flag.
 793:../src/stm32f10x_spi.c ****   * @note
 794:../src/stm32f10x_spi.c ****   *   - OVR (OverRun error) flag is cleared by software sequence: a read 
 795:../src/stm32f10x_spi.c ****   *     operation to SPI_DR register (SPI_I2S_ReceiveData()) followed by a read 
 796:../src/stm32f10x_spi.c ****   *     operation to SPI_SR register (SPI_I2S_GetFlagStatus()).
 797:../src/stm32f10x_spi.c ****   *   - UDR (UnderRun error) flag is cleared by a read operation to 
 798:../src/stm32f10x_spi.c ****   *     SPI_SR register (SPI_I2S_GetFlagStatus()).
 799:../src/stm32f10x_spi.c ****   *   - MODF (Mode Fault) flag is cleared by software sequence: a read/write 
 800:../src/stm32f10x_spi.c ****   *     operation to SPI_SR register (SPI_I2S_GetFlagStatus()) followed by a 
 801:../src/stm32f10x_spi.c ****   *     write operation to SPI_CR1 register (SPI_Cmd() to enable the SPI).
 802:../src/stm32f10x_spi.c ****   * @retval None
 803:../src/stm32f10x_spi.c ****   */
 804:../src/stm32f10x_spi.c **** void SPI_I2S_ClearFlag(SPI_TypeDef* SPIx, uint16_t SPI_I2S_FLAG)
 805:../src/stm32f10x_spi.c **** {
 1465              		.loc 1 805 0
 1466              		.cfi_startproc
 1467              		@ args = 0, pretend = 0, frame = 8
 1468              		@ frame_needed = 1, uses_anonymous_args = 0
 1469              		@ link register save eliminated.
 1470 0000 80B4     		push	{r7}
 1471              		.cfi_def_cfa_offset 4
 1472              		.cfi_offset 7, -4
 1473 0002 83B0     		sub	sp, sp, #12
 1474              		.cfi_def_cfa_offset 16
 1475 0004 00AF     		add	r7, sp, #0
 1476              		.cfi_def_cfa_register 7
 1477 0006 7860     		str	r0, [r7, #4]
 1478 0008 0B46     		mov	r3, r1
 1479 000a 7B80     		strh	r3, [r7, #2]	@ movhi
 806:../src/stm32f10x_spi.c ****   /* Check the parameters */
 807:../src/stm32f10x_spi.c ****   assert_param(IS_SPI_ALL_PERIPH(SPIx));
 808:../src/stm32f10x_spi.c ****   assert_param(IS_SPI_I2S_CLEAR_FLAG(SPI_I2S_FLAG));
 809:../src/stm32f10x_spi.c ****     
 810:../src/stm32f10x_spi.c ****     /* Clear the selected SPI CRC Error (CRCERR) flag */
 811:../src/stm32f10x_spi.c ****     SPIx->SR = (uint16_t)~SPI_I2S_FLAG;
 1480              		.loc 1 811 0
 1481 000c 7B88     		ldrh	r3, [r7, #2]	@ movhi
 1482 000e DB43     		mvns	r3, r3
 1483 0010 9AB2     		uxth	r2, r3
 1484 0012 7B68     		ldr	r3, [r7, #4]
 1485 0014 1A81     		strh	r2, [r3, #8]	@ movhi
 812:../src/stm32f10x_spi.c **** }
 1486              		.loc 1 812 0
 1487 0016 0C37     		adds	r7, r7, #12
 1488              		.cfi_def_cfa_offset 4
 1489 0018 BD46     		mov	sp, r7
 1490              		.cfi_def_cfa_register 13
 1491              		@ sp needed
 1492 001a 5DF8047B 		ldr	r7, [sp], #4
 1493              		.cfi_restore 7
 1494              		.cfi_def_cfa_offset 0
 1495 001e 7047     		bx	lr
 1496              		.cfi_endproc
 1497              	.LFE49:
 1499              		.section	.text.SPI_I2S_GetITStatus,"ax",%progbits
 1500              		.align	2
 1501              		.global	SPI_I2S_GetITStatus
 1502              		.thumb
 1503              		.thumb_func
 1505              	SPI_I2S_GetITStatus:
 1506              	.LFB50:
 813:../src/stm32f10x_spi.c **** 
 814:../src/stm32f10x_spi.c **** /**
 815:../src/stm32f10x_spi.c ****   * @brief  Checks whether the specified SPI/I2S interrupt has occurred or not.
 816:../src/stm32f10x_spi.c ****   * @param  SPIx: where x can be
 817:../src/stm32f10x_spi.c ****   *   - 1, 2 or 3 in SPI mode 
 818:../src/stm32f10x_spi.c ****   *   - 2 or 3 in I2S mode
 819:../src/stm32f10x_spi.c ****   * @param  SPI_I2S_IT: specifies the SPI/I2S interrupt source to check. 
 820:../src/stm32f10x_spi.c ****   *   This parameter can be one of the following values:
 821:../src/stm32f10x_spi.c ****   *     @arg SPI_I2S_IT_TXE: Transmit buffer empty interrupt.
 822:../src/stm32f10x_spi.c ****   *     @arg SPI_I2S_IT_RXNE: Receive buffer not empty interrupt.
 823:../src/stm32f10x_spi.c ****   *     @arg SPI_I2S_IT_OVR: Overrun interrupt.
 824:../src/stm32f10x_spi.c ****   *     @arg SPI_IT_MODF: Mode Fault interrupt.
 825:../src/stm32f10x_spi.c ****   *     @arg SPI_IT_CRCERR: CRC Error interrupt.
 826:../src/stm32f10x_spi.c ****   *     @arg I2S_IT_UDR: Underrun Error interrupt.
 827:../src/stm32f10x_spi.c ****   * @retval The new state of SPI_I2S_IT (SET or RESET).
 828:../src/stm32f10x_spi.c ****   */
 829:../src/stm32f10x_spi.c **** ITStatus SPI_I2S_GetITStatus(SPI_TypeDef* SPIx, uint8_t SPI_I2S_IT)
 830:../src/stm32f10x_spi.c **** {
 1507              		.loc 1 830 0
 1508              		.cfi_startproc
 1509              		@ args = 0, pretend = 0, frame = 16
 1510              		@ frame_needed = 1, uses_anonymous_args = 0
 1511              		@ link register save eliminated.
 1512 0000 80B4     		push	{r7}
 1513              		.cfi_def_cfa_offset 4
 1514              		.cfi_offset 7, -4
 1515 0002 85B0     		sub	sp, sp, #20
 1516              		.cfi_def_cfa_offset 24
 1517 0004 00AF     		add	r7, sp, #0
 1518              		.cfi_def_cfa_register 7
 1519 0006 7860     		str	r0, [r7, #4]
 1520 0008 0B46     		mov	r3, r1
 1521 000a FB70     		strb	r3, [r7, #3]
 831:../src/stm32f10x_spi.c ****   ITStatus bitstatus = RESET;
 1522              		.loc 1 831 0
 1523 000c 0023     		movs	r3, #0
 1524 000e FB73     		strb	r3, [r7, #15]
 832:../src/stm32f10x_spi.c ****   uint16_t itpos = 0, itmask = 0, enablestatus = 0;
 1525              		.loc 1 832 0
 1526 0010 0023     		movs	r3, #0
 1527 0012 BB81     		strh	r3, [r7, #12]	@ movhi
 1528 0014 0023     		movs	r3, #0
 1529 0016 7B81     		strh	r3, [r7, #10]	@ movhi
 1530 0018 0023     		movs	r3, #0
 1531 001a 3B81     		strh	r3, [r7, #8]	@ movhi
 833:../src/stm32f10x_spi.c **** 
 834:../src/stm32f10x_spi.c ****   /* Check the parameters */
 835:../src/stm32f10x_spi.c ****   assert_param(IS_SPI_ALL_PERIPH(SPIx));
 836:../src/stm32f10x_spi.c ****   assert_param(IS_SPI_I2S_GET_IT(SPI_I2S_IT));
 837:../src/stm32f10x_spi.c **** 
 838:../src/stm32f10x_spi.c ****   /* Get the SPI/I2S IT index */
 839:../src/stm32f10x_spi.c ****   itpos = 0x01 << (SPI_I2S_IT & 0x0F);
 1532              		.loc 1 839 0
 1533 001c FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1534 001e 03F00F03 		and	r3, r3, #15
 1535 0022 0122     		movs	r2, #1
 1536 0024 02FA03F3 		lsl	r3, r2, r3
 1537 0028 BB81     		strh	r3, [r7, #12]	@ movhi
 840:../src/stm32f10x_spi.c **** 
 841:../src/stm32f10x_spi.c ****   /* Get the SPI/I2S IT mask */
 842:../src/stm32f10x_spi.c ****   itmask = SPI_I2S_IT >> 4;
 1538              		.loc 1 842 0
 1539 002a FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1540 002c 1B09     		lsrs	r3, r3, #4
 1541 002e DBB2     		uxtb	r3, r3
 1542 0030 7B81     		strh	r3, [r7, #10]	@ movhi
 843:../src/stm32f10x_spi.c **** 
 844:../src/stm32f10x_spi.c ****   /* Set the IT mask */
 845:../src/stm32f10x_spi.c ****   itmask = 0x01 << itmask;
 1543              		.loc 1 845 0
 1544 0032 7B89     		ldrh	r3, [r7, #10]
 1545 0034 0122     		movs	r2, #1
 1546 0036 02FA03F3 		lsl	r3, r2, r3
 1547 003a 7B81     		strh	r3, [r7, #10]	@ movhi
 846:../src/stm32f10x_spi.c **** 
 847:../src/stm32f10x_spi.c ****   /* Get the SPI_I2S_IT enable bit status */
 848:../src/stm32f10x_spi.c ****   enablestatus = (SPIx->CR2 & itmask) ;
 1548              		.loc 1 848 0
 1549 003c 7B68     		ldr	r3, [r7, #4]
 1550 003e 9B88     		ldrh	r3, [r3, #4]	@ movhi
 1551 0040 9AB2     		uxth	r2, r3
 1552 0042 7B89     		ldrh	r3, [r7, #10]	@ movhi
 1553 0044 1340     		ands	r3, r3, r2
 1554 0046 3B81     		strh	r3, [r7, #8]	@ movhi
 849:../src/stm32f10x_spi.c **** 
 850:../src/stm32f10x_spi.c ****   /* Check the status of the specified SPI/I2S interrupt */
 851:../src/stm32f10x_spi.c ****   if (((SPIx->SR & itpos) != (uint16_t)RESET) && enablestatus)
 1555              		.loc 1 851 0
 1556 0048 7B68     		ldr	r3, [r7, #4]
 1557 004a 1B89     		ldrh	r3, [r3, #8]	@ movhi
 1558 004c 9AB2     		uxth	r2, r3
 1559 004e BB89     		ldrh	r3, [r7, #12]	@ movhi
 1560 0050 1340     		ands	r3, r3, r2
 1561 0052 9BB2     		uxth	r3, r3
 1562 0054 002B     		cmp	r3, #0
 1563 0056 05D0     		beq	.L68
 1564              		.loc 1 851 0 is_stmt 0 discriminator 1
 1565 0058 3B89     		ldrh	r3, [r7, #8]
 1566 005a 002B     		cmp	r3, #0
 1567 005c 02D0     		beq	.L68
 852:../src/stm32f10x_spi.c ****   {
 853:../src/stm32f10x_spi.c ****     /* SPI_I2S_IT is set */
 854:../src/stm32f10x_spi.c ****     bitstatus = SET;
 1568              		.loc 1 854 0 is_stmt 1
 1569 005e 0123     		movs	r3, #1
 1570 0060 FB73     		strb	r3, [r7, #15]
 1571 0062 01E0     		b	.L69
 1572              	.L68:
 855:../src/stm32f10x_spi.c ****   }
 856:../src/stm32f10x_spi.c ****   else
 857:../src/stm32f10x_spi.c ****   {
 858:../src/stm32f10x_spi.c ****     /* SPI_I2S_IT is reset */
 859:../src/stm32f10x_spi.c ****     bitstatus = RESET;
 1573              		.loc 1 859 0
 1574 0064 0023     		movs	r3, #0
 1575 0066 FB73     		strb	r3, [r7, #15]
 1576              	.L69:
 860:../src/stm32f10x_spi.c ****   }
 861:../src/stm32f10x_spi.c ****   /* Return the SPI_I2S_IT status */
 862:../src/stm32f10x_spi.c ****   return bitstatus;
 1577              		.loc 1 862 0
 1578 0068 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 863:../src/stm32f10x_spi.c **** }
 1579              		.loc 1 863 0
 1580 006a 1846     		mov	r0, r3
 1581 006c 1437     		adds	r7, r7, #20
 1582              		.cfi_def_cfa_offset 4
 1583 006e BD46     		mov	sp, r7
 1584              		.cfi_def_cfa_register 13
 1585              		@ sp needed
 1586 0070 5DF8047B 		ldr	r7, [sp], #4
 1587              		.cfi_restore 7
 1588              		.cfi_def_cfa_offset 0
 1589 0074 7047     		bx	lr
 1590              		.cfi_endproc
 1591              	.LFE50:
 1593 0076 00BF     		.section	.text.SPI_I2S_ClearITPendingBit,"ax",%progbits
 1594              		.align	2
 1595              		.global	SPI_I2S_ClearITPendingBit
 1596              		.thumb
 1597              		.thumb_func
 1599              	SPI_I2S_ClearITPendingBit:
 1600              	.LFB51:
 864:../src/stm32f10x_spi.c **** 
 865:../src/stm32f10x_spi.c **** /**
 866:../src/stm32f10x_spi.c ****   * @brief  Clears the SPIx CRC Error (CRCERR) interrupt pending bit.
 867:../src/stm32f10x_spi.c ****   * @param  SPIx: where x can be
 868:../src/stm32f10x_spi.c ****   *   - 1, 2 or 3 in SPI mode 
 869:../src/stm32f10x_spi.c ****   * @param  SPI_I2S_IT: specifies the SPI interrupt pending bit to clear.
 870:../src/stm32f10x_spi.c ****   *   This function clears only CRCERR interrupt pending bit.   
 871:../src/stm32f10x_spi.c ****   * @note
 872:../src/stm32f10x_spi.c ****   *   - OVR (OverRun Error) interrupt pending bit is cleared by software 
 873:../src/stm32f10x_spi.c ****   *     sequence: a read operation to SPI_DR register (SPI_I2S_ReceiveData()) 
 874:../src/stm32f10x_spi.c ****   *     followed by a read operation to SPI_SR register (SPI_I2S_GetITStatus()).
 875:../src/stm32f10x_spi.c ****   *   - UDR (UnderRun Error) interrupt pending bit is cleared by a read 
 876:../src/stm32f10x_spi.c ****   *     operation to SPI_SR register (SPI_I2S_GetITStatus()).
 877:../src/stm32f10x_spi.c ****   *   - MODF (Mode Fault) interrupt pending bit is cleared by software sequence:
 878:../src/stm32f10x_spi.c ****   *     a read/write operation to SPI_SR register (SPI_I2S_GetITStatus()) 
 879:../src/stm32f10x_spi.c ****   *     followed by a write operation to SPI_CR1 register (SPI_Cmd() to enable 
 880:../src/stm32f10x_spi.c ****   *     the SPI).
 881:../src/stm32f10x_spi.c ****   * @retval None
 882:../src/stm32f10x_spi.c ****   */
 883:../src/stm32f10x_spi.c **** void SPI_I2S_ClearITPendingBit(SPI_TypeDef* SPIx, uint8_t SPI_I2S_IT)
 884:../src/stm32f10x_spi.c **** {
 1601              		.loc 1 884 0
 1602              		.cfi_startproc
 1603              		@ args = 0, pretend = 0, frame = 16
 1604              		@ frame_needed = 1, uses_anonymous_args = 0
 1605              		@ link register save eliminated.
 1606 0000 80B4     		push	{r7}
 1607              		.cfi_def_cfa_offset 4
 1608              		.cfi_offset 7, -4
 1609 0002 85B0     		sub	sp, sp, #20
 1610              		.cfi_def_cfa_offset 24
 1611 0004 00AF     		add	r7, sp, #0
 1612              		.cfi_def_cfa_register 7
 1613 0006 7860     		str	r0, [r7, #4]
 1614 0008 0B46     		mov	r3, r1
 1615 000a FB70     		strb	r3, [r7, #3]
 885:../src/stm32f10x_spi.c ****   uint16_t itpos = 0;
 1616              		.loc 1 885 0
 1617 000c 0023     		movs	r3, #0
 1618 000e FB81     		strh	r3, [r7, #14]	@ movhi
 886:../src/stm32f10x_spi.c ****   /* Check the parameters */
 887:../src/stm32f10x_spi.c ****   assert_param(IS_SPI_ALL_PERIPH(SPIx));
 888:../src/stm32f10x_spi.c ****   assert_param(IS_SPI_I2S_CLEAR_IT(SPI_I2S_IT));
 889:../src/stm32f10x_spi.c **** 
 890:../src/stm32f10x_spi.c ****   /* Get the SPI IT index */
 891:../src/stm32f10x_spi.c ****   itpos = 0x01 << (SPI_I2S_IT & 0x0F);
 1619              		.loc 1 891 0
 1620 0010 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1621 0012 03F00F03 		and	r3, r3, #15
 1622 0016 0122     		movs	r2, #1
 1623 0018 02FA03F3 		lsl	r3, r2, r3
 1624 001c FB81     		strh	r3, [r7, #14]	@ movhi
 892:../src/stm32f10x_spi.c **** 
 893:../src/stm32f10x_spi.c ****   /* Clear the selected SPI CRC Error (CRCERR) interrupt pending bit */
 894:../src/stm32f10x_spi.c ****   SPIx->SR = (uint16_t)~itpos;
 1625              		.loc 1 894 0
 1626 001e FB89     		ldrh	r3, [r7, #14]	@ movhi
 1627 0020 DB43     		mvns	r3, r3
 1628 0022 9AB2     		uxth	r2, r3
 1629 0024 7B68     		ldr	r3, [r7, #4]
 1630 0026 1A81     		strh	r2, [r3, #8]	@ movhi
 895:../src/stm32f10x_spi.c **** }
 1631              		.loc 1 895 0
 1632 0028 1437     		adds	r7, r7, #20
 1633              		.cfi_def_cfa_offset 4
 1634 002a BD46     		mov	sp, r7
 1635              		.cfi_def_cfa_register 13
 1636              		@ sp needed
 1637 002c 5DF8047B 		ldr	r7, [sp], #4
 1638              		.cfi_restore 7
 1639              		.cfi_def_cfa_offset 0
 1640 0030 7047     		bx	lr
 1641              		.cfi_endproc
 1642              	.LFE51:
 1644 0032 00BF     		.text
 1645              	.Letext0:
 1646              		.file 2 "f:\\eclipse\\gcc\\arm-none-eabi\\include\\machine\\_default_types.h"
 1647              		.file 3 "f:\\eclipse\\gcc\\arm-none-eabi\\include\\sys\\_stdint.h"
 1648              		.file 4 "F:\\ARM\\STM32 Eclipse Firmware\\STM32F107_Template\\cmsis/stm32f10x.h"
 1649              		.file 5 "F:\\ARM\\STM32 Eclipse Firmware\\STM32F107_Template\\inc/stm32f10x_rcc.h"
 1650              		.file 6 "F:\\ARM\\STM32 Eclipse Firmware\\STM32F107_Template\\inc/stm32f10x_spi.h"
 1651              		.file 7 "F:\\ARM\\STM32 Eclipse Firmware\\STM32F107_Template\\cmsis/core_cm3.h"
DEFINED SYMBOLS
                            *ABS*:00000000 stm32f10x_spi.c
C:\Users\MISAKA~1.MIS\AppData\Local\Temp\cc3llInc.s:19     .text.SPI_I2S_DeInit:00000000 $t
C:\Users\MISAKA~1.MIS\AppData\Local\Temp\cc3llInc.s:24     .text.SPI_I2S_DeInit:00000000 SPI_I2S_DeInit
C:\Users\MISAKA~1.MIS\AppData\Local\Temp\cc3llInc.s:94     .text.SPI_I2S_DeInit:00000068 $d
C:\Users\MISAKA~1.MIS\AppData\Local\Temp\cc3llInc.s:101    .text.SPI_Init:00000000 $t
C:\Users\MISAKA~1.MIS\AppData\Local\Temp\cc3llInc.s:106    .text.SPI_Init:00000000 SPI_Init
C:\Users\MISAKA~1.MIS\AppData\Local\Temp\cc3llInc.s:210    .text.I2S_Init:00000000 $t
C:\Users\MISAKA~1.MIS\AppData\Local\Temp\cc3llInc.s:215    .text.I2S_Init:00000000 I2S_Init
C:\Users\MISAKA~1.MIS\AppData\Local\Temp\cc3llInc.s:492    .text.I2S_Init:000001b4 $d
C:\Users\MISAKA~1.MIS\AppData\Local\Temp\cc3llInc.s:500    .text.SPI_StructInit:00000000 $t
C:\Users\MISAKA~1.MIS\AppData\Local\Temp\cc3llInc.s:505    .text.SPI_StructInit:00000000 SPI_StructInit
C:\Users\MISAKA~1.MIS\AppData\Local\Temp\cc3llInc.s:570    .text.I2S_StructInit:00000000 $t
C:\Users\MISAKA~1.MIS\AppData\Local\Temp\cc3llInc.s:575    .text.I2S_StructInit:00000000 I2S_StructInit
C:\Users\MISAKA~1.MIS\AppData\Local\Temp\cc3llInc.s:628    .text.SPI_Cmd:00000000 $t
C:\Users\MISAKA~1.MIS\AppData\Local\Temp\cc3llInc.s:633    .text.SPI_Cmd:00000000 SPI_Cmd
C:\Users\MISAKA~1.MIS\AppData\Local\Temp\cc3llInc.s:687    .text.I2S_Cmd:00000000 $t
C:\Users\MISAKA~1.MIS\AppData\Local\Temp\cc3llInc.s:692    .text.I2S_Cmd:00000000 I2S_Cmd
C:\Users\MISAKA~1.MIS\AppData\Local\Temp\cc3llInc.s:746    .text.SPI_I2S_ITConfig:00000000 $t
C:\Users\MISAKA~1.MIS\AppData\Local\Temp\cc3llInc.s:751    .text.SPI_I2S_ITConfig:00000000 SPI_I2S_ITConfig
C:\Users\MISAKA~1.MIS\AppData\Local\Temp\cc3llInc.s:826    .text.SPI_I2S_DMACmd:00000000 $t
C:\Users\MISAKA~1.MIS\AppData\Local\Temp\cc3llInc.s:831    .text.SPI_I2S_DMACmd:00000000 SPI_I2S_DMACmd
C:\Users\MISAKA~1.MIS\AppData\Local\Temp\cc3llInc.s:891    .text.SPI_I2S_SendData:00000000 $t
C:\Users\MISAKA~1.MIS\AppData\Local\Temp\cc3llInc.s:896    .text.SPI_I2S_SendData:00000000 SPI_I2S_SendData
C:\Users\MISAKA~1.MIS\AppData\Local\Temp\cc3llInc.s:931    .text.SPI_I2S_ReceiveData:00000000 $t
C:\Users\MISAKA~1.MIS\AppData\Local\Temp\cc3llInc.s:936    .text.SPI_I2S_ReceiveData:00000000 SPI_I2S_ReceiveData
C:\Users\MISAKA~1.MIS\AppData\Local\Temp\cc3llInc.s:970    .text.SPI_NSSInternalSoftwareConfig:00000000 $t
C:\Users\MISAKA~1.MIS\AppData\Local\Temp\cc3llInc.s:975    .text.SPI_NSSInternalSoftwareConfig:00000000 SPI_NSSInternalSoftwareConfig
C:\Users\MISAKA~1.MIS\AppData\Local\Temp\cc3llInc.s:1030   .text.SPI_SSOutputCmd:00000000 $t
C:\Users\MISAKA~1.MIS\AppData\Local\Temp\cc3llInc.s:1035   .text.SPI_SSOutputCmd:00000000 SPI_SSOutputCmd
C:\Users\MISAKA~1.MIS\AppData\Local\Temp\cc3llInc.s:1089   .text.SPI_DataSizeConfig:00000000 $t
C:\Users\MISAKA~1.MIS\AppData\Local\Temp\cc3llInc.s:1094   .text.SPI_DataSizeConfig:00000000 SPI_DataSizeConfig
C:\Users\MISAKA~1.MIS\AppData\Local\Temp\cc3llInc.s:1142   .text.SPI_TransmitCRC:00000000 $t
C:\Users\MISAKA~1.MIS\AppData\Local\Temp\cc3llInc.s:1147   .text.SPI_TransmitCRC:00000000 SPI_TransmitCRC
C:\Users\MISAKA~1.MIS\AppData\Local\Temp\cc3llInc.s:1184   .text.SPI_CalculateCRC:00000000 $t
C:\Users\MISAKA~1.MIS\AppData\Local\Temp\cc3llInc.s:1189   .text.SPI_CalculateCRC:00000000 SPI_CalculateCRC
C:\Users\MISAKA~1.MIS\AppData\Local\Temp\cc3llInc.s:1243   .text.SPI_GetCRC:00000000 $t
C:\Users\MISAKA~1.MIS\AppData\Local\Temp\cc3llInc.s:1248   .text.SPI_GetCRC:00000000 SPI_GetCRC
C:\Users\MISAKA~1.MIS\AppData\Local\Temp\cc3llInc.s:1300   .text.SPI_GetCRCPolynomial:00000000 $t
C:\Users\MISAKA~1.MIS\AppData\Local\Temp\cc3llInc.s:1305   .text.SPI_GetCRCPolynomial:00000000 SPI_GetCRCPolynomial
C:\Users\MISAKA~1.MIS\AppData\Local\Temp\cc3llInc.s:1339   .text.SPI_BiDirectionalLineConfig:00000000 $t
C:\Users\MISAKA~1.MIS\AppData\Local\Temp\cc3llInc.s:1344   .text.SPI_BiDirectionalLineConfig:00000000 SPI_BiDirectionalLineConfig
C:\Users\MISAKA~1.MIS\AppData\Local\Temp\cc3llInc.s:1398   .text.SPI_I2S_GetFlagStatus:00000000 $t
C:\Users\MISAKA~1.MIS\AppData\Local\Temp\cc3llInc.s:1403   .text.SPI_I2S_GetFlagStatus:00000000 SPI_I2S_GetFlagStatus
C:\Users\MISAKA~1.MIS\AppData\Local\Temp\cc3llInc.s:1458   .text.SPI_I2S_ClearFlag:00000000 $t
C:\Users\MISAKA~1.MIS\AppData\Local\Temp\cc3llInc.s:1463   .text.SPI_I2S_ClearFlag:00000000 SPI_I2S_ClearFlag
C:\Users\MISAKA~1.MIS\AppData\Local\Temp\cc3llInc.s:1500   .text.SPI_I2S_GetITStatus:00000000 $t
C:\Users\MISAKA~1.MIS\AppData\Local\Temp\cc3llInc.s:1505   .text.SPI_I2S_GetITStatus:00000000 SPI_I2S_GetITStatus
C:\Users\MISAKA~1.MIS\AppData\Local\Temp\cc3llInc.s:1594   .text.SPI_I2S_ClearITPendingBit:00000000 $t
C:\Users\MISAKA~1.MIS\AppData\Local\Temp\cc3llInc.s:1599   .text.SPI_I2S_ClearITPendingBit:00000000 SPI_I2S_ClearITPendingBit
                     .debug_frame:00000010 $d
                           .group:00000000 wm4.0.2d80f1b5ce3c69d13e258577ddf29668
                           .group:00000000 wm4.stm32f10x.h.51.6e18fa0f6016a7ea66d7cfe7c3be3cd1
                           .group:00000000 wm4.core_cm3.h.25.d35e9a9b04ec4aaebae9bf79fff061f9
                           .group:00000000 wm4.features.h.22.2e382148a0560adabf236cddd4e880f4
                           .group:00000000 wm4._default_types.h.15.933e8edd27a65e0b69af4a865eb623d2
                           .group:00000000 wm4._intsup.h.10.35a45952db64d30146faa63a55c20c1c
                           .group:00000000 wm4._stdint.h.10.f76354baea1c7088202064e6f3d4f5e3
                           .group:00000000 wm4.stdint.h.23.373a9d32a9e4c2e88fd347156532d281
                           .group:00000000 wm4.core_cm3.h.113.b286929a54d33b4c8909a7132437b244
                           .group:00000000 wm4.stm32f10x.h.522.34c9721dbd76a587b38991fd58e2fdab
                           .group:00000000 wm4.stm32f10x_bkp.h.25.4622919f1e30efdad5eb44e12edd5513
                           .group:00000000 wm4.stm32f10x_flash.h.25.4be61fcb02863962a1e006449d310650
                           .group:00000000 wm4.stm32f10x_gpio.h.25.80c981af0e637567395034c576cfb3ce
                           .group:00000000 wm4.stm32f10x_pwr.h.25.37ef75009f751ef5fe27910e0bf00a62
                           .group:00000000 wm4.stm32f10x_rcc.h.25.cb32a32bef653f9e9414120b411eb1bf
                           .group:00000000 wm4.stm32f10x_tim.h.25.21c6ec062f1e74898cb96a57da276fec
                           .group:00000000 wm4.misc.h.25.068e106f368fa5369a681ef57c106f4b
                           .group:00000000 wm4.stm32f10x.h.8304.f7d8ad90959e99679b3257267c3aadfe
                           .group:00000000 wm4.stm32f10x_spi.h.117.5885fcde8f507e1811a76c071013c0c7

UNDEFINED SYMBOLS
RCC_APB2PeriphResetCmd
RCC_APB1PeriphResetCmd
RCC_GetClocksFreq
