   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 6
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.file	"stm32f10x_dma.c"
  15              		.text
  16              	.Ltext0:
  17              		.cfi_sections	.debug_frame
  18              		.section	.text.DMA_DeInit,"ax",%progbits
  19              		.align	2
  20              		.global	DMA_DeInit
  21              		.thumb
  22              		.thumb_func
  24              	DMA_DeInit:
  25              	.LFB29:
  26              		.file 1 "../src/stm32f10x_dma.c"
   1:../src/stm32f10x_dma.c **** /**
   2:../src/stm32f10x_dma.c ****   ******************************************************************************
   3:../src/stm32f10x_dma.c ****   * @file    stm32f10x_dma.c
   4:../src/stm32f10x_dma.c ****   * @author  MCD Application Team
   5:../src/stm32f10x_dma.c ****   * @version V3.5.0
   6:../src/stm32f10x_dma.c ****   * @date    11-March-2011
   7:../src/stm32f10x_dma.c ****   * @brief   This file provides all the DMA firmware functions.
   8:../src/stm32f10x_dma.c ****   ******************************************************************************
   9:../src/stm32f10x_dma.c ****   * @attention
  10:../src/stm32f10x_dma.c ****   *
  11:../src/stm32f10x_dma.c ****   * THE PRESENT FIRMWARE WHICH IS FOR GUIDANCE ONLY AIMS AT PROVIDING CUSTOMERS
  12:../src/stm32f10x_dma.c ****   * WITH CODING INFORMATION REGARDING THEIR PRODUCTS IN ORDER FOR THEM TO SAVE
  13:../src/stm32f10x_dma.c ****   * TIME. AS A RESULT, STMICROELECTRONICS SHALL NOT BE HELD LIABLE FOR ANY
  14:../src/stm32f10x_dma.c ****   * DIRECT, INDIRECT OR CONSEQUENTIAL DAMAGES WITH RESPECT TO ANY CLAIMS ARISING
  15:../src/stm32f10x_dma.c ****   * FROM THE CONTENT OF SUCH FIRMWARE AND/OR THE USE MADE BY CUSTOMERS OF THE
  16:../src/stm32f10x_dma.c ****   * CODING INFORMATION CONTAINED HEREIN IN CONNECTION WITH THEIR PRODUCTS.
  17:../src/stm32f10x_dma.c ****   *
  18:../src/stm32f10x_dma.c ****   * <h2><center>&copy; COPYRIGHT 2011 STMicroelectronics</center></h2>
  19:../src/stm32f10x_dma.c ****   ******************************************************************************
  20:../src/stm32f10x_dma.c ****   */
  21:../src/stm32f10x_dma.c **** 
  22:../src/stm32f10x_dma.c **** /* Includes ------------------------------------------------------------------*/
  23:../src/stm32f10x_dma.c **** #include "stm32f10x_dma.h"
  24:../src/stm32f10x_dma.c **** #include "stm32f10x_rcc.h"
  25:../src/stm32f10x_dma.c **** 
  26:../src/stm32f10x_dma.c **** /** @addtogroup STM32F10x_StdPeriph_Driver
  27:../src/stm32f10x_dma.c ****   * @{
  28:../src/stm32f10x_dma.c ****   */
  29:../src/stm32f10x_dma.c **** 
  30:../src/stm32f10x_dma.c **** /** @defgroup DMA 
  31:../src/stm32f10x_dma.c ****   * @brief DMA driver modules
  32:../src/stm32f10x_dma.c ****   * @{
  33:../src/stm32f10x_dma.c ****   */ 
  34:../src/stm32f10x_dma.c **** 
  35:../src/stm32f10x_dma.c **** /** @defgroup DMA_Private_TypesDefinitions
  36:../src/stm32f10x_dma.c ****   * @{
  37:../src/stm32f10x_dma.c ****   */ 
  38:../src/stm32f10x_dma.c **** /**
  39:../src/stm32f10x_dma.c ****   * @}
  40:../src/stm32f10x_dma.c ****   */
  41:../src/stm32f10x_dma.c **** 
  42:../src/stm32f10x_dma.c **** /** @defgroup DMA_Private_Defines
  43:../src/stm32f10x_dma.c ****   * @{
  44:../src/stm32f10x_dma.c ****   */
  45:../src/stm32f10x_dma.c **** 
  46:../src/stm32f10x_dma.c **** 
  47:../src/stm32f10x_dma.c **** /* DMA1 Channelx interrupt pending bit masks */
  48:../src/stm32f10x_dma.c **** #define DMA1_Channel1_IT_Mask    ((uint32_t)(DMA_ISR_GIF1 | DMA_ISR_TCIF1 | DMA_ISR_HTIF1 | DMA_ISR
  49:../src/stm32f10x_dma.c **** #define DMA1_Channel2_IT_Mask    ((uint32_t)(DMA_ISR_GIF2 | DMA_ISR_TCIF2 | DMA_ISR_HTIF2 | DMA_ISR
  50:../src/stm32f10x_dma.c **** #define DMA1_Channel3_IT_Mask    ((uint32_t)(DMA_ISR_GIF3 | DMA_ISR_TCIF3 | DMA_ISR_HTIF3 | DMA_ISR
  51:../src/stm32f10x_dma.c **** #define DMA1_Channel4_IT_Mask    ((uint32_t)(DMA_ISR_GIF4 | DMA_ISR_TCIF4 | DMA_ISR_HTIF4 | DMA_ISR
  52:../src/stm32f10x_dma.c **** #define DMA1_Channel5_IT_Mask    ((uint32_t)(DMA_ISR_GIF5 | DMA_ISR_TCIF5 | DMA_ISR_HTIF5 | DMA_ISR
  53:../src/stm32f10x_dma.c **** #define DMA1_Channel6_IT_Mask    ((uint32_t)(DMA_ISR_GIF6 | DMA_ISR_TCIF6 | DMA_ISR_HTIF6 | DMA_ISR
  54:../src/stm32f10x_dma.c **** #define DMA1_Channel7_IT_Mask    ((uint32_t)(DMA_ISR_GIF7 | DMA_ISR_TCIF7 | DMA_ISR_HTIF7 | DMA_ISR
  55:../src/stm32f10x_dma.c **** 
  56:../src/stm32f10x_dma.c **** /* DMA2 Channelx interrupt pending bit masks */
  57:../src/stm32f10x_dma.c **** #define DMA2_Channel1_IT_Mask    ((uint32_t)(DMA_ISR_GIF1 | DMA_ISR_TCIF1 | DMA_ISR_HTIF1 | DMA_ISR
  58:../src/stm32f10x_dma.c **** #define DMA2_Channel2_IT_Mask    ((uint32_t)(DMA_ISR_GIF2 | DMA_ISR_TCIF2 | DMA_ISR_HTIF2 | DMA_ISR
  59:../src/stm32f10x_dma.c **** #define DMA2_Channel3_IT_Mask    ((uint32_t)(DMA_ISR_GIF3 | DMA_ISR_TCIF3 | DMA_ISR_HTIF3 | DMA_ISR
  60:../src/stm32f10x_dma.c **** #define DMA2_Channel4_IT_Mask    ((uint32_t)(DMA_ISR_GIF4 | DMA_ISR_TCIF4 | DMA_ISR_HTIF4 | DMA_ISR
  61:../src/stm32f10x_dma.c **** #define DMA2_Channel5_IT_Mask    ((uint32_t)(DMA_ISR_GIF5 | DMA_ISR_TCIF5 | DMA_ISR_HTIF5 | DMA_ISR
  62:../src/stm32f10x_dma.c **** 
  63:../src/stm32f10x_dma.c **** /* DMA2 FLAG mask */
  64:../src/stm32f10x_dma.c **** #define FLAG_Mask                ((uint32_t)0x10000000)
  65:../src/stm32f10x_dma.c **** 
  66:../src/stm32f10x_dma.c **** /* DMA registers Masks */
  67:../src/stm32f10x_dma.c **** #define CCR_CLEAR_Mask           ((uint32_t)0xFFFF800F)
  68:../src/stm32f10x_dma.c **** 
  69:../src/stm32f10x_dma.c **** /**
  70:../src/stm32f10x_dma.c ****   * @}
  71:../src/stm32f10x_dma.c ****   */
  72:../src/stm32f10x_dma.c **** 
  73:../src/stm32f10x_dma.c **** /** @defgroup DMA_Private_Macros
  74:../src/stm32f10x_dma.c ****   * @{
  75:../src/stm32f10x_dma.c ****   */
  76:../src/stm32f10x_dma.c **** 
  77:../src/stm32f10x_dma.c **** /**
  78:../src/stm32f10x_dma.c ****   * @}
  79:../src/stm32f10x_dma.c ****   */
  80:../src/stm32f10x_dma.c **** 
  81:../src/stm32f10x_dma.c **** /** @defgroup DMA_Private_Variables
  82:../src/stm32f10x_dma.c ****   * @{
  83:../src/stm32f10x_dma.c ****   */
  84:../src/stm32f10x_dma.c **** 
  85:../src/stm32f10x_dma.c **** /**
  86:../src/stm32f10x_dma.c ****   * @}
  87:../src/stm32f10x_dma.c ****   */
  88:../src/stm32f10x_dma.c **** 
  89:../src/stm32f10x_dma.c **** /** @defgroup DMA_Private_FunctionPrototypes
  90:../src/stm32f10x_dma.c ****   * @{
  91:../src/stm32f10x_dma.c ****   */
  92:../src/stm32f10x_dma.c **** 
  93:../src/stm32f10x_dma.c **** /**
  94:../src/stm32f10x_dma.c ****   * @}
  95:../src/stm32f10x_dma.c ****   */
  96:../src/stm32f10x_dma.c **** 
  97:../src/stm32f10x_dma.c **** /** @defgroup DMA_Private_Functions
  98:../src/stm32f10x_dma.c ****   * @{
  99:../src/stm32f10x_dma.c ****   */
 100:../src/stm32f10x_dma.c **** 
 101:../src/stm32f10x_dma.c **** /**
 102:../src/stm32f10x_dma.c ****   * @brief  Deinitializes the DMAy Channelx registers to their default reset
 103:../src/stm32f10x_dma.c ****   *         values.
 104:../src/stm32f10x_dma.c ****   * @param  DMAy_Channelx: where y can be 1 or 2 to select the DMA and
 105:../src/stm32f10x_dma.c ****   *   x can be 1 to 7 for DMA1 and 1 to 5 for DMA2 to select the DMA Channel.
 106:../src/stm32f10x_dma.c ****   * @retval None
 107:../src/stm32f10x_dma.c ****   */
 108:../src/stm32f10x_dma.c **** void DMA_DeInit(DMA_Channel_TypeDef* DMAy_Channelx)
 109:../src/stm32f10x_dma.c **** {
  27              		.loc 1 109 0
  28              		.cfi_startproc
  29              		@ args = 0, pretend = 0, frame = 8
  30              		@ frame_needed = 1, uses_anonymous_args = 0
  31              		@ link register save eliminated.
  32 0000 80B4     		push	{r7}
  33              		.cfi_def_cfa_offset 4
  34              		.cfi_offset 7, -4
  35 0002 83B0     		sub	sp, sp, #12
  36              		.cfi_def_cfa_offset 16
  37 0004 00AF     		add	r7, sp, #0
  38              		.cfi_def_cfa_register 7
  39 0006 7860     		str	r0, [r7, #4]
 110:../src/stm32f10x_dma.c ****   /* Check the parameters */
 111:../src/stm32f10x_dma.c ****   assert_param(IS_DMA_ALL_PERIPH(DMAy_Channelx));
 112:../src/stm32f10x_dma.c ****   
 113:../src/stm32f10x_dma.c ****   /* Disable the selected DMAy Channelx */
 114:../src/stm32f10x_dma.c ****   DMAy_Channelx->CCR &= (uint16_t)(~DMA_CCR1_EN);
  40              		.loc 1 114 0
  41 0008 7B68     		ldr	r3, [r7, #4]
  42 000a 1A68     		ldr	r2, [r3]
  43 000c 4FF6FE73 		movw	r3, #65534
  44 0010 1340     		ands	r3, r3, r2
  45 0012 7A68     		ldr	r2, [r7, #4]
  46 0014 1360     		str	r3, [r2]
 115:../src/stm32f10x_dma.c ****   
 116:../src/stm32f10x_dma.c ****   /* Reset DMAy Channelx control register */
 117:../src/stm32f10x_dma.c ****   DMAy_Channelx->CCR  = 0;
  47              		.loc 1 117 0
  48 0016 7B68     		ldr	r3, [r7, #4]
  49 0018 0022     		movs	r2, #0
  50 001a 1A60     		str	r2, [r3]
 118:../src/stm32f10x_dma.c ****   
 119:../src/stm32f10x_dma.c ****   /* Reset DMAy Channelx remaining bytes register */
 120:../src/stm32f10x_dma.c ****   DMAy_Channelx->CNDTR = 0;
  51              		.loc 1 120 0
  52 001c 7B68     		ldr	r3, [r7, #4]
  53 001e 0022     		movs	r2, #0
  54 0020 5A60     		str	r2, [r3, #4]
 121:../src/stm32f10x_dma.c ****   
 122:../src/stm32f10x_dma.c ****   /* Reset DMAy Channelx peripheral address register */
 123:../src/stm32f10x_dma.c ****   DMAy_Channelx->CPAR  = 0;
  55              		.loc 1 123 0
  56 0022 7B68     		ldr	r3, [r7, #4]
  57 0024 0022     		movs	r2, #0
  58 0026 9A60     		str	r2, [r3, #8]
 124:../src/stm32f10x_dma.c ****   
 125:../src/stm32f10x_dma.c ****   /* Reset DMAy Channelx memory address register */
 126:../src/stm32f10x_dma.c ****   DMAy_Channelx->CMAR = 0;
  59              		.loc 1 126 0
  60 0028 7B68     		ldr	r3, [r7, #4]
  61 002a 0022     		movs	r2, #0
  62 002c DA60     		str	r2, [r3, #12]
 127:../src/stm32f10x_dma.c ****   
 128:../src/stm32f10x_dma.c ****   if (DMAy_Channelx == DMA1_Channel1)
  63              		.loc 1 128 0
  64 002e 7B68     		ldr	r3, [r7, #4]
  65 0030 434A     		ldr	r2, .L14
  66 0032 9342     		cmp	r3, r2
  67 0034 06D1     		bne	.L2
 129:../src/stm32f10x_dma.c ****   {
 130:../src/stm32f10x_dma.c ****     /* Reset interrupt pending bits for DMA1 Channel1 */
 131:../src/stm32f10x_dma.c ****     DMA1->IFCR |= DMA1_Channel1_IT_Mask;
  68              		.loc 1 131 0
  69 0036 434A     		ldr	r2, .L14+4
  70 0038 424B     		ldr	r3, .L14+4
  71 003a 5B68     		ldr	r3, [r3, #4]
  72 003c 43F00F03 		orr	r3, r3, #15
  73 0040 5360     		str	r3, [r2, #4]
  74 0042 77E0     		b	.L1
  75              	.L2:
 132:../src/stm32f10x_dma.c ****   }
 133:../src/stm32f10x_dma.c ****   else if (DMAy_Channelx == DMA1_Channel2)
  76              		.loc 1 133 0
  77 0044 7B68     		ldr	r3, [r7, #4]
  78 0046 404A     		ldr	r2, .L14+8
  79 0048 9342     		cmp	r3, r2
  80 004a 06D1     		bne	.L4
 134:../src/stm32f10x_dma.c ****   {
 135:../src/stm32f10x_dma.c ****     /* Reset interrupt pending bits for DMA1 Channel2 */
 136:../src/stm32f10x_dma.c ****     DMA1->IFCR |= DMA1_Channel2_IT_Mask;
  81              		.loc 1 136 0
  82 004c 3D4A     		ldr	r2, .L14+4
  83 004e 3D4B     		ldr	r3, .L14+4
  84 0050 5B68     		ldr	r3, [r3, #4]
  85 0052 43F0F003 		orr	r3, r3, #240
  86 0056 5360     		str	r3, [r2, #4]
  87 0058 6CE0     		b	.L1
  88              	.L4:
 137:../src/stm32f10x_dma.c ****   }
 138:../src/stm32f10x_dma.c ****   else if (DMAy_Channelx == DMA1_Channel3)
  89              		.loc 1 138 0
  90 005a 7B68     		ldr	r3, [r7, #4]
  91 005c 3B4A     		ldr	r2, .L14+12
  92 005e 9342     		cmp	r3, r2
  93 0060 06D1     		bne	.L5
 139:../src/stm32f10x_dma.c ****   {
 140:../src/stm32f10x_dma.c ****     /* Reset interrupt pending bits for DMA1 Channel3 */
 141:../src/stm32f10x_dma.c ****     DMA1->IFCR |= DMA1_Channel3_IT_Mask;
  94              		.loc 1 141 0
  95 0062 384A     		ldr	r2, .L14+4
  96 0064 374B     		ldr	r3, .L14+4
  97 0066 5B68     		ldr	r3, [r3, #4]
  98 0068 43F47063 		orr	r3, r3, #3840
  99 006c 5360     		str	r3, [r2, #4]
 100 006e 61E0     		b	.L1
 101              	.L5:
 142:../src/stm32f10x_dma.c ****   }
 143:../src/stm32f10x_dma.c ****   else if (DMAy_Channelx == DMA1_Channel4)
 102              		.loc 1 143 0
 103 0070 7B68     		ldr	r3, [r7, #4]
 104 0072 374A     		ldr	r2, .L14+16
 105 0074 9342     		cmp	r3, r2
 106 0076 06D1     		bne	.L6
 144:../src/stm32f10x_dma.c ****   {
 145:../src/stm32f10x_dma.c ****     /* Reset interrupt pending bits for DMA1 Channel4 */
 146:../src/stm32f10x_dma.c ****     DMA1->IFCR |= DMA1_Channel4_IT_Mask;
 107              		.loc 1 146 0
 108 0078 324A     		ldr	r2, .L14+4
 109 007a 324B     		ldr	r3, .L14+4
 110 007c 5B68     		ldr	r3, [r3, #4]
 111 007e 43F47043 		orr	r3, r3, #61440
 112 0082 5360     		str	r3, [r2, #4]
 113 0084 56E0     		b	.L1
 114              	.L6:
 147:../src/stm32f10x_dma.c ****   }
 148:../src/stm32f10x_dma.c ****   else if (DMAy_Channelx == DMA1_Channel5)
 115              		.loc 1 148 0
 116 0086 7B68     		ldr	r3, [r7, #4]
 117 0088 324A     		ldr	r2, .L14+20
 118 008a 9342     		cmp	r3, r2
 119 008c 06D1     		bne	.L7
 149:../src/stm32f10x_dma.c ****   {
 150:../src/stm32f10x_dma.c ****     /* Reset interrupt pending bits for DMA1 Channel5 */
 151:../src/stm32f10x_dma.c ****     DMA1->IFCR |= DMA1_Channel5_IT_Mask;
 120              		.loc 1 151 0
 121 008e 2D4A     		ldr	r2, .L14+4
 122 0090 2C4B     		ldr	r3, .L14+4
 123 0092 5B68     		ldr	r3, [r3, #4]
 124 0094 43F47023 		orr	r3, r3, #983040
 125 0098 5360     		str	r3, [r2, #4]
 126 009a 4BE0     		b	.L1
 127              	.L7:
 152:../src/stm32f10x_dma.c ****   }
 153:../src/stm32f10x_dma.c ****   else if (DMAy_Channelx == DMA1_Channel6)
 128              		.loc 1 153 0
 129 009c 7B68     		ldr	r3, [r7, #4]
 130 009e 2E4A     		ldr	r2, .L14+24
 131 00a0 9342     		cmp	r3, r2
 132 00a2 06D1     		bne	.L8
 154:../src/stm32f10x_dma.c ****   {
 155:../src/stm32f10x_dma.c ****     /* Reset interrupt pending bits for DMA1 Channel6 */
 156:../src/stm32f10x_dma.c ****     DMA1->IFCR |= DMA1_Channel6_IT_Mask;
 133              		.loc 1 156 0
 134 00a4 274A     		ldr	r2, .L14+4
 135 00a6 274B     		ldr	r3, .L14+4
 136 00a8 5B68     		ldr	r3, [r3, #4]
 137 00aa 43F47003 		orr	r3, r3, #15728640
 138 00ae 5360     		str	r3, [r2, #4]
 139 00b0 40E0     		b	.L1
 140              	.L8:
 157:../src/stm32f10x_dma.c ****   }
 158:../src/stm32f10x_dma.c ****   else if (DMAy_Channelx == DMA1_Channel7)
 141              		.loc 1 158 0
 142 00b2 7B68     		ldr	r3, [r7, #4]
 143 00b4 294A     		ldr	r2, .L14+28
 144 00b6 9342     		cmp	r3, r2
 145 00b8 06D1     		bne	.L9
 159:../src/stm32f10x_dma.c ****   {
 160:../src/stm32f10x_dma.c ****     /* Reset interrupt pending bits for DMA1 Channel7 */
 161:../src/stm32f10x_dma.c ****     DMA1->IFCR |= DMA1_Channel7_IT_Mask;
 146              		.loc 1 161 0
 147 00ba 224A     		ldr	r2, .L14+4
 148 00bc 214B     		ldr	r3, .L14+4
 149 00be 5B68     		ldr	r3, [r3, #4]
 150 00c0 43F07063 		orr	r3, r3, #251658240
 151 00c4 5360     		str	r3, [r2, #4]
 152 00c6 35E0     		b	.L1
 153              	.L9:
 162:../src/stm32f10x_dma.c ****   }
 163:../src/stm32f10x_dma.c ****   else if (DMAy_Channelx == DMA2_Channel1)
 154              		.loc 1 163 0
 155 00c8 7B68     		ldr	r3, [r7, #4]
 156 00ca 254A     		ldr	r2, .L14+32
 157 00cc 9342     		cmp	r3, r2
 158 00ce 06D1     		bne	.L10
 164:../src/stm32f10x_dma.c ****   {
 165:../src/stm32f10x_dma.c ****     /* Reset interrupt pending bits for DMA2 Channel1 */
 166:../src/stm32f10x_dma.c ****     DMA2->IFCR |= DMA2_Channel1_IT_Mask;
 159              		.loc 1 166 0
 160 00d0 244A     		ldr	r2, .L14+36
 161 00d2 244B     		ldr	r3, .L14+36
 162 00d4 5B68     		ldr	r3, [r3, #4]
 163 00d6 43F00F03 		orr	r3, r3, #15
 164 00da 5360     		str	r3, [r2, #4]
 165 00dc 2AE0     		b	.L1
 166              	.L10:
 167:../src/stm32f10x_dma.c ****   }
 168:../src/stm32f10x_dma.c ****   else if (DMAy_Channelx == DMA2_Channel2)
 167              		.loc 1 168 0
 168 00de 7B68     		ldr	r3, [r7, #4]
 169 00e0 214A     		ldr	r2, .L14+40
 170 00e2 9342     		cmp	r3, r2
 171 00e4 06D1     		bne	.L11
 169:../src/stm32f10x_dma.c ****   {
 170:../src/stm32f10x_dma.c ****     /* Reset interrupt pending bits for DMA2 Channel2 */
 171:../src/stm32f10x_dma.c ****     DMA2->IFCR |= DMA2_Channel2_IT_Mask;
 172              		.loc 1 171 0
 173 00e6 1F4A     		ldr	r2, .L14+36
 174 00e8 1E4B     		ldr	r3, .L14+36
 175 00ea 5B68     		ldr	r3, [r3, #4]
 176 00ec 43F0F003 		orr	r3, r3, #240
 177 00f0 5360     		str	r3, [r2, #4]
 178 00f2 1FE0     		b	.L1
 179              	.L11:
 172:../src/stm32f10x_dma.c ****   }
 173:../src/stm32f10x_dma.c ****   else if (DMAy_Channelx == DMA2_Channel3)
 180              		.loc 1 173 0
 181 00f4 7B68     		ldr	r3, [r7, #4]
 182 00f6 1D4A     		ldr	r2, .L14+44
 183 00f8 9342     		cmp	r3, r2
 184 00fa 06D1     		bne	.L12
 174:../src/stm32f10x_dma.c ****   {
 175:../src/stm32f10x_dma.c ****     /* Reset interrupt pending bits for DMA2 Channel3 */
 176:../src/stm32f10x_dma.c ****     DMA2->IFCR |= DMA2_Channel3_IT_Mask;
 185              		.loc 1 176 0
 186 00fc 194A     		ldr	r2, .L14+36
 187 00fe 194B     		ldr	r3, .L14+36
 188 0100 5B68     		ldr	r3, [r3, #4]
 189 0102 43F47063 		orr	r3, r3, #3840
 190 0106 5360     		str	r3, [r2, #4]
 191 0108 14E0     		b	.L1
 192              	.L12:
 177:../src/stm32f10x_dma.c ****   }
 178:../src/stm32f10x_dma.c ****   else if (DMAy_Channelx == DMA2_Channel4)
 193              		.loc 1 178 0
 194 010a 7B68     		ldr	r3, [r7, #4]
 195 010c 184A     		ldr	r2, .L14+48
 196 010e 9342     		cmp	r3, r2
 197 0110 06D1     		bne	.L13
 179:../src/stm32f10x_dma.c ****   {
 180:../src/stm32f10x_dma.c ****     /* Reset interrupt pending bits for DMA2 Channel4 */
 181:../src/stm32f10x_dma.c ****     DMA2->IFCR |= DMA2_Channel4_IT_Mask;
 198              		.loc 1 181 0
 199 0112 144A     		ldr	r2, .L14+36
 200 0114 134B     		ldr	r3, .L14+36
 201 0116 5B68     		ldr	r3, [r3, #4]
 202 0118 43F47043 		orr	r3, r3, #61440
 203 011c 5360     		str	r3, [r2, #4]
 204 011e 09E0     		b	.L1
 205              	.L13:
 182:../src/stm32f10x_dma.c ****   }
 183:../src/stm32f10x_dma.c ****   else
 184:../src/stm32f10x_dma.c ****   { 
 185:../src/stm32f10x_dma.c ****     if (DMAy_Channelx == DMA2_Channel5)
 206              		.loc 1 185 0
 207 0120 7B68     		ldr	r3, [r7, #4]
 208 0122 144A     		ldr	r2, .L14+52
 209 0124 9342     		cmp	r3, r2
 210 0126 05D1     		bne	.L1
 186:../src/stm32f10x_dma.c ****     {
 187:../src/stm32f10x_dma.c ****       /* Reset interrupt pending bits for DMA2 Channel5 */
 188:../src/stm32f10x_dma.c ****       DMA2->IFCR |= DMA2_Channel5_IT_Mask;
 211              		.loc 1 188 0
 212 0128 0E4A     		ldr	r2, .L14+36
 213 012a 0E4B     		ldr	r3, .L14+36
 214 012c 5B68     		ldr	r3, [r3, #4]
 215 012e 43F47023 		orr	r3, r3, #983040
 216 0132 5360     		str	r3, [r2, #4]
 217              	.L1:
 189:../src/stm32f10x_dma.c ****     }
 190:../src/stm32f10x_dma.c ****   }
 191:../src/stm32f10x_dma.c **** }
 218              		.loc 1 191 0
 219 0134 0C37     		adds	r7, r7, #12
 220              		.cfi_def_cfa_offset 4
 221 0136 BD46     		mov	sp, r7
 222              		.cfi_def_cfa_register 13
 223              		@ sp needed
 224 0138 5DF8047B 		ldr	r7, [sp], #4
 225              		.cfi_restore 7
 226              		.cfi_def_cfa_offset 0
 227 013c 7047     		bx	lr
 228              	.L15:
 229 013e 00BF     		.align	2
 230              	.L14:
 231 0140 08000240 		.word	1073872904
 232 0144 00000240 		.word	1073872896
 233 0148 1C000240 		.word	1073872924
 234 014c 30000240 		.word	1073872944
 235 0150 44000240 		.word	1073872964
 236 0154 58000240 		.word	1073872984
 237 0158 6C000240 		.word	1073873004
 238 015c 80000240 		.word	1073873024
 239 0160 08040240 		.word	1073873928
 240 0164 00040240 		.word	1073873920
 241 0168 1C040240 		.word	1073873948
 242 016c 30040240 		.word	1073873968
 243 0170 44040240 		.word	1073873988
 244 0174 58040240 		.word	1073874008
 245              		.cfi_endproc
 246              	.LFE29:
 248              		.section	.text.DMA_Init,"ax",%progbits
 249              		.align	2
 250              		.global	DMA_Init
 251              		.thumb
 252              		.thumb_func
 254              	DMA_Init:
 255              	.LFB30:
 192:../src/stm32f10x_dma.c **** 
 193:../src/stm32f10x_dma.c **** /**
 194:../src/stm32f10x_dma.c ****   * @brief  Initializes the DMAy Channelx according to the specified
 195:../src/stm32f10x_dma.c ****   *         parameters in the DMA_InitStruct.
 196:../src/stm32f10x_dma.c ****   * @param  DMAy_Channelx: where y can be 1 or 2 to select the DMA and 
 197:../src/stm32f10x_dma.c ****   *   x can be 1 to 7 for DMA1 and 1 to 5 for DMA2 to select the DMA Channel.
 198:../src/stm32f10x_dma.c ****   * @param  DMA_InitStruct: pointer to a DMA_InitTypeDef structure that
 199:../src/stm32f10x_dma.c ****   *         contains the configuration information for the specified DMA Channel.
 200:../src/stm32f10x_dma.c ****   * @retval None
 201:../src/stm32f10x_dma.c ****   */
 202:../src/stm32f10x_dma.c **** void DMA_Init(DMA_Channel_TypeDef* DMAy_Channelx, DMA_InitTypeDef* DMA_InitStruct)
 203:../src/stm32f10x_dma.c **** {
 256              		.loc 1 203 0
 257              		.cfi_startproc
 258              		@ args = 0, pretend = 0, frame = 16
 259              		@ frame_needed = 1, uses_anonymous_args = 0
 260              		@ link register save eliminated.
 261 0000 80B4     		push	{r7}
 262              		.cfi_def_cfa_offset 4
 263              		.cfi_offset 7, -4
 264 0002 85B0     		sub	sp, sp, #20
 265              		.cfi_def_cfa_offset 24
 266 0004 00AF     		add	r7, sp, #0
 267              		.cfi_def_cfa_register 7
 268 0006 7860     		str	r0, [r7, #4]
 269 0008 3960     		str	r1, [r7]
 204:../src/stm32f10x_dma.c ****   uint32_t tmpreg = 0;
 270              		.loc 1 204 0
 271 000a 0023     		movs	r3, #0
 272 000c FB60     		str	r3, [r7, #12]
 205:../src/stm32f10x_dma.c **** 
 206:../src/stm32f10x_dma.c ****   /* Check the parameters */
 207:../src/stm32f10x_dma.c ****   assert_param(IS_DMA_ALL_PERIPH(DMAy_Channelx));
 208:../src/stm32f10x_dma.c ****   assert_param(IS_DMA_DIR(DMA_InitStruct->DMA_DIR));
 209:../src/stm32f10x_dma.c ****   assert_param(IS_DMA_BUFFER_SIZE(DMA_InitStruct->DMA_BufferSize));
 210:../src/stm32f10x_dma.c ****   assert_param(IS_DMA_PERIPHERAL_INC_STATE(DMA_InitStruct->DMA_PeripheralInc));
 211:../src/stm32f10x_dma.c ****   assert_param(IS_DMA_MEMORY_INC_STATE(DMA_InitStruct->DMA_MemoryInc));   
 212:../src/stm32f10x_dma.c ****   assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(DMA_InitStruct->DMA_PeripheralDataSize));
 213:../src/stm32f10x_dma.c ****   assert_param(IS_DMA_MEMORY_DATA_SIZE(DMA_InitStruct->DMA_MemoryDataSize));
 214:../src/stm32f10x_dma.c ****   assert_param(IS_DMA_MODE(DMA_InitStruct->DMA_Mode));
 215:../src/stm32f10x_dma.c ****   assert_param(IS_DMA_PRIORITY(DMA_InitStruct->DMA_Priority));
 216:../src/stm32f10x_dma.c ****   assert_param(IS_DMA_M2M_STATE(DMA_InitStruct->DMA_M2M));
 217:../src/stm32f10x_dma.c **** 
 218:../src/stm32f10x_dma.c **** /*--------------------------- DMAy Channelx CCR Configuration -----------------*/
 219:../src/stm32f10x_dma.c ****   /* Get the DMAy_Channelx CCR value */
 220:../src/stm32f10x_dma.c ****   tmpreg = DMAy_Channelx->CCR;
 273              		.loc 1 220 0
 274 000e 7B68     		ldr	r3, [r7, #4]
 275 0010 1B68     		ldr	r3, [r3]
 276 0012 FB60     		str	r3, [r7, #12]
 221:../src/stm32f10x_dma.c ****   /* Clear MEM2MEM, PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
 222:../src/stm32f10x_dma.c ****   tmpreg &= CCR_CLEAR_Mask;
 277              		.loc 1 222 0
 278 0014 FB68     		ldr	r3, [r7, #12]
 279 0016 23F4FF43 		bic	r3, r3, #32640
 280 001a 23F07003 		bic	r3, r3, #112
 281 001e FB60     		str	r3, [r7, #12]
 223:../src/stm32f10x_dma.c ****   /* Configure DMAy Channelx: data transfer, data size, priority level and mode */
 224:../src/stm32f10x_dma.c ****   /* Set DIR bit according to DMA_DIR value */
 225:../src/stm32f10x_dma.c ****   /* Set CIRC bit according to DMA_Mode value */
 226:../src/stm32f10x_dma.c ****   /* Set PINC bit according to DMA_PeripheralInc value */
 227:../src/stm32f10x_dma.c ****   /* Set MINC bit according to DMA_MemoryInc value */
 228:../src/stm32f10x_dma.c ****   /* Set PSIZE bits according to DMA_PeripheralDataSize value */
 229:../src/stm32f10x_dma.c ****   /* Set MSIZE bits according to DMA_MemoryDataSize value */
 230:../src/stm32f10x_dma.c ****   /* Set PL bits according to DMA_Priority value */
 231:../src/stm32f10x_dma.c ****   /* Set the MEM2MEM bit according to DMA_M2M value */
 232:../src/stm32f10x_dma.c ****   tmpreg |= DMA_InitStruct->DMA_DIR | DMA_InitStruct->DMA_Mode |
 282              		.loc 1 232 0
 283 0020 3B68     		ldr	r3, [r7]
 284 0022 9A68     		ldr	r2, [r3, #8]
 285 0024 3B68     		ldr	r3, [r7]
 286 0026 1B6A     		ldr	r3, [r3, #32]
 287 0028 1A43     		orrs	r2, r2, r3
 233:../src/stm32f10x_dma.c ****             DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 288              		.loc 1 233 0
 289 002a 3B68     		ldr	r3, [r7]
 290 002c 1B69     		ldr	r3, [r3, #16]
 232:../src/stm32f10x_dma.c ****             DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 291              		.loc 1 232 0
 292 002e 1A43     		orrs	r2, r2, r3
 293              		.loc 1 233 0
 294 0030 3B68     		ldr	r3, [r7]
 295 0032 5B69     		ldr	r3, [r3, #20]
 296 0034 1A43     		orrs	r2, r2, r3
 234:../src/stm32f10x_dma.c ****             DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 297              		.loc 1 234 0
 298 0036 3B68     		ldr	r3, [r7]
 299 0038 9B69     		ldr	r3, [r3, #24]
 233:../src/stm32f10x_dma.c ****             DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 300              		.loc 1 233 0
 301 003a 1A43     		orrs	r2, r2, r3
 302              		.loc 1 234 0
 303 003c 3B68     		ldr	r3, [r7]
 304 003e DB69     		ldr	r3, [r3, #28]
 305 0040 1A43     		orrs	r2, r2, r3
 235:../src/stm32f10x_dma.c ****             DMA_InitStruct->DMA_Priority | DMA_InitStruct->DMA_M2M;
 306              		.loc 1 235 0
 307 0042 3B68     		ldr	r3, [r7]
 308 0044 5B6A     		ldr	r3, [r3, #36]
 234:../src/stm32f10x_dma.c ****             DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 309              		.loc 1 234 0
 310 0046 1A43     		orrs	r2, r2, r3
 311              		.loc 1 235 0
 312 0048 3B68     		ldr	r3, [r7]
 313 004a 9B6A     		ldr	r3, [r3, #40]
 314 004c 1343     		orrs	r3, r3, r2
 232:../src/stm32f10x_dma.c ****             DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 315              		.loc 1 232 0
 316 004e FA68     		ldr	r2, [r7, #12]
 317 0050 1343     		orrs	r3, r3, r2
 318 0052 FB60     		str	r3, [r7, #12]
 236:../src/stm32f10x_dma.c **** 
 237:../src/stm32f10x_dma.c ****   /* Write to DMAy Channelx CCR */
 238:../src/stm32f10x_dma.c ****   DMAy_Channelx->CCR = tmpreg;
 319              		.loc 1 238 0
 320 0054 7B68     		ldr	r3, [r7, #4]
 321 0056 FA68     		ldr	r2, [r7, #12]
 322 0058 1A60     		str	r2, [r3]
 239:../src/stm32f10x_dma.c **** 
 240:../src/stm32f10x_dma.c **** /*--------------------------- DMAy Channelx CNDTR Configuration ---------------*/
 241:../src/stm32f10x_dma.c ****   /* Write to DMAy Channelx CNDTR */
 242:../src/stm32f10x_dma.c ****   DMAy_Channelx->CNDTR = DMA_InitStruct->DMA_BufferSize;
 323              		.loc 1 242 0
 324 005a 3B68     		ldr	r3, [r7]
 325 005c DA68     		ldr	r2, [r3, #12]
 326 005e 7B68     		ldr	r3, [r7, #4]
 327 0060 5A60     		str	r2, [r3, #4]
 243:../src/stm32f10x_dma.c **** 
 244:../src/stm32f10x_dma.c **** /*--------------------------- DMAy Channelx CPAR Configuration ----------------*/
 245:../src/stm32f10x_dma.c ****   /* Write to DMAy Channelx CPAR */
 246:../src/stm32f10x_dma.c ****   DMAy_Channelx->CPAR = DMA_InitStruct->DMA_PeripheralBaseAddr;
 328              		.loc 1 246 0
 329 0062 3B68     		ldr	r3, [r7]
 330 0064 1A68     		ldr	r2, [r3]
 331 0066 7B68     		ldr	r3, [r7, #4]
 332 0068 9A60     		str	r2, [r3, #8]
 247:../src/stm32f10x_dma.c **** 
 248:../src/stm32f10x_dma.c **** /*--------------------------- DMAy Channelx CMAR Configuration ----------------*/
 249:../src/stm32f10x_dma.c ****   /* Write to DMAy Channelx CMAR */
 250:../src/stm32f10x_dma.c ****   DMAy_Channelx->CMAR = DMA_InitStruct->DMA_MemoryBaseAddr;
 333              		.loc 1 250 0
 334 006a 3B68     		ldr	r3, [r7]
 335 006c 5A68     		ldr	r2, [r3, #4]
 336 006e 7B68     		ldr	r3, [r7, #4]
 337 0070 DA60     		str	r2, [r3, #12]
 251:../src/stm32f10x_dma.c **** }
 338              		.loc 1 251 0
 339 0072 1437     		adds	r7, r7, #20
 340              		.cfi_def_cfa_offset 4
 341 0074 BD46     		mov	sp, r7
 342              		.cfi_def_cfa_register 13
 343              		@ sp needed
 344 0076 5DF8047B 		ldr	r7, [sp], #4
 345              		.cfi_restore 7
 346              		.cfi_def_cfa_offset 0
 347 007a 7047     		bx	lr
 348              		.cfi_endproc
 349              	.LFE30:
 351              		.section	.text.DMA_StructInit,"ax",%progbits
 352              		.align	2
 353              		.global	DMA_StructInit
 354              		.thumb
 355              		.thumb_func
 357              	DMA_StructInit:
 358              	.LFB31:
 252:../src/stm32f10x_dma.c **** 
 253:../src/stm32f10x_dma.c **** /**
 254:../src/stm32f10x_dma.c ****   * @brief  Fills each DMA_InitStruct member with its default value.
 255:../src/stm32f10x_dma.c ****   * @param  DMA_InitStruct : pointer to a DMA_InitTypeDef structure which will
 256:../src/stm32f10x_dma.c ****   *         be initialized.
 257:../src/stm32f10x_dma.c ****   * @retval None
 258:../src/stm32f10x_dma.c ****   */
 259:../src/stm32f10x_dma.c **** void DMA_StructInit(DMA_InitTypeDef* DMA_InitStruct)
 260:../src/stm32f10x_dma.c **** {
 359              		.loc 1 260 0
 360              		.cfi_startproc
 361              		@ args = 0, pretend = 0, frame = 8
 362              		@ frame_needed = 1, uses_anonymous_args = 0
 363              		@ link register save eliminated.
 364 0000 80B4     		push	{r7}
 365              		.cfi_def_cfa_offset 4
 366              		.cfi_offset 7, -4
 367 0002 83B0     		sub	sp, sp, #12
 368              		.cfi_def_cfa_offset 16
 369 0004 00AF     		add	r7, sp, #0
 370              		.cfi_def_cfa_register 7
 371 0006 7860     		str	r0, [r7, #4]
 261:../src/stm32f10x_dma.c **** /*-------------- Reset DMA init structure parameters values ------------------*/
 262:../src/stm32f10x_dma.c ****   /* Initialize the DMA_PeripheralBaseAddr member */
 263:../src/stm32f10x_dma.c ****   DMA_InitStruct->DMA_PeripheralBaseAddr = 0;
 372              		.loc 1 263 0
 373 0008 7B68     		ldr	r3, [r7, #4]
 374 000a 0022     		movs	r2, #0
 375 000c 1A60     		str	r2, [r3]
 264:../src/stm32f10x_dma.c ****   /* Initialize the DMA_MemoryBaseAddr member */
 265:../src/stm32f10x_dma.c ****   DMA_InitStruct->DMA_MemoryBaseAddr = 0;
 376              		.loc 1 265 0
 377 000e 7B68     		ldr	r3, [r7, #4]
 378 0010 0022     		movs	r2, #0
 379 0012 5A60     		str	r2, [r3, #4]
 266:../src/stm32f10x_dma.c ****   /* Initialize the DMA_DIR member */
 267:../src/stm32f10x_dma.c ****   DMA_InitStruct->DMA_DIR = DMA_DIR_PeripheralSRC;
 380              		.loc 1 267 0
 381 0014 7B68     		ldr	r3, [r7, #4]
 382 0016 0022     		movs	r2, #0
 383 0018 9A60     		str	r2, [r3, #8]
 268:../src/stm32f10x_dma.c ****   /* Initialize the DMA_BufferSize member */
 269:../src/stm32f10x_dma.c ****   DMA_InitStruct->DMA_BufferSize = 0;
 384              		.loc 1 269 0
 385 001a 7B68     		ldr	r3, [r7, #4]
 386 001c 0022     		movs	r2, #0
 387 001e DA60     		str	r2, [r3, #12]
 270:../src/stm32f10x_dma.c ****   /* Initialize the DMA_PeripheralInc member */
 271:../src/stm32f10x_dma.c ****   DMA_InitStruct->DMA_PeripheralInc = DMA_PeripheralInc_Disable;
 388              		.loc 1 271 0
 389 0020 7B68     		ldr	r3, [r7, #4]
 390 0022 0022     		movs	r2, #0
 391 0024 1A61     		str	r2, [r3, #16]
 272:../src/stm32f10x_dma.c ****   /* Initialize the DMA_MemoryInc member */
 273:../src/stm32f10x_dma.c ****   DMA_InitStruct->DMA_MemoryInc = DMA_MemoryInc_Disable;
 392              		.loc 1 273 0
 393 0026 7B68     		ldr	r3, [r7, #4]
 394 0028 0022     		movs	r2, #0
 395 002a 5A61     		str	r2, [r3, #20]
 274:../src/stm32f10x_dma.c ****   /* Initialize the DMA_PeripheralDataSize member */
 275:../src/stm32f10x_dma.c ****   DMA_InitStruct->DMA_PeripheralDataSize = DMA_PeripheralDataSize_Byte;
 396              		.loc 1 275 0
 397 002c 7B68     		ldr	r3, [r7, #4]
 398 002e 0022     		movs	r2, #0
 399 0030 9A61     		str	r2, [r3, #24]
 276:../src/stm32f10x_dma.c ****   /* Initialize the DMA_MemoryDataSize member */
 277:../src/stm32f10x_dma.c ****   DMA_InitStruct->DMA_MemoryDataSize = DMA_MemoryDataSize_Byte;
 400              		.loc 1 277 0
 401 0032 7B68     		ldr	r3, [r7, #4]
 402 0034 0022     		movs	r2, #0
 403 0036 DA61     		str	r2, [r3, #28]
 278:../src/stm32f10x_dma.c ****   /* Initialize the DMA_Mode member */
 279:../src/stm32f10x_dma.c ****   DMA_InitStruct->DMA_Mode = DMA_Mode_Normal;
 404              		.loc 1 279 0
 405 0038 7B68     		ldr	r3, [r7, #4]
 406 003a 0022     		movs	r2, #0
 407 003c 1A62     		str	r2, [r3, #32]
 280:../src/stm32f10x_dma.c ****   /* Initialize the DMA_Priority member */
 281:../src/stm32f10x_dma.c ****   DMA_InitStruct->DMA_Priority = DMA_Priority_Low;
 408              		.loc 1 281 0
 409 003e 7B68     		ldr	r3, [r7, #4]
 410 0040 0022     		movs	r2, #0
 411 0042 5A62     		str	r2, [r3, #36]
 282:../src/stm32f10x_dma.c ****   /* Initialize the DMA_M2M member */
 283:../src/stm32f10x_dma.c ****   DMA_InitStruct->DMA_M2M = DMA_M2M_Disable;
 412              		.loc 1 283 0
 413 0044 7B68     		ldr	r3, [r7, #4]
 414 0046 0022     		movs	r2, #0
 415 0048 9A62     		str	r2, [r3, #40]
 284:../src/stm32f10x_dma.c **** }
 416              		.loc 1 284 0
 417 004a 0C37     		adds	r7, r7, #12
 418              		.cfi_def_cfa_offset 4
 419 004c BD46     		mov	sp, r7
 420              		.cfi_def_cfa_register 13
 421              		@ sp needed
 422 004e 5DF8047B 		ldr	r7, [sp], #4
 423              		.cfi_restore 7
 424              		.cfi_def_cfa_offset 0
 425 0052 7047     		bx	lr
 426              		.cfi_endproc
 427              	.LFE31:
 429              		.section	.text.DMA_Cmd,"ax",%progbits
 430              		.align	2
 431              		.global	DMA_Cmd
 432              		.thumb
 433              		.thumb_func
 435              	DMA_Cmd:
 436              	.LFB32:
 285:../src/stm32f10x_dma.c **** 
 286:../src/stm32f10x_dma.c **** /**
 287:../src/stm32f10x_dma.c ****   * @brief  Enables or disables the specified DMAy Channelx.
 288:../src/stm32f10x_dma.c ****   * @param  DMAy_Channelx: where y can be 1 or 2 to select the DMA and 
 289:../src/stm32f10x_dma.c ****   *   x can be 1 to 7 for DMA1 and 1 to 5 for DMA2 to select the DMA Channel.
 290:../src/stm32f10x_dma.c ****   * @param  NewState: new state of the DMAy Channelx. 
 291:../src/stm32f10x_dma.c ****   *   This parameter can be: ENABLE or DISABLE.
 292:../src/stm32f10x_dma.c ****   * @retval None
 293:../src/stm32f10x_dma.c ****   */
 294:../src/stm32f10x_dma.c **** void DMA_Cmd(DMA_Channel_TypeDef* DMAy_Channelx, FunctionalState NewState)
 295:../src/stm32f10x_dma.c **** {
 437              		.loc 1 295 0
 438              		.cfi_startproc
 439              		@ args = 0, pretend = 0, frame = 8
 440              		@ frame_needed = 1, uses_anonymous_args = 0
 441              		@ link register save eliminated.
 442 0000 80B4     		push	{r7}
 443              		.cfi_def_cfa_offset 4
 444              		.cfi_offset 7, -4
 445 0002 83B0     		sub	sp, sp, #12
 446              		.cfi_def_cfa_offset 16
 447 0004 00AF     		add	r7, sp, #0
 448              		.cfi_def_cfa_register 7
 449 0006 7860     		str	r0, [r7, #4]
 450 0008 0B46     		mov	r3, r1
 451 000a FB70     		strb	r3, [r7, #3]
 296:../src/stm32f10x_dma.c ****   /* Check the parameters */
 297:../src/stm32f10x_dma.c ****   assert_param(IS_DMA_ALL_PERIPH(DMAy_Channelx));
 298:../src/stm32f10x_dma.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 299:../src/stm32f10x_dma.c **** 
 300:../src/stm32f10x_dma.c ****   if (NewState != DISABLE)
 452              		.loc 1 300 0
 453 000c FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 454 000e 002B     		cmp	r3, #0
 455 0010 06D0     		beq	.L19
 301:../src/stm32f10x_dma.c ****   {
 302:../src/stm32f10x_dma.c ****     /* Enable the selected DMAy Channelx */
 303:../src/stm32f10x_dma.c ****     DMAy_Channelx->CCR |= DMA_CCR1_EN;
 456              		.loc 1 303 0
 457 0012 7B68     		ldr	r3, [r7, #4]
 458 0014 1B68     		ldr	r3, [r3]
 459 0016 43F00102 		orr	r2, r3, #1
 460 001a 7B68     		ldr	r3, [r7, #4]
 461 001c 1A60     		str	r2, [r3]
 462 001e 06E0     		b	.L18
 463              	.L19:
 304:../src/stm32f10x_dma.c ****   }
 305:../src/stm32f10x_dma.c ****   else
 306:../src/stm32f10x_dma.c ****   {
 307:../src/stm32f10x_dma.c ****     /* Disable the selected DMAy Channelx */
 308:../src/stm32f10x_dma.c ****     DMAy_Channelx->CCR &= (uint16_t)(~DMA_CCR1_EN);
 464              		.loc 1 308 0
 465 0020 7B68     		ldr	r3, [r7, #4]
 466 0022 1A68     		ldr	r2, [r3]
 467 0024 4FF6FE73 		movw	r3, #65534
 468 0028 1340     		ands	r3, r3, r2
 469 002a 7A68     		ldr	r2, [r7, #4]
 470 002c 1360     		str	r3, [r2]
 471              	.L18:
 309:../src/stm32f10x_dma.c ****   }
 310:../src/stm32f10x_dma.c **** }
 472              		.loc 1 310 0
 473 002e 0C37     		adds	r7, r7, #12
 474              		.cfi_def_cfa_offset 4
 475 0030 BD46     		mov	sp, r7
 476              		.cfi_def_cfa_register 13
 477              		@ sp needed
 478 0032 5DF8047B 		ldr	r7, [sp], #4
 479              		.cfi_restore 7
 480              		.cfi_def_cfa_offset 0
 481 0036 7047     		bx	lr
 482              		.cfi_endproc
 483              	.LFE32:
 485              		.section	.text.DMA_ITConfig,"ax",%progbits
 486              		.align	2
 487              		.global	DMA_ITConfig
 488              		.thumb
 489              		.thumb_func
 491              	DMA_ITConfig:
 492              	.LFB33:
 311:../src/stm32f10x_dma.c **** 
 312:../src/stm32f10x_dma.c **** /**
 313:../src/stm32f10x_dma.c ****   * @brief  Enables or disables the specified DMAy Channelx interrupts.
 314:../src/stm32f10x_dma.c ****   * @param  DMAy_Channelx: where y can be 1 or 2 to select the DMA and 
 315:../src/stm32f10x_dma.c ****   *   x can be 1 to 7 for DMA1 and 1 to 5 for DMA2 to select the DMA Channel.
 316:../src/stm32f10x_dma.c ****   * @param  DMA_IT: specifies the DMA interrupts sources to be enabled
 317:../src/stm32f10x_dma.c ****   *   or disabled. 
 318:../src/stm32f10x_dma.c ****   *   This parameter can be any combination of the following values:
 319:../src/stm32f10x_dma.c ****   *     @arg DMA_IT_TC:  Transfer complete interrupt mask
 320:../src/stm32f10x_dma.c ****   *     @arg DMA_IT_HT:  Half transfer interrupt mask
 321:../src/stm32f10x_dma.c ****   *     @arg DMA_IT_TE:  Transfer error interrupt mask
 322:../src/stm32f10x_dma.c ****   * @param  NewState: new state of the specified DMA interrupts.
 323:../src/stm32f10x_dma.c ****   *   This parameter can be: ENABLE or DISABLE.
 324:../src/stm32f10x_dma.c ****   * @retval None
 325:../src/stm32f10x_dma.c ****   */
 326:../src/stm32f10x_dma.c **** void DMA_ITConfig(DMA_Channel_TypeDef* DMAy_Channelx, uint32_t DMA_IT, FunctionalState NewState)
 327:../src/stm32f10x_dma.c **** {
 493              		.loc 1 327 0
 494              		.cfi_startproc
 495              		@ args = 0, pretend = 0, frame = 16
 496              		@ frame_needed = 1, uses_anonymous_args = 0
 497              		@ link register save eliminated.
 498 0000 80B4     		push	{r7}
 499              		.cfi_def_cfa_offset 4
 500              		.cfi_offset 7, -4
 501 0002 85B0     		sub	sp, sp, #20
 502              		.cfi_def_cfa_offset 24
 503 0004 00AF     		add	r7, sp, #0
 504              		.cfi_def_cfa_register 7
 505 0006 F860     		str	r0, [r7, #12]
 506 0008 B960     		str	r1, [r7, #8]
 507 000a 1346     		mov	r3, r2
 508 000c FB71     		strb	r3, [r7, #7]
 328:../src/stm32f10x_dma.c ****   /* Check the parameters */
 329:../src/stm32f10x_dma.c ****   assert_param(IS_DMA_ALL_PERIPH(DMAy_Channelx));
 330:../src/stm32f10x_dma.c ****   assert_param(IS_DMA_CONFIG_IT(DMA_IT));
 331:../src/stm32f10x_dma.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 332:../src/stm32f10x_dma.c ****   if (NewState != DISABLE)
 509              		.loc 1 332 0
 510 000e FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 511 0010 002B     		cmp	r3, #0
 512 0012 06D0     		beq	.L22
 333:../src/stm32f10x_dma.c ****   {
 334:../src/stm32f10x_dma.c ****     /* Enable the selected DMA interrupts */
 335:../src/stm32f10x_dma.c ****     DMAy_Channelx->CCR |= DMA_IT;
 513              		.loc 1 335 0
 514 0014 FB68     		ldr	r3, [r7, #12]
 515 0016 1A68     		ldr	r2, [r3]
 516 0018 BB68     		ldr	r3, [r7, #8]
 517 001a 1A43     		orrs	r2, r2, r3
 518 001c FB68     		ldr	r3, [r7, #12]
 519 001e 1A60     		str	r2, [r3]
 520 0020 06E0     		b	.L21
 521              	.L22:
 336:../src/stm32f10x_dma.c ****   }
 337:../src/stm32f10x_dma.c ****   else
 338:../src/stm32f10x_dma.c ****   {
 339:../src/stm32f10x_dma.c ****     /* Disable the selected DMA interrupts */
 340:../src/stm32f10x_dma.c ****     DMAy_Channelx->CCR &= ~DMA_IT;
 522              		.loc 1 340 0
 523 0022 FB68     		ldr	r3, [r7, #12]
 524 0024 1A68     		ldr	r2, [r3]
 525 0026 BB68     		ldr	r3, [r7, #8]
 526 0028 DB43     		mvns	r3, r3
 527 002a 1A40     		ands	r2, r2, r3
 528 002c FB68     		ldr	r3, [r7, #12]
 529 002e 1A60     		str	r2, [r3]
 530              	.L21:
 341:../src/stm32f10x_dma.c ****   }
 342:../src/stm32f10x_dma.c **** }
 531              		.loc 1 342 0
 532 0030 1437     		adds	r7, r7, #20
 533              		.cfi_def_cfa_offset 4
 534 0032 BD46     		mov	sp, r7
 535              		.cfi_def_cfa_register 13
 536              		@ sp needed
 537 0034 5DF8047B 		ldr	r7, [sp], #4
 538              		.cfi_restore 7
 539              		.cfi_def_cfa_offset 0
 540 0038 7047     		bx	lr
 541              		.cfi_endproc
 542              	.LFE33:
 544 003a 00BF     		.section	.text.DMA_SetCurrDataCounter,"ax",%progbits
 545              		.align	2
 546              		.global	DMA_SetCurrDataCounter
 547              		.thumb
 548              		.thumb_func
 550              	DMA_SetCurrDataCounter:
 551              	.LFB34:
 343:../src/stm32f10x_dma.c **** 
 344:../src/stm32f10x_dma.c **** /**
 345:../src/stm32f10x_dma.c ****   * @brief  Sets the number of data units in the current DMAy Channelx transfer.
 346:../src/stm32f10x_dma.c ****   * @param  DMAy_Channelx: where y can be 1 or 2 to select the DMA and 
 347:../src/stm32f10x_dma.c ****   *         x can be 1 to 7 for DMA1 and 1 to 5 for DMA2 to select the DMA Channel.
 348:../src/stm32f10x_dma.c ****   * @param  DataNumber: The number of data units in the current DMAy Channelx
 349:../src/stm32f10x_dma.c ****   *         transfer.   
 350:../src/stm32f10x_dma.c ****   * @note   This function can only be used when the DMAy_Channelx is disabled.                 
 351:../src/stm32f10x_dma.c ****   * @retval None.
 352:../src/stm32f10x_dma.c ****   */
 353:../src/stm32f10x_dma.c **** void DMA_SetCurrDataCounter(DMA_Channel_TypeDef* DMAy_Channelx, uint16_t DataNumber)
 354:../src/stm32f10x_dma.c **** {
 552              		.loc 1 354 0
 553              		.cfi_startproc
 554              		@ args = 0, pretend = 0, frame = 8
 555              		@ frame_needed = 1, uses_anonymous_args = 0
 556              		@ link register save eliminated.
 557 0000 80B4     		push	{r7}
 558              		.cfi_def_cfa_offset 4
 559              		.cfi_offset 7, -4
 560 0002 83B0     		sub	sp, sp, #12
 561              		.cfi_def_cfa_offset 16
 562 0004 00AF     		add	r7, sp, #0
 563              		.cfi_def_cfa_register 7
 564 0006 7860     		str	r0, [r7, #4]
 565 0008 0B46     		mov	r3, r1
 566 000a 7B80     		strh	r3, [r7, #2]	@ movhi
 355:../src/stm32f10x_dma.c ****   /* Check the parameters */
 356:../src/stm32f10x_dma.c ****   assert_param(IS_DMA_ALL_PERIPH(DMAy_Channelx));
 357:../src/stm32f10x_dma.c ****   
 358:../src/stm32f10x_dma.c **** /*--------------------------- DMAy Channelx CNDTR Configuration ---------------*/
 359:../src/stm32f10x_dma.c ****   /* Write to DMAy Channelx CNDTR */
 360:../src/stm32f10x_dma.c ****   DMAy_Channelx->CNDTR = DataNumber;  
 567              		.loc 1 360 0
 568 000c 7A88     		ldrh	r2, [r7, #2]
 569 000e 7B68     		ldr	r3, [r7, #4]
 570 0010 5A60     		str	r2, [r3, #4]
 361:../src/stm32f10x_dma.c **** }
 571              		.loc 1 361 0
 572 0012 0C37     		adds	r7, r7, #12
 573              		.cfi_def_cfa_offset 4
 574 0014 BD46     		mov	sp, r7
 575              		.cfi_def_cfa_register 13
 576              		@ sp needed
 577 0016 5DF8047B 		ldr	r7, [sp], #4
 578              		.cfi_restore 7
 579              		.cfi_def_cfa_offset 0
 580 001a 7047     		bx	lr
 581              		.cfi_endproc
 582              	.LFE34:
 584              		.section	.text.DMA_GetCurrDataCounter,"ax",%progbits
 585              		.align	2
 586              		.global	DMA_GetCurrDataCounter
 587              		.thumb
 588              		.thumb_func
 590              	DMA_GetCurrDataCounter:
 591              	.LFB35:
 362:../src/stm32f10x_dma.c **** 
 363:../src/stm32f10x_dma.c **** /**
 364:../src/stm32f10x_dma.c ****   * @brief  Returns the number of remaining data units in the current
 365:../src/stm32f10x_dma.c ****   *         DMAy Channelx transfer.
 366:../src/stm32f10x_dma.c ****   * @param  DMAy_Channelx: where y can be 1 or 2 to select the DMA and 
 367:../src/stm32f10x_dma.c ****   *   x can be 1 to 7 for DMA1 and 1 to 5 for DMA2 to select the DMA Channel.
 368:../src/stm32f10x_dma.c ****   * @retval The number of remaining data units in the current DMAy Channelx
 369:../src/stm32f10x_dma.c ****   *         transfer.
 370:../src/stm32f10x_dma.c ****   */
 371:../src/stm32f10x_dma.c **** uint16_t DMA_GetCurrDataCounter(DMA_Channel_TypeDef* DMAy_Channelx)
 372:../src/stm32f10x_dma.c **** {
 592              		.loc 1 372 0
 593              		.cfi_startproc
 594              		@ args = 0, pretend = 0, frame = 8
 595              		@ frame_needed = 1, uses_anonymous_args = 0
 596              		@ link register save eliminated.
 597 0000 80B4     		push	{r7}
 598              		.cfi_def_cfa_offset 4
 599              		.cfi_offset 7, -4
 600 0002 83B0     		sub	sp, sp, #12
 601              		.cfi_def_cfa_offset 16
 602 0004 00AF     		add	r7, sp, #0
 603              		.cfi_def_cfa_register 7
 604 0006 7860     		str	r0, [r7, #4]
 373:../src/stm32f10x_dma.c ****   /* Check the parameters */
 374:../src/stm32f10x_dma.c ****   assert_param(IS_DMA_ALL_PERIPH(DMAy_Channelx));
 375:../src/stm32f10x_dma.c ****   /* Return the number of remaining data units for DMAy Channelx */
 376:../src/stm32f10x_dma.c ****   return ((uint16_t)(DMAy_Channelx->CNDTR));
 605              		.loc 1 376 0
 606 0008 7B68     		ldr	r3, [r7, #4]
 607 000a 5B68     		ldr	r3, [r3, #4]
 608 000c 9BB2     		uxth	r3, r3
 377:../src/stm32f10x_dma.c **** }
 609              		.loc 1 377 0
 610 000e 1846     		mov	r0, r3
 611 0010 0C37     		adds	r7, r7, #12
 612              		.cfi_def_cfa_offset 4
 613 0012 BD46     		mov	sp, r7
 614              		.cfi_def_cfa_register 13
 615              		@ sp needed
 616 0014 5DF8047B 		ldr	r7, [sp], #4
 617              		.cfi_restore 7
 618              		.cfi_def_cfa_offset 0
 619 0018 7047     		bx	lr
 620              		.cfi_endproc
 621              	.LFE35:
 623 001a 00BF     		.section	.text.DMA_GetFlagStatus,"ax",%progbits
 624              		.align	2
 625              		.global	DMA_GetFlagStatus
 626              		.thumb
 627              		.thumb_func
 629              	DMA_GetFlagStatus:
 630              	.LFB36:
 378:../src/stm32f10x_dma.c **** 
 379:../src/stm32f10x_dma.c **** /**
 380:../src/stm32f10x_dma.c ****   * @brief  Checks whether the specified DMAy Channelx flag is set or not.
 381:../src/stm32f10x_dma.c ****   * @param  DMAy_FLAG: specifies the flag to check.
 382:../src/stm32f10x_dma.c ****   *   This parameter can be one of the following values:
 383:../src/stm32f10x_dma.c ****   *     @arg DMA1_FLAG_GL1: DMA1 Channel1 global flag.
 384:../src/stm32f10x_dma.c ****   *     @arg DMA1_FLAG_TC1: DMA1 Channel1 transfer complete flag.
 385:../src/stm32f10x_dma.c ****   *     @arg DMA1_FLAG_HT1: DMA1 Channel1 half transfer flag.
 386:../src/stm32f10x_dma.c ****   *     @arg DMA1_FLAG_TE1: DMA1 Channel1 transfer error flag.
 387:../src/stm32f10x_dma.c ****   *     @arg DMA1_FLAG_GL2: DMA1 Channel2 global flag.
 388:../src/stm32f10x_dma.c ****   *     @arg DMA1_FLAG_TC2: DMA1 Channel2 transfer complete flag.
 389:../src/stm32f10x_dma.c ****   *     @arg DMA1_FLAG_HT2: DMA1 Channel2 half transfer flag.
 390:../src/stm32f10x_dma.c ****   *     @arg DMA1_FLAG_TE2: DMA1 Channel2 transfer error flag.
 391:../src/stm32f10x_dma.c ****   *     @arg DMA1_FLAG_GL3: DMA1 Channel3 global flag.
 392:../src/stm32f10x_dma.c ****   *     @arg DMA1_FLAG_TC3: DMA1 Channel3 transfer complete flag.
 393:../src/stm32f10x_dma.c ****   *     @arg DMA1_FLAG_HT3: DMA1 Channel3 half transfer flag.
 394:../src/stm32f10x_dma.c ****   *     @arg DMA1_FLAG_TE3: DMA1 Channel3 transfer error flag.
 395:../src/stm32f10x_dma.c ****   *     @arg DMA1_FLAG_GL4: DMA1 Channel4 global flag.
 396:../src/stm32f10x_dma.c ****   *     @arg DMA1_FLAG_TC4: DMA1 Channel4 transfer complete flag.
 397:../src/stm32f10x_dma.c ****   *     @arg DMA1_FLAG_HT4: DMA1 Channel4 half transfer flag.
 398:../src/stm32f10x_dma.c ****   *     @arg DMA1_FLAG_TE4: DMA1 Channel4 transfer error flag.
 399:../src/stm32f10x_dma.c ****   *     @arg DMA1_FLAG_GL5: DMA1 Channel5 global flag.
 400:../src/stm32f10x_dma.c ****   *     @arg DMA1_FLAG_TC5: DMA1 Channel5 transfer complete flag.
 401:../src/stm32f10x_dma.c ****   *     @arg DMA1_FLAG_HT5: DMA1 Channel5 half transfer flag.
 402:../src/stm32f10x_dma.c ****   *     @arg DMA1_FLAG_TE5: DMA1 Channel5 transfer error flag.
 403:../src/stm32f10x_dma.c ****   *     @arg DMA1_FLAG_GL6: DMA1 Channel6 global flag.
 404:../src/stm32f10x_dma.c ****   *     @arg DMA1_FLAG_TC6: DMA1 Channel6 transfer complete flag.
 405:../src/stm32f10x_dma.c ****   *     @arg DMA1_FLAG_HT6: DMA1 Channel6 half transfer flag.
 406:../src/stm32f10x_dma.c ****   *     @arg DMA1_FLAG_TE6: DMA1 Channel6 transfer error flag.
 407:../src/stm32f10x_dma.c ****   *     @arg DMA1_FLAG_GL7: DMA1 Channel7 global flag.
 408:../src/stm32f10x_dma.c ****   *     @arg DMA1_FLAG_TC7: DMA1 Channel7 transfer complete flag.
 409:../src/stm32f10x_dma.c ****   *     @arg DMA1_FLAG_HT7: DMA1 Channel7 half transfer flag.
 410:../src/stm32f10x_dma.c ****   *     @arg DMA1_FLAG_TE7: DMA1 Channel7 transfer error flag.
 411:../src/stm32f10x_dma.c ****   *     @arg DMA2_FLAG_GL1: DMA2 Channel1 global flag.
 412:../src/stm32f10x_dma.c ****   *     @arg DMA2_FLAG_TC1: DMA2 Channel1 transfer complete flag.
 413:../src/stm32f10x_dma.c ****   *     @arg DMA2_FLAG_HT1: DMA2 Channel1 half transfer flag.
 414:../src/stm32f10x_dma.c ****   *     @arg DMA2_FLAG_TE1: DMA2 Channel1 transfer error flag.
 415:../src/stm32f10x_dma.c ****   *     @arg DMA2_FLAG_GL2: DMA2 Channel2 global flag.
 416:../src/stm32f10x_dma.c ****   *     @arg DMA2_FLAG_TC2: DMA2 Channel2 transfer complete flag.
 417:../src/stm32f10x_dma.c ****   *     @arg DMA2_FLAG_HT2: DMA2 Channel2 half transfer flag.
 418:../src/stm32f10x_dma.c ****   *     @arg DMA2_FLAG_TE2: DMA2 Channel2 transfer error flag.
 419:../src/stm32f10x_dma.c ****   *     @arg DMA2_FLAG_GL3: DMA2 Channel3 global flag.
 420:../src/stm32f10x_dma.c ****   *     @arg DMA2_FLAG_TC3: DMA2 Channel3 transfer complete flag.
 421:../src/stm32f10x_dma.c ****   *     @arg DMA2_FLAG_HT3: DMA2 Channel3 half transfer flag.
 422:../src/stm32f10x_dma.c ****   *     @arg DMA2_FLAG_TE3: DMA2 Channel3 transfer error flag.
 423:../src/stm32f10x_dma.c ****   *     @arg DMA2_FLAG_GL4: DMA2 Channel4 global flag.
 424:../src/stm32f10x_dma.c ****   *     @arg DMA2_FLAG_TC4: DMA2 Channel4 transfer complete flag.
 425:../src/stm32f10x_dma.c ****   *     @arg DMA2_FLAG_HT4: DMA2 Channel4 half transfer flag.
 426:../src/stm32f10x_dma.c ****   *     @arg DMA2_FLAG_TE4: DMA2 Channel4 transfer error flag.
 427:../src/stm32f10x_dma.c ****   *     @arg DMA2_FLAG_GL5: DMA2 Channel5 global flag.
 428:../src/stm32f10x_dma.c ****   *     @arg DMA2_FLAG_TC5: DMA2 Channel5 transfer complete flag.
 429:../src/stm32f10x_dma.c ****   *     @arg DMA2_FLAG_HT5: DMA2 Channel5 half transfer flag.
 430:../src/stm32f10x_dma.c ****   *     @arg DMA2_FLAG_TE5: DMA2 Channel5 transfer error flag.
 431:../src/stm32f10x_dma.c ****   * @retval The new state of DMAy_FLAG (SET or RESET).
 432:../src/stm32f10x_dma.c ****   */
 433:../src/stm32f10x_dma.c **** FlagStatus DMA_GetFlagStatus(uint32_t DMAy_FLAG)
 434:../src/stm32f10x_dma.c **** {
 631              		.loc 1 434 0
 632              		.cfi_startproc
 633              		@ args = 0, pretend = 0, frame = 16
 634              		@ frame_needed = 1, uses_anonymous_args = 0
 635              		@ link register save eliminated.
 636 0000 80B4     		push	{r7}
 637              		.cfi_def_cfa_offset 4
 638              		.cfi_offset 7, -4
 639 0002 85B0     		sub	sp, sp, #20
 640              		.cfi_def_cfa_offset 24
 641 0004 00AF     		add	r7, sp, #0
 642              		.cfi_def_cfa_register 7
 643 0006 7860     		str	r0, [r7, #4]
 435:../src/stm32f10x_dma.c ****   FlagStatus bitstatus = RESET;
 644              		.loc 1 435 0
 645 0008 0023     		movs	r3, #0
 646 000a FB73     		strb	r3, [r7, #15]
 436:../src/stm32f10x_dma.c ****   uint32_t tmpreg = 0;
 647              		.loc 1 436 0
 648 000c 0023     		movs	r3, #0
 649 000e BB60     		str	r3, [r7, #8]
 437:../src/stm32f10x_dma.c ****   
 438:../src/stm32f10x_dma.c ****   /* Check the parameters */
 439:../src/stm32f10x_dma.c ****   assert_param(IS_DMA_GET_FLAG(DMAy_FLAG));
 440:../src/stm32f10x_dma.c **** 
 441:../src/stm32f10x_dma.c ****   /* Calculate the used DMAy */
 442:../src/stm32f10x_dma.c ****   if ((DMAy_FLAG & FLAG_Mask) != (uint32_t)RESET)
 650              		.loc 1 442 0
 651 0010 7B68     		ldr	r3, [r7, #4]
 652 0012 03F08053 		and	r3, r3, #268435456
 653 0016 002B     		cmp	r3, #0
 654 0018 03D0     		beq	.L28
 443:../src/stm32f10x_dma.c ****   {
 444:../src/stm32f10x_dma.c ****     /* Get DMA2 ISR register value */
 445:../src/stm32f10x_dma.c ****     tmpreg = DMA2->ISR ;
 655              		.loc 1 445 0
 656 001a 0C4B     		ldr	r3, .L33
 657 001c 1B68     		ldr	r3, [r3]
 658 001e BB60     		str	r3, [r7, #8]
 659 0020 02E0     		b	.L29
 660              	.L28:
 446:../src/stm32f10x_dma.c ****   }
 447:../src/stm32f10x_dma.c ****   else
 448:../src/stm32f10x_dma.c ****   {
 449:../src/stm32f10x_dma.c ****     /* Get DMA1 ISR register value */
 450:../src/stm32f10x_dma.c ****     tmpreg = DMA1->ISR ;
 661              		.loc 1 450 0
 662 0022 0B4B     		ldr	r3, .L33+4
 663 0024 1B68     		ldr	r3, [r3]
 664 0026 BB60     		str	r3, [r7, #8]
 665              	.L29:
 451:../src/stm32f10x_dma.c ****   }
 452:../src/stm32f10x_dma.c **** 
 453:../src/stm32f10x_dma.c ****   /* Check the status of the specified DMAy flag */
 454:../src/stm32f10x_dma.c ****   if ((tmpreg & DMAy_FLAG) != (uint32_t)RESET)
 666              		.loc 1 454 0
 667 0028 BA68     		ldr	r2, [r7, #8]
 668 002a 7B68     		ldr	r3, [r7, #4]
 669 002c 1340     		ands	r3, r3, r2
 670 002e 002B     		cmp	r3, #0
 671 0030 02D0     		beq	.L30
 455:../src/stm32f10x_dma.c ****   {
 456:../src/stm32f10x_dma.c ****     /* DMAy_FLAG is set */
 457:../src/stm32f10x_dma.c ****     bitstatus = SET;
 672              		.loc 1 457 0
 673 0032 0123     		movs	r3, #1
 674 0034 FB73     		strb	r3, [r7, #15]
 675 0036 01E0     		b	.L31
 676              	.L30:
 458:../src/stm32f10x_dma.c ****   }
 459:../src/stm32f10x_dma.c ****   else
 460:../src/stm32f10x_dma.c ****   {
 461:../src/stm32f10x_dma.c ****     /* DMAy_FLAG is reset */
 462:../src/stm32f10x_dma.c ****     bitstatus = RESET;
 677              		.loc 1 462 0
 678 0038 0023     		movs	r3, #0
 679 003a FB73     		strb	r3, [r7, #15]
 680              	.L31:
 463:../src/stm32f10x_dma.c ****   }
 464:../src/stm32f10x_dma.c ****   
 465:../src/stm32f10x_dma.c ****   /* Return the DMAy_FLAG status */
 466:../src/stm32f10x_dma.c ****   return  bitstatus;
 681              		.loc 1 466 0
 682 003c FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 467:../src/stm32f10x_dma.c **** }
 683              		.loc 1 467 0
 684 003e 1846     		mov	r0, r3
 685 0040 1437     		adds	r7, r7, #20
 686              		.cfi_def_cfa_offset 4
 687 0042 BD46     		mov	sp, r7
 688              		.cfi_def_cfa_register 13
 689              		@ sp needed
 690 0044 5DF8047B 		ldr	r7, [sp], #4
 691              		.cfi_restore 7
 692              		.cfi_def_cfa_offset 0
 693 0048 7047     		bx	lr
 694              	.L34:
 695 004a 00BF     		.align	2
 696              	.L33:
 697 004c 00040240 		.word	1073873920
 698 0050 00000240 		.word	1073872896
 699              		.cfi_endproc
 700              	.LFE36:
 702              		.section	.text.DMA_ClearFlag,"ax",%progbits
 703              		.align	2
 704              		.global	DMA_ClearFlag
 705              		.thumb
 706              		.thumb_func
 708              	DMA_ClearFlag:
 709              	.LFB37:
 468:../src/stm32f10x_dma.c **** 
 469:../src/stm32f10x_dma.c **** /**
 470:../src/stm32f10x_dma.c ****   * @brief  Clears the DMAy Channelx's pending flags.
 471:../src/stm32f10x_dma.c ****   * @param  DMAy_FLAG: specifies the flag to clear.
 472:../src/stm32f10x_dma.c ****   *   This parameter can be any combination (for the same DMA) of the following values:
 473:../src/stm32f10x_dma.c ****   *     @arg DMA1_FLAG_GL1: DMA1 Channel1 global flag.
 474:../src/stm32f10x_dma.c ****   *     @arg DMA1_FLAG_TC1: DMA1 Channel1 transfer complete flag.
 475:../src/stm32f10x_dma.c ****   *     @arg DMA1_FLAG_HT1: DMA1 Channel1 half transfer flag.
 476:../src/stm32f10x_dma.c ****   *     @arg DMA1_FLAG_TE1: DMA1 Channel1 transfer error flag.
 477:../src/stm32f10x_dma.c ****   *     @arg DMA1_FLAG_GL2: DMA1 Channel2 global flag.
 478:../src/stm32f10x_dma.c ****   *     @arg DMA1_FLAG_TC2: DMA1 Channel2 transfer complete flag.
 479:../src/stm32f10x_dma.c ****   *     @arg DMA1_FLAG_HT2: DMA1 Channel2 half transfer flag.
 480:../src/stm32f10x_dma.c ****   *     @arg DMA1_FLAG_TE2: DMA1 Channel2 transfer error flag.
 481:../src/stm32f10x_dma.c ****   *     @arg DMA1_FLAG_GL3: DMA1 Channel3 global flag.
 482:../src/stm32f10x_dma.c ****   *     @arg DMA1_FLAG_TC3: DMA1 Channel3 transfer complete flag.
 483:../src/stm32f10x_dma.c ****   *     @arg DMA1_FLAG_HT3: DMA1 Channel3 half transfer flag.
 484:../src/stm32f10x_dma.c ****   *     @arg DMA1_FLAG_TE3: DMA1 Channel3 transfer error flag.
 485:../src/stm32f10x_dma.c ****   *     @arg DMA1_FLAG_GL4: DMA1 Channel4 global flag.
 486:../src/stm32f10x_dma.c ****   *     @arg DMA1_FLAG_TC4: DMA1 Channel4 transfer complete flag.
 487:../src/stm32f10x_dma.c ****   *     @arg DMA1_FLAG_HT4: DMA1 Channel4 half transfer flag.
 488:../src/stm32f10x_dma.c ****   *     @arg DMA1_FLAG_TE4: DMA1 Channel4 transfer error flag.
 489:../src/stm32f10x_dma.c ****   *     @arg DMA1_FLAG_GL5: DMA1 Channel5 global flag.
 490:../src/stm32f10x_dma.c ****   *     @arg DMA1_FLAG_TC5: DMA1 Channel5 transfer complete flag.
 491:../src/stm32f10x_dma.c ****   *     @arg DMA1_FLAG_HT5: DMA1 Channel5 half transfer flag.
 492:../src/stm32f10x_dma.c ****   *     @arg DMA1_FLAG_TE5: DMA1 Channel5 transfer error flag.
 493:../src/stm32f10x_dma.c ****   *     @arg DMA1_FLAG_GL6: DMA1 Channel6 global flag.
 494:../src/stm32f10x_dma.c ****   *     @arg DMA1_FLAG_TC6: DMA1 Channel6 transfer complete flag.
 495:../src/stm32f10x_dma.c ****   *     @arg DMA1_FLAG_HT6: DMA1 Channel6 half transfer flag.
 496:../src/stm32f10x_dma.c ****   *     @arg DMA1_FLAG_TE6: DMA1 Channel6 transfer error flag.
 497:../src/stm32f10x_dma.c ****   *     @arg DMA1_FLAG_GL7: DMA1 Channel7 global flag.
 498:../src/stm32f10x_dma.c ****   *     @arg DMA1_FLAG_TC7: DMA1 Channel7 transfer complete flag.
 499:../src/stm32f10x_dma.c ****   *     @arg DMA1_FLAG_HT7: DMA1 Channel7 half transfer flag.
 500:../src/stm32f10x_dma.c ****   *     @arg DMA1_FLAG_TE7: DMA1 Channel7 transfer error flag.
 501:../src/stm32f10x_dma.c ****   *     @arg DMA2_FLAG_GL1: DMA2 Channel1 global flag.
 502:../src/stm32f10x_dma.c ****   *     @arg DMA2_FLAG_TC1: DMA2 Channel1 transfer complete flag.
 503:../src/stm32f10x_dma.c ****   *     @arg DMA2_FLAG_HT1: DMA2 Channel1 half transfer flag.
 504:../src/stm32f10x_dma.c ****   *     @arg DMA2_FLAG_TE1: DMA2 Channel1 transfer error flag.
 505:../src/stm32f10x_dma.c ****   *     @arg DMA2_FLAG_GL2: DMA2 Channel2 global flag.
 506:../src/stm32f10x_dma.c ****   *     @arg DMA2_FLAG_TC2: DMA2 Channel2 transfer complete flag.
 507:../src/stm32f10x_dma.c ****   *     @arg DMA2_FLAG_HT2: DMA2 Channel2 half transfer flag.
 508:../src/stm32f10x_dma.c ****   *     @arg DMA2_FLAG_TE2: DMA2 Channel2 transfer error flag.
 509:../src/stm32f10x_dma.c ****   *     @arg DMA2_FLAG_GL3: DMA2 Channel3 global flag.
 510:../src/stm32f10x_dma.c ****   *     @arg DMA2_FLAG_TC3: DMA2 Channel3 transfer complete flag.
 511:../src/stm32f10x_dma.c ****   *     @arg DMA2_FLAG_HT3: DMA2 Channel3 half transfer flag.
 512:../src/stm32f10x_dma.c ****   *     @arg DMA2_FLAG_TE3: DMA2 Channel3 transfer error flag.
 513:../src/stm32f10x_dma.c ****   *     @arg DMA2_FLAG_GL4: DMA2 Channel4 global flag.
 514:../src/stm32f10x_dma.c ****   *     @arg DMA2_FLAG_TC4: DMA2 Channel4 transfer complete flag.
 515:../src/stm32f10x_dma.c ****   *     @arg DMA2_FLAG_HT4: DMA2 Channel4 half transfer flag.
 516:../src/stm32f10x_dma.c ****   *     @arg DMA2_FLAG_TE4: DMA2 Channel4 transfer error flag.
 517:../src/stm32f10x_dma.c ****   *     @arg DMA2_FLAG_GL5: DMA2 Channel5 global flag.
 518:../src/stm32f10x_dma.c ****   *     @arg DMA2_FLAG_TC5: DMA2 Channel5 transfer complete flag.
 519:../src/stm32f10x_dma.c ****   *     @arg DMA2_FLAG_HT5: DMA2 Channel5 half transfer flag.
 520:../src/stm32f10x_dma.c ****   *     @arg DMA2_FLAG_TE5: DMA2 Channel5 transfer error flag.
 521:../src/stm32f10x_dma.c ****   * @retval None
 522:../src/stm32f10x_dma.c ****   */
 523:../src/stm32f10x_dma.c **** void DMA_ClearFlag(uint32_t DMAy_FLAG)
 524:../src/stm32f10x_dma.c **** {
 710              		.loc 1 524 0
 711              		.cfi_startproc
 712              		@ args = 0, pretend = 0, frame = 8
 713              		@ frame_needed = 1, uses_anonymous_args = 0
 714              		@ link register save eliminated.
 715 0000 80B4     		push	{r7}
 716              		.cfi_def_cfa_offset 4
 717              		.cfi_offset 7, -4
 718 0002 83B0     		sub	sp, sp, #12
 719              		.cfi_def_cfa_offset 16
 720 0004 00AF     		add	r7, sp, #0
 721              		.cfi_def_cfa_register 7
 722 0006 7860     		str	r0, [r7, #4]
 525:../src/stm32f10x_dma.c ****   /* Check the parameters */
 526:../src/stm32f10x_dma.c ****   assert_param(IS_DMA_CLEAR_FLAG(DMAy_FLAG));
 527:../src/stm32f10x_dma.c **** 
 528:../src/stm32f10x_dma.c ****   /* Calculate the used DMAy */
 529:../src/stm32f10x_dma.c ****   if ((DMAy_FLAG & FLAG_Mask) != (uint32_t)RESET)
 723              		.loc 1 529 0
 724 0008 7B68     		ldr	r3, [r7, #4]
 725 000a 03F08053 		and	r3, r3, #268435456
 726 000e 002B     		cmp	r3, #0
 727 0010 03D0     		beq	.L36
 530:../src/stm32f10x_dma.c ****   {
 531:../src/stm32f10x_dma.c ****     /* Clear the selected DMAy flags */
 532:../src/stm32f10x_dma.c ****     DMA2->IFCR = DMAy_FLAG;
 728              		.loc 1 532 0
 729 0012 064A     		ldr	r2, .L38
 730 0014 7B68     		ldr	r3, [r7, #4]
 731 0016 5360     		str	r3, [r2, #4]
 732 0018 02E0     		b	.L35
 733              	.L36:
 533:../src/stm32f10x_dma.c ****   }
 534:../src/stm32f10x_dma.c ****   else
 535:../src/stm32f10x_dma.c ****   {
 536:../src/stm32f10x_dma.c ****     /* Clear the selected DMAy flags */
 537:../src/stm32f10x_dma.c ****     DMA1->IFCR = DMAy_FLAG;
 734              		.loc 1 537 0
 735 001a 054A     		ldr	r2, .L38+4
 736 001c 7B68     		ldr	r3, [r7, #4]
 737 001e 5360     		str	r3, [r2, #4]
 738              	.L35:
 538:../src/stm32f10x_dma.c ****   }
 539:../src/stm32f10x_dma.c **** }
 739              		.loc 1 539 0
 740 0020 0C37     		adds	r7, r7, #12
 741              		.cfi_def_cfa_offset 4
 742 0022 BD46     		mov	sp, r7
 743              		.cfi_def_cfa_register 13
 744              		@ sp needed
 745 0024 5DF8047B 		ldr	r7, [sp], #4
 746              		.cfi_restore 7
 747              		.cfi_def_cfa_offset 0
 748 0028 7047     		bx	lr
 749              	.L39:
 750 002a 00BF     		.align	2
 751              	.L38:
 752 002c 00040240 		.word	1073873920
 753 0030 00000240 		.word	1073872896
 754              		.cfi_endproc
 755              	.LFE37:
 757              		.section	.text.DMA_GetITStatus,"ax",%progbits
 758              		.align	2
 759              		.global	DMA_GetITStatus
 760              		.thumb
 761              		.thumb_func
 763              	DMA_GetITStatus:
 764              	.LFB38:
 540:../src/stm32f10x_dma.c **** 
 541:../src/stm32f10x_dma.c **** /**
 542:../src/stm32f10x_dma.c ****   * @brief  Checks whether the specified DMAy Channelx interrupt has occurred or not.
 543:../src/stm32f10x_dma.c ****   * @param  DMAy_IT: specifies the DMAy interrupt source to check. 
 544:../src/stm32f10x_dma.c ****   *   This parameter can be one of the following values:
 545:../src/stm32f10x_dma.c ****   *     @arg DMA1_IT_GL1: DMA1 Channel1 global interrupt.
 546:../src/stm32f10x_dma.c ****   *     @arg DMA1_IT_TC1: DMA1 Channel1 transfer complete interrupt.
 547:../src/stm32f10x_dma.c ****   *     @arg DMA1_IT_HT1: DMA1 Channel1 half transfer interrupt.
 548:../src/stm32f10x_dma.c ****   *     @arg DMA1_IT_TE1: DMA1 Channel1 transfer error interrupt.
 549:../src/stm32f10x_dma.c ****   *     @arg DMA1_IT_GL2: DMA1 Channel2 global interrupt.
 550:../src/stm32f10x_dma.c ****   *     @arg DMA1_IT_TC2: DMA1 Channel2 transfer complete interrupt.
 551:../src/stm32f10x_dma.c ****   *     @arg DMA1_IT_HT2: DMA1 Channel2 half transfer interrupt.
 552:../src/stm32f10x_dma.c ****   *     @arg DMA1_IT_TE2: DMA1 Channel2 transfer error interrupt.
 553:../src/stm32f10x_dma.c ****   *     @arg DMA1_IT_GL3: DMA1 Channel3 global interrupt.
 554:../src/stm32f10x_dma.c ****   *     @arg DMA1_IT_TC3: DMA1 Channel3 transfer complete interrupt.
 555:../src/stm32f10x_dma.c ****   *     @arg DMA1_IT_HT3: DMA1 Channel3 half transfer interrupt.
 556:../src/stm32f10x_dma.c ****   *     @arg DMA1_IT_TE3: DMA1 Channel3 transfer error interrupt.
 557:../src/stm32f10x_dma.c ****   *     @arg DMA1_IT_GL4: DMA1 Channel4 global interrupt.
 558:../src/stm32f10x_dma.c ****   *     @arg DMA1_IT_TC4: DMA1 Channel4 transfer complete interrupt.
 559:../src/stm32f10x_dma.c ****   *     @arg DMA1_IT_HT4: DMA1 Channel4 half transfer interrupt.
 560:../src/stm32f10x_dma.c ****   *     @arg DMA1_IT_TE4: DMA1 Channel4 transfer error interrupt.
 561:../src/stm32f10x_dma.c ****   *     @arg DMA1_IT_GL5: DMA1 Channel5 global interrupt.
 562:../src/stm32f10x_dma.c ****   *     @arg DMA1_IT_TC5: DMA1 Channel5 transfer complete interrupt.
 563:../src/stm32f10x_dma.c ****   *     @arg DMA1_IT_HT5: DMA1 Channel5 half transfer interrupt.
 564:../src/stm32f10x_dma.c ****   *     @arg DMA1_IT_TE5: DMA1 Channel5 transfer error interrupt.
 565:../src/stm32f10x_dma.c ****   *     @arg DMA1_IT_GL6: DMA1 Channel6 global interrupt.
 566:../src/stm32f10x_dma.c ****   *     @arg DMA1_IT_TC6: DMA1 Channel6 transfer complete interrupt.
 567:../src/stm32f10x_dma.c ****   *     @arg DMA1_IT_HT6: DMA1 Channel6 half transfer interrupt.
 568:../src/stm32f10x_dma.c ****   *     @arg DMA1_IT_TE6: DMA1 Channel6 transfer error interrupt.
 569:../src/stm32f10x_dma.c ****   *     @arg DMA1_IT_GL7: DMA1 Channel7 global interrupt.
 570:../src/stm32f10x_dma.c ****   *     @arg DMA1_IT_TC7: DMA1 Channel7 transfer complete interrupt.
 571:../src/stm32f10x_dma.c ****   *     @arg DMA1_IT_HT7: DMA1 Channel7 half transfer interrupt.
 572:../src/stm32f10x_dma.c ****   *     @arg DMA1_IT_TE7: DMA1 Channel7 transfer error interrupt.
 573:../src/stm32f10x_dma.c ****   *     @arg DMA2_IT_GL1: DMA2 Channel1 global interrupt.
 574:../src/stm32f10x_dma.c ****   *     @arg DMA2_IT_TC1: DMA2 Channel1 transfer complete interrupt.
 575:../src/stm32f10x_dma.c ****   *     @arg DMA2_IT_HT1: DMA2 Channel1 half transfer interrupt.
 576:../src/stm32f10x_dma.c ****   *     @arg DMA2_IT_TE1: DMA2 Channel1 transfer error interrupt.
 577:../src/stm32f10x_dma.c ****   *     @arg DMA2_IT_GL2: DMA2 Channel2 global interrupt.
 578:../src/stm32f10x_dma.c ****   *     @arg DMA2_IT_TC2: DMA2 Channel2 transfer complete interrupt.
 579:../src/stm32f10x_dma.c ****   *     @arg DMA2_IT_HT2: DMA2 Channel2 half transfer interrupt.
 580:../src/stm32f10x_dma.c ****   *     @arg DMA2_IT_TE2: DMA2 Channel2 transfer error interrupt.
 581:../src/stm32f10x_dma.c ****   *     @arg DMA2_IT_GL3: DMA2 Channel3 global interrupt.
 582:../src/stm32f10x_dma.c ****   *     @arg DMA2_IT_TC3: DMA2 Channel3 transfer complete interrupt.
 583:../src/stm32f10x_dma.c ****   *     @arg DMA2_IT_HT3: DMA2 Channel3 half transfer interrupt.
 584:../src/stm32f10x_dma.c ****   *     @arg DMA2_IT_TE3: DMA2 Channel3 transfer error interrupt.
 585:../src/stm32f10x_dma.c ****   *     @arg DMA2_IT_GL4: DMA2 Channel4 global interrupt.
 586:../src/stm32f10x_dma.c ****   *     @arg DMA2_IT_TC4: DMA2 Channel4 transfer complete interrupt.
 587:../src/stm32f10x_dma.c ****   *     @arg DMA2_IT_HT4: DMA2 Channel4 half transfer interrupt.
 588:../src/stm32f10x_dma.c ****   *     @arg DMA2_IT_TE4: DMA2 Channel4 transfer error interrupt.
 589:../src/stm32f10x_dma.c ****   *     @arg DMA2_IT_GL5: DMA2 Channel5 global interrupt.
 590:../src/stm32f10x_dma.c ****   *     @arg DMA2_IT_TC5: DMA2 Channel5 transfer complete interrupt.
 591:../src/stm32f10x_dma.c ****   *     @arg DMA2_IT_HT5: DMA2 Channel5 half transfer interrupt.
 592:../src/stm32f10x_dma.c ****   *     @arg DMA2_IT_TE5: DMA2 Channel5 transfer error interrupt.
 593:../src/stm32f10x_dma.c ****   * @retval The new state of DMAy_IT (SET or RESET).
 594:../src/stm32f10x_dma.c ****   */
 595:../src/stm32f10x_dma.c **** ITStatus DMA_GetITStatus(uint32_t DMAy_IT)
 596:../src/stm32f10x_dma.c **** {
 765              		.loc 1 596 0
 766              		.cfi_startproc
 767              		@ args = 0, pretend = 0, frame = 16
 768              		@ frame_needed = 1, uses_anonymous_args = 0
 769              		@ link register save eliminated.
 770 0000 80B4     		push	{r7}
 771              		.cfi_def_cfa_offset 4
 772              		.cfi_offset 7, -4
 773 0002 85B0     		sub	sp, sp, #20
 774              		.cfi_def_cfa_offset 24
 775 0004 00AF     		add	r7, sp, #0
 776              		.cfi_def_cfa_register 7
 777 0006 7860     		str	r0, [r7, #4]
 597:../src/stm32f10x_dma.c ****   ITStatus bitstatus = RESET;
 778              		.loc 1 597 0
 779 0008 0023     		movs	r3, #0
 780 000a FB73     		strb	r3, [r7, #15]
 598:../src/stm32f10x_dma.c ****   uint32_t tmpreg = 0;
 781              		.loc 1 598 0
 782 000c 0023     		movs	r3, #0
 783 000e BB60     		str	r3, [r7, #8]
 599:../src/stm32f10x_dma.c **** 
 600:../src/stm32f10x_dma.c ****   /* Check the parameters */
 601:../src/stm32f10x_dma.c ****   assert_param(IS_DMA_GET_IT(DMAy_IT));
 602:../src/stm32f10x_dma.c **** 
 603:../src/stm32f10x_dma.c ****   /* Calculate the used DMA */
 604:../src/stm32f10x_dma.c ****   if ((DMAy_IT & FLAG_Mask) != (uint32_t)RESET)
 784              		.loc 1 604 0
 785 0010 7B68     		ldr	r3, [r7, #4]
 786 0012 03F08053 		and	r3, r3, #268435456
 787 0016 002B     		cmp	r3, #0
 788 0018 03D0     		beq	.L41
 605:../src/stm32f10x_dma.c ****   {
 606:../src/stm32f10x_dma.c ****     /* Get DMA2 ISR register value */
 607:../src/stm32f10x_dma.c ****     tmpreg = DMA2->ISR;
 789              		.loc 1 607 0
 790 001a 0C4B     		ldr	r3, .L46
 791 001c 1B68     		ldr	r3, [r3]
 792 001e BB60     		str	r3, [r7, #8]
 793 0020 02E0     		b	.L42
 794              	.L41:
 608:../src/stm32f10x_dma.c ****   }
 609:../src/stm32f10x_dma.c ****   else
 610:../src/stm32f10x_dma.c ****   {
 611:../src/stm32f10x_dma.c ****     /* Get DMA1 ISR register value */
 612:../src/stm32f10x_dma.c ****     tmpreg = DMA1->ISR;
 795              		.loc 1 612 0
 796 0022 0B4B     		ldr	r3, .L46+4
 797 0024 1B68     		ldr	r3, [r3]
 798 0026 BB60     		str	r3, [r7, #8]
 799              	.L42:
 613:../src/stm32f10x_dma.c ****   }
 614:../src/stm32f10x_dma.c **** 
 615:../src/stm32f10x_dma.c ****   /* Check the status of the specified DMAy interrupt */
 616:../src/stm32f10x_dma.c ****   if ((tmpreg & DMAy_IT) != (uint32_t)RESET)
 800              		.loc 1 616 0
 801 0028 BA68     		ldr	r2, [r7, #8]
 802 002a 7B68     		ldr	r3, [r7, #4]
 803 002c 1340     		ands	r3, r3, r2
 804 002e 002B     		cmp	r3, #0
 805 0030 02D0     		beq	.L43
 617:../src/stm32f10x_dma.c ****   {
 618:../src/stm32f10x_dma.c ****     /* DMAy_IT is set */
 619:../src/stm32f10x_dma.c ****     bitstatus = SET;
 806              		.loc 1 619 0
 807 0032 0123     		movs	r3, #1
 808 0034 FB73     		strb	r3, [r7, #15]
 809 0036 01E0     		b	.L44
 810              	.L43:
 620:../src/stm32f10x_dma.c ****   }
 621:../src/stm32f10x_dma.c ****   else
 622:../src/stm32f10x_dma.c ****   {
 623:../src/stm32f10x_dma.c ****     /* DMAy_IT is reset */
 624:../src/stm32f10x_dma.c ****     bitstatus = RESET;
 811              		.loc 1 624 0
 812 0038 0023     		movs	r3, #0
 813 003a FB73     		strb	r3, [r7, #15]
 814              	.L44:
 625:../src/stm32f10x_dma.c ****   }
 626:../src/stm32f10x_dma.c ****   /* Return the DMA_IT status */
 627:../src/stm32f10x_dma.c ****   return  bitstatus;
 815              		.loc 1 627 0
 816 003c FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 628:../src/stm32f10x_dma.c **** }
 817              		.loc 1 628 0
 818 003e 1846     		mov	r0, r3
 819 0040 1437     		adds	r7, r7, #20
 820              		.cfi_def_cfa_offset 4
 821 0042 BD46     		mov	sp, r7
 822              		.cfi_def_cfa_register 13
 823              		@ sp needed
 824 0044 5DF8047B 		ldr	r7, [sp], #4
 825              		.cfi_restore 7
 826              		.cfi_def_cfa_offset 0
 827 0048 7047     		bx	lr
 828              	.L47:
 829 004a 00BF     		.align	2
 830              	.L46:
 831 004c 00040240 		.word	1073873920
 832 0050 00000240 		.word	1073872896
 833              		.cfi_endproc
 834              	.LFE38:
 836              		.section	.text.DMA_ClearITPendingBit,"ax",%progbits
 837              		.align	2
 838              		.global	DMA_ClearITPendingBit
 839              		.thumb
 840              		.thumb_func
 842              	DMA_ClearITPendingBit:
 843              	.LFB39:
 629:../src/stm32f10x_dma.c **** 
 630:../src/stm32f10x_dma.c **** /**
 631:../src/stm32f10x_dma.c ****   * @brief  Clears the DMAy Channelx's interrupt pending bits.
 632:../src/stm32f10x_dma.c ****   * @param  DMAy_IT: specifies the DMAy interrupt pending bit to clear.
 633:../src/stm32f10x_dma.c ****   *   This parameter can be any combination (for the same DMA) of the following values:
 634:../src/stm32f10x_dma.c ****   *     @arg DMA1_IT_GL1: DMA1 Channel1 global interrupt.
 635:../src/stm32f10x_dma.c ****   *     @arg DMA1_IT_TC1: DMA1 Channel1 transfer complete interrupt.
 636:../src/stm32f10x_dma.c ****   *     @arg DMA1_IT_HT1: DMA1 Channel1 half transfer interrupt.
 637:../src/stm32f10x_dma.c ****   *     @arg DMA1_IT_TE1: DMA1 Channel1 transfer error interrupt.
 638:../src/stm32f10x_dma.c ****   *     @arg DMA1_IT_GL2: DMA1 Channel2 global interrupt.
 639:../src/stm32f10x_dma.c ****   *     @arg DMA1_IT_TC2: DMA1 Channel2 transfer complete interrupt.
 640:../src/stm32f10x_dma.c ****   *     @arg DMA1_IT_HT2: DMA1 Channel2 half transfer interrupt.
 641:../src/stm32f10x_dma.c ****   *     @arg DMA1_IT_TE2: DMA1 Channel2 transfer error interrupt.
 642:../src/stm32f10x_dma.c ****   *     @arg DMA1_IT_GL3: DMA1 Channel3 global interrupt.
 643:../src/stm32f10x_dma.c ****   *     @arg DMA1_IT_TC3: DMA1 Channel3 transfer complete interrupt.
 644:../src/stm32f10x_dma.c ****   *     @arg DMA1_IT_HT3: DMA1 Channel3 half transfer interrupt.
 645:../src/stm32f10x_dma.c ****   *     @arg DMA1_IT_TE3: DMA1 Channel3 transfer error interrupt.
 646:../src/stm32f10x_dma.c ****   *     @arg DMA1_IT_GL4: DMA1 Channel4 global interrupt.
 647:../src/stm32f10x_dma.c ****   *     @arg DMA1_IT_TC4: DMA1 Channel4 transfer complete interrupt.
 648:../src/stm32f10x_dma.c ****   *     @arg DMA1_IT_HT4: DMA1 Channel4 half transfer interrupt.
 649:../src/stm32f10x_dma.c ****   *     @arg DMA1_IT_TE4: DMA1 Channel4 transfer error interrupt.
 650:../src/stm32f10x_dma.c ****   *     @arg DMA1_IT_GL5: DMA1 Channel5 global interrupt.
 651:../src/stm32f10x_dma.c ****   *     @arg DMA1_IT_TC5: DMA1 Channel5 transfer complete interrupt.
 652:../src/stm32f10x_dma.c ****   *     @arg DMA1_IT_HT5: DMA1 Channel5 half transfer interrupt.
 653:../src/stm32f10x_dma.c ****   *     @arg DMA1_IT_TE5: DMA1 Channel5 transfer error interrupt.
 654:../src/stm32f10x_dma.c ****   *     @arg DMA1_IT_GL6: DMA1 Channel6 global interrupt.
 655:../src/stm32f10x_dma.c ****   *     @arg DMA1_IT_TC6: DMA1 Channel6 transfer complete interrupt.
 656:../src/stm32f10x_dma.c ****   *     @arg DMA1_IT_HT6: DMA1 Channel6 half transfer interrupt.
 657:../src/stm32f10x_dma.c ****   *     @arg DMA1_IT_TE6: DMA1 Channel6 transfer error interrupt.
 658:../src/stm32f10x_dma.c ****   *     @arg DMA1_IT_GL7: DMA1 Channel7 global interrupt.
 659:../src/stm32f10x_dma.c ****   *     @arg DMA1_IT_TC7: DMA1 Channel7 transfer complete interrupt.
 660:../src/stm32f10x_dma.c ****   *     @arg DMA1_IT_HT7: DMA1 Channel7 half transfer interrupt.
 661:../src/stm32f10x_dma.c ****   *     @arg DMA1_IT_TE7: DMA1 Channel7 transfer error interrupt.
 662:../src/stm32f10x_dma.c ****   *     @arg DMA2_IT_GL1: DMA2 Channel1 global interrupt.
 663:../src/stm32f10x_dma.c ****   *     @arg DMA2_IT_TC1: DMA2 Channel1 transfer complete interrupt.
 664:../src/stm32f10x_dma.c ****   *     @arg DMA2_IT_HT1: DMA2 Channel1 half transfer interrupt.
 665:../src/stm32f10x_dma.c ****   *     @arg DMA2_IT_TE1: DMA2 Channel1 transfer error interrupt.
 666:../src/stm32f10x_dma.c ****   *     @arg DMA2_IT_GL2: DMA2 Channel2 global interrupt.
 667:../src/stm32f10x_dma.c ****   *     @arg DMA2_IT_TC2: DMA2 Channel2 transfer complete interrupt.
 668:../src/stm32f10x_dma.c ****   *     @arg DMA2_IT_HT2: DMA2 Channel2 half transfer interrupt.
 669:../src/stm32f10x_dma.c ****   *     @arg DMA2_IT_TE2: DMA2 Channel2 transfer error interrupt.
 670:../src/stm32f10x_dma.c ****   *     @arg DMA2_IT_GL3: DMA2 Channel3 global interrupt.
 671:../src/stm32f10x_dma.c ****   *     @arg DMA2_IT_TC3: DMA2 Channel3 transfer complete interrupt.
 672:../src/stm32f10x_dma.c ****   *     @arg DMA2_IT_HT3: DMA2 Channel3 half transfer interrupt.
 673:../src/stm32f10x_dma.c ****   *     @arg DMA2_IT_TE3: DMA2 Channel3 transfer error interrupt.
 674:../src/stm32f10x_dma.c ****   *     @arg DMA2_IT_GL4: DMA2 Channel4 global interrupt.
 675:../src/stm32f10x_dma.c ****   *     @arg DMA2_IT_TC4: DMA2 Channel4 transfer complete interrupt.
 676:../src/stm32f10x_dma.c ****   *     @arg DMA2_IT_HT4: DMA2 Channel4 half transfer interrupt.
 677:../src/stm32f10x_dma.c ****   *     @arg DMA2_IT_TE4: DMA2 Channel4 transfer error interrupt.
 678:../src/stm32f10x_dma.c ****   *     @arg DMA2_IT_GL5: DMA2 Channel5 global interrupt.
 679:../src/stm32f10x_dma.c ****   *     @arg DMA2_IT_TC5: DMA2 Channel5 transfer complete interrupt.
 680:../src/stm32f10x_dma.c ****   *     @arg DMA2_IT_HT5: DMA2 Channel5 half transfer interrupt.
 681:../src/stm32f10x_dma.c ****   *     @arg DMA2_IT_TE5: DMA2 Channel5 transfer error interrupt.
 682:../src/stm32f10x_dma.c ****   * @retval None
 683:../src/stm32f10x_dma.c ****   */
 684:../src/stm32f10x_dma.c **** void DMA_ClearITPendingBit(uint32_t DMAy_IT)
 685:../src/stm32f10x_dma.c **** {
 844              		.loc 1 685 0
 845              		.cfi_startproc
 846              		@ args = 0, pretend = 0, frame = 8
 847              		@ frame_needed = 1, uses_anonymous_args = 0
 848              		@ link register save eliminated.
 849 0000 80B4     		push	{r7}
 850              		.cfi_def_cfa_offset 4
 851              		.cfi_offset 7, -4
 852 0002 83B0     		sub	sp, sp, #12
 853              		.cfi_def_cfa_offset 16
 854 0004 00AF     		add	r7, sp, #0
 855              		.cfi_def_cfa_register 7
 856 0006 7860     		str	r0, [r7, #4]
 686:../src/stm32f10x_dma.c ****   /* Check the parameters */
 687:../src/stm32f10x_dma.c ****   assert_param(IS_DMA_CLEAR_IT(DMAy_IT));
 688:../src/stm32f10x_dma.c **** 
 689:../src/stm32f10x_dma.c ****   /* Calculate the used DMAy */
 690:../src/stm32f10x_dma.c ****   if ((DMAy_IT & FLAG_Mask) != (uint32_t)RESET)
 857              		.loc 1 690 0
 858 0008 7B68     		ldr	r3, [r7, #4]
 859 000a 03F08053 		and	r3, r3, #268435456
 860 000e 002B     		cmp	r3, #0
 861 0010 03D0     		beq	.L49
 691:../src/stm32f10x_dma.c ****   {
 692:../src/stm32f10x_dma.c ****     /* Clear the selected DMAy interrupt pending bits */
 693:../src/stm32f10x_dma.c ****     DMA2->IFCR = DMAy_IT;
 862              		.loc 1 693 0
 863 0012 064A     		ldr	r2, .L51
 864 0014 7B68     		ldr	r3, [r7, #4]
 865 0016 5360     		str	r3, [r2, #4]
 866 0018 02E0     		b	.L48
 867              	.L49:
 694:../src/stm32f10x_dma.c ****   }
 695:../src/stm32f10x_dma.c ****   else
 696:../src/stm32f10x_dma.c ****   {
 697:../src/stm32f10x_dma.c ****     /* Clear the selected DMAy interrupt pending bits */
 698:../src/stm32f10x_dma.c ****     DMA1->IFCR = DMAy_IT;
 868              		.loc 1 698 0
 869 001a 054A     		ldr	r2, .L51+4
 870 001c 7B68     		ldr	r3, [r7, #4]
 871 001e 5360     		str	r3, [r2, #4]
 872              	.L48:
 699:../src/stm32f10x_dma.c ****   }
 700:../src/stm32f10x_dma.c **** }
 873              		.loc 1 700 0
 874 0020 0C37     		adds	r7, r7, #12
 875              		.cfi_def_cfa_offset 4
 876 0022 BD46     		mov	sp, r7
 877              		.cfi_def_cfa_register 13
 878              		@ sp needed
 879 0024 5DF8047B 		ldr	r7, [sp], #4
 880              		.cfi_restore 7
 881              		.cfi_def_cfa_offset 0
 882 0028 7047     		bx	lr
 883              	.L52:
 884 002a 00BF     		.align	2
 885              	.L51:
 886 002c 00040240 		.word	1073873920
 887 0030 00000240 		.word	1073872896
 888              		.cfi_endproc
 889              	.LFE39:
 891              		.text
 892              	.Letext0:
 893              		.file 2 "f:\\eclipse\\gcc\\arm-none-eabi\\include\\machine\\_default_types.h"
 894              		.file 3 "f:\\eclipse\\gcc\\arm-none-eabi\\include\\sys\\_stdint.h"
 895              		.file 4 "F:\\ARM\\STM32 Eclipse Firmware\\STM32F107_Template\\cmsis/stm32f10x.h"
 896              		.file 5 "F:\\ARM\\STM32 Eclipse Firmware\\STM32F107_Template\\inc/stm32f10x_dma.h"
 897              		.file 6 "F:\\ARM\\STM32 Eclipse Firmware\\STM32F107_Template\\cmsis/core_cm3.h"
DEFINED SYMBOLS
                            *ABS*:00000000 stm32f10x_dma.c
C:\Users\MISAKA~1.MIS\AppData\Local\Temp\ccs1qgZV.s:19     .text.DMA_DeInit:00000000 $t
C:\Users\MISAKA~1.MIS\AppData\Local\Temp\ccs1qgZV.s:24     .text.DMA_DeInit:00000000 DMA_DeInit
C:\Users\MISAKA~1.MIS\AppData\Local\Temp\ccs1qgZV.s:231    .text.DMA_DeInit:00000140 $d
C:\Users\MISAKA~1.MIS\AppData\Local\Temp\ccs1qgZV.s:249    .text.DMA_Init:00000000 $t
C:\Users\MISAKA~1.MIS\AppData\Local\Temp\ccs1qgZV.s:254    .text.DMA_Init:00000000 DMA_Init
C:\Users\MISAKA~1.MIS\AppData\Local\Temp\ccs1qgZV.s:352    .text.DMA_StructInit:00000000 $t
C:\Users\MISAKA~1.MIS\AppData\Local\Temp\ccs1qgZV.s:357    .text.DMA_StructInit:00000000 DMA_StructInit
C:\Users\MISAKA~1.MIS\AppData\Local\Temp\ccs1qgZV.s:430    .text.DMA_Cmd:00000000 $t
C:\Users\MISAKA~1.MIS\AppData\Local\Temp\ccs1qgZV.s:435    .text.DMA_Cmd:00000000 DMA_Cmd
C:\Users\MISAKA~1.MIS\AppData\Local\Temp\ccs1qgZV.s:486    .text.DMA_ITConfig:00000000 $t
C:\Users\MISAKA~1.MIS\AppData\Local\Temp\ccs1qgZV.s:491    .text.DMA_ITConfig:00000000 DMA_ITConfig
C:\Users\MISAKA~1.MIS\AppData\Local\Temp\ccs1qgZV.s:545    .text.DMA_SetCurrDataCounter:00000000 $t
C:\Users\MISAKA~1.MIS\AppData\Local\Temp\ccs1qgZV.s:550    .text.DMA_SetCurrDataCounter:00000000 DMA_SetCurrDataCounter
C:\Users\MISAKA~1.MIS\AppData\Local\Temp\ccs1qgZV.s:585    .text.DMA_GetCurrDataCounter:00000000 $t
C:\Users\MISAKA~1.MIS\AppData\Local\Temp\ccs1qgZV.s:590    .text.DMA_GetCurrDataCounter:00000000 DMA_GetCurrDataCounter
C:\Users\MISAKA~1.MIS\AppData\Local\Temp\ccs1qgZV.s:624    .text.DMA_GetFlagStatus:00000000 $t
C:\Users\MISAKA~1.MIS\AppData\Local\Temp\ccs1qgZV.s:629    .text.DMA_GetFlagStatus:00000000 DMA_GetFlagStatus
C:\Users\MISAKA~1.MIS\AppData\Local\Temp\ccs1qgZV.s:697    .text.DMA_GetFlagStatus:0000004c $d
C:\Users\MISAKA~1.MIS\AppData\Local\Temp\ccs1qgZV.s:703    .text.DMA_ClearFlag:00000000 $t
C:\Users\MISAKA~1.MIS\AppData\Local\Temp\ccs1qgZV.s:708    .text.DMA_ClearFlag:00000000 DMA_ClearFlag
C:\Users\MISAKA~1.MIS\AppData\Local\Temp\ccs1qgZV.s:752    .text.DMA_ClearFlag:0000002c $d
C:\Users\MISAKA~1.MIS\AppData\Local\Temp\ccs1qgZV.s:758    .text.DMA_GetITStatus:00000000 $t
C:\Users\MISAKA~1.MIS\AppData\Local\Temp\ccs1qgZV.s:763    .text.DMA_GetITStatus:00000000 DMA_GetITStatus
C:\Users\MISAKA~1.MIS\AppData\Local\Temp\ccs1qgZV.s:831    .text.DMA_GetITStatus:0000004c $d
C:\Users\MISAKA~1.MIS\AppData\Local\Temp\ccs1qgZV.s:837    .text.DMA_ClearITPendingBit:00000000 $t
C:\Users\MISAKA~1.MIS\AppData\Local\Temp\ccs1qgZV.s:842    .text.DMA_ClearITPendingBit:00000000 DMA_ClearITPendingBit
C:\Users\MISAKA~1.MIS\AppData\Local\Temp\ccs1qgZV.s:886    .text.DMA_ClearITPendingBit:0000002c $d
                     .debug_frame:00000010 $d
                           .group:00000000 wm4.0.2d80f1b5ce3c69d13e258577ddf29668
                           .group:00000000 wm4.stm32f10x.h.51.6e18fa0f6016a7ea66d7cfe7c3be3cd1
                           .group:00000000 wm4.core_cm3.h.25.d35e9a9b04ec4aaebae9bf79fff061f9
                           .group:00000000 wm4.features.h.22.2e382148a0560adabf236cddd4e880f4
                           .group:00000000 wm4._default_types.h.15.933e8edd27a65e0b69af4a865eb623d2
                           .group:00000000 wm4._intsup.h.10.35a45952db64d30146faa63a55c20c1c
                           .group:00000000 wm4._stdint.h.10.f76354baea1c7088202064e6f3d4f5e3
                           .group:00000000 wm4.stdint.h.23.373a9d32a9e4c2e88fd347156532d281
                           .group:00000000 wm4.core_cm3.h.113.b286929a54d33b4c8909a7132437b244
                           .group:00000000 wm4.stm32f10x.h.522.34c9721dbd76a587b38991fd58e2fdab
                           .group:00000000 wm4.stm32f10x_bkp.h.25.4622919f1e30efdad5eb44e12edd5513
                           .group:00000000 wm4.stm32f10x_flash.h.25.4be61fcb02863962a1e006449d310650
                           .group:00000000 wm4.stm32f10x_gpio.h.25.80c981af0e637567395034c576cfb3ce
                           .group:00000000 wm4.stm32f10x_pwr.h.25.37ef75009f751ef5fe27910e0bf00a62
                           .group:00000000 wm4.stm32f10x_rcc.h.25.cb32a32bef653f9e9414120b411eb1bf
                           .group:00000000 wm4.stm32f10x_tim.h.25.21c6ec062f1e74898cb96a57da276fec
                           .group:00000000 wm4.misc.h.25.068e106f368fa5369a681ef57c106f4b
                           .group:00000000 wm4.stm32f10x.h.8304.f7d8ad90959e99679b3257267c3aadfe
                           .group:00000000 wm4.stm32f10x_dma.h.95.3ba03f0eac1ed728f3bbe553623f105a

NO UNDEFINED SYMBOLS
